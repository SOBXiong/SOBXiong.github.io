<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>刷题记录</title>
      <link href="/2020/12/11/BasicSkill/Algorithm/ProblemRecord/"/>
      <url>/2020/12/11/BasicSkill/Algorithm/ProblemRecord/</url>
      
        <content type="html"><![CDATA[<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><ul><li><a href="#218天际线问题">218天际线问题</a></li><li><a href="#514自由之路">514自由之路</a></li></ul><a id="more"></a><h2 id="218天际线问题"><a href="#218天际线问题" class="headerlink" title="218天际线问题"></a>218天际线问题</h2><ul><li><p>问题描述：<br><img src="Question218.png" alt="218天际线问题"></p></li><li><p>解法1：分治法(归并的思想)<br>每次将问题划分成更小的子问题，当问题分解到单个建筑时进行解决。如果单个建筑的输入信息为[x1, x2, h]，那么返回[[x1, h], [x2, 0]]。分解完后，进入归并Merge阶段。归并的关键是从轮廓看去只能看到不同的高度，归并模拟过程如下：</p><blockquote><p>假如有以下划分好的结果：<br>skyline1 = {(1, 11),  (3, 13),  (9, 0),  (12, 7),  (16, 0)}<br>skyline2 = {(14, 3),  (19, 18), (22, 3), (23, 13),  (29, 0)}<br>假设i、j分别表示skyline1、skyline2的当前遍历下标，h1、h2分别代表skyline1、skyline2当前的高度<br>首先比较(1, 11)和(14, 3)，由于1 &lt; 14，选取(1, 11)，h1置为当前大小11，hmax = max(h1, h2) = 11，ans结果集加入(1, 11)，i++<br>之后比较(3, 13)和(14, 3)，h1置为当前大小13，hmax = max(h1, h2) = 13，同理ans结果集加入(3, 13)，i++<br>…<br>直到(16, 0)，此时比较(16, 0)和(14, 3)，14 &lt; 3，选取(14, 3)，h2 = 3。而此时h1 = 7，h2 = 3，hmax = max(h1, h2) = 7，因此结果集加入(14, 7)，由于之前的结果集存在(12, 7)，所以(14, 7)不应该加入结果集，j++<br>比较(16, 0)和(19, 18)，此时16 &lt; 19，选取(16, 0)，h1 = 0。此时h1 = 0，h2 = 3，hmax = max(h1, h2) = 3。因此ans结果集加入(16, 3)，至此skyline1全部遍历完，只需将skyline2的剩余部分加入结果集</p></blockquote><p>代码实现如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">divideAndConquer</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;buildings, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">  <span class="comment">// 如果left、right一致,相当于只处理单个建筑</span></span><br><span class="line">  <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">    ans.push_back(&#123;buildings[left][<span class="number">0</span>], buildings[left][<span class="number">2</span>]&#125;);</span><br><span class="line">    ans.push_back(&#123;buildings[left][<span class="number">1</span>], <span class="number">0</span>&#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 找到中间下标</span></span><br><span class="line">    <span class="keyword">int</span> mid = (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 递归分治</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; leftAns = divideAndConquer(buildings, left, mid),</span><br><span class="line">        rightAns = divideAndConquer(buildings, mid + <span class="number">1</span>, right);</span><br><span class="line">    <span class="comment">// 定义下标和各自的高度变量</span></span><br><span class="line">    <span class="comment">// 每次都需要更新高度信息</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, h1 = <span class="number">0</span>, h2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; leftAns.<span class="built_in">size</span>() &amp;&amp; j &lt; rightAns.<span class="built_in">size</span>()) &#123;</span><br><span class="line">      <span class="comment">// 记录结果</span></span><br><span class="line">      <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">cur</span><span class="params">(<span class="number">2</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">      <span class="comment">// 如果起始相同,做了简化</span></span><br><span class="line">      <span class="keyword">if</span> (leftAns[i][<span class="number">0</span>] == rightAns[j][<span class="number">0</span>]) &#123;</span><br><span class="line">        h1 = leftAns[i][<span class="number">1</span>], h2 = rightAns[j][<span class="number">1</span>];</span><br><span class="line">        cur[<span class="number">0</span>] = leftAns[i][<span class="number">0</span>], cur[<span class="number">1</span>] = <span class="built_in">max</span>(h1, h2);</span><br><span class="line">        i++, j++;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (leftAns[i][<span class="number">0</span>] &lt; rightAns[j][<span class="number">0</span>]) &#123;</span><br><span class="line">        <span class="comment">// 起始不同,取起始小的作为当前结果开头,取当前的最大高度为当前结果高度</span></span><br><span class="line">        h1 = leftAns[i][<span class="number">1</span>];</span><br><span class="line">        cur[<span class="number">0</span>] = leftAns[i][<span class="number">0</span>], cur[<span class="number">1</span>] = <span class="built_in">max</span>(h1, h2);</span><br><span class="line">        i++;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 起始不同,取起始小的作为当前结果开头,取当前的最大高度为当前结果高度</span></span><br><span class="line">        h2 = rightAns[j][<span class="number">1</span>];</span><br><span class="line">        cur[<span class="number">0</span>] = rightAns[j][<span class="number">0</span>], cur[<span class="number">1</span>] = <span class="built_in">max</span>(h1, h2);</span><br><span class="line">        j++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 如果当前结果集为空或当前结果与上次高度不同,加入结果集</span></span><br><span class="line">      <span class="keyword">if</span> (ans.empty() || ans.back()[<span class="number">1</span>] != cur[<span class="number">1</span>]) &#123;</span><br><span class="line">        ans.push_back(cur);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 依次加入剩余的结果</span></span><br><span class="line">    <span class="keyword">if</span> (i &lt; leftAns.<span class="built_in">size</span>()) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &lt; leftAns.<span class="built_in">size</span>(); ++k) ans.push_back(leftAns[k]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j &lt; rightAns.<span class="built_in">size</span>()) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> k = j; k &lt; rightAns.<span class="built_in">size</span>(); ++k) ans.push_back(rightAns[k]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">getSkyline</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;buildings)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> <span class="built_in">size</span> = buildings.<span class="built_in">size</span>();</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">size</span> == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">    ans.push_back(&#123;buildings[<span class="number">0</span>][<span class="number">0</span>], buildings[<span class="number">0</span>][<span class="number">2</span>]&#125;);</span><br><span class="line">    ans.push_back(&#123;buildings[<span class="number">0</span>][<span class="number">1</span>], <span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> divideAndConquer(buildings, <span class="number">0</span>, <span class="built_in">size</span> - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="514自由之路"><a href="#514自由之路" class="headerlink" title="514自由之路"></a>514自由之路</h2><ul><li><p>题目描述：<br><img src="Question514.png" alt="514自由之路"></p></li><li><p>前提：</p><ol><li>每次转到指定位置后还需要按一次按钮，那么结果还需要加上key的长度</li><li>转动到指定位置有两种方向，单考虑转到指定位置的话(不考虑再按一次的触发)；假设curRingIndex表示当前转动前的位置下标，curKeyIndex表示转动到的指定位置的下标：<br> <img src="Question514_p1.png" alt="转动示意图"><ol><li><code>l1 = abs(curRingIndex - curKeyIndex)</code></li><li><code>l2 = ring.length() - l1</code></li></ol></li><li>每次转动后curKeyIndex变为下一次curRingIndex，即从新指定位置开始转动</li><li>截止条件是<code>curKeyIndex = key.length()</code>，即当前所有key的字符都被转到12点方向过</li></ol></li><li><p>解法1：动态规划方式<br>记录每次从当前位置转动到顺序读取到的key字符的位置所花费的转动次数，最终返回到达最后key字符的转动次数的最小值<br><img src="Question514_p2.png" alt="示例的手工动态规划示意图"></p><p>动态转移方程如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认dp中元素为INT_MAX</span></span><br><span class="line"><span class="comment">// 得到第一步的转动次数</span></span><br><span class="line">dp[<span class="number">0</span>][i] = (ring[i] == key[<span class="number">0</span>]) ? <span class="built_in">min</span>(i, m - i);</span><br><span class="line"><span class="comment">// 如果dp[i - 1][k]不为INT_MAX,即上一步(第i步)能转动到ring的第k个字符,且为到第k个字符的最小值</span></span><br><span class="line"><span class="comment">// 当前为第i+1步,将要走到第j个字符</span></span><br><span class="line"><span class="comment">// 最小距离为已知的最小值与当前走法的较小值</span></span><br><span class="line">dp[i][j] = <span class="built_in">min</span>(dp[i][j], dp[i - <span class="number">1</span>][k] + <span class="built_in">min</span>(<span class="built_in">abs</span>(j - k), m - <span class="built_in">abs</span>(j - k)));</span><br></pre></td></tr></table></figure><p>最终代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findRotateSteps</span><span class="params">(<span class="built_in">string</span> ring, <span class="built_in">string</span> key)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> m = ring.<span class="built_in">size</span>(), n = key.<span class="built_in">size</span>();</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pos[<span class="number">26</span>];</span><br><span class="line">  <span class="comment">// 记录字符下标</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">    pos[ring[i] - <span class="string">'a'</span>].push_back(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">dp</span><span class="params">(n, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(m, INT_MAX))</span></span>;</span><br><span class="line">  <span class="comment">// 遍历首字符匹配的下标集合</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">int</span> &amp;index : pos[key[<span class="number">0</span>] - <span class="string">'a'</span>]) &#123;</span><br><span class="line">    <span class="comment">// 走第一步</span></span><br><span class="line">    dp[<span class="number">0</span>][index] = <span class="built_in">min</span>(index, m - index);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="comment">// 遍历下一步字符的下标集合</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">int</span> &amp;index : pos[key[i] - <span class="string">'a'</span>]) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">        <span class="comment">// 如果第i步不可达j,跳过</span></span><br><span class="line">        <span class="keyword">if</span> (dp[i - <span class="number">1</span>][j] == INT_MAX) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="comment">// 当前走第i+1步的最小步数</span></span><br><span class="line">        <span class="keyword">int</span> steps = <span class="built_in">min</span>(<span class="built_in">abs</span>(index - j), m - <span class="built_in">abs</span>(index - j));</span><br><span class="line">        <span class="comment">// 记录走i+1步的最小步数</span></span><br><span class="line">        dp[i][index] = <span class="built_in">min</span>(dp[i - <span class="number">1</span>][j] + steps, dp[i][index]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 每次移动到指定位置还需要转动一次触发,因此要+n</span></span><br><span class="line">  <span class="keyword">return</span> *min_element(dp[n - <span class="number">1</span>].<span class="built_in">begin</span>(), dp[n - <span class="number">1</span>].<span class="built_in">end</span>()) + n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>解法2：动态规划方式，使用滚动数组的方式，节省空间</p><blockquote><p>根据方式一，发现第i+1步只与第i步的位置有关，因此只需保留两个数组用于保存上一步的最小步数和当前步的最小步数即可</p></blockquote><p>最终代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findRotateSteps</span><span class="params">(<span class="built_in">string</span> ring, <span class="built_in">string</span> key)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> m = ring.<span class="built_in">size</span>(), n = key.<span class="built_in">size</span>();</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pos[<span class="number">26</span>];</span><br><span class="line">  <span class="comment">// 记录字符下标</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">    pos[ring[i] - <span class="string">'a'</span>].push_back(i);</span><br><span class="line">  &#125;</span><br><span class="line">  vector&lt;int&gt; last(m), current(m, INT_MAX);</span><br><span class="line">  <span class="comment">// 遍历首字符匹配的下标集合</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">int</span> &amp;index : pos[key[<span class="number">0</span>] - <span class="string">'a'</span>]) &#123;</span><br><span class="line">    <span class="comment">// 走第一步</span></span><br><span class="line">    current[index] = <span class="built_in">min</span>(index, m - index);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    last = current;</span><br><span class="line">    <span class="built_in">fill</span>(current.<span class="built_in">begin</span>(), current.<span class="built_in">end</span>(), INT_MAX);</span><br><span class="line">    <span class="comment">// 遍历下一步字符的下标集合</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">int</span> &amp;index : pos[key[i] - <span class="string">'a'</span>]) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">        <span class="comment">// 如果第i步不可达j,跳过</span></span><br><span class="line">        <span class="keyword">if</span> (last[j] == INT_MAX) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="comment">// 当前走第i+1步的最小步数</span></span><br><span class="line">        <span class="keyword">int</span> steps = <span class="built_in">min</span>(<span class="built_in">abs</span>(index - j), m - <span class="built_in">abs</span>(index - j));</span><br><span class="line">        <span class="comment">// 记录走i+1步的最小步数</span></span><br><span class="line">        current[index] = <span class="built_in">min</span>(last[j] + steps, current[index]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 每次移动到指定位置还需要转动一次触发,因此要+n</span></span><br><span class="line">  <span class="keyword">return</span> *min_element(current.<span class="built_in">begin</span>(), current.<span class="built_in">end</span>()) + n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>解法3：dfs + 记忆化方式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findRotateSteps</span><span class="params">(<span class="built_in">string</span> ring, <span class="built_in">string</span> key)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> m = ring.<span class="built_in">size</span>(), n = key.<span class="built_in">size</span>();</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pos[<span class="number">26</span>];</span><br><span class="line">  <span class="comment">// 记录字符下标</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">    pos[ring[i] - <span class="string">'a'</span>].push_back(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 记录从ring的第i个字符转动到key的第j个字符的最小转动次数</span></span><br><span class="line">  <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">memo</span><span class="params">(m, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n, <span class="number">-1</span>))</span></span>;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  curRingIndex：当前处于ring转盘的第几个字符</span></span><br><span class="line"><span class="comment">  curKeyIndex：当前需匹配的key的第几个字符</span></span><br><span class="line"><span class="comment">  memo：记录表</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="built_in">std</span>::function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;)&gt; dfs = [&amp;, m, pos, key](<span class="keyword">int</span> curRingIndex, <span class="keyword">int</span> curKeyIndex, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;memo) -&gt; <span class="keyword">int</span> &#123;</span><br><span class="line">    <span class="comment">// 递归出口</span></span><br><span class="line">    <span class="keyword">if</span> (curKeyIndex == key.<span class="built_in">size</span>()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果已记录过,直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (memo[curRingIndex][curKeyIndex] != <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> memo[curRingIndex][curKeyIndex];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 记录此次转动的最小次数</span></span><br><span class="line">    <span class="keyword">int</span> res = INT_MAX;</span><br><span class="line">    <span class="comment">// 遍历ring中当前key对应字符的位置</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">int</span> &amp;index : pos[key[curKeyIndex] - <span class="string">'a'</span>]) &#123;</span><br><span class="line">      <span class="keyword">int</span> d1 = <span class="built_in">abs</span>(curRingIndex - index);</span><br><span class="line">      <span class="keyword">int</span> d2 = m - d1;</span><br><span class="line">      <span class="comment">// 此次转动的最小次数</span></span><br><span class="line">      <span class="comment">// 当前转动成功后,curRingIndex自动变为index,curKeyIndex移动到下一个</span></span><br><span class="line">      res = <span class="built_in">min</span>(res, <span class="built_in">min</span>(d1, d2) + dfs(index, curKeyIndex + <span class="number">1</span>, memo));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 更新记录表</span></span><br><span class="line">    memo[curRingIndex][curKeyIndex] = res;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 每次移动到指定位置还需要转动一次触发,因此要+n</span></span><br><span class="line">  <span class="keyword">return</span> n + dfs(<span class="number">0</span>, <span class="number">0</span>, memo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BasicSkill </tag>
            
            <tag> LeetCode题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL基础</title>
      <link href="/2020/12/08/Middleware/MySQL/MySQL%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/12/08/Middleware/MySQL/MySQL%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><ul><li><a href="#SQL语句">SQL语句</a></li><li><a href="#表约束和范式">表约束和范式</a></li><li><a href="#多表查询和子查询">多表查询和子查询</a></li><li><a href="">事务</a></li><li><a href="#其他">其他</a></li></ul><a id="more"></a><h2 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h2><ul><li><p>SQL概述</p><ul><li>什么是SQL：SQL(Structured Query Language)是”结构化查询语言”，它是对关系型数据库的操作语言，可以应用到所有关系型数据库中。很多数据库还都有标准以外的一些语法，称之为”方言”。例如MySQL中的LIMIT语句就是MySQL独有的方言，其它数据库都不支持</li><li>SQL语法要求：<ol><li>SQL语句可单行或多行书写，以分号结尾</li><li>可用空格和缩进来增强语句的可读性</li><li>关键字不区别大小写，建议使用大写</li></ol></li><li>SQL分类：<ol><li>DDL(Data Definition Language)：数据定义语言，用来定义数据库对象：库、表、列等</li><li>DML(Data Manipulation Language)：数据操作语言，用来定义数据库记录(数据)</li><li>DCL(Data Control Language)：数据控制语言，用来定义访问权限和安全级别</li><li>DQL(Data Query Language)：数据查询语言，用来查询记录(数据)</li></ol></li></ul></li><li><p>DDL介绍：</p><ul><li>操作数据库：<ul><li>创建数据库：<ol><li>基础创建：<code>CREATE DATABSE dbName</code></li><li>不存在则创建：<code>CREATE DATABASE IF NOT EXISTS dbName</code></li><li>指定字符集：<code>CREATE DATABSE dbName CHARACTER SET charsetName</code></li></ol></li><li>查看数据库：<ol><li>查看所有数据库：<code>SHOW DATABASES</code></li><li>查看某个数据库的定义信息：<code>SHOW CREATE DATABASE dbName</code></li></ol></li><li>修改数据库(默认)字符集：<code>ALTER DATABASE dbName (DEFAULT) CHARACTER SET charsetName</code></li><li>删除数据库：<code>DROP DATABSE dbName</code></li><li>使用数据库：<ol><li>查看正在使用的数据库：<code>SELECT DATABASE()</code></li><li>使用/切换数据库：<code>USE dbName</code></li></ol></li></ul></li><li>操作表结构：<ul><li>创建表：<code>CREATE TABLE tableName(field1 fieldType1, field2 fieldType2)</code></li><li>查看某个数据库的所有表：<code>SHOW TABLES</code><ul><li>查看表结构：<code>DESC tableName</code></li><li>查看建表语句：<code>SHOW CREATE TABLE tableName</code></li></ul></li><li>快速创建表结构相同的表：<code>CREATE TABLE newTableName LIKE oldTableName</code></li><li>删除表<ol><li>直接删除：<code>DROP TABLE tableName</code></li><li>存在则删除：<code>DROP TABLE IF EXISTS tableName</code></li></ol></li><li>修改表结构：<ol><li>添加列：<code>ALTER TABLE tableName ADD fieldName fieldType</code></li><li>修改列：<code>ALTER TABLE tableName MODIFY fieldName fieldType</code></li><li>修改列名：<code>ALTER TABLE tableName CHANGE oldFieldName newFieldName fieldType</code></li><li>删除列：<code>ALTER TABLE tableName DROP fieldName</code></li><li>修改表名：<code>RENAME TABLE oldTableName TO newTableName</code></li><li>修改表字符集：<code>ALTER TABLE tableName CHARACTER SET charsetName</code></li></ol></li></ul></li></ul></li><li><p>DML介绍：</p><ul><li><p>插入记录：</p><ol><li>插入全部字段：<code>INSERT INTO tableName VALUES(v1, v2, v3, ...)</code></li><li>插入部分字段：<code>INSERT INTO tableName(field1, field2, ...) VALUES(v1, v2, ...)</code></li></ol><blockquote><ol><li>插入的数据应与字段的数据类型相同，且在范围内</li><li>在VALUES中列出的数据位置必须与被加入的列的排列位置相对应</li><li>字符和日期型数据应包含在单引号中。MySQL中也可以使用双引号做为分隔符</li><li>不指定列或使用NULL，表示插入空值</li></ol></blockquote></li><li><p>蠕虫复制：将一张已存在表中数据复制到另一张表中</p><ol><li>复制所有列：<code>INSERT INTO tableName1 SELECT * FROM tableName2</code></li><li>复制部分列：<code>INSERT INTO tableName1(field1, field2, ...) SELECT field1, field2, ... FROM tableName2</code></li></ol></li><li><p>更新记录：</p><ol><li>不带条件修改(修改所有行)：<code>UPDATE tableName SET field1=v1, field2=v2, ...</code></li><li>带条件修改：<code>UPDATE tableName SET field1=v1,field2=v2, ... WHERE ...</code></li></ol></li><li><p>删除记录：</p><ol><li>不带条件删除(删除所有行)：<code>DELETE FROM tableName</code></li><li>带条件删除：<code>DELETE FROM tableName WHERE ...</code></li><li>使用truncate删除：<code>TRUNCATE TABLE tableName</code></li></ol><blockquote><p>truncate相当于删除表的结构，再创建一张表；而delete仅删除数据</p></blockquote></li></ul></li><li><p>DCL介绍：</p><ul><li>创建用户：<ul><li>语法：<code>CREATE USER &#39;username&#39; @&#39;hostname&#39;  IDENTIFIED BY &#39;password&#39;</code><blockquote><p>单引号’’不可少</p></blockquote></li><li>说明：<ol><li>username：将创建的用户名</li><li>hostname：指定该用户在哪个主机上可以登陆，如果是本地用户可用localhost；如果想让该用户可以从任意远程主机登陆，可以使用通配符%</li><li>password：该用户的登陆密码，可以为空，如果为空则该用户可以不需要密码登陆服务器</li></ol></li></ul></li><li>授予用户权限<ul><li>语法：<code>GRANT authority1, authority2, ... ON database.tableName TO &#39;username&#39;@&#39;hostname&#39;</code><blockquote><p>单引号’’不可少</p></blockquote></li><li>说明：<ol><li>GRANT … ON … TO：授权关键字</li><li>authority：授予用户的权限，如CREATE、ALTER、SELECT、INSERT和UPDATE等。如果要授予所有的权限可使用ALL</li><li>database.tableName：该用户可以操作哪个数据库的哪些表。如果要授予该用户对所有数据库和表的相应操作权限则可用*表示，如*.*</li><li>‘username’@’hostname’：给哪个用户授权</li></ol></li></ul></li><li>撤销用户权限：<code>REVOKE authority1, authority2, ... ON database.tableName FROM &#39;username&#39;@&#39;hostname&#39;</code><blockquote><p>说明参见授予权限</p></blockquote></li><li>查看权限：<code>SHOW GRANTS FOR &#39;username&#39;@&#39;hostname&#39;</code><blockquote><p>usage是指连接(登陆)权限，建立一个用户就会自动授予其usage权限(默认授予)</p></blockquote></li><li>删除用户：<code>DROP USER &#39;username&#39;@&#39;hostname&#39;</code></li><li>修改管理员密码：<code>mysqldadmin -u root -p password newPassword</code><blockquote><p>需要在未登陆MySQL的情况下操作，新密码不需要加上引号；password是关键字，newPassword是新密码串</p></blockquote></li><li>修改普通用户密码：<code>SET PASSWORD FOR &#39;username&#39;@&#39;hostname&#39;=password(&#39;newPassword&#39;)</code><blockquote><p>需要在登陆MySQL的情况下操作</p></blockquote></li></ul></li><li><p>DQL介绍：</p><ul><li><p>总体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  selection_list <span class="comment">/*要查询的列名称*/</span></span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">  table_list <span class="comment">/*要查询的表名称*/</span></span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">  condition <span class="comment">/*行条件*/</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> </span><br><span class="line">  grouping_columns <span class="comment">/*对结果分组*/</span></span><br><span class="line"><span class="keyword">HAVING</span> </span><br><span class="line">  condition <span class="comment">/*分组后的行条件*/</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  sorting_columns <span class="comment">/*对结果分组*/</span></span><br><span class="line"><span class="keyword">LIMIT</span> </span><br><span class="line">  offset_start, <span class="keyword">row_count</span> <span class="comment">/*结果限定*/</span></span><br></pre></td></tr></table></figure></li><li><p>简单查询：</p><ol><li><p>查询所有列：<code>SELECT * FROM tableName</code></p></li><li><p>查询指定列：<code>SELECT field1, field2, ... FROM tableName</code></p></li><li><p>指定别名查询：</p><ol><li><p>指定列别名：<code>SELECT field1 AS newField1, field2 AS newField2, ... FROM tableName</code></p></li><li><p>指定列和表别名：<code>SELECT field1 AS newField1, field2 AS newField2, ... FROM tableName AS newTableName</code></p><blockquote><p>指定表别名主要用于多表查询，其中别名的AS可以省略；别名可用双引号””括起</p></blockquote></li></ol></li><li><p>清除指定列的重复值：<code>SELECT DISTINCT field FROM tableName</code></p></li><li><p>查询结果参与运算(参与运算的必须是数值类型)：</p></li></ol></li><li><p>条件查询：</p><ul><li><p>语法：<code>SELECT field FROM tableName WHERE condition</code></p></li><li><p>比较运算符：</p><table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>&gt;、&lt;、&lt;=、&gt;=、=、&lt;&gt;</td><td>&lt;&gt;表示不等于,MySQL中也可以使用!=代替</td></tr><tr><td>IS NULL</td><td>查询某一列为NULL的值,不能使用=NULL</td></tr></tbody></table></li><li><p>逻辑运算符：</p><table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>and/&amp;&amp;</td><td>与,and更通用</td></tr><tr><td>or/||</td><td>或</td></tr><tr><td>not/!</td><td>非</td></tr></tbody></table></li><li><p>IN关键字：IN中每个数据都会作为一次条件，只要满足条件就会被查询出<br><code>SELECT field FROM tableName WHERE field in (value1, value2, ...)</code></p></li><li><p>BETWEEN v1 AND v2：范围查询，包括v1和v2</p></li><li><p>LIKE关键字：模糊查询</p><table><thead><tr><th>通配符</th><th>说明</th></tr></thead><tbody><tr><td>%</td><td>匹配任意多个字符(包含0个字符)</td></tr><tr><td>_</td><td>匹配一个字符</td></tr><tr><td>ESCAPE</td><td>转义指定字符</td></tr></tbody></table><blockquote><p><code>SELECT username FROM user WHERE username LIKE &#39;%pbo/_%&#39; ESCAPE &#39;/&#39;</code></p></blockquote></li></ul></li><li><p>排序查询：<code>SELECT field FROM tabelName WHERE field = value ORDER BY field1 [ASC|DESC], field2[ASC|DESC], ...</code></p><blockquote><p>同时对多个字段进行排序时，如果第一个字段相同则按第二个字段排序，依此类推</p></blockquote></li><li><p>聚合函数：</p><ul><li><p>介绍：聚合函数查询是纵向查询，它对一列的值进行计算，然后返回一个结果值。聚合函数会忽略空值NULL</p></li><li><p>主要的聚合函数：</p><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>max(列)</td><td>求列的最大值</td></tr><tr><td>min(列)</td><td>求列的最小值</td></tr><tr><td>avg(列)</td><td>求列的平均值</td></tr><tr><td>count(列)</td><td>统计列的数据条数</td></tr><tr><td>sum(列)</td><td>求列数据的总和</td></tr></tbody></table></li><li><p>语法：<code>SELECT fcuntion(field) FROM tableName</code></p><blockquote><p>对于NULL的记录不会统计，如果要统计需要借助IFNULL函数<br>IFNULL(fieldName, defaultValue)：如果列不为空返回这列的值。如果为NULL则返回默认值<br>修改后的SQL语句：<code>SELECT function(IFNULL(fieldName, defaultValue)) FROM tableName</code></p></blockquote></li></ul></li><li><p>分组查询:</p><ul><li><p>介绍：GROUP BY语句会将分组字段结果中相同内容作为一组，并且返回每组的第一条数据。因此单独分组没什么用处。分组的目的是为了统计，一般分组查询会跟聚合函数一起使用</p></li><li><p>语法：<code>SELECT field1, field2, ... FROM tableName GROUP BY field [HAVING condition]</code></p></li><li><p>HAVING和WHERE子句的区别：</p><table><thead><tr><th>语句</th><th>作用</th></tr></thead><tbody><tr><td>WHERE子句</td><td>1. 对查询结果进行分组前，将不符合WHERE条件的行去掉，即在分组之前过滤数据，即先过滤再分组 2. WHERE子句后不可以使用聚合函数</td></tr><tr><td>HAVING子句</td><td>1. HAVING子句的作用是筛选满足条件的组，即在分组之后过滤数据，即先分组再过滤 2. HAVING子句后可以使用聚合函数</td></tr></tbody></table></li></ul></li><li><p>LIMIT语句：</p><ul><li>介绍：限制查询记录的条数，用于语句的末尾</li><li>语法：<code>LIMIT offset, length</code><blockquote><p>offset：起始行数，从0开始计数。省略默认就是0<br>length：返回的行数</p></blockquote></li></ul></li></ul></li></ul><h2 id="表约束和范式"><a href="#表约束和范式" class="headerlink" title="表约束和范式"></a>表约束和范式</h2><ul><li><p>表约束</p><ul><li><p>约束作用：可以一定程度保证数据的正确性、有效性和完整性</p></li><li><p>约束种类：</p><table><thead><tr><th>约束名</th><th>关键字</th></tr></thead><tbody><tr><td>主键</td><td>PRIMARY KEY</td></tr><tr><td>唯一</td><td>UNIQUE</td></tr><tr><td>非空</td><td>NOT NULL</td></tr><tr><td>外键</td><td>FOREIGN KEY(主表中主键列,从表中外键列)</td></tr><tr><td>检查约束</td><td>CHECK(MySQL不支持)</td></tr></tbody></table></li><li><p>主键：</p><ul><li><p>特点：</p><ol><li>非空，NOT NULL</li><li>唯一，UNIQUE</li></ol></li><li><p>设置语句：</p><ol><li>创建表时添加</li><li>在已有表中添加主键：<code>ALTER TABLE tableName ADD PRIMARY KEY(fieldName)</code></li><li>删除主键：<code>ALTER TABLE tableName DROP PRIMARY KEY</code></li></ol></li><li><p>主键自增：</p><ul><li><p>介绍：建表时使用AUTO_INCREMENT关键字可以指定主键自增，默认开始值为1，且主键必须是整型类型的一个字段</p></li><li><p>创建表时指定起始值：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tableName(</span><br><span class="line">  field1 <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">  field2 ...,</span><br><span class="line">  ...</span><br><span class="line">)AUTO_INCREMENT=v;</span><br></pre></td></tr></table></figure></li><li><p>修改主键起始值：<code>ALTER TABLE tableName AUTO_INCREMENT=value</code></p></li><li><p>DELETE和TRUNCATE对自增长的影响：前者删除记录后自增长无影响；后者删除后自增长从头开始</p></li></ul></li></ul></li><li><p>唯一约束：</p><ul><li>特点：某列不能出现重复的值，NULL不存在重复问题</li><li>语法：<code>field fieldType UNIQUE</code></li></ul></li><li><p>非空约束：</p><ul><li>特点：某列不能为NULL</li><li>语法：<code>field fieldType NOT NULL</code></li></ul></li><li><p>默认值：<code>field fieldType DEFAULT value</code></p></li><li><p>外键约束：</p><ul><li><p>语法：</p><ol><li>新建表：<code>[CONSTRAINT] [foreignKeyName] FOREIGN KEY(fieldName) REFERENCES tableName(fieldName) [ON UPDATE CASCADE|ON DELETE CASCADE]</code></li><li>已有表新增：<code>ALTER TABLE table1 ADD [CONSTRAINT] [foreignKeyName] FOREIGN KEY(fieldName) REFERENCES table2(fieldName) [ON UPDATE CASCADE|ON DELETE CASCADE]</code></li><li>删除：<code>ALTER TABLE tableName DROP FOREIGN KEY foreignKeyName</code></li></ol></li><li><p>级联操作：在修改和删除主表的主键时，同时更新或删除副表的外键值(可同时设置级联更新和删除)</p><table><thead><tr><th>级联操作语法</th><th>描述</th></tr></thead><tbody><tr><td>ON UPDATE CASCADE</td><td>级联更新,只能是创建表的时候创建级联关系。更新主表中的主键,从表中的外键列也自动同步更新</td></tr><tr><td>ON DELETE CASCADE</td><td>级联删除</td></tr></tbody></table></li></ul></li></ul></li><li><p>范式</p><ul><li>第一范式(1NF)：数据库表的每一列都是不可分割的原子数据项，不能是集合、数组等非原子数据项。即表中的某个列有多个值时，必须拆分为不同的列。<strong>简而言之，第一范式每一列不可再拆分，称为原子性</strong></li><li>第二范式(2NF)<ul><li>介绍：<br>在满足第一范式的前提下，表中的每一个字段都完全依赖于主键<br>所谓完全依赖是指不能存在仅依赖主键一部分的列。<strong>简而言之，第二范式就是在第一范式的基础上所有列完全依赖于主键列</strong></li><li>特点：<ol><li>一张表只描述一件事情</li><li>表中的每一列都完全依赖于主键</li></ol></li></ul></li><li>第三范式(3NF)：在满足第二范式的前提下，表中的每一列都直接依赖于主键，而不是通过其它的列来间接依赖于主键。简而言之，第三范式就是所有列不依赖于其它非主键列，也就是在满足2NF的基础上，<strong>任何非主列不得传递依赖于主键</strong></li></ul></li></ul><h2 id="多表查询和子查询"><a href="#多表查询和子查询" class="headerlink" title="多表查询和子查询"></a>多表查询和子查询</h2><ul><li>多表查询<ul><li>内连接：用左边表的记录去匹配右边表的记录，如果符合条件的则显示<ul><li>隐式内连接：看不到JOIN关键字，条件由WHERE指定<blockquote><p><code>SELECT field FROM table1, table2 WHERE condition</code></p></blockquote></li><li>显式内连接：使用INNER JOIN … ON格式，可以省略INNER<blockquote><p><code>SELECT field FROM table1 [INNER] JOIN table2 ON condition</code></p></blockquote></li></ul></li><li>外连接：<ul><li>左外连接：用左表记录去匹配右表记录，如果符合条件的则显示原数据；否则显示NULL。可理解为在内连接基础上保证左表数据全部显示。使用LEFT OUTER JOIN … ON格式，可以省略OUTER<blockquote><p><code>SELECT field FROM table1 LEFT [OUTER] JOIN table2 ON condition</code></p></blockquote></li><li>右外连接：用右表记录去匹配左表记录，如果符合条件的则显示原数据；否则显示NULL。可理解为在内连接基础上保证右表数据全部显示。使用RIGHT OUTER JOIN … ON格式，可以省略OUTER<blockquote><p><code>SELECT field FROM table1 RIGHT [OUTER] JOIN table2 ON condition</code></p></blockquote></li></ul></li></ul></li><li>子查询<ul><li>介绍：<ol><li>一个查询的结果做为另一个查询的条件</li><li>有查询的嵌套，内部的查询称为子查询</li><li>子查询要使用括号</li></ol></li><li>子查询的情况：<ul><li>结果是一个数据(单行单列)：可以供父查询使用比较运算符<blockquote><p><code>SELECT field FROM tableName WHERE field = (child selection)</code></p></blockquote></li><li>结果是一个数组(多行单列)：可以供父查询使用IN运算符<blockquote><p><code>SELECT field FROM tableName WHERE field IN (child selection)</code></p></blockquote></li><li>结果是一张表(多行多列)：可作为查询的表或连接表，还需取表别名<blockquote><p><code>SELECT field FROM (child seletion) aliasName WHERE condition</code><br><code>SELECT field FROM table1 [LEFT|RIGHT] JOIN (child selection) aliasName ON condition</code></p></blockquote></li></ul></li></ul></li></ul><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><ul><li><p>介绍：事务执行是一个整体，所有的SQL语句都必须执行成功。如果其中有1条SQL语句出现异常，则所有的SQL语句都要回滚，整个业务执行失败</p></li><li><p>MySQL执行事务的方式：</p><ul><li>手动提交事务<ul><li>执行语句：<ol><li>开启事务：<code>start transaction</code></li><li>提交事务：<code>commit</code></li><li>回滚事务：<code>rollback</code></li></ol></li><li>使用过程：<ol><li>执行成功：开始事务 -&gt; 执行多条SQL语句 -&gt; 成功完成,提交事务</li><li>执行失败：开启事务 -&gt; 执行多条SQL语句 -&gt; 出现异常,事务回滚</li></ol></li></ul></li><li>自动提交事务：MySQL默认每一条DML(增删改)语句都是一个单独的事务，每条语句都会自动开启一个事务，语句执行完毕自动提交事务<ul><li>查看MySQL是否开启自动提交事务：<code>SELECT @@autocommit</code><blockquote><p>@@表示全局变量，1表示开启，0表示关闭</p></blockquote></li><li>取消自动提交事务：<code>SET @@autocommit = 0</code></li></ul></li></ul></li><li><p>事务原理：事务开启之后，所有的操作都会临时保存到事务日志中。事务日志只有在收到commit命令才会同步到数据表中，其他任何情况都会清空事务日志(rollback,断开连接)</p><ul><li><p>事务步骤：</p><ol><li>客户端连接数据库服务器，创建连接时创建此用户临时日志文件</li><li>开启事务以后，所有的操作都会先写入到临时日志文件中</li><li>所有的查询操作从表中查询，但会经过日志文件加工后才返回</li><li>如果事务提交则将日志文件中的数据写到表中，否则清空日志文件</li></ol></li><li><p>回滚点：在某些成功的操作完成之后，后续的操作有可能成功有可能失败，但是不管成功还是失败，前面操作都已经成功。可以在当前成功的位置设置一个回滚点，以供后续失败操作返回到该位置，而不是返回所有操作，这个点称之为回滚点</p><blockquote><table><thead><tr><th>回滚点操作</th><th>语句</th></tr></thead><tbody><tr><td>设置回滚点</td><td>savepoint name</td></tr><tr><td>回到回滚点</td><td>rollback to name</td></tr></tbody></table></blockquote></li><li><p>事务的隔离级别</p><ul><li><p>事务四大特性：原子性(Atomicity)、一致性(Consistency)、隔离性(Isolation)、持久性(Durability)</p></li><li><p>事务的隔离级别：</p><table><thead><tr><th>问题</th><th>含义</th></tr></thead><tbody><tr><td>脏读</td><td>一个事务读取到了另一个事务中尚未提交的数据</td></tr><tr><td>不可重复读</td><td>一个事务中两次读取的数据内容不一致</td></tr><tr><td>幻读</td><td>一个事务中两次读取的数据的数量不一致</td></tr></tbody></table></li><li><p>数据库的隔离级别：</p><table><thead><tr><th>级别</th><th>名字</th><th>隔离级别</th><th>脏读</th><th>不可重读</th><th>幻读</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>读未提交</td><td>read uncommitted</td><td>是</td><td>是</td><td>是</td><td>\</td></tr><tr><td>2</td><td>读已提交</td><td>read committed</td><td>否</td><td>是</td><td>是</td><td>Oracle和SQL Server默认的隔离级别</td></tr><tr><td>3</td><td>可重复读</td><td>repeatable read</td><td>否</td><td>否</td><td>是</td><td>MySQL默认的隔离级别</td></tr><tr><td>4</td><td>串行化</td><td>serializable</td><td>否</td><td>否</td><td>否</td><td>\</td></tr></tbody></table><blockquote><p>隔离级别越高，安全级越高，性能越差</p></blockquote></li><li><p>MySQL事务隔离级别相关命令：</p><ol><li>查询全局事务隔离级别：<code>SELECT @@tx_isolation</code></li><li>设置隔离级别(需要退出后重新登录才生效)：<code>SET GLOBAL TRANSACTION ISOLATION LEVEL 隔离级别字符串</code></li></ol></li></ul></li></ul></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li><p>mysqld是MySQL的主程序(服务器端)；mysql是MySQL的命令行工具(客户端)</p></li><li><p>查看MySQL内部设置的编码：<code>SHOW VARIABLES LIKE &#39;character%&#39;</code></p></li><li><p>备份语句：<code>mysqldump -u username -p password database &gt; filePath</code></p><blockquote><p>mysqldump在bin文件目录下是一个可执行文件，用于执行文件备份<br>上述语句用于将数据库备份到本地文件(.sql)</p></blockquote></li><li><p>还原语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> <span class="keyword">database</span>;</span><br><span class="line">SOURCE filePath;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Middleware </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC基础</title>
      <link href="/2020/12/08/SpringSeries/SpringMVC/SpringMVC%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/12/08/SpringSeries/SpringMVC/SpringMVC%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><ul><li><a href="#SpringMVC概述">SpringMVC概述</a></li><li><a href="#常用注解介绍">常用注解介绍</a></li><li><a href="#RestFul介绍">RestFul介绍</a></li><li><a href="#其他细节介绍">其他细节介绍</a></li><li><a href="#SpringMVC核心技术">SpringMVC核心技术</a></li></ul><a id="more"></a><h2 id="SpringMVC概述"><a href="#SpringMVC概述" class="headerlink" title="SpringMVC概述"></a>SpringMVC概述</h2><ul><li><p>什么是MVC：</p><ul><li>MVC是模型(Model)、视图(View)和控制器(Controller)的简写，是一种软件设计规范。使用将业务逻辑、数据、显示分离的方式来组织代码，降低了视图与业务逻辑间的双向耦合。MVC是一种架构模式，不同的MVC也存在差异。最典型的MVC就是JSP + servlet + javaBean</li><li>MVC各自的解释：<ol><li>Model(模型)：数据模型，提供要展示的数据，包含数据和行为</li><li>View(视图)：负责进行模型的展示，一般指用户界面</li><li>Controller(控制器)：接收用户请求，委托给模型进行处理(状态改变)，处理完毕后把返回的模型数据返回给视图，由视图负责展示。控制器做了调度员的工作</li></ol></li></ul></li><li><p>MVC框架需要做的工作：</p><ol><li>将url映射到java类或java类的方法</li><li>封装用户提交的数据</li><li>处理请求：调用相关的业务处理、封装响应数据</li><li>将响应的数据进行渲染(jsp/html等表示层数据)</li></ol></li><li><p>简介：SpringMVC是Spring框架的一部分，是基于Java实现MVC的轻量级Web框架。围绕<strong>DispatcherServlet</strong>(调度Servlet)设计</p></li><li><p>优点：</p><ol><li>轻量级，简单易学</li><li>简洁、灵活、高效，基于请求响应的MVC框架</li><li>与Spring兼容性好，无缝结合</li><li>约定优于配置</li><li>功能强大：RESTful、数据验证、格式化、本地化、主题等</li></ol></li><li><p>SpringMVC的HelloWorld搭建：</p><ol><li><p>新建maven web项目</p></li><li><p>引入servlet、SpringMVC依赖</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在web.xml中注册中央处理器</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册中央处理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定SpringMVC配置文件路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 装载顺序 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 处理器拦截映射 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /会匹配所有请求,/*才会匹配.jsp --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>&lt;load-on-startup&gt;</p><blockquote><p>标记是否在Web服务器(Tomcat)启动时会创建这个Servlet实例，即是否在Web服务器启动时调用执行该Servlet的init()方法，而不是在真正访问时才创建。值必须是一个整数：</p><ol><li>当值大于等于0时，表示容器在启动时就加载并初始化这个Servlet；数值越小，该Servlet的优先级就越高，被创建的也就越早</li><li>当值小于0或者没有指定时，则表示该Servlet在真正被使用时才会去创建</li><li>当值相同时，容器会自己选择创建顺序</li></ol></blockquote></li><li><p>&lt;url-pattern/&gt;</p></li><li><p>&lt;init-param&gt;自定义SpringMVC配置文件地址</p><blockquote><p>默认要从项目根下的WEB-INF目录下找名称为Servlet名称-servlet.xml的配置文件(即springmvc-servlet.xml)，而一般情况下配置文件是放在类路径下(即resources目录下)。因此在注册中央调度器时还需要为中央调度器设置查找SpringMVC配置文件的路径<br>DispatcherServlet继承自FrameworkServlet，该类中有一个属性contextConfigLocation用于设置SpringMVC配置文件的路径及文件名</p></blockquote></li></ul></li><li><p>声明组件扫描器(Spring配置文件中)</p></li><li><p>定义目标页面(show.jsp)</p></li><li><p>创建处理器</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</span><br><span class="line">  <span class="meta">@RequestMapping</span>(value = <span class="string">"/test.do"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">doSome</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"Handle /test.do request ~~~"</span>);</span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    modelAndView.addObject(<span class="string">"msg"</span>, <span class="string">"testMsg"</span>);</span><br><span class="line">    modelAndView.addObject(<span class="string">"code"</span>, <span class="number">200</span>);</span><br><span class="line">    modelAndView.setViewName(<span class="string">"/show.jsp"</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>若有多个请求路径均可匹配该处理器方法的执行，则@RequestMapping的value属性可赋值一个数组<br>ModelAndView类中的addObject()方法用于向Model中添加数据。Model的底层为HashMap。<strong>Model中的数据存储在request作用域中，SringMVC默认采用转发的方式跳转到视图。本次请求结束，模型中的数据会被销毁</strong></p></blockquote></li><li><p>修改视图解析器的注册</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册视图解析器：帮助处理视图的路径和扩展名,生成视图对象 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注册内部资源视图解析器InternalResourceViewResolver --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 前缀：表示视图所在的路径 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/jsp/"</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 后缀：表示视图文件的扩展名 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>为了避免对于请求资源路径与扩展名上的冗余，在视图解析器InternalResouceViewResolver中引入请求的前辍与后辍。此时ModelAndView中只需给出要跳转页面的文件名即可。对于具体的文件路径与扩展名，视图解析器会自动完成拼接</p></blockquote></li><li><p>修改对应的处理器跳转地址和页面位置</p></li></ol></li><li><p>中心控制器DispatcherServlet：</p><ul><li>介绍：<br>Spring的web框架围绕DispatcherServlet设计。DispatcherServlet的作用是将请求分发到不同的处理器。SpringMVC框架像许多其他MVC框架一样，以请求为驱动，围绕一个中心Servlet分派请求及提供其他功能。DispatcherServlet是一个实际的Servlet(它继承自HttpServlet基类)<br><img src="DispatcherServlet%E7%B1%BB%E7%BB%A7%E6%89%BF%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="DispatcherServlet类继承结构图"></li><li>SpringMVC的原理：<br>当发起请求时被前置的控制器拦截到请求，根据请求参数生成代理请求，找到请求对应的实际控制器，控制器处理请求，创建数据模型，访问数据库，将模型响应给中心控制器，控制器使用模型与视图渲染视图结果，将结果返回给中心控制器，再将结果返回给请求者<br><img src="SpringMVC%E5%8E%9F%E7%90%86%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="SpringMVC原理示意图"></li><li>SpringMVC执行逻辑：<br><img src="SpringMVC%E6%89%A7%E8%A1%8C%E9%80%BB%E8%BE%91%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="SpringMVC执行逻辑示意图"><ol><li>DispatcherServlet表示前置控制器，是整个SpringMVC的控制中心。用户发出请求，DispatcherServlet接收请求并拦截请求<blockquote><p>假设请求的url为：<a href="http://localhost:8080/SpringMVC/hello" target="_blank" rel="noopener">http://localhost:8080/SpringMVC/hello</a><br>url可以拆分成三部分：</p><ol><li><a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a>：服务器域名</li><li>SpringMVC部署在服务器上的web站点</li><li>hello表示控制器</li></ol><p>如上url表示为：请求位于服务器localhost:8080上的SpringMVC站点的hello控制器</p></blockquote></li><li>HandlerMapping为处理器映射。DispatcherServlet调用HandlerMapping，HandlerMapping根据请求url查找Handler</li><li>HandlerExecution表示具体的Handler，其主要作用是根据url查找控制器。示例url被查找控制器为hello</li><li>HandlerExecution将解析后的信息传递给DispatcherServlet，如解析控制器映射等</li><li>HandlerAdapter表示处理器适配器，其按照特定的规则去执行Handler</li><li>Handler让具体的Controller执行</li><li>Controller将具体的执行信息返回给HandlerAdapter，如ModelAndView</li><li>HandlerAdapter将视图逻辑名或模型传递给DispatcherServlet</li><li>DispatcherServlet调用视图解析器(ViewResolver)来解析HandlerAdapter传递的逻辑视图名</li><li>视图解析器将解析的逻辑视图名传给DispatcherServlet</li><li>DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图</li><li>最终视图呈现给用户</li></ol></li></ul></li></ul><h2 id="常用注解介绍"><a href="#常用注解介绍" class="headerlink" title="常用注解介绍"></a>常用注解介绍</h2><ul><li>@Controller：声明控制器，需要使用包扫描注册进Spring容器</li><li>@RequestMapping：定义请求规则<ul><li>value属性：定义处理器对于请求的映射规则。可以注解在方法上，也可以注解在类上。常以’/‘开始，用于定义所匹配请求的URI<ol><li>注解于类上：配合@Controller进行使用，表示类中所有响应请求方法以该地址作为父路径</li><li>注解于方法上：表示相对于父路径的请求地址</li></ol></li><li>method属性：用于约束请求的类型，可以收窄请求范围。指定请求谓词的类型如GET、POST、HEAD、OPTIONS、PUT、PATCH、DELETE和TRACE等。支持指定多个method</li><li>produces属性：设置输出结果类型，可用于设置响应体格式和字符集</li></ul></li><li>@GetMapping、PostMapping、PutMapping、DeleteMapping、PatchMapping：组合注解，指定了请求方法的便于使用的@RequestMapping版本</li><li>@RequestParam：校正请求参数名<blockquote><p>所谓校正请求参数名，是指若请求URL所携带的参数名称与处理方法中指定的参数名不相同时，则需在处理方法参数前添加注解@RequestParam指定请求URL所携带参数的名称。该注解是对处理器方法参数进行修饰的，value属性指定请求参数的名称</p></blockquote></li><li>@PathVariable：使方法参数的值对应绑定到一个URI模版变量上<blockquote><p>路径变量的好处：</p><ol><li>使路径变得更加简洁</li><li>获得参数更加方便，框架会自动进行类型转换</li><li>通过路径变量的类型可以约束访问参数，如果类型不一样，则访问不到对应的请求方法</li></ol></blockquote></li></ul><h2 id="RestFul介绍"><a href="#RestFul介绍" class="headerlink" title="RestFul介绍"></a>RestFul介绍</h2><ul><li>概念：Restful就是一个资源定位及资源操作的风格。不是标准也不是协议，只是一种风格。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制</li><li>优点：可以通过不同的请求方式来实现不同的效果。请求地址一样，但是功能可以不同<blockquote><p><a href="http://127.0.0.1/item/1" target="_blank" rel="noopener">http://127.0.0.1/item/1</a> 查询,GET<br><a href="http://127.0.0.1/item" target="_blank" rel="noopener">http://127.0.0.1/item</a> 新增,POST<br><a href="http://127.0.0.1/item" target="_blank" rel="noopener">http://127.0.0.1/item</a> 更新,PUT<br><a href="http://127.0.0.1/item/1" target="_blank" rel="noopener">http://127.0.0.1/item/1</a> 删除,DELETE</p></blockquote></li></ul><h2 id="其他细节介绍"><a href="#其他细节介绍" class="headerlink" title="其他细节介绍"></a>其他细节介绍</h2><ul><li><p>处理器方式参数：<br>处理器方法可以包含以下四类参数，这些参数会在系统调用时由系统自动赋值，可在方法内直接使用</p><ol><li>HttpServletRequest</li><li>HttpServletResponse</li><li>HttpSession</li><li>请求中所携带的请求参数</li></ol></li><li><p>请求参数中文乱码：</p><ul><li><p>问题介绍：对于接收的请求参数，若含有中文，则会出现中文乱码问题。Spring对于请求参数中的中文乱码问题，给出了专门的字符集过滤器：org.springframework.web.filter包下的CharacterEncodingFilter类</p></li><li><p>解决方式：在web.xml中注册字符集过滤器即可解决Spring请求参数的中文乱码问题。不过最好将该过滤器注册在其它过滤器之前，因为过滤器的执行是按照注册顺序进行的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 指定字符集 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 强制request使用字符集encoding --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceRequestEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 强制response使用字符集encoding --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>处理器方式的返回值</p><ul><li>处理器方法常用返回值有四种类型：<ol><li>ModelAndView</li><li>String</li><li>void</li><li>自定义类型对象</li></ol></li><li>ModelAndView(适用于前后端不分离)<br>若处理器方法处理完后需要跳转到其它资源，且又要在跳转的资源间传递数据，此时处理器方法返回ModelAndView比较好。若要返回ModelAndView，则处理器方法中需要定义ModelAndView对象<br>若该处理器方法只是进行跳转而不传递数据，或只传递数据而并不向任何资源跳转(如对页面的Ajax异步响应)，此时若返回ModelAndView则将总有一部分多余————要么Model多余，要么View多余。此时返回ModelAndView将不合适</li><li>String(适用于前后端不分离)<br>处理器方法返回的字符串可以指定逻辑视图名，通过视图解析器(InternalResourceViewResolver内部资源视图解析器)解析可以将其转换为物理视图地址<br>也可以直接返回资源的物理视图名，此时就不需要在视图解析器中再配置前辍与后辍</li><li>返回void(了解)<br>若处理器对请求处理后无需跳转到其它任何资源，此时处理器方法可定义为返回void。例如对Ajax异步请求的响应，此时需要使用HttpServletResponse将返回结果通过writer写出</li><li>返回对象(常用,适用于前后端分离)<br>返回的对象不是作为逻辑视图出现的，而是作为直接在页面显示的数据出现的。常使用json格式返回，此时需要使用@ResponseBody注解于处理器方法上(将转换后的json数据放入到响应体中)<ol><li>在spring配置文件中配置&lt;mvc:annotation-driven/&gt;：Object数据转为Json数据需要消息转换器HttpMessageConverter完成。转换器的开启需要由&lt;mvc:annotation-driven/&gt;完成</li><li>导入jackson相关的包：spring的转换器底层依赖了jackson将对象转为json数据</li></ol></li></ul></li><li><p>&lt;url-pattern&gt;解读：</p><ul><li>*.xxx：一般情况下SpringMVC的中央调度器DispatcherServlet的&lt;url-pattern&gt;常使用后辍匹配方式，如写为*.do、*.action或*.mvc</li><li>/：此时中央调度器DispatcherServlet会拦截所有url，会将向静态资源(例如css、js、jpg、png等资源)的获取请求当作是一个普通的处理器请求。此时中央调度器会调用处理器映射器为其查找相应的处理器，这当然是找不到的。因此在这种情况下，所有的静态资源获取请求均会报404错误</li></ul></li><li><p>SpringMVC静态资源处理：</p><ol><li><p>&lt;mvc:default-servlet-handler/&gt;：声明了&lt;mvc:default-servlet-handler/&gt;后SpringMVC框架会在容器中创建DefaultServletHttpRequestHandler处理器对象。它像一个检查员，会对进入DispatcherServlet的URL进行筛查。如果发现是静态资源的请求，就将该请求转由Web应用服务器默认的Servlet处理。一般的服务器都有默认的Servlet</p></li><li><p>&lt;mvc:resources/&gt;：在Spring3.0版本后，Spring定义了专门用于处理静态资源访问请求的处理器ResourceHttpRequestHandler。并且添加了&lt;mvc:resources/&gt;标签，专门用于解决静态资源无法访问问题</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">  location：表示静态资源所在目录;目录不要使用/WEB-INF/及其子目录</span></span><br><span class="line"><span class="comment">  mapping：表示对该资源的映射后的请求地址</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/images/**"</span> <span class="attr">location</span>=<span class="string">"/images/"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/js/**"</span> <span class="attr">location</span>=<span class="string">"/js/"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>定义方式实现控制器：</p><ul><li><p>介绍：实现接口Controller定义控制器是较老的办法。且一个控制器中只有一个方法，如果要多个方法则需要定义多个Controller；定义的方式比较麻烦</p></li><li><p>定义步骤：</p><ol><li><p>自定义控制器实现Controller接口，实现handleRequest方法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 返回一个模型视图对象</span></span><br><span class="line">    ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    mv.addObject(<span class="string">"msg"</span>,<span class="string">"TestController"</span>);</span><br><span class="line">    mv.setViewName(<span class="string">"test"</span>);</span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在SpringMVC配置文件中注册bean</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- name对应请求路径,class对应处理请求的类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"/test"</span> <span class="attr">class</span>=<span class="string">"com.xiong.controller.TestController"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ul></li><li><p>结果跳转方式：</p><ol><li><p>ModelAndView：根据设置的view名称和视图解析器跳到指定的页面。页面：{视图解析器前缀} + viewName + {视图解析器后缀}</p></li><li><p>ServletApi：通过设置ServletAPI，不需要视图解析器</p><ol><li>通过HttpServletResponse进行输出：<code>httpServletResponse.getWriter().println(&quot;Hello~~~&quot;);</code></li><li>通过HttpServletResponse实现重定向：<code>httpServletResponse.sendRedirect(&quot;/index.jsp&quot;);</code></li><li>通过HttpServletResponse实现转发：<code>httpServletRequest.getRequestDispatcher(&quot;/WEB-INF/jsp/test.jsp&quot;).forward(httpServletRequest, httpServletResponse);</code></li></ol></li><li><p>SpringMVC</p><ol><li><p>不使用视图解析器：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">  <span class="meta">@RequestMapping</span>(<span class="string">"/test/t1"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 转发</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"/index.jsp"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@RequestMapping</span>(<span class="string">"/test/t2"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 转发二</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"forward:/index.jsp"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@RequestMapping</span>(<span class="string">"/test/t3"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 重定向</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/index.jsp"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用视图解析器：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController2</span> </span>&#123;</span><br><span class="line">  <span class="meta">@RequestMapping</span>(<span class="string">"/test2/t1"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//转发</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@RequestMapping</span>(<span class="string">"/test2/t2"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 重定向</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/index.jsp"</span>;</span><br><span class="line">    <span class="comment">// 重定向到另一个请求</span></span><br><span class="line">    <span class="comment">// return "redirect:hello.do";</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol></li><li><p>数据接收：</p><ul><li>提交域名称和处理方法参数不一致：使用@RequestParam</li><li>提交的是一个表单对象：要求提交的表单域和对象属性名一致</li></ul></li><li><p>数据显示</p><ul><li><p>通过ModelAndView：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">// 返回一个模型视图对象</span></span><br><span class="line">  ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">  mv.addObject(<span class="string">"msg"</span>,<span class="string">"hello"</span>);</span><br><span class="line">  mv.setViewName(<span class="string">"test"</span>);</span><br><span class="line">  <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过ModelMap：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(ModelMap model)</span></span>&#123;</span><br><span class="line">  <span class="comment">// 封装要显示到视图中的数据</span></span><br><span class="line">  <span class="comment">// 相当于req.setAttribute("name", "sobxiong");</span></span><br><span class="line">  model.addAttribute(<span class="string">"name"</span>, <span class="string">"sobxiong"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过Model：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">  <span class="comment">// 封装要显示到视图中的数据</span></span><br><span class="line">  <span class="comment">// 相当于req.setAttribute("name", "sobxiong");</span></span><br><span class="line">  model.addAttribute(<span class="string">"msg"</span>, <span class="string">"sobxiong"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>Model：只有寥寥几个方法，只适合用于储存数据，简化了对于Model对象的操作和理解<br>ModelMap：继承了LinkedMap，除了实现了自身的一些方法，同样继承了LinkedMap的方法和特性<br>ModelAndView：可以在储存数据的同时设置返回的逻辑视图，进行控制展示层的跳转</p></blockquote></li></ul><h2 id="SpringMVC核心技术"><a href="#SpringMVC核心技术" class="headerlink" title="SpringMVC核心技术"></a>SpringMVC核心技术</h2><ul><li><p>请求转发和重定向：</p><ul><li><p>介绍：<br>当处理器对请求处理完毕后，向其它资源进行跳转时，有两种跳转方式：<strong>请求转发</strong>与<strong>重定向</strong>。根据所要跳转的资源类型，又可分为两类：<strong>跳转到页面</strong>与<strong>跳转到其它处理器</strong></p><blockquote><p>对于请求转发的页面，可以是WEB-INF中页面；而重定向的页面，不能为WEB-INF中页面。因为重定向相当于用户再次发出一次请求，而用户是不能直接访问WEB-INF中资源的</p></blockquote><p><img src="%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91%E5%92%8C%E9%87%8D%E5%AE%9A%E5%90%91%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="请求转发和重定向示意图"></p></li><li><p>原理：SpringMVC框架把原来Servlet中的请求转发和重定向操作进行了封装。现在可以使用简单的方式实现转发和重定向：</p><ol><li>forward：表示转发，示例如下：<br> <code>request.getRequestDispatcher(&quot;xx.jsp&quot;).forward()</code></li><li>redirect：表示重定向，示例如下：<br> <code>response.sendRedirect(&quot;xxx.jsp&quot;)</code></li></ol></li><li><p>请求转发：</p><ol><li>处理器方法返回ModelAndView时，可在setViewName()指定的视图前添加 “forward:”，此时视图不再与视图解析器一同工作，这样可在配置了解析器时指定不同位置的视图。视图页面必须写出相对于项目根的路径。forward操作不需要视图解析器</li><li>处理器方法返回String时，需在视图路径前面加入”forward:视图完整路径”</li></ol></li><li><p>请求重定向(同请求转发,把forward替换为redirect)</p></li></ul></li><li><p>异常处理：</p><ul><li><p>介绍：SpringMVC框架常用@ExceptionHandler和@ControllerAdvice注解处理异常</p></li><li><p>@ExceptionHandler注解：</p><ul><li><p>介绍：<br>使用注解@ExceptionHandler可以将一个方法指定为异常处理方法。该注解只有一个可选属性value(Class&lt;?&gt;数组)，该属性用于指定该注解的方法所要处理的异常类(即需要匹配的异常)<br>被注解的方法返回值可以是ModelAndView、String或void，方法名随意，方法参数可以是Exception及其子类对象、HttpServletRequest、HttpServletResponse等。系统会自动为这些参数赋值</p></li><li><p>使用步骤：</p><ol><li><p>准备(自定义异常,自定义异常响应页面等)</p></li><li><p>在处理器方法上添加注解：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler</span>(value = Throwable<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">ModelAndView</span> <span class="title">doException</span>(<span class="title">Throwable</span> <span class="title">t</span>) </span>&#123;</span><br><span class="line">  ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">  mv.addObject(<span class="string">"exception"</span>, t);</span><br><span class="line">  mv.setViewName(<span class="string">"error"</span>);</span><br><span class="line">  <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>不过一般不这样使用，而是将异常处理方法专门定义在一个类中，作为全局的异常处理类</p></blockquote></li></ol></li></ul></li><li><p>@ControllerAdvice注解：</p><ul><li><p>介绍：<br>ControllerAdvice字面意思就是”控制器增强”，用于给控制器对象增强功能。使用@ControllerAdvice注解修饰的类中可以使用@ExceptionHandler。当使用@RequestMapping注解修饰的方法抛出异常时，会执行@ControllerAdvice修饰的类中的对应异常处理方法<br>@ControllerAdvice由@Component注解修饰，需要由包扫描组件支持</p></li><li><p>使用步骤：</p><ol><li><p>添加启动包扫描和注册注解驱动的xml配置</p></li><li><p>定义全局异常处理类</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line">  <span class="meta">@ExceptionHandler</span>(value = Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">  <span class="title">public</span> <span class="title">ModelAndView</span> <span class="title">doException</span>(<span class="title">Exception</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">    ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    mv.addObject(<span class="string">"exception"</span>,e);</span><br><span class="line">    mv.setViewName(<span class="string">"error"</span>);</span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@ExceptionHandler</span>(value = ArithmeticException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">  <span class="title">public</span> <span class="title">ModelAndView</span> <span class="title">doArithmeticException</span>(<span class="title">ArithmeticException</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">    ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    mv.addObject(<span class="string">"arithmeticException"</span>,e);</span><br><span class="line">    mv.setViewName(<span class="string">"error"</span>);</span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul></li></ul></li><li><p>拦截器</p><ul><li><p>介绍：SpringMVC中的Interceptor拦截器非常重要，它的主要作用是拦截指定的用户请求，并进行相应的预处理与后处理。其拦截的时间节点在”处理器映射器根据用户提交的请求映射出了所要执行的处理器类,并且也找到了要执行该处理器类的处理器适配器,在处理器适配器执行处理器之前”。在处理器映射器映射出所要执行的处理器类时，已经将拦截器与处理器组合为了一个处理器执行链，并返回给了中央调度器</p></li><li><p>拦截器HandlerInterceptor：</p><ul><li>介绍：自定义拦截器，需要实现HandlerInterceptor接口</li><li>接口方法介绍：<ol><li><code>preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)</code>：该方法在处理器方法执行之前执行。其返回值为 boolean，若为true，则紧接着会执行处理器方法，且会将afterCompletion()方法放入到一个专门的方法栈中等待执行</li><li><code>postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</code>：该方法在处理器方法执行之后执行。处理器方法若最终未被执行，则该方法不会执行。由于该方法是在处理器方法执行完后执行，且该方法参数中包含ModelAndView，因此该方法可以修改处理器方法的处理结果数据，且可以修改跳转地址</li><li><code>afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</code>： 当preHandle()方法返回true时，会将该方法放到专门的方法栈中，等到对请求进行响应的所有工作完成之后才执行该方法。即该方法是在中央调度器渲染(数据填充)了响应页面之后执行的，此时对ModelAndView的操作也对响应没有影响。该方法是最后执行的方法，一般用于清除资源</li></ol></li></ul></li><li><p>使用步骤：</p><ol><li><p>定义拦截器对象：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    log.info(<span class="string">"preHandle() ~~~"</span>);  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    log.info(<span class="string">"postHandle() ~~~"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    log.info(<span class="string">"afterCompletion() ~~~"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注册拦截器</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册拦截器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">      &lt;mvc:mapping&gt;：用于指定当前注册的拦截器可以拦截的请求路径,/**表示拦截所有请求,可以设置多个</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.xiong.springmvc.controller.MyInterceptor"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;mvc:interceptor&gt;可以设置多个  --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DataStructure</title>
      <link href="/2020/12/03/BasicSkill/DataStructure/"/>
      <url>/2020/12/03/BasicSkill/DataStructure/</url>
      
        <content type="html"><![CDATA[<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><ul><li><a href="#Trie字典树">Trie字典树</a></li><li><a href="#树状数组">树状数组</a></li></ul><a id="more"></a><h2 id="Trie字典树"><a href="#Trie字典树" class="headerlink" title="Trie字典树"></a>Trie字典树</h2><ul><li><p>介绍：又称单词查找树、Trie树，是一种树形结构，是一种哈希树的变种。典型应用是用于统计、排序和保存大量的字符串(但不仅限于字符串)，所以经常被搜索引擎系统用于文本词频统计。优点是：利用字符串的公共前缀来减少查询时间，最大限度地减少无谓的字符串比较，查询效率比哈希树高</p></li><li><p>核心思想：空间换时间。利用字符串的公共前缀来降低查询时间的开销以达到提高效率的目的</p></li><li><p>三个基本性质：</p><ol><li>根节点不包含字符，除根节点外每一个节点都只包含一个字符</li><li>从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串</li><li>每个节点的所有子节点包含的字符都不相同</li></ol></li><li><p>基本操作：查找、插入和删除(删除较为少见)</p></li><li><p>举例：<br>单词组：banana、band、bank、apple、apply、applet<br>图示：<br><img src="Trie%E5%AD%97%E5%85%B8%E6%A0%91%E5%9B%BE%E7%A4%BA.png" alt="Trie字典树图示"></p></li><li><p>代码实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装字典树节点数据结构</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span> &#123;</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 是否为单词结尾字符的标记</span></span><br><span class="line">    <span class="keyword">bool</span> wordTag = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// 计数标记,用于删除</span></span><br><span class="line">    <span class="keyword">int</span> countTag = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 下层节点,26个指针的数组(a-z),并显式赋值为nullptr</span></span><br><span class="line">    TrieNode *next[<span class="number">26</span>] = &#123;<span class="literal">nullptr</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;<span class="keyword">word</span>)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 从头节点开始</span></span><br><span class="line">      TrieNode *cur = <span class="keyword">this</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">char</span> &amp;c : <span class="keyword">word</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果查找的字符节点为空则创建</span></span><br><span class="line">        <span class="keyword">if</span> (!cur-&gt;next[c - <span class="string">'a'</span>]) cur-&gt;next[c - <span class="string">'a'</span>] = <span class="keyword">new</span> TrieNode;</span><br><span class="line">        <span class="comment">// 前往下一层节点,表示当前字符已满足</span></span><br><span class="line">        cur = cur-&gt;next[c - <span class="string">'a'</span>];</span><br><span class="line">        <span class="comment">// 技术标记增加</span></span><br><span class="line">        cur-&gt;countTag++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 记录当前是单词结尾字符</span></span><br><span class="line">      cur-&gt;wordTag = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">search</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;<span class="keyword">word</span>)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 从头节点开始</span></span><br><span class="line">      TrieNode *cur = <span class="keyword">this</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">char</span> &amp;c : <span class="keyword">word</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果查找的字符节点为空则返回false,查询不到</span></span><br><span class="line">        <span class="keyword">if</span> (!cur-&gt;next[c - <span class="string">'a'</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        cur = cur-&gt;next[c - <span class="string">'a'</span>];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 返回当前节点是否为单词结尾</span></span><br><span class="line">      <span class="keyword">return</span> cur-&gt;wordTag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">searchPrefix</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;<span class="keyword">word</span>)</span> </span>&#123;</span><br><span class="line">      TrieNode *cur = <span class="keyword">this</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">char</span> &amp;c : <span class="keyword">word</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!cur-&gt;next[c - <span class="string">'a'</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        cur = cur-&gt;next[c - <span class="string">'a'</span>];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 返回true,前缀无需关注是否为单词节点</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体测试</span></span><br><span class="line">TrieNode root;</span><br><span class="line">root.insert(<span class="string">"banana"</span>);</span><br><span class="line">root.insert(<span class="string">"band"</span>);</span><br><span class="line">root.insert(<span class="string">"bank"</span>);</span><br><span class="line">root.insert(<span class="string">"apple"</span>);</span><br><span class="line">root.insert(<span class="string">"apply"</span>);</span><br><span class="line">root.insert(<span class="string">"applet"</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; root.search(<span class="string">"banana"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; root.search(<span class="string">"banan"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; root.searchPrefix(<span class="string">"apply"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; root.search(<span class="string">"apply"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; root.searchPrefix(<span class="string">"appl"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; root.search(<span class="string">"appl"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h2><ul><li><p>介绍：树状数组是一个查询和修改复杂度都为logn的数据结构。主要用于数组的单点修改以及区间求和</p></li><li><p>背景问题：有一个数组a，下标从1到n。现在需要进行w次修改、q次查询，修改指修改数组中某一个元素的值；查询指查询数组中任意一个区间的和</p></li><li><p>问题分析：首先分析下朴素做法的时间复杂度，修改是O(1)的时间复杂度，而查询的话是O(n)的复杂度，总体时间复杂度为O(qn)；可能会想到使用前缀和来优化这个查询，此时查询的复杂度为O(1)，而修改时需要修改修改点之后的所有前缀和，因此修改的时间复杂度是O(n)，总体时间复杂度还是O(qn)。而树状数组的做法综合了这两种朴素方式，降低了整体时间复杂度</p></li><li><p>树状数组</p><ul><li><p>lowbit函数</p><ul><li>作用：求某个数的二进制表示中最低的一位1</li><li>代码表示：<code>int lowbit(int x) return x &amp; -x;</code></li><li>原理：<br><img src="lowbit%E5%87%BD%E6%95%B0%E5%8E%9F%E7%90%86.png" alt="lowbit函数原理"></li></ul></li><li><p>核心思想：设原数组为a，节点值为A1～An，新开辟的数组为c，节点值为C1～Cn。每个节点不知管辖当前节点的值，而是管辖一个区域的数据。设节点编号为x，那么这个节点管辖的区间为2^k(其中k为x的二进制末尾0的个数)个元素。且区间最后一个元素必为Ax</p><blockquote><p><img src="%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E7%AE%A1%E8%BE%96%E5%8C%BA%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="树状数组管辖区示意图"><br>C1 = A1<br>C2 = A1 + A2<br>C3 = A3<br>C4 = A1 + A2 +A3 + A4<br>C5 = A5<br>C6 = A5 + A6<br>C7 = A7<br>C8 = A1 + A2 + A3 + A4 + A5 + A6 + A7 + A8<br>…</p></blockquote></li><li><p>关键操作</p><ol><li>获取前缀和：通过二进制拆分获取所需下标。比如13的前缀和，13的二进制为1101，根据末尾的1获取数，每次抹去最后一个1。得到三个值1101(13,管辖2^0=1个数)、1100(12,管辖2^2=4个数)和1000(8,管辖2^3=8个数)，因此Sum(0~13) = C8 + C12 + C13。因此单次查询复杂度为O(logn)</li><li>单点修改：必须修改每个包含修改值的C元素，相当于查询的逆过程。以6为例，6的二进制值为0110，在末尾1处加1，得到1000(8)；再在末尾1处加1，得到10000(16)，完成，共需修改6、8、16处节点的值。因此单次修改复杂度也为O(logn)</li></ol></li><li><p>实现代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 求某个数的二进制表示中最低的一位1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 查询1~x的前缀和</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; c)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (x) &#123;</span><br><span class="line">    ans += c[x];</span><br><span class="line">    x -= lowbit(x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 对Ax原值基础上加上一个值v</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; c)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (x &lt; c.<span class="built_in">size</span>()) &#123;</span><br><span class="line">    c[x] += v;</span><br><span class="line">    x += lowbit(x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>扩展：区间修改</p><blockquote><p>比如将C区间[3, 6]的每个数都加上5，只需对C3加5，C7减5，因为C[3, 6]被C3影响，而C7~Cn受到C7和C3的共同影响，结果不变</p></blockquote></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BasicSkill </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring基础</title>
      <link href="/2020/12/03/SpringSeries/Spring/Spring%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/12/03/SpringSeries/Spring/Spring%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><ul><li><a href="#Spring概述">Spring概述</a></li><li><a href="#IOC控制反转">IOC控制反转</a></li><li><a href="#AOP面向切面编程">AOP面向切面编程</a></li><li><a href="#事务操作">事务操作</a></li><li><a href="#Spring5新功能">Spring5新功能</a></li></ul><a id="more"></a><h2 id="Spring概述"><a href="#Spring概述" class="headerlink" title="Spring概述"></a>Spring概述</h2><ul><li>Spring是什么：Spring是于2003年兴起的一个轻量级的Java开发框架，是为了解决企业应用开发的复杂性而创建的。核心是<strong>控制反转(IoC)</strong>和<strong>面向切面编程(AOP)</strong></li><li>Spring的优点：<ol><li>轻量：Spring框架使用的jar都比较小，核心功能的所需的jar总共在3M左右。框架运行占用的资源少，运行效率高。不依赖其他jar</li><li>解耦合：提供了Ioc控制反转，由容器管理对象和对象的依赖关系。原来在程序代码中的对象创建方式现在由容器完成。对象之间的依赖解耦合</li><li>AOP编程的支持</li><li>方便集成各种优秀框架</li></ol></li><li>Spring体系结构：<br><img src="Spring%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="Spring体系结构示意图"><br>Spring由20多个模块组成，可以分为数据访问/集成(Data Access/Integration)、Web、面向切面编程(AOP, Aspects)、提供JVM的代理(Instrumentation)、消息发送(Messaging)、核心容器(Core Container)和测试(Test)</li></ul><h2 id="IOC控制反转"><a href="#IOC控制反转" class="headerlink" title="IOC控制反转"></a>IOC控制反转</h2><ul><li><p>Ioc介绍：<br>控制反转(IoC, Inversion of Control)是一个概念、一种思想。指<strong>将传统上由程序代码直接操控的对象控制权交给容器，通过容器来实现对象的装配和管理</strong>。控制反转就是将对象控制权的转移，从程序代码本身反转到了外部容器。通过容器实现对象的创建、属性赋值、依赖的管理<br>IoC的实现方式多种多样，当前比较流行的实现方式是依赖注入(DI)<br><strong>依赖</strong>：A类中含有B的实例，在A实例中调用B实例的方法完成功能，即类A对类B存在依赖<br><strong>依赖注入(DI, Dependency Injection)</strong>：指程序运行过程中若需要调用另一个对象协助时，无须在代码中创建被调用者，而是依赖于外部容器，由外部容器创建后传递给程序<br>Spring使用依赖注入(DI)实现IoC。Spring的依赖注入对调用者与被调用者几乎没有任何要求，完全支持对象之间依赖关系的管理。Spring容器是一个超级工厂，负责创建、管理所有的Java对象，这些Java对象被称为Bean。Spring容器管理着容器中Bean之间的依赖关系</p></li><li><p>IOC实现基本介绍：</p><ul><li>IOC思想基于IOC容器实现，IOC容器底层就是对象工厂</li><li>Spring提供IOC容器实现的两种方式(两种接口)：<ol><li>BeanFactory：IOC容器的基本实现，是Spring内部的使用接口，不提供开发人员进行使用。加载配置文件时不会创建对象，在获取对象(使用)才去创建对象</li><li>ApplicationContext：BeanFactory接口的子接口，提供更多更强大的功能，一般由开发人员进行使用。加载配置文件时候就会把在配置文件对象进行创建<br> <img src="BeanFactory%E7%BB%A7%E6%89%BF%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="BeanFactory继承结构图"></li></ol></li><li>具体ApplicationContext容器创建方式：<ol><li>基于xml：<code>ApplicationContext context = new ClassPathXmlApplicationContext(&quot;chapter2/bean1.xml&quot;);</code></li><li>基于注解：<code>ApplicationContext context = new AnnotationConfigApplicationContext(SpringConfig.class);</code></li></ol></li><li>ApplicationContext容器对象的装配时机：在容器对象初始化时，将其中的所有对象一次性全部装配好。以后代码中使用到这些对象只需从内存中直接获取即可。执行效率较高，但内存占用较多</li></ul></li><li><p>IOC管理Bean</p><ul><li><p>什么是Bean管理：</p><ol><li>Spring创建对象</li><li>Spring注入属性</li></ol></li><li><p>Bean管理的两种方式：</p><ul><li><p>基于xml：</p><ul><li><p>基础语法：<code>&lt;bean id=&quot;user&quot; class=&quot;chapter1.User&quot;/&gt;</code></p><ol><li>bean标签用于实现对象的创建</li><li>常用属性有：<ol><li>id：唯一标识</li><li>class：类全路径(包类路径)，只能是类，不能是接口</li></ol></li><li>默认通过反射调用无参构造器创建对象</li></ol></li><li><p>指定多个配置文件：</p><blockquote><p>多个配置文件中有一个总文件，总配置文件将各其它子文件通过&lt;import/&gt;引入。在Java代码中只需要使用总配置文件对容器进行初始化即可<br>也可使用通配符<em>，此时要求父配置文件名不能满足</em>所能匹配的格式，否则将出现循环递归包含</p></blockquote></li><li><p>属性注入方式：</p><ol><li><p>通过setter注入(最常用)：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book"</span> <span class="attr">class</span>=<span class="string">"chapter1.Book"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- bean对应类需要有对应的setter方法 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 引用类型通过ref指定引用关系,ref值为某bean的id值 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"bName"</span> <span class="attr">value</span>=<span class="string">"深入理解JVM"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"bAuthor"</span> <span class="attr">value</span>=<span class="string">"周志明"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>通过有参构造函数注入(一般不用)：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book"</span> <span class="attr">class</span>=<span class="string">"chapter1.Book"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- bean对应类需要有对应的有参构造器 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- index指明对应构造器的第几个参数,从0开始,一般不用,顺序与构造器声明顺序一致 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"bName"</span> <span class="attr">value</span>=<span class="string">"深入理解JVM"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"bAuthor"</span> <span class="attr">value</span>=<span class="string">"周志明"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>通过p名称空间注入(也是调用setter方法,方式不同,一般不用)：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加p名称空间 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book"</span> <span class="attr">class</span>=<span class="string">"chapter1.Book"</span> <span class="attr">p:bName</span>=<span class="string">"深入理解JVM"</span> <span class="attr">p:bAuthor</span>=<span class="string">"周志明"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>自动装配：根据指定装配规则(属性名称或者属性类型)，Spring自动将匹配的属性值进行注入</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  bean标签属性autowire配置自动装配,常用的两个配置：</span></span><br><span class="line"><span class="comment">  byName：根据属性名称注入,注入属性的bean的id值和属性名称一样</span></span><br><span class="line"><span class="comment">  byType：根据属性类型注入(要么与属性类型相同,要么有继承或实现的关系,但同源的bean只能有一个,多于一个容器就不知道如何匹配)</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"employee"</span> <span class="attr">class</span>=<span class="string">"chapter1.Employee"</span> <span class="attr">autowire</span>=<span class="string">"byName/byType"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"SOBXiong"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"23"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dept"</span> <span class="attr">class</span>=<span class="string">"chapter1.Department"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"独栋小别墅"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"90001"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>导入外部属性文件(properties文件)：</p><p> 传统声明方式</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/test"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 导入properties文件方式</p> <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">prop.driverClass</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">prop.url</span>=<span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line"><span class="meta">prop.userName</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">prop.password</span>=<span class="string">password</span></span><br></pre></td></tr></table></figure> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入外部属性文件(需要引入context名称空间) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接池配置(引入properties文件) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;prop.driverClass&#125;"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;prop.url&#125;"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;prop.userName&#125;"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;prop.password&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>注入属性类型：</p><ul><li><p>字面量：</p><ol><li><p>null值</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>属性值包含特殊字符</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address2"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 使用&lt;![CDATA[]]转义 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[&lt;&lt;南京&gt;&gt;]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 使用&amp;lt;/&amp;gt;代表'&lt;'和'&gt;' --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;value&gt;&amp;lt;&amp;lt;南京&amp;gt;&amp;gt;&lt;/value&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>外部bean：</p><ol><li><p>引用外部bean</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"chapter1.Person"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"SOBXiong"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"book"</span> <span class="attr">ref</span>=<span class="string">"book1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book1"</span> <span class="attr">class</span>=<span class="string">"chapter1.Book"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"BName"</span> <span class="attr">value</span>=<span class="string">"并发编程实战"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"BAuthor"</span> <span class="attr">value</span>=<span class="string">"Doug Li"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>内部bean赋值</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"chapter1.Person"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"SOBXiong"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"book"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"chapter1.Book"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"BName"</span> <span class="attr">value</span>=<span class="string">"并发编程实战"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"BAuthor"</span> <span class="attr">value</span>=<span class="string">"Doug Li"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>级联赋值</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引用设置重复属性会覆盖原来外部bean设置的属性值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"chapter1.Person"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"SOBXiong"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"book"</span> <span class="attr">ref</span>=<span class="string">"book1"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"book.BAuthor"</span> <span class="attr">value</span>=<span class="string">"Doug Li"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"book.BName"</span> <span class="attr">value</span>=<span class="string">"并发编程实战1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book1"</span> <span class="attr">class</span>=<span class="string">"chapter1.Book"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"BName"</span> <span class="attr">value</span>=<span class="string">"并发编程实战"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>数组/集合类：</p><ol><li><p>使用内置标签：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ref同理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"chapter1.Student"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 注入数组 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"arrayValue"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>array01<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>array02<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>array03<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 注入List --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"listValue"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>list01<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>list02<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>list03<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 注入Map --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapValue"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"mapKey01"</span> <span class="attr">value</span>=<span class="string">"mapValue01"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"mapKey02"</span> <span class="attr">value</span>=<span class="string">"mapValue02"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"mapKey03"</span> <span class="attr">value</span>=<span class="string">"mapValue03"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 注入Set --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"setValue"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>setValue01<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>setValue02<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>setValue03<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用util名称空间</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用util标签注入list集合 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">"testList"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>utilList01<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>utilList02<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>utilList03<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student1"</span> <span class="attr">class</span>=<span class="string">"chapter1.Student"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"listValue"</span> <span class="attr">ref</span>=<span class="string">"testList"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ul></li></ul></li><li><p>基于注解：</p><ul><li><p>Spring针对Bean创建对象的注解类型(功能是一样的,名称只是规范和区别作用)：</p><ol><li>@Component</li><li>@Service</li><li>@Controller</li><li>@Repository</li></ol></li><li><p>基于注解方式实现对象创建(引入spring-aop依赖)：</p><ul><li><p>开启组件扫描</p><ol><li><p>xml方式：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  1、可以使用多个context:component-scan标签指定不同的包路径</span></span><br><span class="line"><span class="comment">  2、指定base-package的多个值可以使用分隔符(逗号、分号或空格均可,但不建议空格)</span></span><br><span class="line"><span class="comment">  3、base-package代表指定到父包名,容器启动会扫描包及其子包中的注解</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"chapter2"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置类注解(替代xml配置文件)方式：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 作为配置类,替代xml</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = &#123;<span class="string">"chapter2"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>组件扫描规则设置：</p><ol><li>use-default-filters：是否使用默认filter(扫描@Component、@Service、@Controller、@Repository,默认true)，为true时不能和exclude-filter配合使用</li><li>include-filter：设置扫描哪些内容</li><li>exclude-filter：设置不扫描哪些内容</li></ol></li><li><p>创建Bean类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// value属性值表示bean的id,可省略,默认是类名的首字母小写</span></span><br><span class="line"><span class="meta">@Component</span>(value = <span class="string">"userService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"UserService method1() ~~~"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>属性注入(注解在field字段上,无需setter)：</p><ol><li>@Autowired：根据属性类型进行自动装配(required属性可指定是否忽略注入失败,默认true)</li><li>@Qualifier：根据名称进行注入，需要和@Autowired一起使用</li><li>@Resource：默认根据名称注入，可通过value和name属性指定注入规则(可以加到setter()上)</li><li>@Value：注入普通类型属性，常量/配置文件中的值(可以加到setter()上)</li></ol></li></ul></li></ul></li></ul></li><li><p>Bean的类型：</p><ol><li><p>普通bean：在配置文件中定义的bean类型就是返回类型</p></li><li><p>工厂bean(FactoryBean)：在配置文件定义的bean类型可以和返回类型不一样</p><ul><li><p>工厂bean创建的步骤：</p><ol><li>自定义类实现接口FactoryBean，作为工厂bean</li><li>实现接口里面的方法，在实现的方法中定义返回的bean类型</li><li>在xml中定义</li></ol></li><li><p>具体案例：</p><p><code>自定义工厂bean</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBeanFactory</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">Course</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// 返回Course对象</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Course <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Course course = <span class="keyword">new</span> Course();</span><br><span class="line">    course.setId(<span class="number">1L</span>);</span><br><span class="line">    course.setName(<span class="string">"分布式系统"</span>);</span><br><span class="line">    <span class="keyword">return</span> course;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123; <span class="keyword">return</span> Course<span class="class">.<span class="keyword">class</span></span>; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">false</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Spring的xml配置文件</code><br><code>&lt;bean id=&quot;testBeanFactory&quot; class=&quot;chapter1.TestBeanFactory&quot;/&gt;</code></p></li></ul></li></ol></li><li><p>Bean的作用域</p><ol><li>Singleton：单实例，Spring默认的Bean作用域；加载Spring配置文件时就会创建单实例对象</li><li>Prototype：多实例，在调用getBean()方法时创建多实例对象</li></ol></li><li><p>Bean的生命周期</p><ul><li><p>生命周期介绍：从对象创建到销毁的过程</p></li><li><p>具体生命周期过程：</p><ol><li>通过构造器创建bean实例(无参数构造)</li><li>为bean的属性设置值或对其他bean的引用(调用setter方法)</li><li>调用bean的初始化方法(需要配置初始化方法)</li><li>bean使用(对象获取到并使用)</li><li>当容器关闭时候，调用bean的销毁的方法(需要配置销毁方法)</li></ol></li><li><p>代码演示：</p><p>xml配置如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"order"</span> <span class="attr">class</span>=<span class="string">"chapter1.Order"</span> <span class="attr">init-method</span>=<span class="string">"initMethod"</span> <span class="attr">destroy-method</span>=<span class="string">"destroyMethod"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"testOrder"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Java代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Order() ~~~"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    System.out.println(<span class="string">"setName"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"initMethod() ~~~"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroyMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"destroyMethod() ~~~"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"chapter1/bean3.xml"</span>);</span><br><span class="line">  Order order = context.getBean(<span class="string">"order"</span>, Order<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  System.out.println(<span class="string">"Get order bean ~~~"</span>);</span><br><span class="line">  System.out.println(<span class="string">"order = "</span> + order);</span><br><span class="line">  <span class="comment">// 显式关闭容器对象,让bean实例销毁,否则不会触发destroyMethod</span></span><br><span class="line">  ((ClassPathXmlApplicationContext) context).close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Order() ~~~</span><br><span class="line">setName</span><br><span class="line">initMethod() ~~~</span><br><span class="line">Get order bean ~~~</span><br><span class="line">order = chapter1.Order@dd0c991</span><br><span class="line">destroyMethod() ~~~</span><br></pre></td></tr></table></figure></li><li><p>Bean的后置处理器对Bean生命周期的影响：</p><ol><li>通过构造器创建bean实例(无参数构造)</li><li>为bean的属性设置值或对其他bean的引用(调用setter方法)</li><li><strong>将bean实例传递给bean的后置处理器，执行postProcessBeforeInitialization()方法</strong></li><li>调用bean的初始化方法(需要配置初始化方法)</li><li><strong>将bean实例传递给bean的后置处理器，执行postProcessAfterInitialization()方法</strong></li><li>bean使用(对象获取到并使用)</li><li>当容器关闭时候，调用bean的销毁的方法(需要配置销毁方法)</li></ol></li><li><p>代码演示(基于上个例子)：<br>增加的xml配置如下<br><code>&lt;bean id=&quot;testBeanPostProcessor&quot; class=&quot;chapter1.TestBeanPostProcessor&quot;/&gt;</code><br>增加的java代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"postProcessBeforeInitialization() ~~~ "</span> + beanName + <span class="string">" , "</span> + bean);</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"postProcessAfterInitialization() ~~~ "</span> + beanName + <span class="string">" , "</span> + bean);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Order() ~~~</span><br><span class="line">setName</span><br><span class="line">postProcessBeforeInitialization() ~~~ order , chapter1.Order@5609159b</span><br><span class="line">initMethod() ~~~</span><br><span class="line">postProcessAfterInitialization() ~~~ order , chapter1.Order@5609159b</span><br><span class="line">Get order bean ~~~</span><br><span class="line">order = chapter1.Order@5609159b</span><br><span class="line">destroyMethod() ~~~</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="AOP面向切面编程"><a href="#AOP面向切面编程" class="headerlink" title="AOP面向切面编程"></a>AOP面向切面编程</h2><ul><li><p>介绍：AOP(Aspect Oriented Programming)意为面向切面编程。利用AOP可以对业务逻辑的各个部分进行隔离，从而使业务逻辑各部分之间的耦合度降低，提高程序的可重用性，提高开发的效率。AOP可以将交叉业务逻辑封装成切面，利用将切面织入到主业务逻辑中。所谓交叉业务逻辑是指通用的、与主业务逻辑无关的代码，如安全检查、事务、日志、缓存等</p></li><li><p>底层原理：动态代理</p><ol><li><p>存在接口：使用JDK动态代理(创建接口实现类代理对象,增强类的方法)</p><p> 案例：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  调用Proxy类的newProxyInstance()方法返回代理对象</span></span><br><span class="line"><span class="comment">  public static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</span></span><br><span class="line"><span class="comment">  参数解释如下：</span></span><br><span class="line"><span class="comment">    loader：类加载器</span></span><br><span class="line"><span class="comment">    interfaces：增强方法所在的类实现的接口,支持多接口</span></span><br><span class="line"><span class="comment">    InvocationHandler：创建代理对象,增强功能的主要逻辑</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  UserDaoImpl impl = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">  UserDao userDao = (UserDao) Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(),</span><br><span class="line">      <span class="keyword">new</span> Class[]&#123;UserDao<span class="class">.<span class="keyword">class</span>&#125;, (<span class="title">proxy</span>, <span class="title">method</span>, <span class="title">args</span>) -&gt; </span>&#123;</span><br><span class="line">        log.info(<span class="string">"Before method: &#123;&#125; , args: &#123;&#125;"</span>, method.getName(), Arrays.toString(args));</span><br><span class="line">        Object res = method.invoke(impl, args);</span><br><span class="line">        log.info(<span class="string">"After method return: &#123;&#125;"</span>, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">      &#125;);</span><br><span class="line">  userDao.add(<span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line">  log.info(<span class="string">"UserDao: &#123;&#125;"</span>, userDao);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 打印结果：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2020-12-05 20:22:03.759 [main] INFO  chapter3.ProxyTest - Before method: add , args: [5, 10]</span><br><span class="line">2020-12-05 20:22:03.762 [main] INFO  chapter3.ProxyTest - After method return: 15</span><br><span class="line">2020-12-05 20:22:03.763 [main] INFO  chapter3.ProxyTest - Before method: toString , args: null</span><br><span class="line">2020-12-05 20:22:03.763 [main] INFO  chapter3.ProxyTest - After method return: chapter3.UserDaoImpl@4b44655e</span><br><span class="line">2020-12-05 20:22:03.763 [main] INFO  chapter3.ProxyTest - UserDao: chapter3.UserDaoImpl@4b44655e</span><br></pre></td></tr></table></figure></li><li><p>不存在接口：使用Cglib动态代理(创建子类的代理对象,增强类的方法)</p></li></ol></li><li><p>AOP中的术语：</p><ol><li>连接点：指可以被切面织入的具体方法。通常业务接口中的方法均为连接点</li><li>切入点：指声明的一个或多个连接点的集合。被标记为final的方法不能作为连接点与切入点</li><li>通知(增强)：表示切面的执行时间，也叫增强。通知定义了增强代码切入到目标代码的时间点。通知类型不同，切入时间不同。<strong>切入点定义切入的位置，通知定义切入的时间</strong></li><li>切面：切面泛指交叉业务逻辑。实际就是对主业务逻辑的一种增强</li><li>目标对象：指将要被增强的对象。即包含主业务逻辑的类的对象</li></ol></li><li><p>Spring中使用AOP</p><ul><li><p>基本介绍：Spring底层使用到AspectJ实现AOP功能。Spring框架一般也是基于AspectJ提供AOP功能</p></li><li><p>相关依赖：Spring-aspects(包含aspectj)</p></li><li><p>切入点表达式：</p><ul><li><p>作用：对哪个类的那个方法进行增强</p></li><li><p>语法结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(modifiers-pattern? ret-type-pattern declaring-type-pattern?name-pattern(param-pattern) throws-pattern?)</span><br></pre></td></tr></table></figure><blockquote><p>modifiers-pattern：访问权限类型<br>ret-type-pattern：返回值类型<br>declaring-type-pattern：包名类名<br>name-pattern(param-pattern)：方法名(参数类型和参数个数)<br>throws-pattern：抛出异常类型<br>‘?’表示可选的部分<br>总体可表示为：execution(访问权限 方法返回值 方法声明(参数) 异常类型)</p></blockquote><p>涉及到的符号解释：</p><table><thead><tr><th>符号</th><th>意义</th></tr></thead><tbody><tr><td>*</td><td>0至多个任意字符</td></tr><tr><td>..</td><td>用在方法参数中表示任意多个参数;用在包名后表示当前包及其子包路径</td></tr><tr><td>+</td><td>用在类名后表示当前类及其子类;用在接口后表示当前接口及其实类</td></tr></tbody></table></li><li><p>具体例子：execution(* com.xiong.dao.DocService.*(..))</p></li></ul></li><li><p>具体使用：</p><ul><li><p>在业务类上声明@Component注解让其加入Spring容器</p></li><li><p>创建增强类(编写增强逻辑)</p><ol><li>声明@Component加入Spring容器</li><li>声明@Aspect需要生成代理对象</li><li>配置不同类型的通知(使用切入点表达式)</li></ol><blockquote><p>可选项，有多个增强类对同一个方法进行增强时可以声明@Order(int priority)设置增强类优先级，数值类型越小优先级越高</p></blockquote><p>注解配置切入点案例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserProxy</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 前置通知,可有JoinPoint参数</span></span><br><span class="line">  <span class="meta">@Before</span>(value = <span class="string">"execution(* chapter3.User.add(..))"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodBefore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"UserProxy methodBefore() ~~~"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 后置通知(返回通知),注解中有returning属性用于接受目标方法返回值</span></span><br><span class="line">  <span class="meta">@AfterReturning</span>(value = <span class="string">"execution(* chapter3.User.add(..))"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodAfterReturning</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"UserProxy methodAfterReturning() ~~~"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 最终通知</span></span><br><span class="line">  <span class="meta">@After</span>(value = <span class="string">"execution(* chapter3.User.add(..))"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodAfter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"UserProxy methodAfter() ~~~"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 异常通知,注解中有throwing属性用于接受抛出的异常</span></span><br><span class="line">  <span class="meta">@AfterThrowing</span>(value = <span class="string">"execution(* chapter3.User.add(..))"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodAfterThrowing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"UserProxy methodAfterThrowing() ~~~"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 环绕通知</span></span><br><span class="line">  <span class="meta">@Around</span>(value = <span class="string">"execution(* chapter3.User.add(..))"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">methodAround</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    log.info(<span class="string">"UserProxy methodAround() ~~~"</span>);</span><br><span class="line">    log.info(<span class="string">"Before jointPoint invoke ~~~"</span>);</span><br><span class="line">    <span class="comment">// 被增强的方法执行</span></span><br><span class="line">    Object ans = proceedingJoinPoint.proceed();</span><br><span class="line">    log.info(<span class="string">"After jointPoint invoke ~~~"</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽取相同的切入点进行化简：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽取相同的切入点</span></span><br><span class="line"><span class="meta">@Pointcut</span>(value = <span class="string">"execution(* chapter3.User.add(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointcutMethod</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span>(value = <span class="string">"pointcutMethod()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointcutBefore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  log.info(<span class="string">"UserProxy pointcutBefore() ~~~"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xml配置切入点案例如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置aop增强 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置切入点 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* chapter3.Book.buy())"</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置切面 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"bookProxy"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 增强作用在具体的方法上 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"beforeMethod"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置Spring环境(xml/注解)</p><ol><li><p>基于xml：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启组件自动扫描 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"chapter3"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启Aspect生成代理对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>基于注解：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = &#123;<span class="string">"chapter3"</span>&#125;)</span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span>(proxyTargetClass = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AspectConfig</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul></li></ul></li></ul><h2 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h2><ul><li><p>基础介绍：事务是数据库中的概念(一组操作要么全部成功,要么全部失败)，在Dao层，但一般将事务提升到Service业务层</p></li><li><p>四个特性(ACID)：原子性、一致性、隔离性、持久性</p></li><li><p>Spring中的事务管理：</p><ol><li><p>编程式事务管理</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  transaction.begin();</span><br><span class="line">  doSomething();</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">  doSomethingAfterException(e);</span><br><span class="line">  transaction.rollback();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">  transaction.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>声明式事务管理</p><blockquote><p>推荐使用，底层使用AOP</p></blockquote></li></ol></li><li><p>Spring事务管理类：</p><ul><li>基类为PlatformTransactionManager接口，定义了事务的提交、回滚以及获取事务的状态信息操作<br><img src="PlatformTransactionManager%E6%8E%A5%E5%8F%A3%E6%96%B9%E6%B3%95.png" alt="PlatformTransactionManager接口方法"><br><img src="Spring%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E7%B1%BB%E7%BB%A7%E6%89%BF%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="Spring事务管理类继承结构图"></li><li>两个常用的实现类：<ol><li><strong>DataSourceTransactionManager</strong>：使用JDBC或MyBatis进行数据库操作时使用</li><li><strong>HibernateTransactionManager</strong>：使用Hibernate(JPA)进行持久化数据时使用</li></ol></li><li>Spring的回滚方式：<strong>默认发生运行时异常和error时回滚，发生受查(编译)异常时提交</strong>。对于受查异常也可以手工设置其回滚方式<blockquote><p>Throwable类是Java语言中所有错误或异常的超类。只有当对象是此类(或其子类之一)的实例时，才能通过Java虚拟机或者throw语句抛出<br>Error是程序在运行过程中出现的无法处理的错误，比如OutOfMemoryError、ThreadDeath、NoSuchMethodError等。当这些错误发生时，程序是无法处理(捕获或抛出)的，JVM一般会终止线程<br>程序在编译和运行时出现的另一类错误称之为异常，它是JVM通知程序员的一种方式。通过这种方式，让程序员知道已经或可能出现错误，要求程序员对其进行处理。异常分为运行时异常与受查异常：<br>运行时异常，是RuntimeException类或其子类，即只有在运行时才出现的异常。如NullPointerException、ArrayIndexOutOfBoundsException、IllegalArgumentException等均属于运行时异常。这些异常由JVM抛出，在编译时不要求必须处理(捕获或抛出)。只要代码编写足够仔细，程序足够健壮，运行时异常是可以避免的<br>受查异常，也叫编译时异常(即在代码编写时要求必须捕获或抛出的异常)。若不处理，则无法通过编译。如SQLException、ClassNotFoundException和IOException等都属于受查异常<br>RuntimeException及其子类以外的异常均属于受查异常。自定义的Exception的子类(即用户自定义的异常)也属受查异常。在定义异常时，只要未明确声明定义的为RuntimeException的子类，那么定义的就是受查异常</p></blockquote></li></ul></li><li><p>事务管理操作步骤：</p><ul><li><p>声明需要事务操作的方法/类：</p><ol><li><p>基于注解方式(声明@Transactional注解)：</p><blockquote><p>@Transactional用在方法上：只能用于public方法上。对于其他非public方法，如果声明了注解@Transactional，虽然Spring不会报错，但不会将指定事务织入到该方法中。Spring会忽略掉所有非public方法上的@Transaction注解<br>@Transactional用在在类上：则表示该类上所有的方法均将在执行时织入事务</p></blockquote> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED, rollbackFor = Throwable<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">void</span> <span class="title">transferAccount</span>(<span class="title">String</span> <span class="title">fromUsername</span>, <span class="title">String</span> <span class="title">toUsername</span>, <span class="title">Double</span> <span class="title">money</span>) </span>&#123;</span><br><span class="line">  accountDao.reduceMoney(fromUsername, money);</span><br><span class="line">  <span class="comment">// int i = 10 / 0;</span></span><br><span class="line">  accountDao.addMoney(toUsername, money);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>基于xml配置方式：</p><ol><li><p>配置通知：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置通知 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txadvice"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置事务参数 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"transferAccount"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置切入点和切面：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置事务切入点和切面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置切入点 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pt"</span> <span class="attr">expression</span>=<span class="string">"execution(* chapter5.AccountService.*(..))"</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置切面 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txadvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol></li><li><p>配置事务管理器</p><ol><li><p>基于注解方式(此方式只支持注解方式声明)：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 配置类</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = <span class="string">"chapter5"</span>) <span class="comment">// 配置包扫描</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span> <span class="comment">// 开启事务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringAnnoConfig</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 创建数据库连接池</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> DruidDataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    dataSource.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">    dataSource.setUrl(<span class="string">"jdbc:mysql:///test"</span>);</span><br><span class="line">    dataSource.setUsername(<span class="string">"root"</span>);</span><br><span class="line">    dataSource.setPassword(<span class="string">"password"</span>);</span><br><span class="line">    <span class="keyword">return</span> dataSource;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建JdbcTemplate对象</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">jdbcTemplate</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 会在ioc容器中根据类型找到dataSource</span></span><br><span class="line">    JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate();</span><br><span class="line">    <span class="comment">// 注入dataSource</span></span><br><span class="line">    jdbcTemplate.setDataSource(dataSource);</span><br><span class="line">    <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建事务管理器</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">transactionManager</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">    DataSourceTransactionManager transactionManager = <span class="keyword">new</span> DataSourceTransactionManager();</span><br><span class="line">    transactionManager.setDataSource(dataSource);</span><br><span class="line">    <span class="keyword">return</span> transactionManager;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>基于xml方式(是否声明支持注解根据声明事务的方式)</p><ol><li><p>配置基于注解的声明方式：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 事务管理器tx --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 注入dataSource --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启事务注解,需要引入tx命名空间 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开始包扫描 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"chapter5"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置基于配置的声明方式：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 事务管理器tx --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 注入dataSource --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ul></li><li><p>事务注解相关属性介绍：</p><ol><li><p>propagation：事务传播行为(处于不同事务中的方法在相互调用时,执行期间事务的维护情况)，默认REQUIRED</p><table><thead><tr><th>传播属性</th><th>描述</th></tr></thead><tbody><tr><td><strong>PROPAGATION_REQUIRED</strong></td><td>Spring默认的事务传播行为;如果存在当前事务则用当前事务;否则就新建一个事务</td></tr><tr><td><strong>PROPAGATION_REQUIRES_NEW</strong></td><td>如果当前存在事务把当前事务挂起,开启一个新事务,新事务执行完毕后唤醒之前挂起的事务继续执行。如果不存在当前事务则新建一个事务</td></tr><tr><td>PROPAGATION_SUPPORTS</td><td>支持当前事务,如果当前没有事务就以非事务方式执行</td></tr><tr><td>PROPAGATION_NOT_SUPPORTED</td><td>以非事务方式执行操作,如果当前存在事务就把当前事务挂起</td></tr><tr><td>PROPAGATION_MANDATORY</td><td>支持当前事务,如果当前没有事务就抛出异常</td></tr><tr><td>PROPAGATION_NEVER</td><td>以非事务方式执行,如果当前存在事务则抛出异常</td></tr><tr><td>PROPAGATION_NESTED</td><td>如果当前存在事务则在当前事务的嵌套事务内执行。否则启动一个新的事务并在自己的事务内运行</td></tr></tbody></table></li><li><p>ioslation：事务隔离级别，默认DEFAULT</p><p> 存在三种读问题：</p><table><thead><tr><th>读问题</th><th>描述</th></tr></thead><tbody><tr><td>脏读</td><td>一个未提交事务读取到另一个未提交事务的数据</td></tr><tr><td>不可重复读</td><td>一个未提交事务读取到另一提交事务修改数据</td></tr><tr><td>幻读</td><td>一个未提交事务读取到另一提交事务添加数据</td></tr></tbody></table><p> 提供的四种隔离级别：</p><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td><strong>DEFAULT</strong></td><td>采用数据库默认的事务隔离级别</td><td>\</td><td>\</td></tr><tr><td>READ_UNCOMMITTED(读未提交)</td><td>有</td><td>有</td><td>有</td></tr><tr><td>READ_COMMITTED(读已提交)</td><td>无</td><td>有</td><td>有</td></tr><tr><td>REPEATABLE_READ(可重复读)</td><td>无</td><td>无</td><td>有</td></tr><tr><td>SERIALIZABLE(串行化)</td><td>无</td><td>无</td><td>无</td></tr></tbody></table><blockquote><p>MySQL默认隔离级别为REPEATABLE_READ,Oracle默认为READ_COMMITTED</p></blockquote></li><li><p>timeout：用于设置本操作与数据库连接的超时时限</p><blockquote><p>单位为秒，默认-1(即没有时限)</p></blockquote></li><li><p>readOnly：用于设置该方法对数据库的操作是否是只读的，默认false</p></li><li><p>rollbackFor：指定需要回滚的异常类</p><blockquote><p>类型为Class[]，默认值为空数组。若只有一个异常类时，可以不使用数组</p></blockquote></li><li><p>rollbackForClassName：指定需要回滚的异常类类名</p><blockquote><p>类型为String[]，默认值为空数组。若只有一个异常类时，可以不使用数组</p></blockquote></li><li><p>noRollbackFor：指定不需要回滚的异常类</p></li><li><p>noRollbackForClassName：指定不需要回滚的异常类类名</p></li></ol></li></ul><h2 id="Spring5新功能"><a href="#Spring5新功能" class="headerlink" title="Spring5新功能"></a>Spring5新功能</h2>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud基础</title>
      <link href="/2020/11/18/SpringSeries/SpringCloud/SpringCloud%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/11/18/SpringSeries/SpringCloud/SpringCloud%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><ul><li><a href="#SpringCloud概述">SpringCloud概述</a></li><li><a href="#Eureka注册中心介绍">Eureka注册中心介绍</a></li><li><a href="#Eureka停更后的替换组件">Eureka停更后的替换组件</a></li><li><a href="#Ribbon负载均衡介绍">Ribbon负载均衡介绍</a></li></ul><a id="more"></a><h2 id="SpringCloud概述"><a href="#SpringCloud概述" class="headerlink" title="SpringCloud概述"></a>SpringCloud概述</h2><ul><li>微服务是什么：微服务架构下的一整套解决方案<br><img src="%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E5%86%85%E5%AE%B9%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="微服务解决方案内容示意图"></li><li>SpringCloud是什么：分布式微服务架构的一站式解决方案，是多种微服务架构落地技术的集合体，俗称微服务全家桶<br><img src="%E4%BA%AC%E4%B8%9C%E4%BF%83%E9%94%80%E6%9E%B6%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="京东促销架构示意图"><br><img src="%E4%BA%AC%E4%B8%9C%E7%89%A9%E6%B5%81%E6%9E%B6%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="京东物流架构示意图"><br><img src="%E9%98%BF%E9%87%8C%E6%9E%B6%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="阿里架构示意图"><br><img src="%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="基础服务微服务架构示意图"></li><li>SpringCloud版本<br>SpringCloud采用英国伦敦地铁站的名称来命名，并由地铁站名称字母A-Z依此类推的形式发布迭代版本<br>SpringCloud是由许多子项目组成的综合项目，各子项目有不同的发布节奏，为了管理SpringCloud与各子项目的版本依赖关系，发布了一个清单，其中包括了某个SpringCloud版对应的子项目版本。为了避免SpringCloud版本号与子项目版本号混淆，SpringCloud版采用了名称而非版本号命名，例如Angel、Brixton。当SpringCloud的发布内容积累到临界点或者一个重大BUG被解决后，会发布一个Service releases版本，俗称SRX版本，比如Greenwich.SR2就是SpringCloud发布的Greenwich版本的第二个SRX版本</li><li>SpringBoot和SpringCloud的版本约束<br>SpringBoot和SpringCloud的版本选择也不是任意的，而是应该参考官网的约束配置<br><img src="SpringBoot%E5%92%8CSpringCloud%E7%9A%84%E7%89%88%E6%9C%AC%E7%BA%A6%E6%9D%9F%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="SpringBoot和SpringCloud的版本约束示意图"><br>地址：<a href="https://spring.io/projects/spring-cloud#overview" target="_blank" rel="noopener">https://spring.io/projects/spring-cloud#overview</a><br>版本对应：<a href="https://start.spring.io/actuator/info" target="_blank" rel="noopener">https://start.spring.io/actuator/info</a></li><li>SpringCloud各种组件的停更/升级/替换<ol><li>停更的具体形式：<ol><li>被动修复Bugs</li><li>不再接受合并请求</li><li>不再发布新版本</li></ol></li><li>组件具体明细条目<ul><li>服务调用<ol><li>Eureka</li><li>Zookeeper</li><li>Consul</li><li>Nacos(推荐)</li></ol></li><li>服务调用<ol><li>Feign</li><li>OpenFeign(推荐)</li><li>Ribbon</li><li>LoadBalancer</li></ol></li><li>服务降级<ol><li>Hystrix</li><li>resilience4j</li><li>sentienl(推荐)</li></ol></li><li>服务网关<ol><li>Zuul</li><li>Zuul2</li><li>Gateway(推荐)</li></ol></li><li>服务配置<ol><li>Config</li><li>Nacos(推荐)</li></ol></li><li>服务总线<ol><li>Bus</li><li>Nacos(推荐)</li></ol></li></ul></li></ol></li><li>SpringCloud资料<br>官网文档：<a href="https://spring.io/projects/spring-cloud#learn" target="_blank" rel="noopener">https://spring.io/projects/spring-cloud#learn</a><br>SpringCloud中文文档：<a href="https://www.bookstack.cn/read/spring-cloud-docs/docs-index.md" target="_blank" rel="noopener">https://www.bookstack.cn/read/spring-cloud-docs/docs-index.md</a></li></ul><h2 id="Eureka注册中心介绍"><a href="#Eureka注册中心介绍" class="headerlink" title="Eureka注册中心介绍"></a>Eureka注册中心介绍</h2><ul><li><p>Eureka基础知识：</p><ol><li>什么是服务注册？<br>Eureka Server作为服务注册功能的服务器，它是服务注册中心，而系统中其他微服务，使用Eureka客户端连接到Eureka Server并维持心跳连接，这样系统维护人员就可以通过 Eureka Server来监控各个微服务是否正常运行<br>在服务注册与发现中有一个注册中心，服务器启动时，会把当前自己的服务器信息比如服务地址、通信地址等注册到注册中心上，另一方(消费者)以别名的方式在注册中心上获取实际的服务器通讯地址，然后再实现本地RPC调用远程RPC<br><img src="Eureka%E4%B8%8EDubbo%E6%9E%B6%E6%9E%84%E5%AF%B9%E6%AF%94%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="Eureka与Dubbo架构对比示意图"></li><li>Eureka的两个组件<ul><li>Eureka Server：提供服务注册服务。各个微服务节点通过配置启动后，会在 Eureka Server中进行注册，这样Eureka Server中的服务注册表中将会存储所有可用服务节点的信息</li><li>Eureka Client：通过注册中心进行访问。是一个Java客户端，用于简化与Eureka Server的交互，客户端也同时具备一个内置的、使用轮询负载算法的负载均衡器。在应用启动后，将会向Eureka Server发送心跳(默认周期30秒)。如果Eureka Server在多个心跳周期内没有接收到某个节点的心跳，Eureka Server将会从服务注册表中将这个服务节点移除(默认90秒)</li></ul></li></ol></li><li><p>Eureka工作原理：</p><ul><li>服务注册：将服务信息注册进注册中心</li><li>服务发现：从注册中心上获取服务信息</li><li>实质：存key服务命名，取value调用地址</li></ul></li><li><p>单机Eureka Server搭建(小口诀：建module,改pom,写yml,主启动)：</p><ol><li><p>导入依赖：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- eureka server --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改yml配置文件：</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment"># eureka服务端实例名称</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment"># false表示不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># false表示自己就是注册中心,职责是维护服务实例,并不需要去检索服务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment"># 设置与eureka server交互的地址;查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure></li><li><p>启动类上添加注解声明启动Eureka服务端</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServer7001Application</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SpringApplication.run(EurekaServer7001Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试(看到eureka服务页面)：<a href="http://localhost:7001/" target="_blank" rel="noopener">http://localhost:7001/</a></p></li></ol></li><li><p>Eureka Client搭建：</p><ol><li><p>导入依赖：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- eureka client --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改yml配置文件：</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment"># 表示是否将自己注册进Eureka Server,默认为true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 是否从EurekaServer抓取已有的注册信息,默认为true;</span></span><br><span class="line">    <span class="comment"># 单节点无所谓,集群必须设置为true才能配合ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br></pre></td></tr></table></figure></li><li><p>启动类上添加注解声明启动Eureka客户端</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderPayment8001Application</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SpringApplication.run(EurekaServer7001Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试：<a href="http://localhost:7001/" target="_blank" rel="noopener">http://localhost:7001/</a><br> 可以看到Instances中包含服务提供方<br> <img src="%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C1.png" alt="测试结果"></p></li></ol></li><li><p>集群Eureka配置</p><ul><li><p>背景：微服务RPC远程调用最核心就是高可用。假设注册中心只有一个，如果出现了故障，那么将会导致整个微服务不可用，所以需要搭建Eureka注册中心集群，实现负载均衡和故障容错</p></li><li><p>集群原理：相互注册、相互守望</p></li><li><p>前提：由于hostname不能重复，在本地hosts修改映射，将eureka7001.com、eureka7002.com都映射到localhost上</p></li><li><p>具体步骤：</p><ol><li><p>Eureka Server修改yml配置：</p><p> <code>EurekaServer7001配置</code></p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment"># eureka服务端实例名称</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7001.com</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment"># 表示不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># false表示自己就是注册中心,职责就是维护服务实例,无需检索服务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment"># 向另外的eureka服务注册,如果多个用,隔开</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7002.com:7002/eureka/</span></span><br></pre></td></tr></table></figure><p> <code>EurekaServer7002配置</code></p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7002</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment"># eureka服务端实例名称</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7002.com</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment"># 表示不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># false表示自己就是注册中心,职责就是维护服务实例,无需检索服务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment"># 向另外的eureka服务注册,</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br></pre></td></tr></table></figure></li><li><p>测试：<a href="http://eureka7001.com:7001" target="_blank" rel="noopener">http://eureka7001.com:7001</a>、<a href="http://eureka7002.com:7002" target="_blank" rel="noopener">http://eureka7002.com:7002</a><br> 分别发现另一方成为各自的DS Replicas<br> <img src="%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C2.png" alt="测试结果"></p></li></ol></li></ul></li><li><p>Eureka Client集群(服务)注册进Eureka集群</p><ul><li><p>背景：假设有两个微服务payment8001和payment8002需要注册进上面的Eureka集群</p></li><li><p>具体步骤：</p><ol><li><p>Eureka Client集群(服务)修改yml配置：</p><p> <code>Payment8001配置</code></p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># 服务名称,为了保证服务对外暴露的是同一个服务提供者,服务名要保持一致</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">provider-payment</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment"># 表示向注册中心注册自己,默认为true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 是否从EurekaServer抓取已有的注册信息,默认为true</span></span><br><span class="line">    <span class="comment"># 单节点无所谓,集群必须设置为true才能配合ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment"># 入驻地址,向eurekaServer注册,多个地址用','分割</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment"># 设置实例编号,用于区分</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">provider-payment-8001</span></span><br><span class="line">    <span class="comment"># 是否显示ip</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p> <code>Payment8002配置</code></p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8002</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># 服务名称,为了保证服务对外暴露的是同一个服务提供者,服务名要保持一致</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">provider-payment</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment"># 表示向注册中心注册自己,默认为true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 是否从EurekaServer抓取已有的注册信息,默认为true</span></span><br><span class="line">    <span class="comment"># 单节点无所谓,集群必须设置为true才能配合ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment"># 入驻地址,向eurekaServer注册,多个地址用','分割</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment"># 设置实例编号,用于区分</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">provider-payment-8001</span></span><br><span class="line">    <span class="comment"># 是否显示ip</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>测试：<a href="http://eureka7001.com:7001" target="_blank" rel="noopener">http://eureka7001.com:7001</a><br> 发现PAYMENT-SERVICE中两个服务提供者，分别为8001和8002<br> <img src="%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C3.png" alt="测试结果"></p></li></ol></li></ul></li><li><p>调用服务提供者</p><ul><li><p>背景：上述工作完成了服务提供者payment-provider集群注册进eureka集群中，此时需要有一个消费者微服务调用服务</p></li><li><p>具体步骤：</p><ol><li><p>导入依赖：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- eureka client --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写yml：</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consumer-order-80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment"># 将自己注册进EurekaServer,默认为true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 从EurekaServer抓取已有的注册信息,默认为true</span></span><br><span class="line">    <span class="comment"># 单节点无所谓,集群必须设置为true才能配合ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment"># defaultZone: http://eureka7001.com:7001/eureka/</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/</span></span><br></pre></td></tr></table></figure></li><li><p>主启动：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerOrder80Application</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SpringApplication.run(ConsumerOrder80Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>设置RestTemplate的负载均衡策略：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="comment">// 赋予RestTemplate负载均衡能力</span></span><br><span class="line">  <span class="comment">// 这是Ribbon的功能,Eureka默认自带Ribbon</span></span><br><span class="line">  <span class="meta">@LoadBalanced</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate(); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>具体消费端Controller：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/order"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 服务提供方的具体服务名,由eureka负责解析</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PAYMENT_URL = <span class="string">"http://PROVIDER-PAYMENT/payment"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> LoadBalancer loadBalancer;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/payment/add"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Result <span class="title">add</span><span class="params">(Payment payment)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> restTemplate.postForObject(PAYMENT_URL + <span class="string">"/add"</span>, payment, Result<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/payment/get/&#123;id&#125;"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Result <span class="title">getById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> restTemplate.getForObject(PAYMENT_URL + <span class="string">"/get/"</span> + id, Result<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试：<a href="http://localhost/order/payment/get/1" target="_blank" rel="noopener">http://localhost/order/payment/get/1</a><br><img src="%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C4.png" alt="测试结果"></p></li></ol></li></ul></li><li><p>actuator微服务信息完善</p><ul><li><p>需要导入的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- web启动器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 监控 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>查看健康信息：<a href="http://hostname:port/actuator/health">http://hostname:port/actuator/health</a></p></li><li><p>设置微服务显示名称和ip显示</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Erueka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment"># 服务名称</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">payment8001</span></span><br><span class="line">    <span class="comment"># 访问路径显示IP地址</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>服务发现Discovery</p><ul><li><p>作用：可以通过服务发现获取注册进eureka的微服务的信息</p></li><li><p>相关类：</p><ol><li>@EnableDiscoveryClient</li><li>DiscoveryClient</li></ol></li><li><p>具体API：</p><ol><li>获取列表：<code>List&lt;String&gt; services = discoveryClient.getServices();</code></li><li>获取实例：<code>List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(&quot;PAYMENT-SERVICE&quot;);</code></li><li>获取ServiceId：<code>serviceInstance.getServiceId();</code></li><li>获取端口号：<code>serviceInstance.getPort();</code></li><li>获取URL：<code>serviceInstance.getURL();</code></li></ol></li><li><p>具体步骤：</p><ol><li><p>在payment8001的controller中添加代码：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/discovery"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">discovery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  List&lt;String&gt; services = discoveryClient.getServices();</span><br><span class="line">  <span class="keyword">for</span> (String service : services) &#123;</span><br><span class="line">    List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(service);</span><br><span class="line">    <span class="keyword">for</span> (ServiceInstance instance : instances) &#123;</span><br><span class="line">      log.info(<span class="string">"ServiceId: &#123;&#125; , host: &#123;&#125; , port: &#123;&#125; , uri: &#123;&#125;"</span>, instance.getServiceId(), instance.getHost(), instance.getPort(), instance.getUri());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="number">200</span>, <span class="string">"查询成功~~~"</span>, discoveryClient);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试：<a href="http://localhost:8001/payment/discovery" target="_blank" rel="noopener">http://localhost:8001/payment/discovery</a></p><p> <code>控制台输出如下</code></p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-11-19 19:16:39.535  INFO 4394 --- [nio-8001-exec-9] c.x.cloud.controller.PaymentController   : ServiceId: PROVIDER-PAYMENT , host: 10.21.176.180 , port: 8001 , uri: http://10.21.176.180:8001</span><br><span class="line">2020-11-19 19:16:39.535  INFO 4394 --- [nio-8001-exec-9] c.x.cloud.controller.PaymentController   : ServiceId: PROVIDER-PAYMENT , host: 10.21.176.180 , port: 8002 , uri: http://10.21.176.180:8002</span><br></pre></td></tr></table></figure><p> <code>返回json结果如下</code></p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"resultCode"</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">"resultMessage"</span>: <span class="string">"查询成功~~~"</span>,</span><br><span class="line">  <span class="attr">"resultData"</span>: &#123;</span><br><span class="line">    <span class="attr">"discoveryClients"</span>: [&#123;</span><br><span class="line">      <span class="attr">"order"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"services"</span>: [<span class="string">"provider-payment"</span>]</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      <span class="attr">"order"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"services"</span>: []</span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="attr">"services"</span>: [<span class="string">"provider-payment"</span>],</span><br><span class="line">    <span class="attr">"order"</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul></li><li><p>Eureka自我保护机制</p><ul><li><p>概念：<br>保护模式主要用于一组客户端和Eureka Server之间存在网络分区场景下的保。一旦进入保护模式，Eureka Server将会尝试保护其服务注册表的信息，不再删除服务注册表中的数据，也就是不会注销任何微服务<br>如果在Eureka Server的首页看到以下这段提示，说明Eureka进入了保护模式<br><img src="Eureka%E8%87%AA%E6%88%91%E4%BF%9D%E6%8A%A4%E6%8F%90%E7%A4%BA%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="Eureka自我保护提示示意图"><br>通俗的话来说：某时刻某一个微服务不可用了，Eureka不会立刻清理，依旧会对该微服务的信息进行保存。这属于CAP里面的AP分支</p></li><li><p>导致原因：<br>默认情况下，如果Eureka Server在一定时间内没有接收到某个微服务实例的心跳，Eureka Server将会注销该实例，默认为90秒。但当网络分区故障发生(延时、卡顿、拥挤)时，微服务与Eureka Server之间无法正常通信，以上行为可能变得非常危险了————因为微服务本身其实是健康的，此时不应该注销这个微服务。Eureka通过自我保护模式来解决这个问题，当Eureka Server节点在短时间丢失过多客户端，那么这个节点就会进入自我保护模式，这是一种高可用的机制<br>在自我保护模式下，Eureka Server会保护服务注册表中的信息，不在注销任何服务实例<br>综上，自我保护模式是一种应对网络异常的安全保护措施，它的架构哲学是宁可保留所有微服务，也不盲目注销任何健康的微服务。使用自我保护模式，可以让Eureka集群更加健壮，稳定</p></li><li><p>禁止自我保护(Eureka默认开启自我保护)：</p><ol><li><p>Eureka服务端设置：</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="comment"># 关闭自我保护机制</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 心跳时间默认90s,改为2000ms,即2s</span></span><br><span class="line">    <span class="attr">eviction-interval-timer-in-ms:</span> <span class="number">2000</span></span><br></pre></td></tr></table></figure></li><li><p>Eureka客户端设置</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment"># Eureka客户端向服务端发送心跳的时间间隔,单位为秒,默认30秒</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">1</span></span><br><span class="line">    <span class="comment"># Eureka服务端在收到最后一次心跳后等待时间上限,单位为秒,默认90秒,超时将剔除服务</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure></li></ol><p>设置完成后，只要服务宕机，会马上从服务注册列表中清楚</p></li></ul></li><li><p>Eureka停更之后的替代者：</p><ol><li>Zookeeper</li><li>Consul</li><li>Nacos</li></ol></li></ul><h2 id="Eureka停更后的替换组件"><a href="#Eureka停更后的替换组件" class="headerlink" title="Eureka停更后的替换组件"></a>Eureka停更后的替换组件</h2><ul><li><p>Zookeeper</p><ul><li><p>Zookeeper介绍：一个分布式协调工具，可以实现注册中心功能</p></li><li><p>注册服务进Zookeeper：</p><ol><li><p>引入pom依赖：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SpringBoot整合zookeeper客户端 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 先排除自带的zookeeper3.5.3 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加zookeeper3.6.2版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改yml配置文件：</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8004</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># 服务别名——注册进zookeeper注册中心的服务名</span></span><br><span class="line">    <span class="comment"># 多个服务实例要设置同一个服务别名</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">provider-payment</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="string">test1:2181</span></span><br></pre></td></tr></table></figure></li><li><p>修改主启动类：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// 该注解用于向使用consul或者zookeeper作为注册中心时注册服务</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderPayment8004Application</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SpringApplication.run(ProviderPayment8004Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>思考：<br>服务已经成功注册到Zookeeper客户端，那么注册上去的节点为临时节点还是持久节点？<br>首先Eureka有自我保护机制，也就是某个服务下线后，不会立刻清除该服务，而是将服务保留一段时间<br>Zookeeper一样在服务下线后也会等待一段时间，之后才会把该节点删除，这就说明Zookeeper上的节点是临时节点</p></li></ul></li><li><p>Consul</p><ul><li><p>Consul介绍</p><ul><li>简介：<br>Consul是一套开源的分布式服务发现和配置管理系统，由HashiCorp公司用Go语言开发<br>提供了微服务系统中的服务治理、配置中心、控制总线等功能，这些功能中的每一个都可以根据需要单独使用，也可以一起使用构建全方位的服务网路，总之Consul提供了一种完整的服务网络解决方案<br>具有很多优点，包括：基于raft协议，比较简洁；支持健康检查；同时支持HTTP和DNS协议；支持跨数据中心的WAN集群；提供图形化界面；跨平台，支持Linux、MAC、Windows</li><li>官网：<a href="https://www.consul.io/" target="_blank" rel="noopener">https://www.consul.io/</a></li><li>功能：<ol><li>服务发现：提供HTTP和DNS两种发现方式</li><li>健康监测：支持多种方法，HTTP，TCP，Docker，Shell脚本定制化</li><li>KV存储：Key，Value的存储方式</li><li>多数据中心：Consul支持多数据中心</li><li>可视化Web界面</li></ol></li><li>安装：<ol><li>官网下载(可执行文件)</li><li>查看版本：<code>consul --version</code></li><li>运行：<code>consul agent -dev</code></li><li>测试：访问<a href="http://test1:8500" target="_blank" rel="noopener">http://test1:8500</a>进入consul可视化界面</li></ol></li></ul></li><li><p>注册服务进Consul：</p><ol><li><p>引入pom依赖：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- consul --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改yml配置文件：</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8006</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">provider-payment</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">test1</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>测试：访问<a href="http://test1:8500" target="_blank" rel="noopener">http://test1:8500</a>进入consul可视化界面，发现微服务已注册进consul</p></li></ol></li></ul></li><li><p>总结三个注册中心：</p><table><thead><tr><th>组件名</th><th>语言</th><th>健康检查</th><th>对外暴露接口</th><th>CAP</th><th>Spring Cloud集成</th></tr></thead><tbody><tr><td>Eureka</td><td>Java</td><td>可配支持</td><td>HTTP</td><td>AP</td><td>已集成</td></tr><tr><td>Consul</td><td>Go</td><td>支持</td><td>HTTP/DNS</td><td>CP</td><td>已集成</td></tr><tr><td>Zookeeper</td><td>Java</td><td>支持</td><td>客户端</td><td>CP</td><td>已集成</td></tr></tbody></table></li><li><p>CAP理论：<br>C(Consistency)表示强一致性；A(Availability)表示高可用；P(Partition Tolerance)表示分区容错性。CAP理论关注粒度是数据，而不是整体系统设计的策略<br>CAP理论的核心：一个分布式系统不可能同时很好的满足一致性、可用性和分区容错性这个三个需求。现在的微服务架构要么是CP要么是AP(即P一定需要保证)，最多只能较好地同时满足两个<br>根据CAP原理可将一个分布式系统分成CA、CP和AP三大类：</p><ol><li>CA：单点集群，满足一致性、可用性的系统，通常在可扩展性上不太满足</li><li>CP：满足一致性、分区容忍性，通常性能不是特别高</li><li>AP：满足可用性、分区容忍性，通常对一致性要求低一些</li></ol></li><li><p>AP架构(Eureka)：<br><img src="%E7%BD%91%E7%BB%9C%E5%88%86%E5%8C%BA%E6%83%85%E5%86%B5%E4%B8%8BAP%E5%BA%94%E5%AF%B9%E7%AD%96%E7%95%A5%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="网络分区情况下AP应对策略示意图"><br>因为同步原因出现问题，而造成数据没有一致性<br>当出现网络分区后，为了保证高可用，系统B可以返回旧值，保证系统的可用性<br>结论：违背了一致性C的要求，只满足可用性和分区容错性，即AP</p></li><li><p>CP架构(Zookeeper、Consul)：<br><img src="%E7%BD%91%E7%BB%9C%E5%88%86%E5%8C%BA%E6%83%85%E5%86%B5%E4%B8%8BCP%E5%BA%94%E5%AF%B9%E7%AD%96%E7%95%A5%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="网络分区情况下CP应对策略示意图"><br>当出现网络分区后，为了保证一致性，就必须拒绝请求，否者无法保证一致性<br>结论：违背了可用性A的要求，只满足一致性和分区容错性，即CP</p></li></ul><h2 id="Ribbon负载均衡介绍"><a href="#Ribbon负载均衡介绍" class="headerlink" title="Ribbon负载均衡介绍"></a>Ribbon负载均衡介绍</h2><ul><li><p>Ribbon介绍：<br>Spring Cloud Ribbon是基于Netflix Ribbon实现的一套客户端负载均衡的工具<br>Ribbon是NetFlix发布的开源项目。主要功能是提供客户端的软件负载均衡算法和服务调用。Ribbon客户端组件提供了一系列完善的配置项如连接超时、重试等。简单的说，就是在配置文件中列出Load Balancer(简称LB)后面所有的机器，Ribbon会自动地基于某种规则(简单轮询、随机连接等)去连接这些机器。很容易使用Ribbon实现自定义的负载均衡算法</p></li><li><p>负载均衡介绍：<br>Load Balance，简单来说就是将用户的请求平摊地分配到多个服务上，从而达到系统的HA(高可用)。常见的负载均衡有软件Nginx、LVS等，硬件有F5等</p><ol><li>集中式LB：在服务的消费方和提供方之间使用独立的LB设施(可以是硬件,如F5;也可以是软件,如Nginx)，由该设施负责把访问请求通过某种策略转发至服务的提供方</li><li>进程内LB：将LB逻辑集成到消费方————消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选择出一个合适的服务器。Ribbon就属于进程内LB，它只是一个类库，集成于消费方进程，消费方通过它来获取到服务提供方的地址</li><li>Ribbon和Nginx的对比：<ul><li>Nginx是服务器负载均衡，客户端所有的请求都会交给nginx，然后由nginx实现转发请求，即负载均衡是由服务端实现的</li><li>Ribbon是本地负载均衡，在调用微服务接口时会从注册中心上获取注册信息服务列表，再缓存到JVM本地，从而在本地实现RPC远程调用</li></ul></li></ol></li><li><p>Ribbon工作原理：<br>Ribbon其实就是一个软负载均衡的客户端组件，它可以和其它所需请求的客户端结合使用，和Eureka结合只是其中的一个实例<br><img src="Ribbon%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="Ribbon工作原理示意图"><br>Ribbon在工作时分成两步：</p><ol><li>首先选择Eureka Server，它优先选择在同一个区域内负载较少的Server</li><li>再根据用户指定的策略，从Server取到的服务注册列表中选择一个地址(Ribbon提供了多种策略：比如轮询、随机和根据响应时间加权)</li></ol></li><li><p>具体实践：</p><ol><li><p>引入Ribbon：新版Eureka已默认引入Ribbon，无需额外引入</p></li><li><p>核心组件IRule介绍：<br> Ribbon默认使用轮询作为负载均衡算法<br> IRule根据特定算法从服务列表中选取一个要访问的服务，IRule是一个接口</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IRule</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Server <span class="title">choose</span><span class="params">(Object key)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoadBalancer</span><span class="params">(ILoadBalancer lb)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> ILoadBalancer <span class="title">getLoadBalancer</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> Ribbon提供了多种IRule的默认实现<br> <img src="IRule%E7%BB%A7%E6%89%BF%E7%B1%BB%E5%9B%BE.png" alt="IRule继承类图"><br> 共有以下七种：</p><ol><li>RoundRobinRule：轮询</li><li>RandomRule：随机</li><li>RetryRule：先按照RoundRobinRule的策略获取服务，如果获取服务失败则在指定时间内会进行重试，获取可用服务</li><li>WeightedResponseTimeRule：对RoundRobinRule的扩展，响应速度越快的实例选择的权重越大，越容易被选择</li><li>BestAvailableRule：会先过滤掉由于多次访问故障而处于短路跳闸状态的服务，然后选择一个并发量最小的服务</li><li>AvailabilityFilteringRule：先过滤掉故障实例，在选择并发较小的实例</li><li>ZoneAvoidanceRule：默认规则，符合判断server所在区域的性能和server的可用性选择服务器</li></ol></li><li><p>默认负载均衡算法替换</p><ul><li><p>Ribbon的小bug：官网警告自定义的配置类不能放在@ComponentScanner所扫描的当前包以及子包下，否者自定义的这个配置类就会被所有的Ribbon客户端所共享，达不到特殊化定制的目的了(不能在SpringApplication主启动类的同级及子包下)</p></li><li><p>创建自定义Rule接口：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRibbonRule</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> IRule <span class="title">getRule</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 自定义为随机规则</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RandomRule();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在主启动类中设置新规则(<code>@RibbonClient</code>)</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@RibbonClient</span>(name = <span class="string">"PROVIDER-PAYMENT"</span>, configuration = MyRibbonRule<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ConsumerOrder80Application</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SpringApplication.run(ConsumerOrder80Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>手写Ribbon负载均衡算法</p><ul><li><p>原理：<br>记实际调用服务器位置下标为serviceIndex，服务器集群总数量为serviceCount，rest接口请求次数为n，则有：<code>serviceIndex = n % serviceCount</code>(即轮询的原理)</p></li><li><p>RoundRobinRule原理(发现采用思想一样,再加入了一些判断和CAS线程安全保证)：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoundRobinRule</span> <span class="keyword">extends</span> <span class="title">AbstractLoadBalancerRule</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> AtomicInteger nextServerCyclicCounter;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> AVAILABLE_ONLY_SERVERS = <span class="keyword">true</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> ALL_SERVERS = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">RoundRobinRule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    nextServerCyclicCounter = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">RoundRobinRule</span><span class="params">(ILoadBalancer lb)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>();</span><br><span class="line">    setLoadBalancer(lb);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Server <span class="title">choose</span><span class="params">(ILoadBalancer lb, Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lb == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Server server = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (server == <span class="keyword">null</span> &amp;&amp; count++ &lt; <span class="number">10</span>) &#123;</span><br><span class="line">      List&lt;Server&gt; reachableServers = lb.getReachableServers();</span><br><span class="line">      List&lt;Server&gt; allServers = lb.getAllServers();</span><br><span class="line">      <span class="keyword">int</span> upCount = reachableServers.size();</span><br><span class="line">      <span class="keyword">int</span> serverCount = allServers.size();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> ((upCount == <span class="number">0</span>) || (serverCount == <span class="number">0</span>)) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> nextServerIndex = incrementAndGetModulo(serverCount);</span><br><span class="line">      server = allServers.get(nextServerIndex);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (server == <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="comment">/* Transient. */</span></span><br><span class="line">        Thread.yield();</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (server.isAlive() &amp;&amp; (server.isReadyToServe())) &#123;</span><br><span class="line">        <span class="keyword">return</span> (server);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Next.</span></span><br><span class="line">      server = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> server;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">incrementAndGetModulo</span><span class="params">(<span class="keyword">int</span> modulo)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">      <span class="keyword">int</span> current = nextServerCyclicCounter.get();</span><br><span class="line">      <span class="keyword">int</span> next = (current + <span class="number">1</span>) % modulo;</span><br><span class="line">      <span class="keyword">if</span> (nextServerCyclicCounter.compareAndSet(current, next))</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Server <span class="title">choose</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> choose(getLoadBalancer(), key);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现自己版本的负载均衡算法：</p><ol><li><p>原理：从Eureka服务器获取实例地址信息 + 机器数取余 + JUC(CAS + 原子整型)</p></li><li><p>准备工作：删除RestTemplate上的@LoadBalance注解，防止Ribbon LB的干扰</p></li><li><p>仿造创建LoadBalanced接口：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LoadBalancer</span> </span>&#123;</span><br><span class="line">  <span class="function">ServiceInstance <span class="title">instances</span><span class="params">(List&lt;ServiceInstance&gt; serviceInstances)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建实现类：MyLoadBalancer</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLoadBalancer</span> <span class="keyword">implements</span> <span class="title">LoadBalancer</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 原子整型</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger atomicInteger = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取Rest调用的次数</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndIncrement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> current, next;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      <span class="comment">// 获取当前值</span></span><br><span class="line">      current = atomicInteger.get();</span><br><span class="line">      <span class="comment">// 计数达到最大值,重回0</span></span><br><span class="line">      next = current &gt;= Integer.MAX_VALUE ? <span class="number">0</span> : current + <span class="number">1</span>;</span><br><span class="line">      <span class="comment">// CAS比较并交换</span></span><br><span class="line">    &#125; <span class="keyword">while</span> (!atomicInteger.compareAndSet(current, next));</span><br><span class="line">    log.info(<span class="string">"Next: &#123;&#125;"</span>, next);</span><br><span class="line">    <span class="keyword">return</span> next;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取具体服务提供者实例信息</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ServiceInstance <span class="title">instances</span><span class="params">(List&lt;ServiceInstance&gt; serviceInstances)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取当前访问机器的下标：调用次数 % 机器总数</span></span><br><span class="line">    <span class="keyword">int</span> index = getAndIncrement() % serviceInstances.size();</span><br><span class="line">    <span class="keyword">return</span> serviceInstances.get(index);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>具体使用：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注入自己声明为@Component的MyLoadBalancer</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> LoadBalancer loadBalancer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/payment/getLb/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">getByIdInLoadBalance</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id) </span>&#123;</span><br><span class="line">  List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">"PROVIDER-PAYMENT"</span>);</span><br><span class="line">  <span class="keyword">if</span> (instances == <span class="keyword">null</span> || instances.isEmpty()) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  ServiceInstance instance = loadBalancer.instances(instances);</span><br><span class="line">  URI uri = instance.getUri();</span><br><span class="line">  <span class="keyword">return</span> restTemplate.getForObject(uri + <span class="string">"/payment/get/"</span> + id, Result<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul></li></ol></li><li><p>Ribbon停更后的替代者：Spring Cloud自己提供的LoadBalancer</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Effective Java</title>
      <link href="/2020/11/15/ProgrammingLanguage/Java/Effective_Java/"/>
      <url>/2020/11/15/ProgrammingLanguage/Java/Effective_Java/</url>
      
        <content type="html"><![CDATA[<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><ul><li><a href="#引言">引言</a></li><li><a href="#创建和销毁对象">创建和销毁对象</a></li><li><a href="#对于所有对象都通用的方法">对于所有对象都通用的方法</a></li></ul><a id="more"></a><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>Java语言支持四种类型：接口(包括注释)、类(包括enum)、数组和基本类型。前三种种类型通常被称为引用类型(reference type)，类实例和数组是对象(object)，而基本类型的值则不是对象。类的成员(member)由它的域(field)、方法(method)、成员类(member class)和成员接口(member interface)组成。方法的签名(signature)由它的名称和所有参数类型组成；签名不包括方法的返回类型</p><h2 id="创建和销毁对象"><a href="#创建和销毁对象" class="headerlink" title="创建和销毁对象"></a>创建和销毁对象</h2><ul><li><p>第一条：用静态工厂方法代替构造器</p><ol><li><strong>第一大优势在于前者有名称</strong>。如果构造器的参数本身没有确切地描述正被返回的对象，那么具有适当名称的静态工厂会更容易使用，产生的客户端代码也更易于阅读</li><li><strong>第二大优势在于不必在每次调用它们的时候都创建一个新对象</strong>。这使得不可变类可以使用预先构建好的实例，或者将构建好的实例缓存起来，进行重复利用，从而避免创建不必要的重复对象</li><li><strong>第三大优势在于它们可以返回原返回类型的任何子类型的对象</strong>。这样在选择返回对象的类时就有了更大的灵活性。这种灵活性的一种应用是API可以返回对象，同时又不会使对对象的类变成公有的。以这种方式隐藏实现类会使API变得非常简洁</li><li><strong>第四大优势在于所返回的对象的类可以随着每次调用而发生变化，这取决于静态工厂方法的参数值</strong>。只要是已声明的返回类型的子类型，都是允许的</li><li><strong>第五大优势在于方法返回的对象所属的类，在编写包含该静态工厂方法的类时可以不存在</strong>(规范,可插拔,例如JDBC具体实现)</li><li><strong>主要缺点在于类如果不含公有的或者受保护的构造器，就不能被子类化</strong>(Collections中便利的实现类子类化)</li><li>总结：静态工厂方法和公有构造器都各有用处，需要理解它们各自的长处。静态工厂经常更加合适，切忌第一反应就是提供公有的构造器，而不先考虑静态工厂</li></ol></li><li><p>第二条：遇到多个构造器参数时要考虑使用构建器</p><ol><li><p>静态工厂和构造器有个共同的局限性：它们都不能很好地扩展到大量的可选参数</p></li><li><p>方案1：重叠构造器(telescoping constructor)模式。在这种模式下，提供的第一个构造器只有必要的参数，第二个构造器有一个可选参数，第三个构造器有两个可选参数，依此类推。<strong>重叠构造器模式可行，但当有许多参数的时候，客户端代码会很难编写，并且仍然较难阅读</strong></p></li><li><p>方案2：JavaBean模式。在这种模式下，先调用一个无参构造器来创建对象，然后再调用setter 方法来设置每个必要的参数，以及每个相关的可选参数。这种模式弥补了重叠构造器模式的不足：创建实例很容易，代码读起来也很容易</p><ul><li>JavaBean模式的缺点：JavaBean模式自身有着很严重的缺点。因为构造过程被分到了几个调用中，<strong>在构造过程中JavaBean可能处于不一致的状态</strong>。类无法仅仅通过检验构造器参数的有效性来保证一致性。试图使用处于不一致状态的对象将会导致失败，这种失败与包含错误的代码大相径庭，因此调试起来十分困难。<strong>另一点不足在于JavaBean模式使得把类做成不可变的可能性不复存在</strong>，这就需要付出努力确保线程安全</li><li>不一致的解释：模拟多线程获取同一个JavaBean的场景，线程A获取Obj对象，对其属性进行set；同时线程B获取Obj对象对其进行get；这时可能会出现线程A中没有set完毕，线程B就开始get相应的属性</li></ul></li><li><p>方案3：建造者(Buidler)模式。它既能保证重叠构造器模式那样的安全性，也能保证JavaBean模式那么好的可读性。它不直接生成想要的对象，而是让客户端利用所有必要的参数调用构造器(或静态工厂)，得到一个builder对象。然后客户端在builder对象上调用类似setter的方法来设置每个相关的可选参数。最后客户端调build()方法来生成通常是不可变的对象。这个builder通常是它构建的类的静态成员类</p><ul><li><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MilkTea</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> ice;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> sugar;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> addPearl;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ice = NORMAL_ICE;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sugar = NORMAL_SUGAR;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> addPearl = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.size = size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">ice</span><span class="params">(<span class="keyword">int</span> ice)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.ice = ice;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">sugar</span><span class="params">(<span class="keyword">int</span> sugar)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.sugar = sugar;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">addPearl</span><span class="params">(<span class="keyword">boolean</span> addPearl)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.addPearl = addPearl;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> MilkTea <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> MilkTea(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">MilkTea</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.size = builder.size;</span><br><span class="line">    <span class="keyword">this</span>.sugar = builder.sugar;</span><br><span class="line">    <span class="keyword">this</span>.addPearl = builder.addPearl;</span><br><span class="line">    <span class="keyword">this</span>.ice = builder.ice;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>优点：</p><ol><li><p>客户端代码很容易编写、易于阅读。<strong>模拟了具名的可选参数</strong></p></li><li><p><strong>适用于类层次结构</strong>。 使用平行层次结构的builder时，各自嵌套在相应的类中。抽象类有抽象的builder，具体类有具体的builder</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractResource</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 公共属性...</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 泛型,递归参数类型,在子类中适当地进行方法链接,无需转换类型</span></span><br><span class="line">  <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Builder</span>&lt;<span class="title">T</span>&gt;&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 公共属性...</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">setCommonFileds</span><span class="params">(...)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 公共属性赋值</span></span><br><span class="line">      <span class="keyword">return</span> self();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> AbstractResource <span class="title">build</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 模拟self类型</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> T <span class="title">self</span><span class="params">()</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  AbstractResource(Builder&lt;?&gt; builder) &#123;</span><br><span class="line">    <span class="comment">// 设置公共属性...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteResource</span> <span class="keyword">extends</span> <span class="title">AbstractResource</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 公共属性...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> <span class="keyword">extends</span> <span class="title">AbstractResource</span>.<span class="title">Builder</span>&lt;<span class="title">Builder</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 公共属性...</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">setFields</span><span class="params">(...)</span></span>&#123;</span><br><span class="line">      <span class="comment">// 子类特有属性赋值</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// build返回都是子类的类型</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">AbstractResource <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ConcreteResource(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Builder <span class="title">self</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">ConcreteResource</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(builder);</span><br><span class="line">    <span class="comment">// 设置公共属性...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Builder模式十分灵活</p></li></ol></li><li><p>缺点：</p><ol><li>为了创建对象，必须先创建它的构建器</li><li>模式较冗长，但容易扩展</li></ol></li></ul></li><li><p>总结：<strong>如果类的构造器或者静态工厂中具有多个参数，Builder模式是一种不错的选择</strong>，特别是当大多数参数类型相同或是可选参数时</p></li></ol></li><li><p>第三条：用私有构造器或者枚举类型强化Singleton属性</p><ol><li><p>Singleton是指仅仅被实例化一次的类，通常被用来代表无状态的对象，比如那些本质上唯一的系统组件</p></li><li><p>方案1：饿汉式(静态常量),懒加载问题有时可忽略</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 1、构造器私有化(防止外部new)</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  <span class="comment">// 2、类内创建对象(静态常量)</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">  <span class="comment">// 3、向外暴露静态公共方法,返回单例instance</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> instance; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 缺陷：如果Singleton需要可序列化，仅仅加上implements Serializable是不够的。为了维护并保证Singleton，必须声明所有实例域都是瞬时(transient)的，并提供一个readResolve方法。否则每次反序列化一个序列化的实例时都会创建一个新的实例</p></li><li><p>方案2：声明一个包含单个元素的枚举类型</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton&#123;</span><br><span class="line">  INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 优点：该方式无偿提供了序列化机制，绝对防止多次实例化，即使是在面对复杂的序列化或者反射攻击的时候。虽然这种方法还没有广泛采用，但<strong>单枚举类型经常成为实现Singleton的最佳方法</strong><br> 注意：如果Singleton必须扩展一个超类，而不是扩展Enum时，则不宜使用这个方法</p></li><li><p>单例模式的其他介绍参见设计模式</p></li></ol></li><li><p>第四条：通过私有构造器强化不可实例化的能力</p><ol><li><p>有时可能需要编写只包含静态方法和静态域的类。这些工具类不希望被实例化，因为实例化对它没有任何意义。然而在缺少显式构造器的情况下，编译器会自动提供一个公有的、无参的缺省构造器。对于用户而言，这个构造器与其他的构造器没有任何区别</p></li><li><p><strong>企图通过将类做成抽象类来强制该类不可被实例化是行不通的</strong>。该类可以被子类化并且该子类也可以被实例化。这种方式还会产生误导</p></li><li><p>有些简单方法可以确保类不可被实例化。由于只有当类不包含显式的构造器时，编译器才会生成缺省的构造器，因此只要让<strong>该类包含一个私有构造器，它就不能被实例化</strong>：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UtilClass</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">UtilClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>抛出异常能避免在类内部调用私有构造器；<strong>最好的做法是在私有构造器中标明注释以及抛出异常时显式指出异常信息</strong>。这种方法也有副作用————它使得此类不能被子类化(所有构造器都必须显式或隐式调用超类构造器)</p></li></ol></li><li><p>第五条：优先考虑依赖注入来引用资源</p><ol><li>有许多类会依赖一个或多个底层的资源，<strong>但静态工具类Singleton类不适合需要引用底层资源的类</strong></li><li>依赖注入适用于任意数量的资源以及任意的依赖形式。依赖注入的对象资源具有不可变性，因此多个客户端可以共享依赖对象(假设客户端们想要的是同一个底层资源)。依赖注入也同样适用于构造器、静态工厂和构建器</li><li>依赖注入的最简单的模式是<strong>当创建一个新实例时就将该资源传到构造器中</strong>；另一种有用的变体是将资源工厂(factory)传给构造器，工厂是可以被重复调用来创建类型实例的一个对象，这类工厂具体表现为工厂方法模式(Java8增加的接口SupplierT&lt;&gt;最适合用于表示工厂)；另一种方式是采用依赖注入框架，如Dagger、Guice或Spring(设置成手动依赖注入的API,一般都适用)</li><li>总结：不要用Singleton和静态工具类来实现依赖一个或多个底层资源的类，且该资源的行为会影响到该类的行为；也不要直接用这个类来创建这些资源。应该将这些资源或者工厂传给构造器(静态工厂/构建器)，通过它们来创建类。该实践就被称作依赖注入，它极大地提升了类的灵活性、可重用性和可测试性</li></ol></li><li><p>第六条：避免创建不必要的对象</p><ol><li><p>一般来说最好能用单个对象，而不是在每次需要的时候就创建一个相同功能的新对象。重用方式既快速，又流行。如果对象是不可变的(immutable)，它就始终可以被重用</p></li><li><p>对于同时提供了静态工厂方法(static factory method)和构造器的不可变类，通常优先使用静态工厂方法而不是构造器，以避免创建不必要的对象</p></li><li><p>有些对象创建的成本比其他对象要高得多。如果重复地需要这类”昂贵的对象”，建议将它缓存下来重用<br> <code>案例如下：</code></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式1</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isRomanNumeral</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> s.matches(<span class="string">"xxxx"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式2</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern pattern = Pattern.compile(<span class="string">"xxxx"</span>);</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isRomanNumeral</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> pattern.matcher(s).matches();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 说明：<strong>String.matches()方法易于查看一个字符串是否与正则表达式相匹配，但并不适合在注重性能的情形中重复使用</strong>。问题在于，它在内部为正则表达式创建了一个Pattern实例，却只使用了一次，之后就可以进行垃圾回收了。创建Pattern的实例的成本很高，因为需要将正则表达式编译成一个有限状态机(finite state machine)。为了提升性能，应该显式地将正则表达式编译成一个Pattern实例(不可变)，让它成为类初始化的一部分，并将它缓存起来</p></li><li><p>如果一个对象是不变的，那么它显然能够被安全地重用，但其他有些情形则并不总是这么明显。考虑虑适配器(adapter)的情形，有时也叫作视图(view)。适配器是指这样一个对象：它把功能委托给一个后备对象(backing object)，从而为后备对象提供一个可以替代的接口。由于适配器除了后备对象之外没有其他的状态信息，所以针对某个给定对象的特定适配器而言，它不需要创建多个适配器实例</p></li><li><p>例如Map接口的keySet()方法返回该Map对象的Set视图，其中包含该Map中所有的键(key)。乍看之下，好像每次调用keySet()都应该创建一个新的Set实例，但对于一个给定的Map对象，实际上每次调用keySet()都返回同样的Set实例。虽然被返回的Set实例一般是可改变的，但所有返回的对象在功能上是等同的；当其中一个返回对象发生变化的时候，所有其他的返回对象也要发生变化，因为它们是由同一个Map实例支撑的</p></li><li><p>另一种创建多余对象的方法，称作自动装箱(autoboxing)。它允许程序员将基本类型和装箱基本类型(Boxed Primitive Type)混用，按需要自动装箱和拆箱。<strong>自动装箱使基本类型和装箱基本类型之间的差别变得模糊起来，但并没有完全消除</strong>。它们在语义上还有着微妙的差别，在性能上也有着比较明显的差别<br> <code>案例如下</code></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">sum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Long sum = <span class="number">0L</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0</span>; i &lt;= Integer.MAX_VALUE; i++) sum += i;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 说明：这段程序算出的答案是正确的，但是比实际情况要更慢一些，只因为声明为装箱类型。变量sum 被声明成Long而不是long意味着程序构造了大约2^31个多余的Long实例(大约每次往Long sum中增加long时构造一个实例)。因此，<strong>要优先使用基本类型而不是装箱基本类型，要当心无意识的自动装箱</strong></p></li><li><p>不要错误地认为本条目所介绍的内容暗示着”创建对象的代价非常昂贵,应尽可能避免创建对象”。相反，由于小对象的构造器只做很少量的显式工作，小对象的创建和回收动作是非常廉价的，特别是在现代的JVM 实现上更是如此。通过创建附加的对象，提升程序的清晰性、简洁性和功能性，这通常是件好事</p></li><li><p>反之通过维护自己的对象池(object pool)来避免创建对象并不是一种好的做法，除非池中的对象是非常重量级的。正确使用对象池的典型对象示例就是数据库连接池。建立数据库连接的代价是非常昂贵的，因此重用这些对象非常有意义。而且，数据库的许可可能限制只能使用一定数量的连接。但一般而言，维护自己的对象池必定会把代码弄得很乱，同时增加内存占用(footprint)，并且还可能会损害性能。现代的JVM实现具有高度优化的垃圾回收器，其性能很容易就会超过轻量级对象池的性能</p></li></ol></li><li><p>第七条：消除过期的对象引用</p><ol><li><p>简单案例：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Object[] elements;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Stack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    elements = <span class="keyword">new</span> Object[DEFAULT_INITIAL_CAPACITY];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Object e)</span> </span>&#123;</span><br><span class="line">    ensureCapacity();</span><br><span class="line">    elements[size++] = e;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> EmptyStackException();</span><br><span class="line">    <span class="keyword">return</span> elements[--size];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (elements.length == size)</span><br><span class="line">      elements = Arrays.copyOf(elements, size + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>案例解读：没有很明显的错误。无论如何测试，它都会成功地通过每一项测试，但是当中隐藏着一个问题。不严格地讲，这段程序有一个”内存泄漏”，随着垃圾回收器活动的增加，或者由于内存占用的不断增加，程序性能的降低会逐渐表现出来。在极端的情况下，这种内存泄漏会导致磁盘交换(Disk Paging)，甚至导致程序失败(OutOfMemoryError错误)，但这种失败情形相对比较少见</p></li><li><p>案例中哪里发生了内存泄漏呢？<br>如果一个栈先是增长然后再收缩，那么从栈中弹出来的对象将不会被当作垃圾回收，即使使用栈的程序不再引用这些对象，它们也不会被回收。这是因为栈内部维护着对这些对象的过期引用(obsolete reference)。所谓的过期引用，是指永远也不会再被解除的引用。在本例中，凡是在elements数组的”活动部分”(active portion)之外的任何引用都是过期的。活动部分是指elements中下标小于size的那些元素</p></li><li><p>在支持垃圾回收的语言中，内存泄漏是很隐蔽的(称这类内存泄漏为”无意识的对象保持”(unintentional object retention)更为恰当)。如果一个对象引用被无意识地保留起来了，那么垃圾回收机制不仅不会处理这个对象，而且也不会处理被这个对象所引用的所有其他对象。即使只有少量的几个对象引用被无意识地保留下来，也会有许许多多的对象被排除在垃圾回收机制之外，从而对性能造成潜在的重大影响</p></li><li><p>这类问题的修复方法很简单：一旦对象引用已经过期，只需清空这些引用即可。对于上述案例中的Stack类而言，只要一个单元被弹出栈，指向它的引用就过期了。pop()方法的修订版本如下所示：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (size == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> EmptyStackException();</span><br><span class="line">  Object result = elements[--size];</span><br><span class="line">  elements[size] = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>清空过期引用的另一个好处是，如果它们以后又被错误地解除引用，程序就会立即抛出NullPointerException异常，而不是悄悄地错误运行下去。尽快地检测出程序中的错误总是有益的</p></li><li><p>当第一次被类似这样的问题困扰的时候，往往会过分小心：对于每一个对象引用，一旦程序不再用到它，就把它清空。其实这样做既没必要，也不是我们所期望的，因为这样做会把程序代码弄得很乱。<strong>清空对象引用应该是一种例外，而不是一种规范行为</strong>。消除过期引用最好的方法是让包含该引用的变量结束其生命周期。如果是在最紧凑的作用域范围内定义每一个变量，这种情形就会自然地发生</p></li><li><p>一般来说，<strong>只要类是自己管理内存，就应该警惕内存泄漏问题</strong>。一旦元素被释放掉，则该元素中包含的任何对象引用都应该被清空</p></li><li><p><strong>内存泄漏的另一个常见来源是缓存</strong>。一旦把对象引用放到缓存中，它就很容易被遗忘掉，从而使得它不再有用之后很长一段时间内仍然留在缓存中。一种有效的方案如下：<br>只要在缓存之外存在对某个项的键的引用，该项就有意义，那么就可以用WeakHashMap代表缓存。当缓存中的项过期之后，它们就会自动被删除。但只有当所要的缓存项的生命周期是由该键的外部引用而不是由值决定时，WeakHashMap才有用处</p></li><li><p>更为常见的情形则是，”缓存项的生命周期是否有意义”并不是很容易确定，随着时间的推移，其中的项会变得越来越没有价值。在这种情况下，缓存应该时不时地清除掉没用的项。这项清除工作可以由一个后台线程(可能是ScheduledThreadPoolExecutor)来完成，或者也可以在给缓存添加新条目的时候顺便进行清理。LinkedHashMap类利用它removeEldestEntry()方法可以很容易地实现后一种方案。对于更复杂的缓存，可以使用java.lang.ref</p></li><li><p><strong>内存泄漏的第三个常见来源是监昕器和其他回调</strong>。如果你实现了一个API，客户端在这个API中注册了回调，却没有显式地取消注册，那么除非你采取某些动作，否则它们就会不断地堆积起来。确保回调立即被当作垃圾回收的最佳方法是只保存它们的弱引用(weak reference)，例如，只将它们保存成WeakHashMap中的键</p></li><li><p>由于内存泄漏通常不会表现成明显的失败，所以它们可以在一个系统中存在很多年。往往只有通过仔细检查代码，或者借助于Heap剖析工具(Heap Profiler)才能发现内存泄漏问题。因此如果能够在内存泄漏发生之前就知道如何预测此类问题并阻止它们发生，那是最好不过的</p></li></ol></li><li><p>第8条：避免使用终结方法和清除方法</p><ol><li><strong>终结方法(finalizer)通常是不可预测的，也是很危险的，一般情况下是不必要的</strong>。用终结方法会导致行为不稳定、性能降低，以及可移植性问题。当然，终结方法也有其可用之处；但是根据经验，应该避免使用终结方法。在Java9中使用清除方法(cleaner)代替了终结方法。<strong>清除方法没有终结方法那么危险，但仍然不可预测、运行缓慢，一般情况下也是不必要的</strong></li><li>在C++中，析构器是回收一个对象所占用资源的常规方法，是构造器所必需的对应物。而在Java中，当一个对象变得不可到达的时候，垃圾回收器会回收与该对象相关联的存储空间，并不需要程序员做专门的工作。C++的析构器也可以被用来回收其他的非内存资源，而在Java中一般用try-finally块来完成类似的工作</li><li>终结方法和清除方法的缺点在于不能保证会被及时执行。从一个对象变得不可到达开始，到它的终结方法被执行，所花费的这段时间是任意长的。这意味着，<strong>注重时间(time-critical)的任务不应该由终结方法或者清除方法来完成</strong>。例如用终结方法或者清除方法来关闭已经打开的文件，这就是个严重的错误，因为打开文件的描述符是一种很有限的资源。如果系统无法及时运行终结方法或者清除方法就会导致大量的文件仍然保留在打开状态，于是当一个程序再也不能打开文件的时候，它可能会运行失败</li><li>及时地执行终结方法和清除方法正是垃圾回收算法的一个主要功能，这种算法在不同的JVM实现中会大相径庭。如果程序依赖于终结方法或者清除方法被执行的时间点，那么这个程序的行为在不同的JVM中运行的表现可能就会截然不同</li><li>延迟终结过程并不只是一个理论问题。在很少见的情况下，为类提供终结方法可能会随意地延迟其实例的回收过程。Java语言规范并不保证哪个线程将会执行终结方法，所以除了不使用终结方法之外，并没有很轻便的办法能够避免这样的问题。在这方面，清除方法比终结方法稍好一些，因为类的设计者可以控制自己的清除线程，但清除方法仍然在后台运行，处于垃圾回收器的控制之下，因此不能确保及时清除</li><li>Java语言规范不仅不保证终结方法或者清除方法会被及时地执行，而且根本就不保证它们会被执行。当一个程序终止的时候，某些已经无法访问的对象上的终结方法却根本没有被执行，这是完全有可能的。结论是：<strong>永远不应该依赖终结方法或者清除方法来更新重要的持久状态</strong>。例如，依赖终结方法或者清除方法来释放共享资源(比如数据库)上的永久锁，这很容易让整个分布式系统垮掉</li><li>不要被System.gc()和System.runFinalization()这两个方法所诱惑，它们确实增加了终结方法或者清除方法被执行的机会，但是它们并不保证终结方法或者清除方法会被执行。唯一声称保证它们会被执行的两个方法是System.runFinalizersOnExit()及其臭名昭著的孪生兄弟Runtime.runFinalizersOnExit()。这两个方法都有致命的缺陷，井且已经被废弃很久了</li><li><strong>使用终结方法和清除方法有非常严重的性能损失</strong></li><li><strong>终结方法有一个严重的安全问题：它们为终结方法攻击(finalizer attack)打开了类的大门</strong>。终结方法攻击背后的思想很简单：如果从构造器或者它的序列化对等体(readObject和readResolve方法)抛出异常，恶意子类的终结方法就可以在构造了部分的应该已经半途夭折的对象上运行。这个终结方法会将对该对象的引用记录在一个静态域中，阻止它被垃圾回收。一旦记录到异常的对象，就可以轻松地在这个对象上调用任何原本永远不允许在这里出现的方法。<strong>从构造器抛出的异常，应该足以防止对象继续存在；有了终结方法的存在，这一点就做不到了</strong>。这种攻击可能造成致命的后果。final类不会受到终结方法攻击，因为没有人能够编写出final类的恶意子类。<strong>为了防止非final类受到终结方法攻击，要编写一个空的final的finalize()方法</strong></li><li>如果类的对象中封装的资源(例如文件或者线程)确实需要终止，应该怎么做才能不用编写终结方法或者清除方法呢？只需<strong>让类实现AutoCloseable</strong>，并要求其客户端在每个实例不再需要的时候调用close()方法，一般是利用try-with-resources确保终止，即使遇到异常也是如此。值得提及的一个细节是，该实例必须记录下自己是否已经被关闭了————close()方法必须在一个私有域中记录下”该对象已经不再有效”。如果这些方法是在对象已经终止之后被调用，其他的方法就必须检查这个域，并抛出IllegalStateException异常</li><li>学finalize()…</li><li>总而言之，除非是作为安全网，或者是为了终止非关键的本地资源，否则请不要使用清除方法，对于在Java9之前的发行版本，则尽量不要使用终结方法。若使用了终结方法或者清除方法，则要注意它的不确定性和性能后果</li></ol></li><li><p>第9条：try-with-resources优先于try-finally</p><ol><li><p>Java类库中包括许多必须通过调用close()方法来手工关闭的资源。例如InputStream、OutputStrea以及java.sql.Connection。客户端经常会忽略资源的关闭，造成严重的性能后果也就可想而知了。虽然这其中的许多资源都是用终结方法作为安全网，但效果并不理想</p></li><li><p>根据经验，try-finally语句是确保资源会被适时关闭的最佳方法，就算发生异常或者返回也一样</p><p> <code>一个try-finally的示例</code></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> String <span class="title">firstLineOfFile</span><span class="params">(String path)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(path));</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> reader.readLine();</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    reader.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>即使用try-finally语句正确地关闭了资源，也存在着些许不足。因为在try块和finally块中的代码，都可能会抛出异常。例如在firstLineOfFile()方法中，如果底层的物理设备异常，那么调用readLine()方法就会抛出异常。基于同样的原因，调用close()方法也会出现异常。在这种情况下，第二个异常完全抹除了第一个异常。在异常堆枝轨迹中，完全没有关于第一个异常的记录，这在现实的系统中会导致调试变得非常复杂，因为通常需要看到第一个异常才能诊断出问题何在。虽然可以通过编写代码来禁止第一个异常，保留第一个异常，但事实上没有人会这么做，因为实现起来太烦琐了</p></li><li><p>当Java7引人try-with-sources语句时，所有这些问题一下子就全部解决。要使用这个构造的资源，必须先实现AutoCloseable接口，其中包含了声明返回值void的close()方法。Java类库与第三方类库中的许多类和接口，现在都实现或扩展了AutoCloseable接口。如果编写了一个类且它代表的是必须被关闭的资源，那么该类也应该实现AutoCloseable</p><p> <code>firstLineOfFile的try-with-sources示例</code></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> String <span class="title">firstLineOfFile</span><span class="params">(String path)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> (BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(path))) &#123;</span><br><span class="line">    <span class="keyword">return</span> reader.readLine();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用try-with-resources不仅使代码变得更简洁易懂，也更容易进行诊断。以firstLineOfFile()方法为例，如果调用readLine()和(不可见的)close()方法都抛出异常，后一个异常就会被禁止，以保留第一个异常。事实上，为了保留想要看到的那个异常，即便多个异常都可以被禁止。这些被禁止的异常并不是简单地被抛弃了，而是会被打印在堆栈轨迹中，并注明它们是被禁止的异常。通过编程调用getSuppressed()方法还可以访问到它们，getsuppressed()方法已经添加到Java7的Throwable类中</p></li><li><p>在try-with-resources语句中还可以使用catch子句，就像在平时的try-finally语句一样</p></li><li><p>结论：在处理必须关闭的资源时，始终要优先考虑用try-with-resources，而不是用try-finally。这样得到的代码将更加简洁、清晰，产生的异常也更有价值。有了try-with-resources语句，在使用必须关闭的资源时，就能更轻松地正确编写代码了。实践证明，这个用try-finally是不可能做到的</p></li></ol></li></ul><h2 id="对于所有对象都通用的方法"><a href="#对于所有对象都通用的方法" class="headerlink" title="对于所有对象都通用的方法"></a>对于所有对象都通用的方法</h2>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java日志</title>
      <link href="/2020/10/29/ProgrammingLanguage/Java/Java%E6%97%A5%E5%BF%97/"/>
      <url>/2020/10/29/ProgrammingLanguage/Java/Java%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><ul><li><a href="#日志介绍">日志介绍</a></li><li><a href="#日志实现">日志实现</a></li><li><a href="#日志门面">日志门面</a></li><li><a href="#SpringBoot中的日志">SpringBoot中的日志</a></li></ul><a id="more"></a><h2 id="日志介绍"><a href="#日志介绍" class="headerlink" title="日志介绍"></a>日志介绍</h2><ul><li><strong>日志文件是用于记录系统操作事件的文件集合</strong>，可分为事件日志和消息日志。具有处理历史数据、诊断问题的追踪以及理解系统的活动等重要作用。在计算机中，日志文件是记录在操作系统或其他软件运行中发生的事件或在通信软件的不同用户之间的消息的文件</li><li>日志的价值、好处：<ol><li>记录系统中硬件、软件和系统问题的信息，监视系统中发生的事件</li><li>检查错误发生的原因</li><li>发现一些之前从未意识到的问题</li></ol></li><li>现有Java日志框架介绍：<ul><li>日志实现：<ol><li>JUL(java util logging)</li><li>logback</li><li>log4j</li><li>log4j2</li></ol></li><li>日志门面：<ol><li>JCL(Jakarta Commons Logging)</li><li>slf4j(Simple Logging Facade for Java)</li><li>log4j2</li></ol></li></ul></li><li>为什么需要日志框架：<ol><li>集中精力完成系统的业务逻辑设计</li><li>框架一般是成熟，稳健的，可以处理系统很多细节问题</li><li>经过实践检验，结构很好，扩展性强，可以不断升级</li></ol></li><li>Java日志框架主要解决的问题：<ol><li>控制日志输出的内容和格式</li><li>控制日志输出的位置(file,console)</li><li>日志优化：异步日志，日志文件的归档和压缩</li><li>日志系统的维护</li><li>面向接口开发——日志的门面(适配性能更高的日志框架)</li></ol></li></ul><h2 id="日志实现"><a href="#日志实现" class="headerlink" title="日志实现"></a>日志实现</h2><ol><li><p>JUL入门</p><ul><li><p>JUL介绍：全称Java util Logging，是java原生的日志框架，使用时不需要另外引用第三方类库。相对其他日志框架使用方便，学习简单，能够在小型应用中灵活使用</p></li><li><p>架构介绍：<br><img src="JUL%E6%9E%B6%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="JUL架构示意图"><br>Loggers：记录器，应用程序通过获取Logger对象调用其API来发布日志信息。Logger通常是应用程序访问日志系统的入口<br>Appenders：也称为Handlers，每个Logger都会关联一组Handlers。Logger将日志交给关联Handlers处理，由Handlers负责将日志做记录。Handlers是一个抽象，其具体的实现决定了日志记录的位置，可以是控制台、文件、网络上的其他日志服务或操作系统日志等<br>Layouts：也称为Formatters，负责对日志事件中的数据进行转换和格式化。Layouts决定了数据在一条日志记录中的最终形式<br>Level：每条日志消息都有一个关联的日志级别。该级别粗略指导了日志消息的重要性和紧迫，可以将Level和Loggers，Appenders关联以便于过滤消息<br>Filters：过滤器，根据需要定制哪些信息会被记录，哪些信息会被放行</p></li><li><p>入门案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、获取日志记录器</span></span><br><span class="line">Logger logger = Logger.getLogger(getClass().getName());</span><br><span class="line"><span class="comment">// 2、日志记录输出</span></span><br><span class="line">logger.info(<span class="string">"Hello JUL~~~"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通用方法进行日志记录</span></span><br><span class="line">logger.log(Level.INFO, <span class="string">"Hello SOBXiong~~~"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过占位符方式输出变量值</span></span><br><span class="line">String name = <span class="string">"SOBXiong"</span>;</span><br><span class="line"><span class="keyword">int</span> age = <span class="number">23</span>;</span><br><span class="line">logger.log(Level.INFO, <span class="string">"Hello &#123;0&#125;,&#123;1&#125;"</span>, <span class="keyword">new</span> Object[]&#123;name, age&#125;);</span><br></pre></td></tr></table></figure></li><li><p>日志级别：</p><ol><li>SEVERE(最高值)</li><li>WARNING</li><li>INFO(默认级别)</li><li>CONFIG</li><li>FINE</li><li>FINER</li><li>FINEST(最低值)</li><li>OFF(关闭日志记录)</li><li>ALL(启用所有消息的日志记录)</li></ol></li><li><p>自定义日志级别案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、获取日志记录器</span></span><br><span class="line">Logger logger = Logger.getLogger(getClass().getName());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭系统默认配置</span></span><br><span class="line">logger.setUseParentHandlers(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义日志级别</span></span><br><span class="line"><span class="comment">// 创建ConsoleHandler</span></span><br><span class="line">ConsoleHandler consoleHandler = <span class="keyword">new</span> ConsoleHandler();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建简单格式转换对象</span></span><br><span class="line">SimpleFormatter simpleFormatter = <span class="keyword">new</span> SimpleFormatter();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进行关联</span></span><br><span class="line">consoleHandler.setFormatter(simpleFormatter);</span><br><span class="line">logger.addHandler(consoleHandler);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置日志具体级别</span></span><br><span class="line">logger.setLevel(Level.ALL);</span><br><span class="line">consoleHandler.setLevel(Level.ALL);</span><br><span class="line"></span><br><span class="line"><span class="comment">// FileHandler文件输出</span></span><br><span class="line">FileHandler fileHandler = <span class="keyword">new</span> FileHandler(<span class="string">"jul.log"</span>);</span><br><span class="line">fileHandler.setFormatter(simpleFormatter);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进行关联(一个logger可以设置多个handler)</span></span><br><span class="line">logger.addHandler(fileHandler);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、日志记录输出</span></span><br><span class="line">logger.severe(<span class="string">"Hello SOBXiong"</span>);</span><br><span class="line">logger.warning(<span class="string">"Hello SOBXiong"</span>);</span><br><span class="line"><span class="comment">// jul默认日志级别为info</span></span><br><span class="line">logger.info(<span class="string">"Hello SOBXiong"</span>);</span><br><span class="line">logger.config(<span class="string">"Hello SOBXiong"</span>);</span><br><span class="line">logger.fine(<span class="string">"Hello SOBXiong"</span>);</span><br></pre></td></tr></table></figure></li><li><p>Logger之间父子关系案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">JUL中Logger之间存在父子关系，这种父子关系通过树状结构存储。JUL在初始化时会创建一个顶层RootLogger作为所有Logger的父Logger，存储上作为树状结构的根节点。父子关系通过路径来关联</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Logger logger1 = Logger.getLogger(<span class="string">"com.xiong"</span>);</span><br><span class="line">Logger logger2 = Logger.getLogger(<span class="string">"com"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line">logger1.log(Level.INFO, <span class="string">"logger1 == logger2 &#123;0&#125;"</span>, logger1.getParent() == logger2);</span><br><span class="line">System.out.println(logger2.getParent());</span><br><span class="line"><span class="comment">// 所有日志记录器的顶级父元素: LogManager$RootLogger, name为空</span></span><br><span class="line">System.out.println(logger2.getParent().getName());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭默认配置</span></span><br><span class="line">logger2.setUseParentHandlers(<span class="keyword">false</span>);</span><br><span class="line"><span class="comment">// 设置logger2日志级别</span></span><br><span class="line">ConsoleHandler consoleHandler = <span class="keyword">new</span> ConsoleHandler();</span><br><span class="line">SimpleFormatter simpleFormatter = <span class="keyword">new</span> SimpleFormatter();</span><br><span class="line">consoleHandler.setFormatter(simpleFormatter);</span><br><span class="line">logger2.addHandler(consoleHandler);</span><br><span class="line">logger2.setLevel(Level.ALL);</span><br><span class="line">consoleHandler.setLevel(Level.ALL);</span><br><span class="line"></span><br><span class="line">logger1.severe(<span class="string">"Hello SOBXiong"</span>);</span><br><span class="line">logger1.warning(<span class="string">"Hello SOBXiong"</span>);</span><br><span class="line">logger1.info(<span class="string">"Hello SOBXiong"</span>);</span><br><span class="line">logger1.config(<span class="string">"Hello SOBXiong"</span>);</span><br><span class="line">logger1.fine(<span class="string">"Hello SOBXiong"</span>);</span><br></pre></td></tr></table></figure></li><li><p>日志配置文件案例：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># RootLogger顶级父元素指定的默认处理器为ConsoleHandler</span></span><br><span class="line"><span class="attr">handlers</span>=<span class="string">java.util.logging.ConsoleHandler,java.util.logging.FileHandler</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># RootLogger顶级父元素默认日志级别为ALL,名次为空</span></span><br><span class="line"><span class="meta">.level</span>=<span class="string">ALL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义Logger</span></span><br><span class="line"><span class="meta">com.xiong.logger.handlers</span>=<span class="string">java.util.logging.ConsoleHandler</span></span><br><span class="line"><span class="meta">com.xiong.logger.level</span>=<span class="string">CONFIG</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭默认配置</span></span><br><span class="line"><span class="meta">com.xiong.logger.useParentHandlers</span>=<span class="string">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 向日志文件输出的handler对象</span></span><br><span class="line"><span class="comment"># 指定日志文件路径</span></span><br><span class="line"><span class="meta">java.util.logging.FileHandler.pattern</span>=<span class="string">java%u.log</span></span><br><span class="line"><span class="comment"># 指定日志文件内容大小</span></span><br><span class="line"><span class="meta">java.util.logging.FileHandler.limit</span>=<span class="string">50000</span></span><br><span class="line"><span class="comment"># 指定日志文件数量</span></span><br><span class="line"><span class="meta">java.util.logging.FileHandler.count</span>=<span class="string">1</span></span><br><span class="line"><span class="comment"># 指定handler对象日志消息格式对象</span></span><br><span class="line"><span class="meta">java.util.logging.FileHandler.formatter</span>=<span class="string">java.util.logging.SimpleFormatter</span></span><br><span class="line"><span class="comment"># 指定以追加方式添加日志内容</span></span><br><span class="line"><span class="meta">java.util.logging.FileHandler.append</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 向控制台输出的handler对象</span></span><br><span class="line"><span class="comment"># 指定handler对象的日志级别</span></span><br><span class="line"><span class="meta">java.util.logging.ConsoleHandler.level</span>=<span class="string">ALL</span></span><br><span class="line"><span class="comment"># 指定handler对象的日志消息格式对象</span></span><br><span class="line"><span class="meta">java.util.logging.ConsoleHandler.formatter</span>=<span class="string">java.util.logging.SimpleFormatter</span></span><br><span class="line"><span class="comment"># 指定handler对象的字符集</span></span><br><span class="line"><span class="meta">java.util.logging.ConsoleHandler.encoding</span>=<span class="string">UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定日志消息格式</span></span><br><span class="line"><span class="meta">java.util.logging.SimpleFormatter.format</span>=<span class="string">%4$s: %5$s [%1$tc]%n</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读取配置文件,通过类加载器</span></span><br><span class="line">InputStream is = getClass().getClassLoader().getResourceAsStream(<span class="string">"logging.properties"</span>);</span><br><span class="line"><span class="comment">// 创建LogManager</span></span><br><span class="line">LogManager logManager = LogManager.getLogManager();</span><br><span class="line"><span class="comment">// 通过LogManager加载配置文件</span></span><br><span class="line">logManager.readConfiguration(is);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建日志记录器</span></span><br><span class="line">Logger logger = Logger.getLogger(getClass().getName());</span><br><span class="line"></span><br><span class="line">logger.severe(<span class="string">"Hello SOBXiong1"</span>);</span><br><span class="line">logger.warning(<span class="string">"Hello SOBXiong2"</span>);</span><br><span class="line">logger.info(<span class="string">"Hello SOBXiong3"</span>);</span><br><span class="line">logger.config(<span class="string">"Hello SOBXiong4"</span>);</span><br><span class="line">logger.fine(<span class="string">"Hello SOBXiong5"</span>);</span><br></pre></td></tr></table></figure></li><li><p>日志原理解析：<br><img src="JUL%E6%B5%81%E7%A8%8B%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="JUL流程示意图"></p><ol><li>初始化LogManager<ol><li>LogManager加载logging.properties配置</li><li>添加Logger到LogManager</li></ol></li><li>从单例LogManager获取Logger</li><li>设置级别Level，并指定日志记录LogRecord</li><li>Filter提供了日志级别之外更细粒度的控制</li><li>Handler用来处理日志输出位置</li><li>Formatter用来格式化LogRecord</li></ol></li></ul></li><li><p>log4j入门</p><ul><li><p>log4j介绍：Log4j是Apache下的一款开源的日志框架，通过在项目中使用Log4J，可控制日志信息输出到控制台、文件、甚至是数据库中。可控制每一条日志的输出格式；通过定义日志的输出级别，可以更灵活地控制日志的输出过程；方便项目的调试。官网：<a href="http://logging.apache.org/log4j/1.2/" target="_blank" rel="noopener">http://logging.apache.org/log4j/1.2/</a></p></li><li><p>入门案例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- log4j依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化配置信息,当前暂使用代码不使用配置文件</span></span><br><span class="line">BasicConfigurator.configure();</span><br><span class="line"><span class="comment">// 获取日志记录器对象</span></span><br><span class="line">Logger logger = Logger.getLogger(Log4jTest<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">// 日志记录输出</span></span><br><span class="line">logger.info(<span class="string">"Hello Log4j"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 日志级别</span></span><br><span class="line"><span class="comment">// 严重错误,一般会造成系统崩溃并终止运行</span></span><br><span class="line">logger.fatal(<span class="string">"fatal"</span>);</span><br><span class="line"><span class="comment">// 错误信息,不会影响系统运行</span></span><br><span class="line">logger.error(<span class="string">"error"</span>);</span><br><span class="line"><span class="comment">// 警告信息,可能会发生问题</span></span><br><span class="line">logger.warn(<span class="string">"error"</span>);</span><br><span class="line"><span class="comment">// 运行信息,数据连接、网络连接、IO操作等等</span></span><br><span class="line">logger.info(<span class="string">"info"</span>);</span><br><span class="line"><span class="comment">// 调试信息,一般在开发中使用,记录程序变量参数传递信息等等</span></span><br><span class="line">logger.debug(<span class="string">"debug"</span>);</span><br><span class="line"><span class="comment">// 追踪信息,记录程序所有的流程信息</span></span><br><span class="line">logger.trace(<span class="string">"trace"</span>);</span><br></pre></td></tr></table></figure></li><li><p>日志级别：</p><ol><li>fatal：指出每个将会导致应用程序退出的严重的错误事件</li><li>error：指出虽然发生错误事件，但仍然不影响系统继续运行</li><li>warn：表明会出现潜在的错误情形</li><li>info：一般用于粗粒度级别上，强调应用程序的运行全程</li><li>debug：一般用于细粒度级别上，对调试应用程序非常有帮助</li><li>trace：程序追踪，可以用于输出程序运行中的变量，显示执行的流程</li><li>OFF：用来关闭日志记录</li><li>ALL：启用所有消息的日志记录</li></ol></li><li><p>组件：log4j主要由Loggers(日志记录器)、Appenders(输出端)和Layout(日志格式化器)组成。其中Loggers控制日志的输出级别与日志是否输出；Appenders指定日志的输出方式(输出到控制台、文件等)；Layout控制日志信息的输出格式</p><ol><li>Loggers：日志记录器，负责收集处理日志记录。实例的命名就是类的全限定名，Logger的名字大小写敏感，其命名有继承机制。例如：name为org.apache.commons的logger会继承name为org.apache的logger<br>log4j中有一个特殊的logger叫”root”，它是所有logger的根，也意味着其他所有的logger都会直接或者间接地继承自root。root logger可以用Logger.getRootLogger()方法获取</li><li>Appenders：用来指定日志输出到哪个地方，可以同时指定日志的输出目的地。常用有以下5种：<table><thead><tr><th>输出端类型</th><th>作用</th></tr></thead><tbody><tr><td>ConsoleAppender</td><td>将日志输出到控制台</td></tr><tr><td>FileAppender</td><td>将日志输出到文件中</td></tr><tr><td>DailyRollingFileAppender</td><td>将日志输出到一个日志文件,并且每天输出到一个新的文件</td></tr><tr><td>RollingFileAppender</td><td>将日志信息输出到一个日志文件,并且指定文件的最大尺寸;当文件大小达到指定尺寸时,会自动把文件改名,同时产生一个新的文件</td></tr><tr><td>JDBCAppender</td><td>把日志信息保存到数据库中</td></tr></tbody></table></li><li>Layouts：布局器Layouts用于控制日志输出内容的格式，可使用各种指定的格式输出日志。常用的Layouts有以下3种：<table><thead><tr><th>格式化器类型</th><th>作用</th></tr></thead><tbody><tr><td>HTMLLayout</td><td>格式化日志输出为HTML表格形式</td></tr><tr><td>SimpleLayout</td><td>简单的日志输出格式化,打印的日志格式为(info - message)</td></tr><tr><td>PatternLayout</td><td>最强大的格式化器,可以根据自定义格式输出日志;如果没有指定转换格式,就是用默认的转换格式</td></tr></tbody></table></li></ol></li><li><p>Layout格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># log4j采用类似C语言printf()函数的打印格式格式化日志信息,具体的占位符及其含义如下： %m 输出代码中指定的日志信息</span><br><span class="line">%p 输出优先级,即DEBUG、INFO等</span><br><span class="line">%n 换行符</span><br><span class="line">%r 输出自应用启动到输出该log信息耗费的毫秒数</span><br><span class="line">%c 输出打印语句所属的类的全名</span><br><span class="line">%t 输出产生该日志的线程全名</span><br><span class="line">%d 输出服务器当前时间,默认为ISO8601;也可以指定格式,如：%d&#123;yyyy年MM月dd日 HH:mm:ss&#125;</span><br><span class="line">%l 输出日志时间发生的位置,包括类名、线程、及在代码中的行数。如：Test.main(Test.java:10)</span><br><span class="line">%F 输出日志消息产生时所在的文件名称</span><br><span class="line">%L 输出代码中的行号</span><br><span class="line">%% 输出一个'%'字符</span><br><span class="line"></span><br><span class="line"># 可以在'%'与字符之间加上修饰符来控制最小宽度、最大宽度和文本的对其方式：</span><br><span class="line">%5c 输出category名称,最小宽度是5;category&lt;5,默认的情况下右对齐</span><br><span class="line">%-5c 输出category名称,最小宽度是5;category&lt;5,"-"号指定左对齐,会有空格</span><br><span class="line">%.5c 输出category名称,最大宽度是5;category&gt;5,就会将左边多出的字符截掉;&lt;5不会有空格</span><br><span class="line">%20.30c 输出category名称,&lt;20补空格,并且右对齐;&gt;30就从左边多出的字符截掉</span><br></pre></td></tr></table></figure></li><li><p>配置文件案例：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认类路径下的log4j.properties文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定RootLogger顶级父元素默认配置</span></span><br><span class="line"><span class="comment"># 指定日志级别为trace,使用appender为console、file</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span> = <span class="string">trace,console</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义logger对象设置,不显式声明appender则使用rootLogger的appender</span></span><br><span class="line"><span class="meta">log4j.logger.com.xiong.logger</span> = <span class="string">info,file</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定控制台日志输出的appender</span></span><br><span class="line"><span class="meta">log4j.appender.console</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="comment"># 指定消息格式layout</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="comment"># 指定消息格式内容(OGNL表达式)</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout.conversionPattern</span> = <span class="string">[%-10p]%r  %l %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %m%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志文件输出的appender对象</span></span><br><span class="line"><span class="meta">log4j.appender.file</span> = <span class="string">org.apache.log4j.FileAppender</span></span><br><span class="line"><span class="comment"># 指定消息格式layout</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="comment"># 指定消息格式内容(OGNL表达式)</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout.conversionPattern</span> = <span class="string">[%-10p]%r  %l %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %m%n</span></span><br><span class="line"><span class="comment"># 指定日志文件保存路径</span></span><br><span class="line"><span class="meta">log4j.appender.file.file</span> = <span class="string">log4j.log</span></span><br><span class="line"><span class="comment"># 指定日志文件的字符集</span></span><br><span class="line"><span class="meta">log4j.appender.file.encoding</span> = <span class="string">UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照文件大小拆分的appender对象</span></span><br><span class="line"><span class="meta">log4j.appender.rollingFile</span> = <span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="comment"># 指定消息格式layout</span></span><br><span class="line"><span class="meta">log4j.appender.rollingFile.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="comment"># 指定消息格式内容(OGNL表达式)</span></span><br><span class="line"><span class="meta">log4j.appender.rollingFile.layout.conversionPattern</span> = <span class="string">[%-10p]%r  %l %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %m%n</span></span><br><span class="line"><span class="comment"># 指定日志文件保存路径</span></span><br><span class="line"><span class="meta">log4j.appender.rollingFile.file</span> = <span class="string">log4j.log</span></span><br><span class="line"><span class="comment"># 指定日志文件的字符集</span></span><br><span class="line"><span class="meta">log4j.appender.rollingFile.encoding</span> = <span class="string">UTF-8</span></span><br><span class="line"><span class="comment"># 指定日志文件内容的大小</span></span><br><span class="line"><span class="meta">log4j.appender.rollingFile.maxFileSize</span> = <span class="string">1MB</span></span><br><span class="line"><span class="comment"># 指定日志文件的数量</span></span><br><span class="line"><span class="meta">log4j.appender.rollingFile.maxBackupIndex</span> = <span class="string">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照时间规则拆分的appender对象</span></span><br><span class="line"><span class="meta">log4j.appender.dailyFile</span> = <span class="string">org.apache.log4j.DailyRollingFileAppender</span></span><br><span class="line"><span class="comment"># 指定消息格式layout</span></span><br><span class="line"><span class="meta">log4j.appender.dailyFile.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="comment"># 指定消息格式内容(OGNL表达式)</span></span><br><span class="line"><span class="meta">log4j.appender.dailyFile.layout.conversionPattern</span> = <span class="string">[%-10p]%r  %l %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %m%n</span></span><br><span class="line"><span class="comment"># 指定日志文件保存路径</span></span><br><span class="line"><span class="meta">log4j.appender.dailyFile.file</span> = <span class="string">log4j.log</span></span><br><span class="line"><span class="comment"># 指定日志文件的字符集</span></span><br><span class="line"><span class="meta">log4j.appender.dailyFile.encoding</span> = <span class="string">UTF-8</span></span><br><span class="line"><span class="comment"># 指定日期的拆分规则</span></span><br><span class="line"><span class="meta">log4j.appender.dailyFile.datePattern</span> = <span class="string">'.'yyyy-MM-dd-HH-mm-ss</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>logback入门：</p><ul><li><p>logback介绍：Logback是由log4j创始人设计的另一个开源日志组件，性能比log4j要好。官网：<a href="https://logback.qos.ch/index.html" target="_blank" rel="noopener">https://logback.qos.ch/index.html</a><br>logback主要分为三个模块：</p><ol><li>logback-core：基础核心模块</li><li>logback-classic：log4j的一个改良版本，并完整实现了slf4j API</li><li>logback-access：访问模块与Servlet容器集成提供通过Http来访问日志的功能</li></ol></li><li><p>入门案例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(LogbackTest<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuick</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 由于logback和slf4j是同一作者,API设置差不多</span></span><br><span class="line">  <span class="comment">// 日志输出</span></span><br><span class="line">  logger.error(<span class="string">"error"</span>);</span><br><span class="line">  logger.warn(<span class="string">"warn"</span>);</span><br><span class="line">  logger.info(<span class="string">"info"</span>);</span><br><span class="line">  logger.debug(<span class="string">"debug"</span>);</span><br><span class="line">  logger.trace(<span class="string">"trace"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>logback配置：</p><ul><li><p>读取配置流程(依次去读)：</p><ol><li>logback.groovy</li><li>logback-test.xml</li><li>logback.xml</li><li>默认配置</li></ol></li><li><p>logback组件间的关系：</p><ol><li>Logger：日志记录器，关联到应用的对应的context上后，主要用于存放日志对象，也可以定义日志类型、级别</li><li>Appender：用于指定日志输出的目的地，可以是控制台、文件、数据库等等</li><li>Layout：负责把事件转换成字符串(格式化的日志信息)。在logback中Layout对象被封装在encoder中</li></ol></li><li><p>基本配置信息：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    日志输出格式：</span></span><br><span class="line"><span class="comment">    %-5level: 级别,左对齐,5个字符</span></span><br><span class="line"><span class="comment">    %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;: 格式化日期</span></span><br><span class="line"><span class="comment">    %c: 类的完整名称</span></span><br><span class="line"><span class="comment">    %M: method方法名</span></span><br><span class="line"><span class="comment">    %L: 行号</span></span><br><span class="line"><span class="comment">    %thread: 线程名称</span></span><br><span class="line"><span class="comment">    %m/%msg: 信息</span></span><br><span class="line"><span class="comment">    %n: 换行</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 定义打印pattern --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"pattern"</span> <span class="attr">value</span>=<span class="string">"%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %c [%thread] %-5level %msg%n"</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 定义日志文件保存路径属性 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"logDir"</span> <span class="attr">value</span>=<span class="string">"logback"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 控制台日志输出的appender --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"console"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 控制输出流对象,默认System.out,改为System.err --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">target</span>&gt;</span>System.err<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志消息格式配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;pattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 日志文件输出的appender --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.FileAppender"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志文件保存路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;logDir&#125;/tmp.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志消息格式配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;pattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- HTML格式日志文件输出appender --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"htmlFile"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.FileAppender"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志文件保存路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;logDir&#125;/tmp.html<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- html日志消息格式配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.encoder.LayoutWrappingEncoder"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.html.HTMLLayout"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;pattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 日志拆分和归档压缩的appender对象 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"rollFile"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志文件保存路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;logDir&#125;/roll_logback.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志消息格式配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;pattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定拆分规则 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 按照时间和压缩格式声明拆分的文件名 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- %i根据文件排序 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;logDir&#125;/rolling.%d&#123;yyyy-MM-dd-HH-mm-ss&#125;.%i.log.gz<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 按照文件大小拆分 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>1MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志级别过滤器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 日志过滤规则 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 异步日志 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"async"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.AsyncAppender"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定某个具体的appender --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"rollFile"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- root logger配置 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"ALL"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    &lt;appender-ref ref="console"/&gt;</span></span><br><span class="line"><span class="comment">    &lt;appender-ref ref="file"/&gt;</span></span><br><span class="line"><span class="comment">    &lt;appender-ref ref="htmlFile"/&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"async"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  自定义logger对象</span></span><br><span class="line"><span class="comment">  additivity: 自定义logger对象是否继承rootLogger</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.xiong.logger"</span> <span class="attr">level</span>=<span class="string">"info"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"console"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>logback-access使用：logback-access模块与Servlet容器(如Tomcat、Jetty)集成以提供HTTP访问日志功能。可使用logback-access模块来替换tomcat的访问日志</p><ol><li><p>将logback-access.jar与logback-core.jar复制到$TOMCAT_HOME/lib/目录下</p></li><li><p>修改$TOMCAT_HOME/conf/server.xml中的Host元素中添加：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"ch.qos.logback.access.tomcat.LogbackValve"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>logback默认会在$TOMCAT_HOME/conf下查找文件logback-access.xml</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 参考自http://logback.qos.ch/access.html#configuration --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- always a good activate OnConsoleStatusListener --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">statusListener</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.status.OnConsoleStatusListener"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_DIR"</span> <span class="attr">value</span>=<span class="string">"$&#123;catalina.base&#125;/logs"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_DIR&#125;/access.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>access.%d&#123;yyyy-MM-dd&#125;.log.zip<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 访问日志的格式 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>combined<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ul></li></ul></li><li><p>log4j2入门(即是日志门面也是日志实现)：</p><ul><li><p>log4j2介绍：Apache Log4j2是对Log4j的升级版，参考了logback的一些优秀的设计，并且修复了一些问题，带来了一些重大的提升，主要有：</p><ol><li>异常处理：在logback中，Appender中的异常不会被应用感知到；在log4j2中提供了一些异常处理机制</li><li>性能提升：log4j2相较于log4j和logback具有明显的性能提升</li><li>自动重载配置：参考了logback的设计，提供了自动刷新参数配置，在生产上可以动态地修改日志的级别而不需要重启应用</li><li>无垃圾机制：log4j2在大部分情况下都可以使用其设计的一套无垃圾机制，避免频繁的日志收集导致的JVM GC<br>官网：<a href="https://logging.apache.org/log4j/2.x/" target="_blank" rel="noopener">https://logging.apache.org/log4j/2.x/</a></li></ol></li><li><p>入门案例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Log4j2门面API--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Log4j2日志实现 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义日志记录器对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LogManager.getLogger(Log4j2Test<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 快速入门</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuick</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 日志消息输出</span></span><br><span class="line">  logger.error(<span class="string">"error"</span>);</span><br><span class="line">  logger.warn(<span class="string">"warn"</span>);</span><br><span class="line">  logger.info(<span class="string">"info"</span>);</span><br><span class="line">  logger.debug(<span class="string">"debug"</span>);</span><br><span class="line">  logger.trace(<span class="string">"trace"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>log4j2配置：log4j2默认加载classpath下的log4j2.xml文件中的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">status="debug": warn为日志框架本身的输出日志级别</span></span><br><span class="line"><span class="comment">monitorInterval="5": 自动加载配置文件的间隔时间,不低于5s</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">"debug"</span> <span class="attr">monitorInterval</span>=<span class="string">"5"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 集中配置属性进行管理,可以使用$&#123;&#125;获取 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span>&gt;</span>log4j2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 日志处理器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 控制台输出appender --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">"Console"</span> <span class="attr">target</span>=<span class="string">"SYSTEM_OUT"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"%d&#123;HH:mm:ss.SSS&#125; [%t] [%-5level] %c&#123;36&#125;:%L - -- %m%n"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志文件输出appender --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">File</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">fileName</span>=<span class="string">"$&#123;LOG_HOME&#125;/file.log"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%-5level] %l %c&#123;36&#125; - %m%n"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">File</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 随机读写流输出appender,性能提高 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">RandomAccessFile</span> <span class="attr">name</span>=<span class="string">"accessFile"</span> <span class="attr">fileName</span>=<span class="string">"$&#123;LOG_HOME&#125;/accessFile.log"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%-5level] %l %c&#123;36&#125; - %m%n"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">RandomAccessFile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    按照一定的规则拆分日志文件appender</span></span><br><span class="line"><span class="comment">    filePattern拆分规则</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">"rollingFile"</span> <span class="attr">fileName</span>=<span class="string">"$&#123;LOG_HOME&#125;/rollingFile.log"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">filePattern</span>=<span class="string">"log4j2/$$&#123;date:yyyy-MM-dd&#125;/rollingFile-%d&#123;yyyy- MM-dd-HH-mm&#125;-%i.log"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 日志级别过滤器 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"debug"</span> <span class="attr">onMatch</span>=<span class="string">"ACCEPT"</span> <span class="attr">onMismatch</span>=<span class="string">"DENY"</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 日志消息格式 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%-5level] %l %c&#123;36&#125; - %msg%n"</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 策略 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在系统启动时触发拆分规则,产生一个新日志文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">OnStartupTriggeringPolicy</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 按照文件大小进行拆分,产生一个新日志文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"10 MB"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 按照时间节点拆分,规则由filePattern定义 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 在同一个目录下,文件个数限定,超过进行覆盖 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">"30"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- logger定义 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用rootLogger配置以及level --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">"trace"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"Console"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>log4j2异步日志：log4j2最大的特点就是异步日志，其性能的提升也主要在异步日志<br><img src="%E5%90%8C%E6%AD%A5%E6%97%A5%E5%BF%97%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="同步日志执行流程示意图"><br><img src="%E5%BC%82%E6%AD%A5%E6%97%A5%E5%BF%97%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="异步日志执行流程示意图"><br>Log4j2提供了两种实现异步日志的方式：</p><ol><li><p>通过AsyncAppender，对应Appender组件</p></li><li><p>通过AsyncLogger，对应Logger组件</p><ul><li>导入依赖(异步日志需要另外依赖)</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--异步日志依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lmax<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>disruptor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ul><li><p>AsyncAppender方式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">"warn"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span>&gt;</span>logs<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">File</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">fileName</span>=<span class="string">"$&#123;LOG_HOME&#125;/log4j2.log"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">PatternLayout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>%d %p %c&#123;1.&#125; [%t] %m%n<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">PatternLayout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">File</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Async</span> <span class="attr">name</span>=<span class="string">"Async"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"file"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Async</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">"error"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"Async"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>AsyncLogger方式：AsyncLogger才是log4j2的重头戏，也是官方推荐的异步方式。它可使调用Logger.log返回地更快。有两种选择：全局异步和混合异步</p><ol><li><p><strong>全局异步</strong>：所有的日志都异步的记录，在配置文件上不用做任何改动，只需要添加一个<code>log4j2.component.properties</code>配置</p> <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Log4jContextSelector</span>=<span class="string">org.apache.logging.log4j.core.async.AsyncLoggerContextSelector</span></span><br></pre></td></tr></table></figure></li><li><p><strong>混合异步</strong>：可在应用中同时使用同步日志和异步日志，这使得日志的配置方式更加灵活</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">"WARN"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span>&gt;</span>logs<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">File</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">fileName</span>=<span class="string">"$&#123;LOG_HOME&#125;/log4j2.log"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">PatternLayout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>%d %p %c&#123;1.&#125; [%t] %m%n<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">PatternLayout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">File</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Async</span> <span class="attr">name</span>=<span class="string">"Async"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"file"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Async</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">AsyncLogger</span> <span class="attr">name</span>=<span class="string">"com.xiong"</span> <span class="attr">level</span>=<span class="string">"trace"</span> <span class="attr">includeLocation</span>=<span class="string">"false"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"file"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">AsyncLogger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">"info"</span> <span class="attr">includeLocation</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"file"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>使用异步日志<strong>需要注意的问题</strong>：</p><ol><li>如果使用异步日志，AsyncAppender、AsyncLogger和全局日志不要同时出现。性能会和AsyncAppender一致，降至最低(木桶原理)</li><li>需设置includeLocation=false，打印位置信息会急剧降低异步日志的性能，比同步日志还要慢</li></ol></li></ul></li><li><p>log4j2无垃圾记录：<br>垃圾收集暂停是延迟峰值的常见原因。对于许多系统而言，需要花费大量精力来控制这些暂停<br>许多日志库(包括以前版本的Log4j)在稳态日志记录期间分配临时对象，如日志事件对象、字符串、字符数组、字节数组等。这会对垃圾收集器造成压力并增加GC暂停发生的频率<br>从版本2.6开始，默认情况下Log4j以”无垃圾”模式运行，重用对象和缓冲区，并且尽可能不分配临时对象。还有一个”低垃圾”模式，它不是完全无垃圾，但不使用ThreadLocal字段<br>Log4j版本2.6中的无垃圾日志记录部分通过重用ThreadLocal字段中的对象来实现，部分通过在将文本转换为字节时重用缓冲区来实现<br>有两个单独的系统属性可用于手动控制Log4j避免创建临时对象的机制：</p><ol><li><code>log4j2.enableThreadlocals</code>：true(非Web应用程序的默认值)，则对象存储在ThreadLocal字段中并重新使用，否则将为每个日志事件创建新对象</li><li><code>log4j2.enableDirectEncoders</code>：tru(默认)，则将日志事件转换为文本，此文本转换为字节而不创建临时对象。注意：由于共享缓冲区上的同步，在此模式下多线程应用程序的同步日志记录性能可能更差。如果应用程序是多线程的并且日志记录性能很重要，请考虑使用异步记录器</li></ol></li></ul></li></ol><h2 id="日志门面"><a href="#日志门面" class="headerlink" title="日志门面"></a>日志门面</h2><ul><li><p>背景：<br>当系统变得更加复杂时，日志就容易发生混乱。随着系统开发的进行，可能会更新不同的日志框架，这会造成当前系统中存在不同的日志依赖，难以统一地管理和控制。就算强制要求所有的模块使用相同的日志框架，系统中也难以避免使用其他类似Spring、MyBatis等其他的第三方框架，它们依赖于不同的日志框架，而且它们自身的日志系统有着不一致性，依然会导致日志体系的混乱<br>借鉴JDBC的思想，可为日志系统也提供一套门面，那么就可以面向这些接口规范来开发，免去直接依赖具体的日志实现框架</p></li><li><p>日志框架出现顺序：<br>log4j -&gt; JUL -&gt; JCL -&gt; slf4j -&gt; logback -&gt; log4j2</p></li><li><p>具体日志门面框架：</p><ol><li><p>JCL入门：</p><ul><li><p>介绍：JCL(Jakarta Commons Logging)是Apache提供的一个通用日志API。它为”所有的Java日志实现”提供一个统一的接口，它自身也提供一个简单日志的实现(SimpleLog,但功能非常常弱)。它允许使用不同的具体日志实现框架：Log4j、JDK自带的日志(JUL)以及SimpleLog。JCL有两个基本的抽象类：Log(基本记录器)和LogFactory(负责创建Log实例)</p></li><li><p>入门案例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuick</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">// 获取log日志记录器对象</span></span><br><span class="line">  Log log = LogFactory.getLog(JCLTest<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">// 日志记录输出</span></span><br><span class="line">  log.info(<span class="string">"Hello JCL"</span>);</span><br><span class="line">  log.fatal(<span class="string">"fatal"</span>);</span><br><span class="line">  log.error(<span class="string">"error"</span>);</span><br><span class="line">  log.warn(<span class="string">"warn"</span>);</span><br><span class="line">  log.info(<span class="string">"info"</span>);</span><br><span class="line">  log.debug(<span class="string">"debug"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>JCL原理：</p><ol><li><p>通过LogFactory动态加载Log实现类</p></li><li><p>获取具体的日志实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] classesToDiscover = <span class="keyword">new</span> String[]&#123;</span><br><span class="line">  <span class="string">"org.apache.commons.logging.impl.Log4JLogger"</span>, <span class="string">"org.apache.commons.logging.impl.Jdk14Logger"</span>, <span class="string">"org.apache.commons.logging.impl.Jdk13LumberjackLogger"</span>, <span class="string">"org.apache.commons.logging.impl.SimpleLog"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// 默认加载第一个发现的日志实现框架</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; classesToDiscover.length &amp;&amp; result == <span class="keyword">null</span>; ++i) &#123;</span><br><span class="line">  result = <span class="keyword">this</span>.createLogFromClass(classesToDiscover[i], logCategory, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul></li><li><p>slf4j入门：</p><ul><li><p>介绍：<br>简单日志门面slf4j((Simple Logging Facade For Java))主要是为了给Java日志访问提供一套标准、规范的API框架。主要意义在于提供接口，具体的实现交由其他日志框架，如log4j2和logback等<br>slf4j自身也提供功能较为简单的实现，但基本不使用。slf4j是目前市面上最流行的日志门面。现在项目中基本上都使用slf4j作为日志门面，配上具体的实现框架(log4j2、logback等)，中间使用桥接器完成桥接<br>slf4j日志门面主要提供两大功能：日志框架的绑定和桥接<br>官方网站：<a href="https://www.slf4j.org/" target="_blank" rel="noopener">https://www.slf4j.org/</a></p></li><li><p>入门案例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--slf4j core 使用slf4j必須添加--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--slf4j 自带的简单日志实现 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-simple<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(Slf4jTest<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 日志输出</span></span><br><span class="line">  LOGGER.error(<span class="string">"error"</span>);</span><br><span class="line">  LOGGER.warn(<span class="string">"warn"</span>);</span><br><span class="line">  LOGGER.info(<span class="string">"info"</span>);</span><br><span class="line">  LOGGER.debug(<span class="string">"debug"</span>);</span><br><span class="line">  LOGGER.trace(<span class="string">"trace"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用占位符输出日志信息</span></span><br><span class="line">  String name = <span class="string">"SOBXiong"</span>;</span><br><span class="line">  Integer age = <span class="number">23</span>;</span><br><span class="line">  LOGGER.info(<span class="string">"Name: &#123;&#125; , age: &#123;&#125;"</span>, name, age);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 异常信息输出</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    LOGGER.error(<span class="string">"Error Occurs: "</span>, e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>slf4j的好处：</p><ol><li>使用slf4j框架，可在部署时迁移到所需的日志记录框架</li><li>slf4j提供了对所有流行的日志框架的绑定，例如log4j，JUL，Simple logging和NOP等。因此可在部署时切换到任何这些框架</li><li>无论使用哪种绑定，slf4j都支持参数化日志记录消息。由于slf4j将应用程序和日志记录框架分离，因此可以轻松编写独立于日志记录框架的应用程序，而无需担心用于编写应用程序的日志记录框架</li><li>slf4j提供了一个简单的Java工具，称为迁移器。使用此工具，可以迁移现有项目到slf4j</li></ol></li><li><p>绑定日志实现(Bind)：slf4j支持各种日志框架。slf4j发行版附带了几个称为”slf4j绑定”的jar包，每个绑定对应一个受支持的框架</p><ul><li><p>绑定流程：</p><ol><li>添加slf4j-api的依赖</li><li>使用slf4j的API在项目中进行统一的日志记录</li><li>绑定具体的日志实现框架<ol><li>绑定已经实现了slf4j的日志框架：直接添加对应依赖</li><li>绑定没有实现slf4j的日志框架：先添加日志的适配器，再添加实现类的依赖</li></ol></li><li>slf4j有且仅有一个日志实现框架的绑定(如果出现多个默认使用第一个依赖日志实现)</li></ol></li><li><p>常用的绑定日志实现pom依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- slf4j core,使用slf4j必须添加 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- logback默认支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- log4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- jul --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-jdk14<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- jcl --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-jcl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- nop --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-nop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>绑定原理：<br>要切换日志框架只需替换类路径上的slf4j绑定。例如从java.util.logging切换到log4j，只需将slf4j-jdk14.jar替换为slf4j-log4j12.jar即可<br>slf4j不依赖于任何特殊的类装载。实际上每个slf4j绑定在编译时都是硬连线以使用一个且只有一个特定的日志记录框架。以下是一般概念的图解说明：<br><img src="slf4j%E7%BB%91%E5%AE%9A%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="slf4j绑定示意图"></p></li></ul></li><li><p>桥接旧日志框架(Bridge)<br>通常，依赖的某些组件依赖于slf4j以外的日志记录API。假设这些组件在不久的将来不会切换到slf4j。为解决该情况，slf4j附带了几个桥接模块，这些模块将对log4j、JCL和java.util.logging的API调用重定向，就好像它们是对slf4j API操作一样<br>桥接解决的是项目中日志的遗留问题，当系统中存在之前的日志API，可通过桥接转换到slf4j的实现：</p><ol><li><p>先去除之前老的日志框架的依赖</p></li><li><p>添加slf4j提供的桥接组件</p></li><li><p>为项目添加slf4j的具体实现<br><img src="slf4j%E6%A1%A5%E6%8E%A5%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="slf4j桥接示意图"><br>常用的桥接依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- log4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- jul --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jul-to-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- jcl --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>注意：</p><ol><li>jcl-over-slf4j.jar和slf4j-jcl.jar不能同时部署。前一个jar文件将导致JCL将日志系统的选择委托给slf4j，后一个jar文件将导致slf4j将日志系统的选择委托给JCL，从而导致无限循环(其余同理)</li><li>所有的桥接都只对Logger日志记录器对象有效，如果程序中调用了内部的配置类或者是Appender、Filter等对象，将无法产生效果</li></ol></li><li><p>slf4j原理：</p><ol><li>slf4j通过LoggerFactory加载日志具体的实现对象</li><li>LoggerFactory在初始化的过程中，通过performInitialization()方法绑定具体的日志实现</li><li>在绑定具体实现时通过类加载器加载org/slf4j/impl/StaticLoggerBinder.class</li><li>因此只要是一个日志实现框架，且在org.slf4j.impl包中提供一个自己的StaticLoggerBinder类，提供具体日志实现的LoggerFactory，就可以被slf4j加载</li></ol></li></ul></li></ol></li></ul><h2 id="SpringBoot中的日志"><a href="#SpringBoot中的日志" class="headerlink" title="SpringBoot中的日志"></a>SpringBoot中的日志</h2><ul><li><p>基本介绍：SpringBoot框架在企业中的使用越来越普遍，SpringBoot日志也是开发中常用的日志系统。SpringBoot默认采用slf4j作为日志门面，logback作为日志实现来记录日志</p></li><li><p>SpringBoot中的日志设计</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB%E5%9B%BE.png" alt="依赖关系图"><br>总结：</p><ol><li>默认使用slf4j作为日志门面，logback作为日志实现</li><li>将jul和log4j转为slf4j</li></ol></li><li><p>SpringBoot中日志的使用：</p><ol><li><p>修改默认日志配置：</p> <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">logging.level.com.itheima</span>=<span class="string">trace</span></span><br><span class="line"><span class="comment"># 在控制台输出的日志的格式,同logback</span></span><br><span class="line"><span class="meta">logging.pattern.console</span>=<span class="string">%d&#123;yyyy-MM-dd&#125; [%thread] [%-5level] %logger&#123;50&#125; - %msg%n</span></span><br><span class="line"><span class="comment"># 指定文件中日志输出的格式</span></span><br><span class="line"><span class="meta">logging.file</span>=<span class="string">logs/springboot.log</span></span><br><span class="line"><span class="meta">logging.pattern.file</span>=<span class="string">%d&#123;yyyy-MM-dd&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span></span><br></pre></td></tr></table></figure></li><li><p>指定配置：在类路径下添加每个日志框架的配置文件时，SpringBoot就不使用默认配置</p><table><thead><tr><th>日志框架</th><th>配置文件</th></tr></thead><tbody><tr><td>logback</td><td>logback-spring.xml,logback.xml(直接被日志框架识别)</td></tr><tr><td>log4j2</td><td>log4j2-spring.xml,log4j2.xml</td></tr><tr><td>JUL</td><td>logging.properties</td></tr></tbody></table></li><li><p>使用SpringBoot解析日志配置</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- logback-spring.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;pattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"prod"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyyMMdd:HH:mm:ss.SSS&#125; [%thread] %-5level %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br></pre></td></tr></table></figure> <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># application.properties</span></span><br><span class="line"><span class="meta">spring.profiles.active</span> = <span class="string">dev</span></span><br></pre></td></tr></table></figure></li><li><p>将日志切换为log4j2(log4j2 + slf4j是趋势)</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 排除logback --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加log4j2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/2020/10/09/BasicSkill/DesignPattern/"/>
      <url>/2020/10/09/BasicSkill/DesignPattern/</url>
      
        <content type="html"><![CDATA[<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><ul><li><a href="#七大原则">七大原则</a></li><li><a href="#UML类图">UML类图</a></li><li><a href="#设计模式概述">设计模式概述</a></li><li><a href="#单例模式">单例模式</a></li><li><a href="#工厂模式">工厂模式</a></li><li><a href="#原型模式">原型模式</a></li><li><a href="#建造者模式">建造者模式</a></li><li><a href="#适配器模式(待完善)">适配器模式</a></li><li><a href="#桥接模式">桥接模式</a></li><li><a href="#装饰者模式">装饰者模式</a></li><li><a href="#组合模式">组合模式</a></li><li><a href="#外观模式">外观模式</a></li><li><a href="#享元模式">享元模式</a></li><li><a href="#代理模式">代理模式</a></li><li><a href="#模板方法模式">模板方法模式</a></li><li><a href="#命令模式">命令模式</a></li><li><a href="#访问者模式">访问者模式</a></li><li><a href="#迭代器模式">迭代器模式</a></li><li><a href="#观察者模式">观察者模式</a></li><li><a href="#中介者模式">中介者模式</a></li><li><a href="#备忘录模式">备忘录模式</a></li><li><a href="#解释器模式">解释器模式</a></li><li><a href="#状态模式">状态模式</a></li><li><a href="#策略模式">策略模式</a></li><li><a href="#职责链模式">职责链模式</a></li></ul><a id="more"></a><h2 id="七大原则"><a href="#七大原则" class="headerlink" title="七大原则"></a>七大原则</h2><ul><li><p>设计模式目的：编写软件过程中，程序员面临着来自耦合性、内聚性、可维护性、可扩展性、重用性和灵活性等多方面的挑战，设计模式是为了让程序(软件)具有更好的</p><ol><li>代码重用性(相同功能的代码,不用多次编写)</li><li>可读性(编程规范性,便于其他程序员的阅读和理解)</li><li>可扩展性(当需要增加新的功能时非常的方便,也称为可维护性)</li><li>可靠性(当我们增加新的功能后对原来的功能没有影响)</li><li>使程序呈现<strong>高内聚，低耦合</strong>的特性</li></ol></li><li><p>设计模式原则其实就是程序员在编程时应当遵守的原则，也是各种设计模式的基础</p></li><li><p>设计原则核心思想：</p><ol><li>找出应用中可能需要变化之处，把它们独立出来，不和不需要变化的代码混在一起</li><li>面向接口编程，而不是面向实现编程</li><li>为了交互对象之间的松耦合设计而努力</li></ol></li><li><p>七大原则：</p><ol><li>单一职责原则：<strong>一个类和方法只做一件事，一个类应该也只有一个引起它修改的原因</strong></li><li>接口隔离原则：<strong>客户端不应依赖它不需要的接口</strong></li><li>依赖倒转(倒置)原则：<strong>细节依赖抽象，下层依赖上层</strong></li><li>里氏替换原则：<strong>子类应该可以完全替换父类。在使用继承时只扩展新功能而不破坏父类原有的功能</strong></li><li>开闭原则：<strong>一个软件实体如类、模块和函数应该对修改封闭，对扩展开放</strong></li><li>迪米特原则：<strong>最小知道原则，一个类不应知道自己操作的类的细节</strong></li><li>合成复用原则</li></ol></li><li><p>单一职责原则</p><ul><li><p>基本介绍：对类来说一个类应该只负责一项职责。如类A负责两个不同职责——职责1和2。当职责1需求变更而改变A时，可能造成职责2执行错误，所以需要将类A的粒度分解为A1和A2</p></li><li><p>案例分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原始方案</span></span><br><span class="line"><span class="comment">// 交通工具类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String vehicle)</span> </span>&#123; System.out.println(vehicle + <span class="string">" 在公路上运行...."</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vehicle vehicle = <span class="keyword">new</span> Vehicle();</span><br><span class="line">vehicle.run(<span class="string">"摩托车"</span>);</span><br><span class="line">vehicle.run(<span class="string">"汽车"</span>);</span><br><span class="line">vehicle.run(<span class="string">"飞机"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改进方案1</span></span><br><span class="line"><span class="comment">// 1、遵守单一职责原则</span></span><br><span class="line"><span class="comment">// 2、但是这样做的改动很大,将类分解同时修改客户端</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RoadVehicle</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String vehicle)</span> </span>&#123; System.out.println(vehicle + <span class="string">"公路运行"</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AirVehicle</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String vehicle)</span> </span>&#123; System.out.println(vehicle + <span class="string">"天空运行"</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WaterVehicle</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String vehicle)</span> </span>&#123; System.out.println(vehicle + <span class="string">"水中运行"</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">RoadVehicle roadVehicle = <span class="keyword">new</span> RoadVehicle();</span><br><span class="line">roadVehicle.run(<span class="string">"摩托车"</span>);</span><br><span class="line">roadVehicle.run(<span class="string">"汽车"</span>);</span><br><span class="line">AirVehicle airVehicle = <span class="keyword">new</span> AirVehicle();</span><br><span class="line">airVehicle.run(<span class="string">"飞机"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改进方案2</span></span><br><span class="line"><span class="comment">// 1、没有对原来的类做大的修改,只是增加方法</span></span><br><span class="line"><span class="comment">// 2、虽然没有在类这个级别上遵守单一职责原则,但在方法级别上仍然是遵守单一职责</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String vehicle)</span> </span>&#123; System.out.println(vehicle + <span class="string">" 在公路上运行...."</span>);&#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runAir</span><span class="params">(String vehicle)</span> </span>&#123; System.out.println(vehicle + <span class="string">" 在天空上运行...."</span>);&#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runWater</span><span class="params">(String vehicle)</span> </span>&#123; System.out.println(vehicle + <span class="string">" 在水中行...."</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vehicle vehicle = <span class="keyword">new</span> Vehicle();</span><br><span class="line">vehicle.run(<span class="string">"摩托车"</span>);</span><br><span class="line">vehicle.run(<span class="string">"汽车"</span>);</span><br><span class="line">vehicle.runAir(<span class="string">"飞机"</span>);</span><br></pre></td></tr></table></figure></li><li><p>注意事项和细节</p><ol><li>降低类的复杂度，一个类只负责一项职责(尽量)</li><li>提高类的可读性、可维护性</li><li>降低变更引起的风险</li><li>通常情况下，我们应当遵守单一职责原则。只有逻辑足够简单时才可以在代码级违反单一职责原则；只有类中方法数量足够少时才可以在方法级别保持单一职责原则</li></ol></li></ul></li><li><p>接口隔离原则</p><ul><li><p>基本介绍：客户端不应该依赖它不需要的接口(<strong>一个类对另一个类的依赖应该建立在最小的接口上</strong>)</p></li><li><p>案例分析：<br><img src="%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E6%A1%88%E4%BE%8B%E4%BB%8B%E7%BB%8D.png" alt="接口隔离案例介绍"></p><ul><li><p>改进措施：将接口Interface1拆分为独立的几个接口，类A和C分别与它们需要的接口建立依赖关系(也就是采用接口隔离原则)</p></li><li><p>改进结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">interface1</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">interface2</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">operation2</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">operation3</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">interface3</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">operation4</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">operation5</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">interface1</span>, <span class="title">interface2</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">implements</span> <span class="title">interface1</span>, <span class="title">interface3</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>依赖倒转原则</p><ul><li><p>基本介绍：</p><ol><li>高层模块不应该依赖低层模块，二者都应该依赖其抽象</li><li><strong>抽象不应该依赖细节，细节应该依赖抽象</strong></li><li>依赖倒转(倒置)的中心思想是<strong>面向接口编程</strong></li><li>设计理念：相对于细节的多变，抽象的东西要稳定的多。以抽象为基础搭建的架构比以细节为基础的架构要稳定的多。在java中抽象指的是接口或抽象类，细节是具体的实现类</li><li><strong>使用接口或抽象类的目的是制定好规范，而不涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成</strong></li></ol></li><li><p>案例分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原始版本</span></span><br><span class="line"><span class="comment">// 如果我们getInfo需要微信、短信等消息</span></span><br><span class="line"><span class="comment">// 则新增类同时Person类也要增加相应的接收方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Email</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">"电子邮件信息: hello,world"</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(Email email)</span> </span>&#123; System.out.println(email.getInfo());&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person person = <span class="keyword">new</span> Person();</span><br><span class="line">person.receive(<span class="keyword">new</span> Email());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改进方案：引入一个抽象的接口IReceiver表示接收者</span></span><br><span class="line"><span class="comment">// 这样Person类与接口IReceiver发生依赖</span></span><br><span class="line"><span class="comment">// Email、WeiXin等属于接收者的范围,各自实现IReceiver接口,遵循了依赖倒转原则</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IReceiver</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Email</span> <span class="keyword">implements</span> <span class="title">IReceiver</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">"电子邮件信息: hello,world"</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeiXin</span> <span class="keyword">implements</span> <span class="title">IReceiver</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">"微信信息: hello,ok"</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 新增接收者不需要对Person类进行改动</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 改为对接口IReceiver的依赖</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(IReceiver receiver )</span> </span>&#123; System.out.println(receiver.getInfo());&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person person = <span class="keyword">new</span> Person();</span><br><span class="line">person.receive(<span class="keyword">new</span> Email());</span><br><span class="line">person.receive(<span class="keyword">new</span> WeiXin());</span><br></pre></td></tr></table></figure></li><li><p>依赖关系传递的三种方式：</p><ol><li><p>接口依赖</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IRemote</span> </span>&#123; <span class="function"><span class="keyword">void</span> <span class="title">closeTv</span><span class="params">(ITv tv)</span></span>;&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ITv</span> </span>&#123; <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>; &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HuaweiTv</span> <span class="keyword">implements</span> <span class="title">ITv</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">"Close Huawei TV~~~"</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mate30Pro</span> <span class="keyword">implements</span> <span class="title">IRemote</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeTv</span><span class="params">(ITv tv)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Mate30Pro close tv~~~"</span>);</span><br><span class="line">    tv.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>构造方法传递</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ITv</span> </span>&#123; <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HuaweiTv</span> <span class="keyword">implements</span> <span class="title">ITv</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">"Close Huawei TV~~~"</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mate30Pro</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> ITv tv;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Mate30Pro</span><span class="params">(ITv tv)</span> </span>&#123; <span class="keyword">this</span>.tv = tv;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123; <span class="keyword">this</span>.tv.close();&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>setter方式传递</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ITv</span> </span>&#123; <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HuaweiTv</span> <span class="keyword">implements</span> <span class="title">ITv</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">"Close Huawei TV~~~"</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mate30Pro</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> ITv tv;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">setTv</span><span class="params">(ITv tv)</span> </span>&#123; <span class="keyword">this</span>.tv = tv;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123; <span class="keyword">this</span>.tv.close();&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>注意事项和细节：</p><ol><li>低层模块尽量都要有抽象类或接口，或者两者都有，程序稳定性更好</li><li><strong>变量的声明类型尽量是抽象类或接口</strong>，这样变量引用和实际对象间存在一个缓冲层，利于程序扩展和优化</li><li>继承时遵循里氏替换原则</li></ol></li></ul></li><li><p>里氏替换原则</p><ul><li>OO(Object Oriented,面向对象)继承性的思考和说明：<ol><li>继承包含这一层含义：父类中凡是已经实现好的方法，实际上是在设定规范和契约。虽然它不强制要求所有的子类必须遵循这些契约，但是如果子类对这些已经实现的方法任意修改，就会对整个继承体系造成破坏</li><li>继承在给程序设计带来便利的同时，也带来了弊端。如使用继承会给程序带来侵入性、程序的可移植性降低、增加对象间的耦合性；如果一个类被其他的类所继承，则当这个类需要修改时，必须考虑到所有的子类，并且父类修改后，所有涉及子类的功能都有可能产生错误</li><li>问题提出：在编程中，如何正确的使用继承?——遵循里氏替换原则</li></ol></li><li>基本介绍：<ol><li>里氏替换原则(Liskov Substitution Principle)在1988年由麻省理工学院的以为姓里的女士提出</li><li>如果每个类型为T1的对象o1都有类型为T2的对象o2，使得以T1定义的所有程序P在所有的对象o1都代换成o2时程序P的行为没有发生变化，那么类型T2是类型T1的子类型。<strong>换句话说，所有引用基类的地方必须都能透明地使用其子类的对象</strong></li><li>在使用继承时，遵循里氏替换原则，<strong>在子类中尽量不重写父类的方法</strong></li><li>里氏替换原则告诉我们继承实际上让两个类耦合性增强了，在适当的情况下，可通过<strong>聚合、组合和依赖</strong>来解决问题</li></ol></li></ul></li><li><p>开闭原则</p><ul><li><p>基本介绍：</p><ol><li>开闭原则(Open Closed Principle)是编程中<strong>最基础、最重要</strong>的设计原则</li><li>一个软件实体如类、模块和函数应该<strong>对扩展开放(对提供方)，对修改关闭(对使用方)</strong>。用抽象构建框架，用实现扩展细节</li><li>当软件需要变化时，<strong>尽量通过扩展</strong>软件实体的行为来实现变化，<strong>而不是通过修改</strong>已有的代码来实现变化</li><li>编程中设计模式和其他原则的基础就是开闭原则</li></ol></li><li><p>案例分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原始版本</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GraphicEditor</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawShape</span><span class="params">(Shape s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s.type == <span class="number">1</span>) drawRectangle(s);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (s.type == <span class="number">2</span>) drawCircle(s);</span><br><span class="line">    <span class="comment">// 新增三角形</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (s.type == <span class="number">3</span>) drawTriangle(s);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawRectangle</span><span class="params">(Shape r)</span> </span>&#123; System.out.println(<span class="string">"Draw Rectangle"</span>);&#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawCircle</span><span class="params">(Shape r)</span> </span>&#123; System.out.println(<span class="string">"Draw Circle"</span>);&#125;</span><br><span class="line">  <span class="comment">// 新增三角形</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawTriangle</span><span class="params">(Shape r)</span> </span>&#123; System.out.println(<span class="string">"Draw Triangle"</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123; <span class="keyword">int</span> type;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  Rectangle() &#123; <span class="keyword">super</span>.type = <span class="number">1</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  Circle() &#123; <span class="keyword">super</span>.type = <span class="number">2</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 新增三角形</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Triangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  Triangle() &#123; <span class="keyword">super</span>.type = <span class="number">3</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GraphicEditor graphicEditor = <span class="keyword">new</span> GraphicEditor();</span><br><span class="line">graphicEditor.drawShape(<span class="keyword">new</span> Rectangle());</span><br><span class="line">graphicEditor.drawShape(<span class="keyword">new</span> Circle());</span><br><span class="line">graphicEditor.drawShape(<span class="keyword">new</span> Triangle());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改进版本</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GraphicEditor</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawShape</span><span class="params">(Shape s)</span> </span>&#123; s.draw();&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>&#123; System.out.println(<span class="string">"Draw Rectangle"</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>&#123; System.out.println(<span class="string">"Draw Circle"</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 新增三角形</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Triangle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>&#123; System.out.println(<span class="string">"Draw Triangle"</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一样的调用方式</span></span><br><span class="line">GraphicEditor graphicEditor = <span class="keyword">new</span> GraphicEditor();</span><br><span class="line">graphicEditor.drawShape(<span class="keyword">new</span> Rectangle());</span><br><span class="line">graphicEditor.drawShape(<span class="keyword">new</span> Circle());</span><br><span class="line">graphicEditor.drawShape(<span class="keyword">new</span> Triangle());</span><br></pre></td></tr></table></figure></li></ul></li><li><p>迪米特法则</p><ul><li>基本介绍：<ol><li>一个对象应该对其他对象保持最少的了解</li><li>类与类关系越密切，耦合度越大</li><li>迪米特法则(Demeter Principle)又叫<strong>最少知识原则，即一个类对自己依赖的类知道的越少越好</strong>。也就是说，对于被依赖的类不管多么复杂，都尽量将逻辑封装在类的内部。对外除了提供public方法，不对外泄露任何信息</li><li>迪米特法则还有个更简单的定义：只与直接的朋友通信</li><li>直接的朋友：每个对象都会与其他对象有耦合关系，只要两个对象之间有耦合关系，我们就说这两个对象之间是朋友关系。耦合的方式很多：依赖、关联、组合和聚合等。其中称出现成员变量、方法参数、方法返回值中的类为直接的朋友，而出现在局部变量中的类不是直接的朋友。也就是说，陌生的类最好不要以局部变量的形式出现在类的内部</li></ol></li><li>注意事项和细节：<ol><li>迪米特法则的核心是降低类之间的耦合</li><li>注意：迪米特法则只是要求降低类间(对象间)耦合关系，并不是要求完全没有依赖关系</li></ol></li></ul></li><li><p>合成复用原则(Composite Reuse Principle)：尽量使用合成/聚合的方式，而不是使用继承</p></li></ul><h2 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h2><ul><li>UML基本介绍：<ol><li>UML——Unified modeling language(统一建模语言)是一种用于软件系统分析和设计的语言工具，用于帮助软件开发人员进行思考和记录思路的结果</li><li>UML本身是一套符号的规定，就像数学符号和化学符号一样。这些符号用于描述软件模型中的各个元素和它们之间的关系，比如类、接口、实现、泛化、依赖、组合、聚合等</li></ol></li><li>UML图分类：<ol><li>用例图(use case)</li><li>静态结构图：类图(描述类与类之间的关系,是UML图中最核心的)、对象图、包图、组件图、部署图</li><li>动态行为图：交互图(时序图与协作图)、状态图、活动图</li></ol></li><li>UML类图基本介绍：<ol><li>用于描述系统中的<strong>类(对象)本身的组成和类(对象)之间的各种静态关系</strong></li><li>类之间的关系：<strong>依赖、泛化(继承)、实现、关联、聚合与组合</strong></li></ol></li><li>类之间的关系：<ol><li>依赖关系(Dependence)：<ul><li>基本介绍：<strong>只要是在类中用到了对方，那么他们之间就存在依赖关系</strong>。如果没有对方，连编绎都通过不了</li><li>具体体现：<ol><li>类的成员属性</li><li>类的成员方法的返回类型</li><li>类的成员方法接收的参数类型</li><li>类的成员方法中使用到</li><li>存在继承、实现等多态关系</li></ol></li></ul></li><li>泛化关系(Generalization)：<strong>泛化关系实际上就是继承关系</strong>，是依赖关系的特例</li><li>实现关系(Implementation)：<strong>实现关系实际上就是实现(接口)关系</strong>，是依赖关系的特例</li><li>关联关系(Association)：<ul><li>基本介绍：关联关系实际上就是<strong>类与类之间的联系</strong>，是依赖关系的特例(引用数)</li><li>性质：<ol><li>具有<strong>导航性</strong>：即双向或单向关系</li><li>具有多重性：如”1”(表示有且仅有一个)、”0…”(表示0个或者多个)、”0,1”(表示0个或1个),”n…m”(表示n到m个),”m…”(表示至少m个)</li></ol></li></ul></li><li>聚合关系(Aggregation)：<strong>表示的是整体和部分的关系，整体与部分可以分开</strong>。聚合关系是关联关系的特例，所以具有关联的导航性与多重性</li><li>组合关系(Composition)：也是整体与部分的关系，但是整体与部分不可以分开(逻辑或者代码层面上)</li></ol></li></ul><h2 id="设计模式概述"><a href="#设计模式概述" class="headerlink" title="设计模式概述"></a>设计模式概述</h2><ul><li>基本介绍：<ol><li>设计模式是程序员在面对同类软件工程设计问题所总结出来的有用的经验。设计模式不是代码，而是某类问题的通用解决方案，设计模式(Design pattern)代表了最佳的实践。这些解决方案是众多软件开发人员经过相当长的一段时间的试验总结出来的</li><li>设计模式的本质：提高软件的维护性、通用性和扩展性，降低软件的复杂度</li><li>设计模式并不局限于某种语言，Java，PHP，C++都有设计模式</li></ol></li><li>类型：<ol><li>创建型模式：单例模式、抽象工厂模式、原型模式、建造者模式、工厂模式</li><li>结构型模式：适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式</li><li>行为型模式：模版方法模式、命令模式、访问者模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式(Interpreter模式)、状态模式、策略模式、职责链模式(责任链模式)</li></ol></li></ul><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><ul><li><p>介绍：保证一个类只有一个实例，哪怕多线程同时访问，并提供一个全局访问此实例的方法</p></li><li><p>典型场景：</p><ol><li>数据库连接池</li><li>Spring中的单例Bean</li></ol></li><li><p>单例设计模式的八种实现方式</p><ol><li><p><strong>饿汉式(静态常量)</strong></p><ul><li><p>案例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 1、构造器私有化(防止外部new)</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  <span class="comment">// 2、类内创建对象(静态常量)</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">  <span class="comment">// 3、向外暴露静态公共方法,返回单例instance</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> instance;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>优缺点总结：</p><ol><li>优点：写法较简单，在类装载的时候就完成了实例化。避免了线程同步问题</li><li>缺点：在类装载时就完成了实例化，没有达到Lazy Loading(懒加载)的效果。如果从始至终未使用过这个实例，则会造成内存的浪费</li><li>该方式基于类加载机制避免了多线程的同步问题，instance在类装载时就实例化。虽然导致类装载的原因有很多种，在单例模式中大多数时候都是调用getInstance()方法。但不能确定有其他的方式(或者其他的静态方法)导致类装载，这时候初始化instance就没有达到Lazy Loading的效果</li><li>结论：该单例模式可用，但可能造成内存浪费(一般可忽略)</li></ol></li></ul></li><li><p><strong>饿汉式(静态代码块)</strong></p><ul><li><p>案例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 1、私有化构造器</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  <span class="comment">// 2、声明静态变量实例</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">  <span class="comment">// 3、在静态代码块中,创建单例对象</span></span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 4、提供一个公有静态方法,返回实例对象</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> instance;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>优缺点总结：</p><ol><li>该方式和方式一类似，过将类实例化的过程放在静态代码块中。在类装载时执行静态代码块中的代码，初始化类的实例。优缺点同方式一</li><li>结论：该单例模式可用，但可能造成内存浪费(一般可忽略)</li></ol></li></ul></li><li><p>懒汉式(线程不安全)</p><ul><li><p>案例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 1、私有化构造器</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  <span class="comment">// 2、声明静态变量实例</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">  <span class="comment">// 3、提供一个公有静态方法,当调用该方法时才去创建instance实例</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(instance == <span class="keyword">null</span>) instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>优缺点总结：</p><ol><li>起到了Lazy Loading的效果，但只能在单线程下使用</li><li>在多线程下，当一个线程进入了if判断语句块，还未来得及往下执行；同时另一个线程也通过了这个判断语句，这时便会产生多个实例。所以在多线程环境下不可使用这种方式</li><li>结论：在实际开发中，不使用这种方式</li></ol></li></ul></li><li><p>懒汉式(线程安全,同步方法)</p><ul><li><p>案例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 1、私有化构造器</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  <span class="comment">// 2、声明静态变量实例</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">  <span class="comment">// 3、提供一个公有静态方法,当调用该方法时才去创建instance实例(声明为同步方法,解决线程安全问题)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123; instance = <span class="keyword">new</span> Singleton();&#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>优缺点总结：</p><ol><li>解决了线程安全问题</li><li>效率太低了，每个线程在想获得该类的实例时执行getInstance()方法都要进行同步。而其实这个方法只执行一次实例化代码就够了，后面的想获得该类实例，直接return即可。方法进行同步效率太低</li><li>结论：在实际开发中，不推荐使用这种方式</li></ol></li></ul></li><li><p>懒汉式(线程不安全,同步代码块)</p><ul><li><p>案例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 1、私有化构造器</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  <span class="comment">// 2、声明静态变量实例</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">  <span class="comment">// 3、提供一个公有静态方法,当调用该方法时才去创建instance实例(加入synchronized同步代码块,还存在线程安全问题)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (Singleton<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">        instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>优缺点总结：</p><ol><li>还存在线程安全问题(都进入到判断后,未开始同步,会实例化两次)</li><li>结论：在实际开发中，不使用这种方式</li></ol></li></ul></li><li><p><strong>双重检查(Double-Check)</strong></p><ul><li><p>案例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 1、私有化构造器</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  <span class="comment">// 2、声明静态变量实例(volatile声明,内存可见)</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line">  <span class="comment">// 3、提供一个公有静态方法,设置双重检查,解决线程安全问题,同时解决懒加载问题,保证了效率,推荐使用</span></span><br><span class="line">  <span class="comment">// 几乎解决了线程安全问题</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (Singleton<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123; instance = <span class="keyword">new</span> Singleton();&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>优缺点总结：</p><ol><li>Double-Check概念是多线程开发中常使用到的。进行了两次if检查，这几乎可以保证线程安全</li><li>实例化代码只执行一次，再次访问时直接返回实例化对象。也避免反复进行方法同步</li><li>线程安全、延迟加载、效率较高</li><li>结论：在实际开发中推荐使用该方式</li></ol></li></ul></li><li><p>静态内部类</p><ul><li><p>案例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 1、私有化构造器</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  <span class="comment">// 2、声明静态内部类,该类中有一个静态常量Singleton</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonInstance</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 3、提供一个公有静态方法,直接返回静态内部类中的静态常量INSTANCE</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> SingletonInstance.INSTANCE;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>优缺点总结：</p><ol><li>该方式在Singleton类被装载时并不会立即实例化，而是在首次调用getInstance()方法时装载SingletonInstance类，从而完成Singleton的实例化</li><li>类的静态属性只会在第一次加载类的时候初始化，在这里JVM帮助我们保证了线程的安全性。在类进行初始化时其他线程是无法进入的</li><li>优点：避免了线程不安全，利用静态内部类特点实现延迟加载，效率高</li><li>结论：推荐使用</li></ol></li></ul></li><li><p>枚举</p><ul><li><p>案例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、声明枚举类</span></span><br><span class="line"><span class="keyword">enum</span> Singletion&#123;</span><br><span class="line">  <span class="comment">// 2、声明一个实例</span></span><br><span class="line">  INSTANCE;</span><br><span class="line">  <span class="comment">// 测试方法</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayOK</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">"ok~"</span>);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>优缺点总结：</p><ol><li>借助JDK1.5中添加的枚举来实现单例模式。不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象</li><li>在有继承的场景下不适用</li><li>结论：推荐使用(Effective Java作者推荐)</li></ol></li></ul></li></ol></li><li><p>源码中的应用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Runtime.class</span></span><br><span class="line"><span class="comment">// 采用饿汉式创建,因为其他地方需要用到,不会产生内存浪费</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Runtime</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Runtime</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Runtime currentRuntime = <span class="keyword">new</span> Runtime();</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Runtime <span class="title">getRuntime</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> currentRuntime;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>单例模式注意事项和细节说明：</p><ol><li>单例模式保证了系统内存中该类只存在一个对象，节省了系统资源。对于一些需要频繁创建销毁的对象，使用单例模式可以提高系统性能</li><li>当想实例化一个单例类的时候，要使用相应的获取对象的方法(通常是getInstance())，而不是使用new创建</li><li>单例模式使用的场景：<strong>需要频繁地进行创建和销毁的对象</strong>、创建对象耗时过多或耗费资源过多(即<strong>重量级对象</strong>)但又经常用到的对象、<strong>工具类对象</strong>、频繁访问数据库或文件的对象(比如<strong>数据源、session工厂</strong>等)</li></ol></li></ul><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><ul><li><p>问题背景：在平时编程中，构建对象最常用的方式是new一个对象。乍一看这种做法没什么不好，而实际上这也属于一种硬编码。每new一个对象，相当于调用者多知道了一个类，增加了类与类之间的联系，不利于程序的松耦合。其实构建过程可以被封装起来，工厂模式便是用于封装对象的设计模式</p></li><li><p>简单工厂模式</p><ul><li><p>基本介绍：让一个工厂类继承构建所有对象的职责(将构建工作封装到一个工厂类中)</p></li><li><p>案例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只是对传统方式做了一层简单的封装</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhoneFactory</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 调用处代码修改较小,大多只需在工厂类中修改</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Phone <span class="title">create</span><span class="params">(String brand)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 如果某个构造方式相当复杂,可以大大减少代码重复</span></span><br><span class="line">    <span class="keyword">switch</span> (brand) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"apple"</span>: <span class="keyword">return</span> <span class="keyword">new</span> IPhone();</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"huawei"</span>: &#123;</span><br><span class="line">        Phone phone = <span class="keyword">new</span> Mate()</span><br><span class="line">        <span class="comment">// 具体设置工作...</span></span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">default</span>: <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"No other brands now~~~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">PhoneFactory factory = <span class="keyword">new</span> PhoneFactory();</span><br><span class="line"><span class="comment">// 直接new需要知道mate和iphone的具体构造细节</span></span><br><span class="line">Phone mate = factory.create(<span class="string">"huawei"</span>);</span><br><span class="line">Phone iphone = factory.create(<span class="string">"apple"</span>);</span><br><span class="line">mate.takePhoto();</span><br><span class="line">iphone.takePhoto();</span><br></pre></td></tr></table></figure></li><li><p>弊端：</p><ol><li>如果需生产的产品过多会导致工厂类过于庞大，承担过多的职责，变成超级类。每个产品生产过程的修改都需要修改工厂类(不止一个引起修改的原因)。违背了单一职责原则</li><li>当要生产新的产品时，必须在工厂类中添加新的判断分支。而开闭原则告诉我们：类应该对修改封闭。即添加新功能时最好只需增加新的类，而不是修改既有的类</li></ol></li></ul></li><li><p>工厂方式模式：</p><ul><li><p>由来：为了解决简单工厂的两处弊端</p></li><li><p>基本介绍：<strong>定义一个创建对象的抽象方法，由子类决定要实例化的类</strong>。工厂方法模式<strong>将对象的实例化推迟到子类</strong></p></li><li><p>案例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1、产品种类增加时不会变成超级工厂,工厂类会变多,保持灵活</span></span><br><span class="line"><span class="comment">2、改变只需改变对应工厂的方法</span></span><br><span class="line"><span class="comment">3、新增产品,无需修改已有的工厂,只需添加新工厂</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 注意：factory接口必须声明慎重,更改接口需要更改所有的工厂类</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PhoneFactory</span> </span>&#123;</span><br><span class="line">  <span class="function">Phone <span class="title">create</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppleFactory</span> <span class="keyword">implements</span> <span class="title">PhoneFactory</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Phone <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> IPhone();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HuaweiFactory</span> <span class="keyword">implements</span> <span class="title">PhoneFactory</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Phone <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Mate();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">PhoneFactory appleFactory = <span class="keyword">new</span> AppleFactory();</span><br><span class="line">Phone iphone = appleFactory.create();</span><br><span class="line">PhoneFactory huaweiFactory = <span class="keyword">new</span> HuaweiFactory();</span><br><span class="line">Phone mate = huaweiFactory.create();</span><br><span class="line">iphone.takePhoto();</span><br><span class="line">mate.takePhoto();</span><br></pre></td></tr></table></figure></li></ul></li><li><p>抽象工厂模式：</p><ul><li><p>基本介绍：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。简单来说工厂方法是创建出<strong>一种</strong>产品，抽象工厂则是创建<strong>一类</strong>产品</p></li><li><p>案例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TerminalFactory</span> </span>&#123;</span><br><span class="line">  <span class="function">Phone <span class="title">create</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function">Pad <span class="title">create</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function">Watch <span class="title">ceate</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppleFactory</span> <span class="keyword">implements</span> <span class="title">TerminalFactory</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Phone <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> IPhone();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Pad <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> IPad();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Watch <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Watch();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>源码中的应用(简单工厂)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Calendar.getInstance();</span><br><span class="line"><span class="comment">// Calendar.class</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Calendar <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> createCalendar(TimeZone.getDefault(), Locale.getDefault(Locale.Category.FORMAT));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Calendar <span class="title">createCalendar</span><span class="params">(TimeZone zone, Locale aLocale)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  Calendar cal = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">if</span> (aLocale.hasExtensions()) &#123;</span><br><span class="line">    String caltype = aLocale.getUnicodeLocaleType(<span class="string">"ca"</span>);</span><br><span class="line">    <span class="keyword">if</span> (caltype != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">switch</span> (caltype) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"buddhist"</span>:</span><br><span class="line">        cal = <span class="keyword">new</span> BuddhistCalendar(zone, aLocale);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"japanese"</span>:</span><br><span class="line">        cal = <span class="keyword">new</span> JapaneseImperialCalendar(zone, aLocale);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"gregory"</span>:</span><br><span class="line">        cal = <span class="keyword">new</span> GregorianCalendar(zone, aLocale);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>总结：</p><ol><li>工厂模式的意义：将实例化对象的代码提取出来放到一个类中统一管理和维护，达到解耦的目的，从而提高项目的扩展和维护性</li><li>设计模式的依赖抽象原则：<ol><li>创建对象实例时尽量不要直接new，而是封装到工厂的方法中</li><li>尽量不要让类继承具体类，而是继承抽象类或者是实现接口</li><li>尽量不要覆盖基类中已经实现的方法</li></ol></li></ol></li></ul><h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><ul><li><p>传统方式</p><ul><li><p>案例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以买周董同款奶茶为例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MilkTea</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String type;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> isCold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MilkTea jZhouMilkTea = <span class="keyword">new</span> MilkTea();</span><br><span class="line">jZhouMilkTea.type = <span class="string">"珍珠奶茶"</span>;</span><br><span class="line">jZhouMilkTea.isCold = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假复制(和周董喝的是同一杯奶茶)</span></span><br><span class="line">MilkTea xiongMilkTea = jZhouMilkTea;</span><br><span class="line"><span class="comment">// 真复制</span></span><br><span class="line">MilkTea xiongMilkTea = <span class="keyword">new</span> MilkTea();</span><br><span class="line">xiongMilkTea.type = jZhouMilkTea.type;</span><br><span class="line">xiongMilkTea.isCold = jZhouMilkTea.isCold;</span><br></pre></td></tr></table></figure></li><li><p>优缺点：</p><ol><li>优点：比较好理解，简单易操作</li><li>如果对象的属性较多或需要复制的数量较多，那么会造成大量的重复</li><li>如果对象改变，使用复制的代码也需进行较大的改动</li></ol></li></ul></li><li><p>原型模式</p><ul><li><p>基本介绍：</p><ol><li>原型模式(Prototype)指<strong>用原型实例指定创建对象的细节，通过拷贝原型创建新的对象</strong></li><li>原型模式是一种创建型设计模式，允许通过一个对象再创建另外一个可定制的对象而无需知道如何创建的细节</li><li>Java中原生支持——Object的clone()方法</li></ol></li><li><p>案例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java自带的clone()方法是浅拷贝,只有基本类型的属性会被拷贝,类类型几乎都是传递引用(String等除外)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MilkTea</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String type;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> isCold;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> MilkTea <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (MilkTea) <span class="keyword">super</span>.clone();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MilkTea jZhouMilkTea = <span class="keyword">new</span> MilkTea();</span><br><span class="line">jZhouMilkTea.type = <span class="string">"珍珠奶茶"</span>;</span><br><span class="line">jZhouMilkTea.isCold = <span class="keyword">true</span>;</span><br><span class="line">MilkTea xiongMilkTea = jZhouMilkTea.clone();</span><br></pre></td></tr></table></figure></li><li><p>注意事项和细节：</p><ol><li>创建新的对象比较复杂时可以利用原型模式简化对象的创建过程，同时也能够提高效率</li><li>不用重新初始化对象，而是动态地获得对象运行时的状态</li><li>如果原始对象发生变化(增加或者减少属性)，其它克隆对象的也会发生相应的变化，无需修改代码</li><li>在实现深克隆的时候可能需要比较复杂的代码</li></ol></li><li><p>源码中的应用：Java中的Object的clone()方法，采用C++ Cloneable接口，否则运行时出错</p></li></ul></li><li><p>浅拷贝和深拷贝：</p><ul><li><p>浅拷贝介绍：</p><ul><li>对于数据类型是基本数据类型的成员变量，浅拷贝会直接进行值传递(将该属性值复制一份给新的对象)</li><li>对于数据类型是引用数据类型的成员变量(某个数组、某个类的对象等)，那么浅拷贝会进行引用传递(实际也是值拷贝,引用值拷贝)，即只是将该成员变量的引用值(内存地址)复制一份给新的对象。因此实际上两个对象的该成员变量都指向同一个实例。在该情况下，在一个对象中修改该成员变量会影响到另一个对象的该成员变量值</li><li>Java Object的clone()方法默认就是浅拷贝</li></ul></li><li><p>深拷贝介绍：</p><ul><li>复制对象的所有基本数据类型的成员变量值</li><li>为所有引用数据类型的成员变量申请存储空间，复制每个引用数据类型成员变量所引用的对象(该对象可达的所有对象)。即<strong>对象进行深拷贝要对整个对象(包括对象的引用类型)进行拷贝</strong></li><li>在Java中可通过以下两种方式实现深拷贝：<ol><li>自定义类中实现cloneable接口重写clone()方法</li><li>通过对象序列化</li></ol></li></ul></li><li><p>案例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Serializable</span>, <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">  <span class="keyword">private</span> String value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeepCloneObject</span> <span class="keyword">implements</span> <span class="title">Serializable</span>, <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> String name;</span><br><span class="line">  <span class="keyword">public</span> Test test;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">    Object obj = <span class="keyword">null</span>;</span><br><span class="line">    obj = <span class="keyword">super</span>.clone();</span><br><span class="line">    DeepCloneObject deepObj = (DeepCloneObject) obj;</span><br><span class="line">    deepObj.test = (Test) test.clone();</span><br><span class="line">    <span class="keyword">return</span> deepObj;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">deepClone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 序列化</span></span><br><span class="line">    <span class="keyword">try</span> (ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">         ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(bos);</span><br><span class="line">         oos.write(<span class="keyword">this</span>);</span><br><span class="line">         ByteArrayInputStream bis = <span class="keyword">new</span> ByteArrayInputStream(bos.toByteArray());</span><br><span class="line">         ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(bis)) &#123;</span><br><span class="line">      <span class="comment">// 反序列化</span></span><br><span class="line">      DeepCloneObject deepObj = (DeepCloneObject) ois.readObject();</span><br><span class="line">      <span class="keyword">return</span> deepObj;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h2><ul><li><p>基本介绍：</p><ul><li>建造者模式(Builder Pattern)是一种对象构建模式。<strong>将一个复杂的构建与其表示想分离，使同样的构建过程可以创建不同的表示</strong></li><li>传统的建造者模式采用”建造者-指挥者”方式</li><li>现在的建造者模式主要用来链式调用生成不同的配置</li></ul></li><li><p>案例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MilkTea</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> addIce;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">MilkTea</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...getter/setter</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MilkTea milkTea = <span class="keyword">new</span> MilkTea();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      milkTea.setName(<span class="string">"珍珠奶茶"</span>);</span><br><span class="line">      milkTea.setPrice(<span class="number">12.5</span>d);</span><br><span class="line">      milkTea.setAddIce(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">      milkTea.setName(name);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">setPrice</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">      milkTea.setPrice(price);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">addIce</span><span class="params">(<span class="keyword">boolean</span> addIce)</span> </span>&#123;</span><br><span class="line">      milkTea.setAddIce(addIce);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MilkTea <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> milkTea;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MilkTea milkTea = <span class="keyword">new</span> MilkTea.Builder().setName(<span class="string">"波霸奶茶"</span>).addIce(<span class="keyword">true</span>).build();</span><br></pre></td></tr></table></figure></li><li><p>源码中的应用：OkHttp、Retrofit等</p></li></ul><h2 id="适配器模式-待完善"><a href="#适配器模式-待完善" class="headerlink" title="适配器模式(待完善)"></a>适配器模式(待完善)</h2><ul><li>基本介绍：适配器模式(Adapter Pattern)是结构型模式，将某个类的接口转换成客户端期望的另一个接口表示，目的是兼容性，让原本因接口不匹配不能一起工作的两个类可以协同工作。其别名为包装器(Wrapper)</li><li>具体介绍：<ul><li>类适配器模式：<ul><li>基本介绍：Adapter类，通过继承src类，实现dst类接口，完成src到dst的适配</li><li>注意事项和细节：<ol><li>Java是单继承机制，类适配器需要继承src类。这就要求dst必须是接口，有一定局限性</li><li>src类的方法在Adapter中都会暴露出来，增加了使用的成本</li><li>由于继承了src类，可根据需求重写src类的方法，使得Adapter的灵活性增强</li></ol></li></ul></li><li>对象适配器模式：<ul><li>基本介绍：<ol><li>基本思路和类适配器模式相同，Adapter类不继承src类，而持有src类的实例以解决兼容性的问题——即持有src类对象，实现dst类接口，完成src到dst的适配</li><li>根据”合成复用原则”，在系统中尽量使用关联关系(聚合)来替代继承关系</li><li>对象适配器模式是适配器模式常用的一种</li></ol></li><li>注意事项和细节：<ol><li>对象适配器和类适配器算是同一种思想，只不过实现方式不同</li><li>根据合成复用原则，使用组合替代继承。解决了类适配器必须继承src的局限性问题，也不再要求dst必须是接口</li><li>使用成本更低，更灵活</li></ol></li></ul></li><li>接口适配器模式：<ol><li>一些书籍称为缺省适配器模式</li><li>核心思想：当无需实现接口提供的全部方法时，可先设计一个抽象类实现接口，并为该接口中每个方法提供一个默认实现(空实现)。则该抽象类的子类可有选择地覆盖父类的某些方法来实现需求</li><li>适用于一个接口不使用其所有的方法的情况</li></ol></li></ul></li><li>源码中的应用：通过jdbc访问SQLServer(jdbc-odbc)</li></ul><h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h2><ul><li><p>基本介绍：</p><ol><li>桥接模式(Bridge Pattern)是一种结构型设计模式，指将实现与抽象放在两个不同的类层次中，使两个层次可以独立改变</li><li>桥接模式基于类的最小设计原则，通过使用封装、聚合及继承等行为让不同的类承担不同的职责。主要特点是把抽象(Abstraction)与行为实现(Implementation)分离开来，从而保持各部分的独立性以及应对他们的功能扩展</li></ol></li><li><p>传统模式：</p><ul><li><p>需求1：绘三种图案：矩形、圆形和三角形</p></li><li><p>解决方案：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 依据OOP思想,三个具体实现类一个抽象接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>&#123; System.out.println(<span class="string">"Draw Rectangle~~~"</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>&#123; System.out.println(<span class="string">"Draw Circle~~~"</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Triangle</span> <span class="keyword">implements</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>&#123; System.out.println(<span class="string">"Draw Triangle~~~"</span>); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>需求2：在1的基础上添加颜色选择，每种颜色都需有四种不同颜色</p></li><li><p>解决方案：</p><ol><li><p>复用形状，将具体形状定义为父类，每种不同颜色的图形继承其形状父类，共12个类</p></li><li><p>复用颜色，将每种颜色定义为父类，每种不同颜色的图形继承其颜色父类，共12个类</p></li><li><p>采用桥接模式，<strong>将形状与颜色分离，根据需要对颜色和形状组合</strong>，不会产生类爆炸问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Color</span></span>&#123;</span><br><span class="line">  <span class="function">String <span class="title">getColor</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Red</span> <span class="keyword">implements</span> <span class="title">Color</span></span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> <span class="string">"red"</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Yellow Blue Green...</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectange</span> <span class="keyword">implements</span> <span class="title">Shape</span>()</span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Color color;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setColor</span><span class="params">(Color color)</span></span>&#123; <span class="keyword">this</span>.color = color; &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>&#123; System.out.println(<span class="string">"Draw "</span> + color.getColor() + <span class="string">"Triangle~~~"</span>); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul></li><li><p>注意事项和细节：</p><ol><li>实现了抽象和实现部分的分离，从而极大地提高了系统的灵活性。让抽象部分和实现部分独立开来，这有助于系统进行分层设计，从而产生更好的结构化系统</li><li><strong>桥接模式替代多层继承方案，可以减少子类的个数</strong>，降低系统的管理和维护成本</li><li>桥接模式<strong>要求正确识别出系统中两个独立变化的维度(抽象、和实现)</strong>，其使用范围有一定的局限</li><li>对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用</li></ol></li></ul><h2 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h2><ul><li><p>基本介绍：</p><ul><li>装饰者模式<strong>动态地将新功能附加到对象上</strong>。在对象功能扩展方面比继承更有弹性，体现了开闭原则(OCP)</li><li>主要作用：<ol><li>增强一个类原有的功能</li><li>为一个类添加新的功能</li></ol></li></ul></li><li><p>案例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Condiment</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">getCondiment</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Milk</span> <span class="keyword">implements</span> <span class="title">Condiment</span></span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getCondiment</span><span class="params">()</span></span>&#123; System.out.println(<span class="string">"Milk~~~"</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IceDecorator</span> <span class="keyword">implements</span> <span class="title">Condiment</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Condiment origin;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">IceDecorator</span><span class="params">(Condiment condiment)</span></span>&#123; origin = condiment; &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getCondiment</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Add Ice~~~"</span>);</span><br><span class="line">    origin.getCondiment();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Condiment condiment = <span class="keyword">new</span> IceDecorator(<span class="keyword">new</span> Milk());</span><br><span class="line">Condiment.getCondiment();</span><br></pre></td></tr></table></figure></li><li><p>源码中的应用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// FilterInputStream.class</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterInputStream</span> <span class="keyword">extends</span> <span class="title">InputStream</span> </span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">volatile</span> InputStream in;</span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="title">FilterInputStream</span><span class="params">(InputStream in)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.in = in;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><ul><li><p>基本介绍：组合模式(Composite Pattern)又叫部分整体模式，属于结构型模式。用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象来表示部分以及整体层次</p></li><li><p>案例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printInfo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteFile</span> <span class="keyword">extends</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printInfo</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">"ConcreteFile name: "</span> + name + <span class="string">" , createTime: "</span> + createTime); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Folder</span> <span class="keyword">extends</span> <span class="title">File</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> List&lt;File&gt; childFiles = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFile</span><span class="params">(File file)</span></span>&#123; childFiles.add(file);&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Folder name: "</span> + name + <span class="string">" , createTime: "</span> + createTime);</span><br><span class="line">    <span class="keyword">for</span> (File file : childFiles) &#123; file.printInfo(); &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意事项和细节：</p><ol><li>能简化客户端操作，客户端只需要面对一致的对象而不用考虑整体部分或者节点叶子的问题</li><li>具有较强的扩展性，当要更改组合对象时只需要调整内部的层次关系，客户端不用做出任何改动</li><li>方便创建出复杂的层次结构。客户端不用理会组合里的组成细节，易添加节点从而创建出复杂的树形结构</li><li>需要<strong>遍历组织机构或处理的对象具有树形结构时</strong>，非常适合使用组合模式</li><li>要求较高的抽象性，如果<strong>非叶节点和叶节点有很多差异性</strong>的话，比如很多方法和属性都不一样，不适合使用组合模式</li></ol></li></ul><h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h2><ul><li>基本介绍：外观模式(Facade Pattern)又名门面模式。外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统的一组接口提供一个一致的界面，外观模式定义了一个高层接口，使得子系统更易使用<br><img src="%E5%9B%BE%E8%A7%A3%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F.jpg" alt="图解外观模式"></li><li>注意事项和细节：<ol><li>外观模式对外屏蔽了子系统的细节，降低了客户端使用子系统的复杂性；使客户端与子系统解耦，子系统内部的模块更易维护和扩展</li><li>当系统需进行分层设计时可考虑使用Facade模式</li><li>维护一个遗留的大型系统时，可能该系统已变得非常难以维护和扩展。此时可考虑为新系统开发一个Facade类来提供遗留系统较清晰简单的接口，让新系统与Facade类交互，提高复用性</li><li>合理地使用外观模式可以更好地划分访问层次，不能过多或不合理地使用外观模式。使用外观模式好还是直接调用模块好取决于问题复杂度和实际情况。要以让系统有层次和利于维护为目的</li></ol></li></ul><h2 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h2><ul><li><p>基本介绍：</p><ol><li>通过运用共享技术有效地支持大量细粒度的对象</li><li>常用于系统底层开发，解决系统的性能问题。像数据库连接池，里面都是创建好的连接对象，需要时可以直接使用，避免重新创建；如果没有线程再创建</li><li>能够解决对象重复创建销毁的资源耗费。当系统中有大量相似对象需要缓冲池时，不需总是创建新对象，而是从缓冲池里拿</li><li>经典的应用场景就是池技术——String常量池、数据库连接池、缓冲池等；享元模式是池技术的重要实现方式</li></ol></li><li><p>内部状态和外部状态</p><ol><li>享元模式提出了两个要求：细粒度和共享对象。这就涉及到内部状态和外部状态了，即将对象的信息分为两个部分——内部状态和外部状态</li><li><strong>内部状态指对象共享出来的信息，存储在享元对象内部且不会随环境的改变而改变</strong></li><li><strong>外部状态指对象得以依赖的一个标记，是随环境改变而改变、不可共享的状态</strong></li></ol></li><li><p>源码中的应用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试案例</span></span><br><span class="line"><span class="comment">// 第二次把127全替换为200</span></span><br><span class="line">Integer[] integers = <span class="keyword">new</span> Integer[]&#123;</span><br><span class="line">  Integer.valueOf(<span class="number">127</span>), <span class="keyword">new</span> Integer(<span class="number">127</span>),</span><br><span class="line">  Integer.valueOf(<span class="number">127</span>), <span class="keyword">new</span> Integer(<span class="number">127</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; integers.length; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; integers.length; j++) &#123;</span><br><span class="line">    System.out.println(String.format(<span class="string">"i%d.equals(i%d)[%s], i%d == i%d[%s]"</span>,</span><br><span class="line">      i, j, integers[i].equals(integers[j]),</span><br><span class="line">      i, j, integers[i] == integers[j]));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  第一次结果：</span></span><br><span class="line"><span class="comment">  i0.equals(i1)[true], i0 == i1[false]</span></span><br><span class="line"><span class="comment">  i0.equals(i2)[true], i0 == i2[true]</span></span><br><span class="line"><span class="comment">  i0.equals(i3)[true], i0 == i3[false]</span></span><br><span class="line"><span class="comment">  i1.equals(i2)[true], i1 == i2[false]</span></span><br><span class="line"><span class="comment">  i1.equals(i3)[true], i1 == i3[false]</span></span><br><span class="line"><span class="comment">  i2.equals(i3)[true], i2 == i3[false]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Integer.class</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Integer</span> <span class="keyword">extends</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// 如果i在[low, high]区间,在cache中获取,否则返回新创建的对象</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">      <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 内部缓存,使用享元模式</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCache</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 最低-128</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> low = -<span class="number">128</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">      <span class="comment">// 最高127,但可以通过VM设置</span></span><br><span class="line">      <span class="comment">// high value may be configured by property</span></span><br><span class="line">      <span class="keyword">int</span> h = <span class="number">127</span>;</span><br><span class="line">      String integerCacheHighPropValue =</span><br><span class="line">        sun.misc.VM.getSavedProperty(<span class="string">"java.lang.Integer.IntegerCache.high"</span>);</span><br><span class="line">      <span class="keyword">if</span> (integerCacheHighPropValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">int</span> i = parseInt(integerCacheHighPropValue);</span><br><span class="line">          i = Math.max(i, <span class="number">127</span>);</span><br><span class="line">          <span class="comment">// Maximum array size is Integer.MAX_VALUE</span></span><br><span class="line">          h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span>( NumberFormatException nfe) &#123;</span><br><span class="line">          <span class="comment">// If the property cannot be parsed into an int, ignore it.</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      high = h;</span><br><span class="line"></span><br><span class="line">      cache = <span class="keyword">new</span> Integer[(high - low) + <span class="number">1</span>];</span><br><span class="line">      <span class="keyword">int</span> j = low;</span><br><span class="line">      <span class="comment">// 在静态初始化时把[-128, 127]全加入缓存</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; cache.length; k++)</span><br><span class="line">        cache[k] = <span class="keyword">new</span> Integer(j++);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span></span><br><span class="line">      <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">IntegerCache</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意事项和细节</p><ol><li>“享”表示共享，”元”表示对象</li><li>系统中有大量对象且这些对象消耗大量内存并且对象的状态大部分可以外部化时，可考虑选用享元模式</li><li>用唯一标识码判断，如果在内存中有，则返回这个唯一标识码所标识的对象。大多用HashMap/HashTable存储</li><li>大大减少了对象的创建开销，降低了程序内存的占用，提高效率</li><li>提高了系统的复杂度，需剥离出内部状态和外部状态。外部状态具有固化特性，不随内部状态的改变而改变。此为使用享元模式需要注意的地方</li><li>要注意划分内部状态和外部状态，并且通常需要一个工厂类加以控制</li></ol></li></ul><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><ul><li><p>基本介绍：</p><ol><li>代理模式：为一个对象提供一个替身以控制对该对象的访问。通过代理对象访问目标对象的好处是——可在目标对象实现的基础上，增强额外的功能操作——即扩展目标对象的功能</li><li>被代理的对象可以是远程对象、创建开销大的对象或需要安全控制的对象</li><li>代理模式有不同的形式，主要有三种：<strong>静态代理</strong>、<strong>JDK代理</strong>(又名接口代理,底层采用asm)和<strong>Cglib代理</strong>(可在内存动态地创建对象,无需实现接口,属于动态代理的范畴,底层采用asm)</li></ol></li><li><p>静态代理</p><ul><li><p>基本介绍：静态代理在使用时需要定义接口或父类，被代理对象(即目标对象)与代理对象一起实现相同的接口或是继承相同父类(形如装饰模式,但重在控制)</p></li><li><p>案例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ITestDao</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDao</span> <span class="keyword">implements</span> <span class="title">ITestDao</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"TestDao test()~~~"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDaoProxy</span> <span class="keyword">implements</span> <span class="title">ITestDao</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> ITestDao target;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">TestDaoProxy</span><span class="params">(ITestDao target)</span> </span>&#123; <span class="keyword">this</span>.target = target; &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Enter TestDaoProxy test()~~~"</span>);</span><br><span class="line">    target.test();</span><br><span class="line">    System.out.println(<span class="string">"Leave TestDaoProxy test()~~~"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ITestDao testDao = <span class="keyword">new</span> TestDao();</span><br><span class="line">TestDaoProxy testDaoProxy = <span class="keyword">new</span> TestDaoProxy(testDao);</span><br><span class="line">testDaoProxy.test();</span><br></pre></td></tr></table></figure></li><li><p>优缺点总结：</p><ol><li>优点：在不修改目标对象功能前提下能通过代理对象对目标功能进行扩展</li><li>缺点：因代理对象需要与目标对象实现一样的接口，因此会有很多代理类，一旦接口增加方法，目标对象与代理对象都要维护</li></ol></li></ul></li><li><p>JDK代理：</p><ul><li><p>基本介绍：</p><ol><li>代理对象不需要实现接口，但目标对象要实现接口，否则不能用动态代理</li><li>代理对象的生成是利用JDK的API，动态地在内存中构建代理对象</li></ol></li><li><p>案例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ITestDao</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">testWithParam</span><span class="params">(String value)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDao</span> <span class="keyword">implements</span> <span class="title">ITestDao</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"TestDao test()~~~"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWithParam</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"TestDao testWithParam("</span> + value + <span class="string">")~~~"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 维护一个目标对象</span></span><br><span class="line">  <span class="keyword">private</span> Object target;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ProxyFactory</span><span class="params">(Object target)</span> </span>&#123; <span class="keyword">this</span>.target = target; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 生成代理对象</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">getProxyInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ClassLoader loader：指定当前目标对象使用的类加载,获取加载器的方法是固定的</span></span><br><span class="line">    <span class="comment">// Class&lt;?&gt;[] interfaces：目标对象实现的接口类型,使用泛型方式确定类型</span></span><br><span class="line">    <span class="comment">// InvocationHandler h：事件处理,执行目标对象方法时会触发事件处理器方法,会把当前目标对象方法作为参数传入</span></span><br><span class="line">    <span class="keyword">return</span> Proxy.newProxyInstance(</span><br><span class="line">      target.getClass().getClassLoader(),</span><br><span class="line">      target.getClass().getInterfaces(),</span><br><span class="line">      (Object proxy, Method method, Object[] args) -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">"Jdk Proxy start~~~"</span>);</span><br><span class="line">        <span class="comment">// 反射机制调用目标对象方法</span></span><br><span class="line">        Object result = method.invoke(target, args);</span><br><span class="line">        System.out.println(<span class="string">"Jdk Proxy end~~~"</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给目标对象创建代理对象</span></span><br><span class="line">ITestDao proxyInstance = (ITestDao)<span class="keyword">new</span> ProxyFactory(<span class="keyword">new</span> TestDao()).getProxyInstance();</span><br><span class="line">proxyInstance.test();</span><br><span class="line">System.out.println(proxyInstance.testWithParam(<span class="string">"Hello Proxy"</span>));</span><br><span class="line">System.out.println(proxyInstance);</span><br><span class="line">System.out.println(proxyInstance.getClass());</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Cglib代理</p><ul><li><p>基本介绍：</p><ol><li>静态代理和JDK代理模式都要求目标对象实现一个接口，但有时候目标对象只是一个<strong>单独的对象且并没有实现任何的接口</strong>，这时候可使用目标对象子类来实现代理——Cglib代理</li><li>Cglib代理也叫作<strong>子类代理</strong>，它在内存中构建一个子类对象从而实现对目标对象功能的扩展，一些资料也将Cglib代理归属到动态代理</li><li>Cglib是一个强大的高性能的代码生成包，它可在运行期扩展java类与实现java接口。它广泛地被许多AOP框架使用，如Spring AOP，用于实现方法拦截</li><li>在AOP编程中如何选择代理模式：<ol><li>目标对象需要实现接口，用JDK代理</li><li>目标对象不需要实现接口，用Cglib代理</li></ol></li><li>Cglib包的底层是<strong>通过使用字节码处理框架ASM来转换字节码并生成新的类</strong></li></ol></li><li><p>注意事项：</p><ol><li>需要引入cglib的jar文件(Spring中集成了Cglib的使用)</li><li>注意代理的类不能为final，否则报错——java.lang.IllegalArgumentException</li><li>目标对象的方法如果为final/static方法，那么就不会被拦截——即不会执行目标对象额外的业务方法</li></ol></li><li><p>案例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDao</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">"TestDao test()~~~"</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 维护一个目标对象</span></span><br><span class="line">  <span class="keyword">private</span> Object target;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ProxyFactory</span><span class="params">(Object target)</span> </span>&#123; <span class="keyword">this</span>.target = target; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 生成代理对象</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">getProxyInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1、创建一个工具类</span></span><br><span class="line">    Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">    <span class="comment">// 2、设置父类</span></span><br><span class="line">    enhancer.setSuperclass(target.getClass());</span><br><span class="line">    <span class="comment">// 3、设置回调函数</span></span><br><span class="line">    enhancer.setCallback(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">// 4、创建子类对象即代理对象</span></span><br><span class="line">    <span class="keyword">return</span> enhancer.create();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 重写intercept方法,会调用目标对象的方法</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Cglib Proxy start~~~"</span>);</span><br><span class="line">    Object result = method.invoke(target, args);</span><br><span class="line">    System.out.println(<span class="string">"Cglib Proxy end~~~"</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TestDao proxyInstance = (TestDao) <span class="keyword">new</span> ProxyFactory(<span class="keyword">new</span> TestDao()).getProxyInstance();</span><br><span class="line">proxyInstance.test();</span><br><span class="line">System.out.println(proxyInstance);</span><br><span class="line">System.out.println(proxyInstance.getClass());</span><br></pre></td></tr></table></figure></li></ul></li><li><p>几种常见的代理模式(常见变体)</p><ol><li>缓存代理：如当请求图片文件等资源时，先到缓存代理取，如果取不到资源再到公网或者数据库取，然后缓存</li><li>远程代理：通过远程对象的本地代表可以把远程对象当本地对象来调用。远程代理通过网络和真正的远程对象沟通信息</li><li>同步代理：主要使用在多线程编程中完成多线程间同步工作</li></ol></li></ul><h2 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h2><ul><li>基本介绍：<ol><li>模板方法模式(Template Method Pattern)又叫模板模式，属于行为型模式。在一个抽象类公开定义执行方法的模板。子类可按需重写方法实现，但调用将以抽象类中定义的方式进行</li><li>模板方法模式定义一个操作中算法的骨架，而将一些步骤延迟到子类，这使得子类可以不改变一个算法的结构就可以重定义算法的某些特定步骤</li></ol></li><li>注意事项和细节：<ol><li>基本思想：算法只存在于一个地方也就是在父类中，容易修改。需要修改算法时只需修改父类的模板方法或已经实现的某些步骤，子类就会继承这些修改</li><li>实现了代码复用的最大化。父类的模板方法和已实现的某些步骤会被子类继承直接使用</li><li>既统一了算法也提供了很大的灵活性。父类的模板方法确保算法结构保持不变，同时由子类提供部分步骤的实现</li><li>模式的不足之处：每一个不同的实现都需要一个子类实现，这会导致类的个数增加，使得系统更加庞大</li><li>不希望子类覆写的方法(模版方法)用final修饰；要求子类必须覆写的方法用abstract修饰</li><li>模板方法模式使用场景：当要完成在某个过程，该过程要执行一系列步骤且这一系列的步骤基本相同，但其个别步骤在实现时可能不同。这种情况下通常考虑用模板方法模式来处理</li></ol></li></ul><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><ul><li><p>基本介绍：命令模式(Command Pattern)将一个请求封装为一个对象，可参数化请求对象，支持对请求排队、记录和撤销的操作</p></li><li><p>案例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICommand</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LightOpenCommand</span> <span class="keyword">implements</span> <span class="title">ICommand</span> </span>&#123;</span><br><span class="line">  Light light;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">LightOpenCommand</span><span class="params">(Light light)</span> </span>&#123; <span class="keyword">this</span>.light = light;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Monitor light turn on~~~"</span>);</span><br><span class="line">    light.open();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Monitor light turn off~~~"</span>);</span><br><span class="line">    light.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LightCloseCommand</span> <span class="keyword">implements</span> <span class="title">ICommand</span> </span>&#123;</span><br><span class="line">  Light light;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">LightCloseCommand</span><span class="params">(Light light)</span> </span>&#123; <span class="keyword">this</span>.light = light; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Monitor light turn off~~~"</span>);</span><br><span class="line">    light.close();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Monitor light turn on~~~"</span>);</span><br><span class="line">    light.open();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TelevisionOpenCommand</span> <span class="keyword">implements</span> <span class="title">ICommand</span> </span>&#123;</span><br><span class="line">  Television television;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">TelevisionOpenCommand</span><span class="params">(Television television)</span> </span>&#123; <span class="keyword">this</span>.television = television; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Monitor television turn on~~~"</span>);</span><br><span class="line">    television.open();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Monitor television turn off~~~"</span>);</span><br><span class="line">    television.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TelevisionCloseCommand</span> <span class="keyword">implements</span> <span class="title">ICommand</span> </span>&#123;</span><br><span class="line">  Television television;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">TelevisionCloseCommand</span><span class="params">(Television television)</span> </span>&#123; <span class="keyword">this</span>.television = television; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Monitor television turn off~~~"</span>);</span><br><span class="line">    television.close();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Monitor television turn on~~~"</span>);</span><br><span class="line">    television.open();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MicroCommand</span> <span class="keyword">implements</span> <span class="title">ICommand</span> </span>&#123;</span><br><span class="line">  List&lt;ICommand&gt; iCommands;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MicroCommand</span><span class="params">(List&lt;ICommand&gt; iCommands)</span> </span>&#123; <span class="keyword">this</span>.iCommands = iCommands;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"MicroCommand execute~~~"</span>);</span><br><span class="line">    <span class="keyword">for</span> (ICommand iCommand : iCommands) &#123; iCommand.execute(); &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"MicroCommand undo~~~"</span>);</span><br><span class="line">    <span class="keyword">for</span> (ICommand iCommand : iCommands) &#123; iCommand.undo(); &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Light light = <span class="keyword">new</span> Light();</span><br><span class="line">ICommand lightOpenCommand = <span class="keyword">new</span> LightOpenCommand(light);</span><br><span class="line">ICommand lightCloseCommand = <span class="keyword">new</span> LightCloseCommand(light);</span><br><span class="line"></span><br><span class="line">Television television = <span class="keyword">new</span> Television();</span><br><span class="line">ICommand televisionOpenCommand = <span class="keyword">new</span> TelevisionOpenCommand(television);</span><br><span class="line">ICommand televisionCloseCommand = <span class="keyword">new</span> TelevisionCloseCommand(television);</span><br><span class="line"></span><br><span class="line">ICommand microCommand = <span class="keyword">new</span> MicroCommand(Arrays.asList(lightCloseCommand, lightOpenCommand, televisionOpenCommand, televisionCloseCommand));</span><br><span class="line"></span><br><span class="line">lightOpenCommand.execute();</span><br><span class="line">lightOpenCommand.undo();</span><br><span class="line">lightCloseCommand.execute();</span><br><span class="line">lightCloseCommand.undo();</span><br><span class="line"></span><br><span class="line">televisionOpenCommand.execute();</span><br><span class="line">televisionOpenCommand.undo();</span><br><span class="line">televisionCloseCommand.execute();</span><br><span class="line">televisionCloseCommand.undo();</span><br><span class="line"></span><br><span class="line">microCommand.execute();</span><br><span class="line">microCommand.undo();</span><br></pre></td></tr></table></figure></li><li><p>注意事项和细节：</p><ol><li>容易设计一个命令队列。只要把命令对象放到列队就可以多线程地执行命令</li><li>容易实现请求的撤销和重做</li><li>可能导致某些系统有过多的具体命令类，增加了系统的复杂度</li><li><strong>空命令也是一种设计模式，它省去了判空的操作</strong></li><li>经典应用场景：界面的一个按钮都是一条命令、模拟CMD(DOS命令)、订单的撤销/恢复、触发-反馈机制</li></ol></li></ul><h2 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h2><ul><li><p>基本介绍：</p><ol><li><strong>访问者模式(Visitor Pattern)封装一些作用于某种数据结构各元素的操作，使得可在不改变数据结构的前提下定义作用于这些元素的新操作</strong></li><li>核心思想：<strong>将数据结构与数据操作分离</strong>，解决数据结构和操作耦合性问题</li><li>基本工作原理：在被访问的类中加一个对外提供访问的接口(accept)</li><li>主要应用场景：需要对一个对象结构中的对象进行很多不同操作(这些操作彼此没有关联)，同时需避免这些操作”污染”这些对象的类</li></ol></li><li><p>案例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chip</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span> value;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Visitor visitor)</span></span>&#123; visitor.accept(<span class="keyword">this</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(Chip chip)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AMD</span> <span class="keyword">implements</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Chip chip)</span> </span>&#123;</span><br><span class="line">    chip.setName(<span class="string">"Ryzen 9 5950X Design"</span>);</span><br><span class="line">    chip.setValue(<span class="number">4000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TSMC</span> <span class="keyword">implements</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Chip chip)</span> </span>&#123;</span><br><span class="line">    chip.setName(<span class="string">"Ryzen 9 5950X Original Entrusted Manufacture"</span>);</span><br><span class="line">    chip.setValue(<span class="number">4500</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TMALL</span> <span class="keyword">implements</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Chip chip)</span> </span>&#123;</span><br><span class="line">    chip.setName(<span class="string">"Ryzen 9 5950X Sell"</span>);</span><br><span class="line">    chip.setValue(<span class="number">5500</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Chip chip = <span class="keyword">new</span> Chip();</span><br><span class="line">List&lt;Visitor&gt; capitalists = Arrays.asList(<span class="keyword">new</span> AMD(), <span class="keyword">new</span> TSMC(), <span class="keyword">new</span> TMALL());</span><br><span class="line"><span class="keyword">for</span> (Visitor capitalist : capitalists) &#123;</span><br><span class="line">  chip.visit(capitalist);</span><br><span class="line">  logger.info(<span class="string">"Visit By &#123;&#125; , Chip -&gt; &#123;&#125; , &#123;&#125;"</span>, capitalist.getClass().getSimpleName(), chip.getName(), chip.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意事项和细节：</p><ul><li>优点：<ol><li>符合单一职责原则、使程序具有优秀的扩展性、灵活性非常高</li><li>可对功能进行统一，可应用于报表、UI、拦截器与过滤器等场景，适用于数据结构相对稳定的系统</li></ol></li><li>缺点<ol><li>具体元素对访问者公布细节，即访问者关注了其他类的内部细节，违背了迪米特法则且具体元素变更比较困难</li><li>违背了依赖倒转原则。访问者依赖的是具体元素，而不是抽象元素</li></ol></li><li>总结：如果一个系统有比较稳定的数据结构，又有经常变化的功能需求，那么访问者模式就比较合适</li></ul></li></ul><h2 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h2><ul><li>基本介绍：迭代器模式(Iterator Pattern)属于行为型模式，它<strong>提供一种方法访问一个容器对象中各个元素，而又无需暴露该对象的内部细节</strong></li><li>源码中的应用：JDK(Collection.class, Iterator.class)</li><li>注意事项和细节：<ul><li>优点<ol><li>提供一个统一的方法遍历对象</li><li>隐藏了对象内部细节</li><li>隐藏了一种设计思想：一个类应只有一个引起变化的原因(单一责任原则)。剥离迭代器，<strong>把管理对象集合和遍历对象集合的责任分开</strong></li><li>当要展示一组相似对象或遍历一组相同对象时，适合使用迭代器模式</li></ol></li><li>缺点：当遍历细节不同时，会生成多个具体迭代器类</li></ul></li></ul><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><ul><li>基本介绍：定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新</li><li>源码中的应用：JDK中的Observable和Observer类</li></ul><h2 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h2><ul><li>基本介绍：中介者模式(Mediator Pattern)属于行为型模式，<strong>定义一个中介对象来封装一系列对象之间的交互</strong>。使原来有对象的耦合松散，且可以独立地改变它们之间的交互</li><li>注意事项和细节：<ol><li>多个类相互耦合会形成网状结构，使用中介者模式将网状结构分离为星型结构，进行解耦</li><li>减少类间依赖，降低了耦合，符合迪米特原则</li><li>中介者承担了较多的责任，需要处理所有类之间的协调工作，一旦中介者出现了问题，整个系统就会受到影响</li><li>如果设计不当，中介者对象本身会变得过于复杂</li></ol></li></ul><h2 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h2><ul><li>基本介绍：备忘录模式(Memento Pattern)属于行为型模式，在<strong>不破坏封装性的条件下，通过备忘录对象存储另一个对象内部状态的快照，在将来合适时把这个对象还原到存储时的状态</strong></li><li>注意事项和细节：<ol><li>为用户提供了一种可以恢复状态的机制，可使用户能比较方便地回到某个历史的状态</li><li>实现了信息的封装，使得用户无需关心状态的保存细节</li><li>消耗资源：如果类的成员变量过多，势必会占用比较大的资源，且每一次保存都会消耗一定的内存</li><li>适用的应用场景：<ol><li>打游戏时的存档</li><li>Windows里的Ctrl + z</li><li>浏览器中的后退</li><li>数据库的事务管理</li></ol></li></ol></li></ul><h2 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h2><ul><li>基本介绍：<ol><li>在编译原理中，一个表达式通过词法分析器形成词法单元，而后这些词法单元再通过语法分析器构建语法分析树，最终形成一颗抽象的语法分析树。这里词法分析器和语法分析器都可以看做是解释器</li><li>解释器模式(Interpreter Pattern)：<strong>给定一门语言(表达式)，定义它的文法的一种表示，并定义一个解释器，该解释器使用该表示来解释语言中的句子(表达式)</strong></li><li>将不可拆分的最小单元称之为终结表达式，可被拆分的表达式称之为非终结表达式</li></ol></li><li>注意事项和细节：<ol><li>应用场景：编译器、运算表达式计算、正则表达式、机器人等</li><li>可能带来的问题：解释器模式会引起类膨胀；解释器模式通常采用递归，这将会导致调试复杂、运行效率降低</li></ol></li></ul><h2 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h2><ul><li>基本介绍：<ol><li>状态模式(State Pattern)主要用来解决对象在多种状态转换时需要对外输出不同的行为的问题。状态和行为是一一对应的，状态之间可以相互转换</li><li>当一个<strong>对象的内在状态改变时允许改变其行为</strong>，这个对象看起来像是改变了其类</li></ol></li><li>注意事项和细节：<ol><li>代码有很强的可读性。状态模式将每个状态的行为封装到对应的一个类中</li><li>方便维护。将容易产生问题的if-else语句删除了，如果把每个状态的行为都放到一个类中，每次调用方法时都要判断当前是什么状态，不但会产出很多if-else语句，而且容易出错</li><li>符合”开闭原则”，容易增删状态</li><li>会产生很多类。每个状态都需要一个对应的类，当状态过多时会产生很多类，加大维护难度</li><li>应用场景：当一个事件或者对象有多种状态，状态之间会相互转换，对不同的状态要求有不同的行为时可考虑状态模式</li></ol></li></ul><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><ul><li>基本介绍：定义了一系列算法，并将每一个算法封装起来，且使它们可以相互替换。策略模式让算法独立于使用它的客户而独立变化。简单来说，即<strong>殊途同归</strong>——当我们做同一件事有多种方式时可将每种方法封装起来，在不同的场景选择不同的策略，调用不同的方法</li><li>源码中的应用：图片加载框架(Glide,picaso等)缓存策略</li><li>注意事项和细节：<ol><li>关键是分析项目中变化部分与不变部分</li><li>注意多用组合/聚合、少用继承</li><li>体现了OCP原则，客户端增加行为不用修改原有代码，只要添加一种策略(或者行为)即可，避免使用多重if-else</li><li>每添加一个策略就要增加一个类，当策略过多时会导致类数目庞大</li><li>更好的实践：与工厂模式结合，将不同的策略对象封装到工厂类中，只需传递不同的策略类型从工厂中获取对应的策略对象</li></ol></li></ul><h2 id="职责链模式"><a href="#职责链模式" class="headerlink" title="职责链模式"></a>职责链模式</h2><ul><li>基本介绍：<ol><li>职责链模式(Chain of Responsibility Pattern)又叫责任链模式，属于行为型模式。它为请求创建了一个处理者对象的链，对请求的发送者和接收者进行解耦</li><li>通常每个处理者都包含对另一个处理者的引用。如果一个处理者不能处理该请求，那么它会把该请求传给下一个处理者，依此类推</li></ol></li><li>源码中的应用：javax包下的FilterChain、SpringMVC包装的FilterChain</li><li>注意事项和细节：<ol><li>将请求和处理分开，实现解耦，提高系统的灵活性</li><li>责任分担，每个处理者只处理自身该处理的任务，其余交由下一个处理者完成或提前返回</li><li>性能会受到影响，特别是在链比较长的时候。因此需控制链中最大节点数量</li><li>采用了类似递归的方式，调试不方便</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BasicSkill </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/2020/10/09/BasicSkill/Docker/"/>
      <url>/2020/10/09/BasicSkill/Docker/</url>
      
        <content type="html"><![CDATA[<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><ul><li><a href="#Docker简介">Docker简介</a></li><li><a href="#Docker安装">Docker安装</a></li><li><a href="#Docker常用命令">Docker常用命令</a></li><li><a href="#Docker镜像">Docker镜像</a></li><li><a href="#Docker容器数据卷">Docker容器数据卷</a></li><li><a href="#Dockerfile">Dockerfile</a></li><li><a href="#Docker安装步骤">Docker安装步骤</a></li><li><a href="#Docker镜像发布">Docker镜像发布</a></li></ul><a id="more"></a><h2 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h2><ul><li>Docker是什么：<ul><li>Docker出现背景：<ol><li>一款产品从开发到上线，从操作系统，到运行环境，再到应用配置。开发/运维之间的协作需要我们关心很多东西，特别是各种版本的迭代之后，不同版本环境的兼容，对运维人员都是考验</li><li>Docker之所以发展如此迅速，就是因为它对此给出了一个标准化的解决方案</li><li>环境配置如此麻烦，换一台机器，就要重来一次，费力费时。能不能从根本上解决问题，<strong>软件可以带环境安装？</strong>也就是说，安装的时候，把原始环境一模一样地复制过来。利用Docker可以消除协作编码时”在我的机器上可正常工作”的问题</li><li>之前在服务器配置一个应用的运行环境，要安装各种软件，有时还不能跨平台，移植应用也非常麻烦</li><li>传统上认为，软件编码开发和测试环节结束后，所产出的成果即是程序或是能够编译执行的二进制字节码等。为了让这些程序可以顺利执行，开发团队也得准备完整的部署文件。开发需要清楚地告诉运维部署团队用的全部配置文件和所有软件环境，即便如此仍然会发生部署失败的状况。<strong>Docker镜像的设计打破过去”程序即应用”的观念。透过镜像(images)将作业系统核心除外地运行应用程序所需要的系统环境，由下而上打包，达到应用程序跨平台间的无缝接轨运行</strong></li></ol></li><li>Docker理念：<ol><li>Docker是基于Go语言实现的云开源项目</li><li>Docker的主要目标是”Build, Ship and Run Any App, Anywhere”。即通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户的APP(可以是一个WEB应用或数据库应用等)及其运行环境能够做到”<strong>一次封装，到处运行</strong>“<br> <img src="Docker%E4%B8%BB%E8%A6%81%E7%9B%AE%E6%A0%87.png" alt="Docker主要目标"></li><li>Linux容器技术的出现就解决了这样一个问题，而Docker就是在它的基础上发展过来的。将应用运行在Docker容器上面，Docker容器在任何操作系统上都是一致的，这就实现了跨平台、跨服务器。<strong>只需要一次配置好环境，换到别的机子上就可以一键部署好，大大简化了操作</strong></li></ol></li><li>总结：解决了运行环境和配置问题软件容器，方便做持续集成并有助于整体发布的容器虚拟化技术</li></ul></li><li>Docker与传统虚拟机技术<ul><li>虚拟机技术：<ul><li>虚拟机(virtual machine)是带环境安装的一种解决方案。</li><li>可以在一种操作系统里面运行另一种操作系统(Windows系统里面运行Linux系统)，应用程序对此毫无感知，因为虚拟机看上去跟真实系统一模一样。而对于底层系统来说，虚拟机就是一个普通文件，不需要了就删掉，对其他部分毫无影响。这类虚拟机完美地运行了另一套系统，能够使应用程序、操作系统和硬件三者之间的逻辑不变<br><img src="%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%9E%B6%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="虚拟机架构示意图"></li><li>虚拟机的缺点：<ol><li>资源占用多</li><li>冗余步骤多</li><li>启动慢</li></ol></li></ul></li><li>容器虚拟化技术：<ul><li>由于前面虚拟机存在这些缺点，Linux发展出了另一种虚拟化技术——Linux容器(Linux Containers,缩写为LXC)</li><li>Linux容器并不模拟一个完整的操作系统，而是对进程进行隔离。有了容器，就可以将软件运行所需的所有资源打包到一个隔离的容器中。容器与虚拟机不同，不需要捆绑一整套操作系统，只需要软件工作所需的库资源和设置。系统因此而变得高效轻量并保证部署在任何环境中的软件都能始终如一地运行<br><img src="Docker%E6%9E%B6%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="Docker架构示意图"></li><li>Docker和传统虚拟化方式的不同之处：<ol><li>传统虚拟机技术是虚拟出一套硬件后在其上运行一个完整操作系统，再在该系统上再运行所需的应用进程</li><li>容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便</li><li>每个容器之间互相隔离，每个容器有自己的文件系统，容器之间进程不会相互影响，能区分计算资源</li></ol></li></ul></li></ul></li><li>Docker能干嘛：<ul><li>开发/运维(DevOps,一次构建、随处运行)：<ol><li>一次构建、随处运行：传统的应用开发完成后，需要提供一堆安装程序和配置说明文档，安装部署后需根据配置文档进行繁杂的配置才能正常运行。Docker化之后只需要交付少量容器镜像文件，在正式生产环境加载镜像并运行即可，应用安装配置在镜像里已经内置好，大大节省部署配置和测试验证时间</li><li>更便捷的升级和扩缩容：随着微服务架构和Docker的发展，大量的应用会通过微服务方式构建。应用的开发构建将变成搭乐高积木一样，每个Docker容器将变成一块”积木”，应用的升级将变得非常容易。当现有的容器不足以支撑业务处理时，可通过镜像运行新的容器进行快速扩容，使应用系统的扩容从原先的天级变成分钟级甚至秒级</li><li>更简单的系统运维：应用容器化运行后，生产环境运行的应用可与开发、测试环境的应用高度一致，容器会将应用程序相关的环境和状态完全封装起来，不会因为底层基础架构和操作系统的不一致性给应用带来影响，产生新的BUG。当出现程序异常时，也可以通过测试环境的相同容器进行快速定位和修复</li><li>更高效的计算资源利用：Docker是内核级虚拟化，其不像传统的虚拟化技术一样需要额外的Hypervisor支持，所以在一台物理机上可以运行很多个容器实例，可大大提升物理服务器的CPU和内存的利用率</li></ol></li></ul></li><li>Docker去哪下：<ul><li>官网：<a href="https://www.docker.com/" target="_blank" rel="noopener">https://www.docker.com/</a></li><li>镜像仓库：<a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a></li></ul></li></ul><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><ul><li><p>前提：Docker只能运行在CentOS-6.5或更高的版本的CentOS上，要求系统为64位、系统内核版本为2.6.32-431或者更高版本(以CentOS为例)</p></li><li><p>Docker的基本组成：</p><ol><li>镜像(image)：Docker镜像就是一个<strong>只读</strong>的模板。镜像可以用来创建容器，<strong>一个镜像可以创建多个容器</strong></li><li>容器(container)：<ul><li>Docker利用容器独立运行的一个或一组应用。<strong>容器是用镜像创建的运行实例</strong></li><li>它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台。<strong>可以把容器看做是一个简易版的Linux环境</strong>(包括root用户权限、进程空间、用户空间和网络空间等)和运行在其中的应用程序</li><li>容器的定义和镜像几乎一模一样，也是一堆层的统一视角，唯一区别在于容器的最上面那一层是可读可写的</li></ul></li><li>仓库(repository)：<ul><li><strong>仓库是集中存放镜像文件的场所</strong></li><li>仓库(Repository)和仓库注册服务器(Registry)是有区别的。仓库注册服务器上往往存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签(tag)</li><li>仓库分为公开仓库(Public)和私有仓库(Private)两种形式</li><li>最大的公开仓库是Docker Hub，里面存放了数量庞大的镜像供用户下载。国内的公开仓库包括阿里云 、网易云等</li></ul></li><li>总结：<ul><li>区分并理解仓储/镜像/容器这些概念</li><li>Docker本身是一个容器运行载体或称之为管理引擎。我们把应用程序和配置依赖打包好形成一个可交付的运行环境，这个打包好的运行环境就是image镜像文件。只有通过这个镜像文件才能生成Docker容器。image文件可以看作是容器的模板。Docker根据image文件生成容器的实例。同一个image文件可以生成多个同时运行的容器实例</li><li>image文件生成的容器实例本身也是一个文件，称为镜像文件</li><li>一个容器运行一种服务，当我们需要的时候就可以通过docker客户端创建一个对应的运行实例，也就是我们的容器</li><li>仓储是放了一堆镜像的地方，我们可以把镜像发布到仓储中，需要的时候从仓储中拉下来就可以<br><img src="Docker%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="Docker架构图"></li></ul></li></ol></li><li><p>安装步骤(CentOS7)</p><ul><li><p>参考网址：<a href="https://docs.docker.com/engine/install/centos/" target="_blank" rel="noopener">https://docs.docker.com/engine/install/centos/</a></p></li><li><p>具体步骤：</p><ol><li><p>卸载老版本依赖</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">  docker-client \</span><br><span class="line">  docker-client-latest \</span><br><span class="line">  docker-common \</span><br><span class="line">  docker-latest \</span><br><span class="line">  docker-latest-logrotate \</span><br><span class="line">  docker-logrotate \</span><br><span class="line">  docker-engine</span><br></pre></td></tr></table></figure></li><li><p>设置yum仓库(repository)</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">  --add-repo \</span><br><span class="line">  https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></li><li><p>下载最新版本Docker(ce版本——免费,ee版本——商业收费)</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></li><li><p>启动Docker服务</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置docker服务开机自启动</span></span><br><span class="line">sudo systemctl enable docker</span><br></pre></td></tr></table></figure></li><li><p>卸载Docker：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 关闭docker服务</span></span><br><span class="line">sudo systemctl stop docker</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除docker包和依赖</span></span><br><span class="line">sudo yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除docker lib</span></span><br><span class="line">sudo rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure></li></ol></li><li><p>测试docker：docker version</p></li><li><p>配置docker阿里云镜像加速：控制台 -&gt; 容器镜像服务 -&gt; 镜像加速器 -&gt; 查看操作文档</p></li><li><p>永远的hello world：</p><ul><li>运行：docker run hello-world</li><li>run hello-world的流程：<br><img src="hello-world%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B.png" alt="hello-world运行流程"></li></ul></li></ul></li><li><p>底层原理</p><ul><li>Docker是怎么工作的：Docker是一个CS结构的系统，Docker守护进程运行在主机上，通过Socket连接从客户端访问，守护进程从客户端接受命令并管理运行在主机上的容器。容器是一个运行时环境，就是”🐳背上的集装箱”<br><img src="Docker%E5%B7%A5%E4%BD%9C%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="Docker工作示意图"></li><li>为什么Docker比虚拟机(VM)快：<ol><li>docker有着比虚拟机更少的抽象层。由于docker不需要Hypervisor实现硬件资源虚拟化，运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker会在效率上有明显优势</li><li>docker利用的是宿主机的内核，而不需要Guest OS。因此当新建一个容器时，docker不需要和虚拟机一样重新加载一个操作系统内核。从而避免引寻、加载操作系统内核等比较费时费资源的过程，当新建一个虚拟机时，虚拟机软件需要加载Guest OS，整个新建过程是分钟级别的。而docker由于直接利用宿主机的操作系统、省略了新建过程，新建一个docker容器只需要几秒钟</li></ol></li></ul></li></ul><h2 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h2><ul><li><p>帮助命令：</p><ol><li>docker version</li><li>docker info</li><li>docker –help</li></ol></li><li><p>镜像命令：</p><ol><li>docker images [Options]<ul><li>介绍：列出本地主机上的镜像</li><li>显示参数介绍：<ol><li>REPOSITORY：表示镜像的仓库源</li><li>TAG：镜像的标签</li><li>IMAGE ID：镜像ID</li><li>CREATED：镜像创建时间</li><li>SIZE：镜像大小<br>同一仓库源可以有多个TAG，代表这个仓库源的不同个版本，我们使用REPOSITORY:TAG来定义不同的镜像<br>如果不指定一个镜像的版本标签，docker将默认使用centos:latest镜像(系统为CentOS)</li></ol></li><li>常用Options说明：<ol><li>-a：列出本地所有的镜像(含中间映像层)</li><li>-q：只显示镜像id</li><li>–digests：显示镜像的摘要信息</li><li>–no-trunc：显示完整的镜像信息</li></ol></li></ul></li><li>docker search [Options] 镜像名<ul><li>默认搜索源：<a href="https://hub.docker.com" target="_blank" rel="noopener">https://hub.docker.com</a></li><li>常用Options说明：<ol><li>–no-trunc：显示完整的镜像描述</li><li>-s：列出收藏数不小于指定值的镜像</li><li>–automated：只列出automated build类型的镜像</li></ol></li></ul></li><li>docker pull 镜像名[:标签]：下载指定镜像</li><li>docker rmi：删除镜像<ul><li>删除单个：docker rmi -f 镜像id/镜像名[:标签]</li><li>删除多个：docker rmi -f 镜像名1[:标签] 镜像名2[:标签]</li><li>删除全部：docker rmi -f $(docker images -qa)</li></ul></li></ol></li><li><p>容器命令：</p><ol><li><p>新建并启动容器(有镜像才能创建容器)：docker run [Options] image [Command] [args…]</p><ul><li><p>常用Options说明：</p><ol><li>–name dockerName：为容器指定一个名称</li><li>-d：后台运行容器，并返回容器ID(也即启动守护式容器)</li><li><strong>-i：以交互模式运行容器，通常与-t同时使用</strong></li><li><strong>-t：为容器重新分配一个伪输入终端，通常与-i同时使用</strong></li><li>-P: 随机端口映射</li><li>-p: 指定端口映射，有以下四种格式:<ol><li>ip:hostPort:containerPort</li><li>ip::containerPort</li><li><strong>hostPort:containerPort</strong></li><li>containerPort</li></ol></li></ol></li><li><p>举例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用镜像centos:latest以交互模式启动一个容器,在容器内执行/bin/bash命令</span></span><br><span class="line">docker run -it centos /bin/bash</span><br></pre></td></tr></table></figure></li><li><p>说明：</p><ul><li>操作：docker run -d centos</li><li>现象：然后使用docker ps -a进行查看运行的容器，会发现容器已经退出</li><li>原因：Docker容器后台运行，就必须有一个前台进程。容器运行的命令如果不是那些一直挂起的命令(比如运行top、tail)，就会自动退出。这是docker的机制问题，比如web容器。以nginx为例，正常情况下，我们配置启动服务只需要启动响应service即可，例如service nginx start。但是这样做，nginx以后台进程模式运行，就导致docker前台没有运行的应用。这样的容器后台启动后，会立即自杀。因为它觉得无事可做。因此最佳的解决方案是将你要运行的程序以前台进程的形式运行</li></ul></li></ul></li><li><p>列出当前所有正在运行的容器：docker ps [OPTIONS]<br> 常用Options说明：</p><ol><li>-a：列出当前所有<strong>正在运行、历史上运行过</strong>的容器</li><li>-l：显示最近创建的容器</li><li>-n：显示最近n个创建的容器</li><li><strong>-q：静默模式，只显示容器编号</strong></li><li>–no-trunc：不截断输出</li></ol></li><li><p>退出容器(两种方式)</p><ol><li>容器停止退出：exit</li><li>容器不停止退出：ctrl+P+Q</li></ol></li><li><p>启动容器：docker start 容器id/容器名</p></li><li><p>停止容器：docker stop 容器id/容器名</p></li><li><p>强制停止容器：docker kill 容器id/容器名</p></li><li><p>删除已停止的容器：</p><ol><li>删除单个容器：docker rm 容器id</li><li>一次性删除多个容器(-f——force强制,关闭已启动的)：<ol><li>docker rm -f 容器id1 容器id2 …</li><li>docker rm -f $(docker ps -a -q)</li><li>docker ps -a -q | xargs docker rm</li></ol></li></ol></li><li><p>查看容器日志：docker logs -f -t –tail 条数 容器id<br> 参数说明：</p><ol><li>-t：加入时间戳</li><li>-f：跟随最新的日志打印</li><li>–tail num：显示最后多少条</li></ol></li><li><p>查看容器内运行的进程：docker top 容器id</p></li><li><p>查看容器内部细节(资源、配置)：docker inspect 容器id</p></li><li><p>进入正在运行的容器并以命令行交互：</p><ul><li>两种方式：<ol><li>docker exec -it 容器id /bin/bash</li><li>docker attach 容器id</li></ol></li><li>两种方式区别：<ol><li>attach：直接进入容器启动命令的终端，不会启动新的进程</li><li>exec：是在容器中打开新的终端，并且可以启动新的进程</li></ol></li></ul></li><li><p>从容器内拷贝文件到主机上：docker cp 容器id:容器文件路径 主机文件路径</p></li><li><p>命令一览：<br><img src="Docker%E5%91%BD%E4%BB%A4%E7%AE%80%E5%9B%BE.png" alt="Docker命令简图"></p><table><thead><tr><th>命令</th><th>介绍</th></tr></thead><tbody><tr><td>attach</td><td>Attach to a running container(当前shell下attach连接指定运行镜像)</td></tr><tr><td>build</td><td>Build an image from a Dockerfile(通过Dockerfile定制镜像)</td></tr><tr><td>commit</td><td>Create a new image from a container changes(提交当前容器为新的镜像)</td></tr><tr><td>cp</td><td>Copy files/folders from the containers filesystem to the host path(从容器中拷贝指定文件或者目录到宿主机中)</td></tr><tr><td>create</td><td>Create a new container(创建一个新的容器,同run,但不启动容器)</td></tr><tr><td>diff</td><td>Inspect changes on a container’s filesystem(查看docker容器变化)</td></tr><tr><td>events</td><td>Get real time events from the server(从docker服务获取容器实时事件)</td></tr><tr><td>exec</td><td>Run a command in an existing container(在已存在的容器上运行命令)</td></tr><tr><td>export</td><td>Stream the contents of a container as a tar archive(导出容器的内容流作为一个tar归档文件,对应import)</td></tr><tr><td>history</td><td>Show the history of an image(展示一个镜像形成历史)</td></tr><tr><td>images</td><td>List images(列出系统当前镜像)</td></tr><tr><td>import</td><td>Create a new filesystem image from the contents of a tarball(从tar包中的内容创建一个新的文件系统映像,对应export)</td></tr><tr><td>info</td><td>Display system-wide information(显示系统相关信息)</td></tr><tr><td>inspect</td><td>Return low-level information on a container(查看容器详细信息)</td></tr><tr><td>kill</td><td>Kill a running container(kill指定docker容器)</td></tr><tr><td>load</td><td>Load an image from a tar archive(从一个tar包中加载一个镜像,对应save)</td></tr><tr><td>login</td><td>Register or Login to the docker registry server(注册或者登陆一个 docker源服务器)</td></tr><tr><td>logout</td><td>Log out from a Docker registry server(从当前Docker registry退出)</td></tr><tr><td>logs</td><td>Fetch the logs of a container(输出当前容器日志信息)</td></tr><tr><td>port</td><td>Lookup the public-facing port which is NAT-ed to PRIVATE_PORT(查看映射端口对应的容器内部源端口)</td></tr><tr><td>pause</td><td>Pause all processes within a container(暂停容器)</td></tr><tr><td>ps</td><td>List containers(列出容器列表)</td></tr><tr><td>pull</td><td>Pull an image or a repository from the docker registry server(从docker镜像源服务器拉取指定镜像或者库镜像)</td></tr><tr><td>push</td><td>Push an image or a repository to the docker registry server(推送指定镜像或者库镜像至docker源服务器)</td></tr><tr><td>restart</td><td>Restart a running container(重启运行的容器)</td></tr><tr><td>rm</td><td>Remove one or more containers(移除一个或者多个容器)</td></tr><tr><td>rmi</td><td>Remove one or more images(移除一个或多个镜像——无容器使用该镜像才可删除,否则需删除相关容器才可继续或-f强制删除)</td></tr><tr><td>run</td><td>Run a command in a new container(创建一个新的容器并运行一个命令)</td></tr><tr><td>save</td><td>Save an image to a tar archive(保存一个镜像为一个tar包,对应load)</td></tr><tr><td>search</td><td>Search for an image on the Docker Hub(在docker hub中搜索镜像)</td></tr><tr><td>start</td><td>Start a stopped containers(启动容器)</td></tr><tr><td>stop</td><td>Stop a running containers(停止容器)</td></tr><tr><td>tag</td><td>Tag an image into a repository(给源中镜像打标签)</td></tr><tr><td>top</td><td>Lookup the running processes of a container(查看容器中运行的进程信息)</td></tr><tr><td>unpause</td><td>Unpause a paused container(取消暂停容器)</td></tr><tr><td>version</td><td>Show the docker version information(查看docker版本号)</td></tr><tr><td>wait</td><td>Block until a container stops, then print its exit code(截取容器停止时的退出状态值)</td></tr></tbody></table></li></ol></li></ul><h2 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h2><ul><li>是什么：镜像是一种轻量级、可执行的独立软件包，<strong>用来打包软件运行环境和基于运行环境开发的软件</strong>。它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件<ul><li>UnionFS(联合文件系统,类比花卷)：<ul><li>介绍：Union文件系统(UnionFS)是一种分层、轻量级并且高性能的文件系统。<strong>它支持对文件系统的修改作为一次提交来一层层的叠加</strong>，同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtual filesystem)。Union文件系统是Docker镜像的基础。镜像可以通过分层来进行继承，基于基础镜像(没有父镜像)，可以制作各种具体的应用镜像</li><li>特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统。联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录</li></ul></li><li>Docker镜像加载原理：<ul><li>docker的镜像实际上由一层一层的文件系统(UnionFS)组成</li><li>bootfs(boot file system)主要包含bootloader和kernel，bootloader主要是引导加载kernel。Linux刚启动时会加载bootfs文件系统，<strong>在Docker镜像的最底层是bootfs</strong>。这一层与典型的Linux/Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs</li><li>rootfs(root file system)在bootfs之上。包含典型Linux系统中的/dev、/proc、/bin和/etc等标准目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu，Centos等</li></ul></li><li>为什么Docker中CentOS镜像出奇的小？(平时安装进虚拟机的CentOS都是好几个G,docker里才200M)<br>对于一个精简的OS，rootfs可以很小，只需要包括最基本的命令、工具和程序库就可以了。因为底层直接用Host的kernel，自己只需要提供rootfs就行。由此可见对于不同的linux发行版，bootfs基本是一致的，rootfs会有差别，因此不同的发行版可以公用bootfs</li><li>Docker镜像采用分层结构的理由：最大好处就是共享资源。比如有多个镜像都从相同的base镜像构建而来，那么宿主机只需在磁盘上保存一份base镜像，同时内存中也只需加载一份base镜像，就可以为所有容器服务了。而且镜像的每一层都可以被共享</li></ul></li><li>特点：Docker镜像都是只读的。当容器启动时，一个新的可写层被加载到镜像的顶部。这一层通常被称作”容器层”，”容器层”之下的都叫”镜像层”</li><li>commit命令补充<ul><li>命令介绍：提交容器副本使之成为一个新的镜像</li><li>命令格式：docker commit -m=”提交的描述信息” -a=”作者” 容器id 要创建的目标镜像名:[标签]</li></ul></li></ul><h2 id="Docker容器数据卷"><a href="#Docker容器数据卷" class="headerlink" title="Docker容器数据卷"></a>Docker容器数据卷</h2><ul><li><p>是什么：Docker的理念是将软件与运行的环境打包形成容器运行，运行可以伴随着容器。但对数据的要求希望是持久化的、容器之间希望有可能共享数据。Docker容器产生的数据如果不通过docker commit生成新的镜像使得数据作为镜像的一部分保存下来，那么当容器删除后，数据自然也就没有了。为了能保存数据在docker中我们使用卷。卷类似Redis里面的rdb和aof文件</p></li><li><p>能干嘛：</p><ul><li>容器的持久化</li><li>容器间继承+共享数据</li><li>卷就是目录或文件，存在于一个或多个容器中，由docker挂载到容器，但不属于联合文件系统，因此能够绕过Union File System提供一些用于持续存储或共享数据的特性。卷的设计目的就是数据的持久化，它完全独立于容器的生存周期，Docker不会在容器删除时删除其挂载的数据卷</li><li>特点：<ol><li>数据卷可在容器之间共享或重用数据</li><li>卷中的更改可以直接生效</li><li>数据卷中的更改不会包含在镜像的更新中</li><li>数据卷的生命周期一直持续到没有容器使用它为止</li></ol></li></ul></li><li><p>数据卷添加</p><ol><li><p>直接命令添加：docker run -it -v /主机目录路径:/容器目录路径 镜像名</p><ul><li>查看是否成功：docker inspect 容器id</li><li>容器停止退出后，主机修改后数据依然同步</li><li>设置只读(read only,容器)：docker run -it -v /主机目录路径:/容器目录路径:ro 镜像名</li></ul></li><li><p>Dockerfile添加：</p><ul><li><p>在新建Dockerfile添加volume指令：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 说明: 处于可移植和分享的考虑</span></span><br><span class="line"><span class="comment"># 使用-v 主机目录:容器目录这种方式不能直接在Dockerfile中实现</span></span><br><span class="line"><span class="comment"># 宿主机目录是依赖于特定宿主机的,并不能够保证在所有的宿主机上都存设定的特定目录</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> [<span class="string">"/dataVolumeContainer"</span>]</span></span><br></pre></td></tr></table></figure></li><li><p>完整Dockerfile：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># volume test</span></span><br><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> [<span class="string">"/dataVolumeContainer1"</span>, <span class="string">"/dataVolumeContainer2"</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"Build Docker with Volume succeed~~~"</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> /bin/bash</span></span><br></pre></td></tr></table></figure></li><li><p>完整流程：</p><ol><li>编写上述Dockerfile</li><li>build生成镜像：docker build -f Dockerfile -t sobxiong/centos .</li><li>run运行容器：docker run -it sobxiong/centos /bin/bash</li><li>查看目录是否存在，测试创建文件并写入内容</li><li>查看宿主机对应目录：docker inspect 容器id</li><li>前往对应目录查看内容</li></ol></li></ul></li></ol></li><li><p>数据卷容器</p><ul><li>是什么：命名的容器挂载数据卷，其它容器通过挂载这个(父容器)实现数据共享。挂载数据卷的容器称为数据卷容器</li><li>前提：以sobxiong/centos为模板运行容器test1，它具有/dataVolumeContainer1和/dataVolumeContainer2容器卷</li><li>容器间传递共享：<ol><li>先启动父容器test1，并在dataVolumeContainer2中新增内容</li><li>以继承方式启动test2和test3：docker run -it –name test2 –volumes-from test1 sobxiong/centos</li><li>test2和test3分别在dataVolumeContainer2中新增内容</li><li>test1中可以看到新增的内容</li><li>删除test1后，test2修改的内容test3依旧可读</li><li>删除test2后，test3依旧可读之前内容</li><li>新建test4继承test3再删除test3，之前内容依旧可见</li></ol></li><li>结论：容器之间配置信息的传递，数据卷的生命周期一直持续到没有容器使用它为止</li></ul></li></ul><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><ul><li><p>是什么：用来构建Docker镜像的构建文件，是由一系列命令和参数构成的脚本</p></li><li><p>构建三步骤：</p><ol><li>编写Dockerfile文件</li><li>docker build</li><li>docker run</li></ol></li><li><p>Dockerfile具体实例</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以CentOS镜像为例</span></span><br><span class="line"><span class="comment"># https://github.com/CentOS/sig-cloud-instance-images/blob/12a4f1c0d78e257ce3d33fe89092eee07e6574da/docker/Dockerfile</span></span><br><span class="line"><span class="keyword">FROM</span> scratch</span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> centos-8-x86_64.tar.xz /</span></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> org.label-schema.schema-version=<span class="string">"1.0"</span>     org.label-schema.name=<span class="string">"CentOS Base Image"</span>     org.label-schema.vendor=<span class="string">"CentOS"</span>     org.label-schema.license=<span class="string">"GPLv2"</span>     org.label-schema.build-date=<span class="string">"20200809"</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"/bin/bash"</span>]</span></span><br></pre></td></tr></table></figure></li><li><p>Dockerfile基础知识：</p><ol><li>每条保留字指令都必须为大写字母且后面要跟随至少一个参数</li><li>指令按照从上到下，顺序执行</li><li>‘#’表示注释</li><li>每条指令都会创建一个新的镜像层，并对镜像进行提交</li></ol></li><li><p>执行Dockerfile的大致流程</p><ol><li>docker从基础镜像(scratch)运行一个容器</li><li>执行一条指令并对容器作出修改</li><li>执行类似docker commit的操作提交一个新的镜像层</li><li>docker再基于刚提交的镜像运行一个新容器</li><li>执行Dockerfile中的下一条指令直到所有指令都执行完成</li><li>小总结：<ul><li>从应用软件的角度来看，Dockerfile、Docker镜像与Docker容器分别代表软件的三个不同阶段：<ol><li>Dockerfile是软件的原材料</li><li>Docker镜像是软件的交付品</li><li>Docker容器则可以认为是软件的运行态</li></ol></li><li>Dockerfile面向开发，Docker镜像成为交付标准，Docker容器则涉及部署与运维，三者缺一不可，合力充当Docker体系的基石：<br><img src="Dockerfile%E6%9E%84%E5%BB%BA%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="Dockerfile构建示意图"><ol><li>Dockerfile：定义了进程需要的一切东西。Dockerfile涉及的内容包括执行代码或者是文件、环境变量、依赖包、运行时环境、动态链接库、操作系统的发行版、服务进程和内核进程(当应用进程需要和系统服务、内核进程打交道时,需要考虑如何设计namespace的权限控制)等等</li><li>Docker镜像：在用Dockerfile定义一个文件之后，docker build时会产生一个Docker镜像，当运行Docker镜像时真正开始提供服务</li><li>Docker容器：直接提供服务</li></ol></li></ul></li></ol></li><li><p>Dockerfile体系结构(保留字指令)</p><ol><li><p>FROM：基础镜像，当前新镜像是基于哪个镜像的</p></li><li><p>MAINTAINER：镜像维护者的姓名和邮箱地址</p></li><li><p>RUN：容器构建时需要运行的命令</p></li><li><p>EXPOSE：当前容器对外暴露出的端口</p></li><li><p>WORKDIR：指定在创建容器后，终端默认登陆的进来工作目录，一个落脚点</p></li><li><p>ENV：用来在构建镜像过程中设置环境变量</p> <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 环境变量可以在后续的任何RUN指令中使用,就如同在命令前面指定了环境变量前缀一样</span></span><br><span class="line"><span class="comment"># 也可以在其它指令中直接使用这些环境变量,如：WORKDIR $MY_PATH</span></span><br><span class="line"><span class="keyword">ENV</span> MY_PATH /usr/mytest</span><br></pre></td></tr></table></figure></li><li><p>ADD：将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar压缩包</p></li><li><p>COPY：类似ADD，拷贝文件和目录到镜像中。将从构建上下文目录中源路径的文件/目录复制到新的一层的镜像内的目标路径位置</p><ol><li>COPY src dest</li><li>COPY [“src”, “dest”]</li></ol></li><li><p>VOLUME：容器数据卷，用于数据保存和持久化工作</p></li><li><p>CMD：指定一个容器启动时要运行的命令；Dockerfile中可以有多个CMD指令，但只有最后一个生效，CMD会被docker run之后的参数替换</p></li><li><p>ENTRYPOINT：指定一个容器启动时要运行的命令；ENTRYPOINT的目的和CMD一样，都是在指定容器启动程序及参数(不像CMD,不会被替换,都生效)</p></li><li><p>ONBUILD：当构建一个被继承的Dockerfile时运行命令，父镜像在被子继承后父镜像的onbuild被触发</p></li><li><p>小总结：<br><img src="Dockerfile%E5%B8%B8%E7%94%A8%E4%BF%9D%E7%95%99%E5%AD%97%E6%8C%87%E4%BB%A4.png" alt="Dockerfile常用保留字指令"></p></li></ol></li><li><p>案例：</p><ul><li><p>Base镜像(scratch)：Docker Hub中99%的镜像都是通过在base镜像中安装和配置需要的软件构建出来的</p></li><li><p>自定义镜像mycentos：</p><ul><li><p>编写：</p><ul><li><p>目标：</p><ol><li>基于centos镜像</li><li>登陆后默认路径为/</li><li>安装vim编辑器</li><li>安装net-tools(支持ifconfig)</li></ol></li><li><p>内容：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">MAINTAINER</span> sobxiong</span><br><span class="line"><span class="keyword">ENV</span> MYPATH /usr/local</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$MYPATH</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install vim</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install net-tools</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$MYPATH</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"success--------------ok"</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> /bin/bash</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>构建：docker build -f Dockerfile -t 新镜像名:Tag .</p></li><li><p>运行：docker run -it 新镜像名:Tag</p></li><li><p>列出镜像变更历史：docker history 镜像名</p></li><li><p>CMD/ENTRYPOINT：均指定一个容器启动时要运行的命令</p><ul><li>CMD：Dockerfile中可以有多个CMD 指令，但只有最后一个生效，CMD会被docker run之后的参数替换</li><li>ENTRYPOINT：docker run之后的参数会被当做参数传递给ENTRYPOINT，之后形成新的命令组合</li></ul></li></ul></li><li><p>总结：<br><img src="Dockerfile%E6%9E%84%E5%BB%BA%E8%BF%87%E7%A8%8B%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="Dockerfile构建过程示意图"></p></li></ul><h2 id="Docker安装步骤"><a href="#Docker安装步骤" class="headerlink" title="Docker安装步骤"></a>Docker安装步骤</h2><ol><li>搜索镜像</li><li>拉取镜像</li><li>查看镜像</li><li>启动镜像</li><li>停止容器</li><li>移除容器</li></ol><h2 id="Docker镜像发布"><a href="#Docker镜像发布" class="headerlink" title="Docker镜像发布"></a>Docker镜像发布</h2><ul><li>发布流程(阿里云)<br><img src="%E9%98%BF%E9%87%8C%E4%BA%91ECS%E7%9A%84Docker%E7%94%9F%E6%80%81%E5%9B%BE.png" alt="阿里云ECS的Docker生态图"><ol><li>生成镜像：<ol><li>从Dockerfile构建</li><li>从容器创建一个新镜像：docker commit [Options] 容器id [Repository[:Tag]]</li></ol></li><li>将本地镜像推送到阿里云<ol><li>登陆阿里云</li><li>创建仓库镜像：命名空间、仓库名称</li><li>根据提示推送镜像到registery(此后可查看可下载)</li></ol></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BasicSkill </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flume</title>
      <link href="/2020/10/09/BigData/Flume/"/>
      <url>/2020/10/09/BigData/Flume/</url>
      
        <content type="html"><![CDATA[<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><ul><li><a href="#Flume概述">Flume概述</a></li><li><a href="#Flume入门">Flume入门</a></li><li><a href="#Flume进阶">Flume进阶</a></li><li><a href="#Flume知识点">Flume知识点</a></li></ul><a id="more"></a><h2 id="Flume概述"><a href="#Flume概述" class="headerlink" title="Flume概述"></a>Flume概述</h2><ul><li>Flume基本介绍：Flume是Cloudera提供的一个高可用的、高可靠的、分布式的<strong>海量日志采集、聚合和传输的系统</strong>。Flume基于流式架构，灵活简单<br><img src="Flume%E7%9A%84%E4%BD%9C%E7%94%A8.png" alt="Flume的作用"></li><li>Flume基础架构：<br><img src="Flume%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="Flume基础架构示意图"><ol><li>Agent：<br>Agent是一个JVM进程，以事件的形式将数据从源头送至目的<br>Agent主要有3个部分组成：<strong>Source、Channel、Sink</strong></li><li>Source：<br>Source是负责接收数据到Flume Agent的组件。Source组件可以处理各种类型和格式的日志数据，包括<strong>avro</strong>、thrift、<strong>exec</strong>、jms、<strong>spooling directory</strong>、<strong>netcat</strong>、sequence generator、syslog、http、legacy</li><li>Sink：<br>Sink不断轮询Channel中的事件且批量地移除它们，并将这些事件批量写入到存储或索引系统、或者发送到另一个Flume Agent<br>Sink组件目的地包括<strong>hdfs</strong>、<strong>logger</strong>、<strong>avro</strong>、thrift、ipc、<strong>file</strong>、<strong>HBase</strong>、solr、自定义</li><li>Channel：<br>Channel是位于Source和Sink之间的缓冲区。Channel允许Source和Sink运作在不同的速率上。Channel是线程安全的，可以同时处理几个Source的写入操作和几个Sink的读取操作<br>Flume自带两种Channel：<strong>Memory Channel</strong>和<strong>File Channel</strong><ol><li>Memory Channel是内存中的队列。Memory Channel适用于无需关心数据丢失的情景。如果关心数据丢失，那么Memory Channel就不应该使用。程序死亡、机器宕机或者重启都会导致数据丢失</li><li>File Channel将所有事件写到磁盘。因此在程序关闭或机器宕机的情况下不会丢失数据</li></ol></li><li>Event：<br>Event是Flume数据传输的基本单元，Flume以Event的形式将数据从源头送至目的地。<strong>Event由Header和Body两部分组成</strong>，Header用来存放该event的一些属性，为K-V结构；Body用来存放该条数据，为字节数组</li></ol></li></ul><h2 id="Flume入门"><a href="#Flume入门" class="headerlink" title="Flume入门"></a>Flume入门</h2><ul><li><p>Flume安装部署：</p><ul><li><p>主要资料来源：</p><ol><li>Flume官网地址：<a href="http://flume.apache.org/" target="_blank" rel="noopener">http://flume.apache.org/</a></li><li>文档地址：<a href="http://flume.apache.org/releases/content/1.9.0/FlumeUserGuide.html" target="_blank" rel="noopener">http://flume.apache.org/releases/content/1.9.0/FlumeUserGuide.html</a></li><li>下载地址：<a href="http://flume.apache.org/download.html" target="_blank" rel="noopener">http://flume.apache.org/download.html</a></li></ol></li><li><p>安装部署：</p><ol><li><p>上传并解压：tar zxvf apache-flume-1.9.0-bin.tar.gz -C /opt/module/</p></li><li><p>删除lib文件夹下的guava-11.0.2.jar以兼容Hadoop3.1.3：rm -rf guava-11.0.2.jar</p></li><li><p>设置环境变量(方便使用)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> vim /etc/profile</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># FLUME_HOME</span></span></span><br><span class="line">export FLUME_HOME=/opt/module/flume-1.9.0</span><br><span class="line">export PATH=$PATH:$FLUME_HOME/bin</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 记得source /etc/profile</span></span></span><br></pre></td></tr></table></figure></li></ol></li></ul></li><li><p>Flume入门案例：</p><ol><li><p>监控端口数据：</p><ul><li><p>案例需求：使用Flume监听一个端口，收集该端口数据，并打印到控制台</p></li><li><p>案例分析：<br><img src="%E7%9B%91%E5%90%AC%E6%95%B0%E6%8D%AE%E7%AB%AF%E5%8F%A3%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90%E5%9B%BE.png" alt="监听数据端口案例分析图"></p></li><li><p>实现步骤：</p><ol><li><p>安装netcat工具：sudo yum install -y nc</p></li><li><p>查看44444端口是否被占用：sudo netstat -tunlp | grep 44444</p></li><li><p>创建并编写Agent配置文件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># netcat_memory_logger.conf</span><br><span class="line"># 设置当前agent、sources、channels、sinks的名字a1、s1、c1、s1</span><br><span class="line">a1.sources &#x3D; r1</span><br><span class="line">a1.channels &#x3D; c1</span><br><span class="line">a1.sinks &#x3D; k1</span><br><span class="line"></span><br><span class="line"># source配置</span><br><span class="line">a1.sources.r1.type &#x3D; netcat</span><br><span class="line">a1.sources.r1.bind &#x3D; hadoop101</span><br><span class="line">a1.sources.r1.port &#x3D; 44444</span><br><span class="line"></span><br><span class="line"># channel配置</span><br><span class="line">a1.channels.c1.type &#x3D; memory</span><br><span class="line">a1.channels.c1.capacity &#x3D; 1000</span><br><span class="line"></span><br><span class="line"># sink配置</span><br><span class="line">a1.sinks.k1.type &#x3D; logger</span><br><span class="line"></span><br><span class="line"># 声明source,sink和channel关系</span><br><span class="line">a1.sources.r1.channels &#x3D; c1</span><br><span class="line"># 注意:一个sink只能对应一个channel</span><br><span class="line"># 一个channel可以对应多个sink</span><br><span class="line">a1.sinks.k1.channel &#x3D; c1</span><br></pre></td></tr></table></figure></li><li><p>开启flume agent监听端口：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 写法1</span></span><br><span class="line">flume-ng agent --conf conf/ --name a1 --conf-file agent_conf/netcat_memory_logger.conf -Dflume.root.logger=INFO,console</span><br><span class="line"><span class="meta">#</span><span class="bash"> 写法2</span></span><br><span class="line">flume-ng agent -c conf/ -n a1 -f agent_conf/netcat_memory_logger.conf -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure><p> 参数说明：</p><ol><li>–conf/-c：表示配置文件存储在conf/目录</li><li>–name/-n：表示给agent起名为a1</li><li>–conf-file/-f：flume本次启动读取的配置文件是在agent_conf文件夹下的netcat_memory_logger.conf文件</li><li>-Dflume.root.logger=INFO,console：-D表示flume运行时动态修改flume.root.logger参数属性值，并将控制台日志打印级别设置为INFO级别。日志级别包括:log、info、warn、error</li></ol></li><li><p>使用netcat工具向本机44444端口发送内容：nc localhost 44444(之后键入内容)</p></li><li><p>在flume监听终端观察接受数据情况</p></li></ol></li></ul></li><li><p>实时监控单个追加文件</p><ul><li><p>案例需求：实时监控文件，并上传到HDFS中</p></li><li><p>案例分析：<br><img src="%E5%AE%9E%E6%97%B6%E7%9B%91%E6%8E%A7%E5%8D%95%E4%B8%AA%E8%BF%BD%E5%8A%A0%E6%96%87%E4%BB%B6%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90%E5%9B%BE.png" alt="实时监控单个追加文件案例分析图"></p></li><li><p>实现步骤：</p><ol><li><p>Flume要想将数据输出到HDFS需要依赖Hadoop相关jar包，检查/etc/profile，确认Hadoop和Java环境变量配置正确</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># JAVA_HOME</span></span></span><br><span class="line">export JAVA_HOME=/opt/module/jdk1.8.0_251</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># HADOOP_HOME</span></span></span><br><span class="line">export HADOOP_HOME=/opt/module/hadoop-3.1.3</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/bin</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/sbin</span><br></pre></td></tr></table></figure></li><li><p>创建并编写Agent配置文件：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"># exec_hdfs.conf</span><br><span class="line"># 设置当前agent名,sources、channels、sinks的名字</span><br><span class="line">a1.sources &#x3D; r1</span><br><span class="line">a1.channels &#x3D; c1</span><br><span class="line">a1.sinks &#x3D; k1</span><br><span class="line"></span><br><span class="line"># source配置</span><br><span class="line"># 要想读取Linux系统中的文件就得按照Linux命令的规则执行命令。</span><br><span class="line"># exec即execute——执行。表示执行Linux命令来读取文件</span><br><span class="line">a1.sources.r1.type &#x3D; exec</span><br><span class="line">a1.sources.r1.command &#x3D; tail -F &#x2F;opt&#x2F;data&#x2F;test.log</span><br><span class="line"></span><br><span class="line"># channel配置</span><br><span class="line">a1.channels.c1.type &#x3D; memory</span><br><span class="line">a1.channels.c1.capacity &#x3D; 1000</span><br><span class="line"></span><br><span class="line"># sink配置</span><br><span class="line">a1.sinks.k1.type &#x3D; hdfs</span><br><span class="line">a1.sinks.k1.hdfs.path &#x3D; hdfs:&#x2F;&#x2F;hadoop101:9000&#x2F;flume&#x2F;%Y%m%d&#x2F;%H</span><br><span class="line"># 是否使用本地时间戳</span><br><span class="line">a1.sinks.k1.hdfs.useLocalTimeStamp &#x3D; true</span><br><span class="line"></span><br><span class="line"># 上传文件的前缀</span><br><span class="line">a1.sinks.k1.hdfs.filePrefix &#x3D; logs-</span><br><span class="line"># 是否按照时间滚动文件夹</span><br><span class="line">a1.sinks.k1.hdfs.round &#x3D; true</span><br><span class="line"># 多少单位时间创建一个新文件夹</span><br><span class="line">a1.sinks.k1.hdfs.roundValue &#x3D; 1</span><br><span class="line"># 定义时间单位</span><br><span class="line">a1.sinks.k1.hdfs.roundUnit &#x3D; hour</span><br><span class="line"></span><br><span class="line"># 积攒多少哥Event才flush到HDFS</span><br><span class="line">a1.sinks.k1.hdfs.batchSize &#x3D; 100</span><br><span class="line"># 设置文件类型,可支持压缩</span><br><span class="line">a1.sinks.k1.hdfs.fileType &#x3D; DataStream</span><br><span class="line"></span><br><span class="line"># 多久生成一个新文件</span><br><span class="line">a1.sinks.k1.hdfs.rollInterval &#x3D; 600</span><br><span class="line"># 设置每个文件的滚动大小</span><br><span class="line">a1.sinks.k1.hdfs.rollSize &#x3D; 134217700</span><br><span class="line"># 文件滚动与Event数量无关</span><br><span class="line">a1.sinks.k1.hdfs.rollCount &#x3D; 0</span><br><span class="line"></span><br><span class="line"># 声明source,sink和channel关系</span><br><span class="line">a1.sources.r1.channels &#x3D; c1</span><br><span class="line"># 注意:一个sink只能对应一个channel</span><br><span class="line"># 一个channel可以对应多个sink</span><br><span class="line">a1.sinks.k1.channel &#x3D; c1</span><br></pre></td></tr></table></figure></li><li><p>开启HDFS准备接受文件：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> hadoop101</span></span><br><span class="line">start-dfs.sh</span><br></pre></td></tr></table></figure></li><li><p>开启flume agent监听文件：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flume-ng agent -c conf/ -n a1 -f agent_conf/exec_hdfs.conf</span><br></pre></td></tr></table></figure></li><li><p>在HDFS的web监控界面查看文件</p></li></ol></li></ul></li><li><p>实时监控目录下多个新文件</p><ul><li><p>案例需求：使用Flume监听整个目录的文件，并上传至HDFS</p></li><li><p>案例分析：<br><img src="%E5%AE%9E%E6%97%B6%E7%9B%91%E6%8E%A7%E7%9B%AE%E5%BD%95%E4%B8%8B%E5%A4%9A%E4%B8%AA%E6%96%B0%E6%96%87%E4%BB%B6%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90%E5%9B%BE.png" alt="实时监控目录下多个新文件案例分析图"></p></li><li><p>实现步骤：</p><ol><li><p>创建并编写Agent配置文件：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"># spooldir_hdfs.conf</span><br><span class="line">a1.sources &#x3D; r1</span><br><span class="line">a1.channels &#x3D; c1</span><br><span class="line">a1.sinks &#x3D; k1</span><br><span class="line"></span><br><span class="line"># Spooling Directory Source:用来监听一个目录进行自动收集目录中内容</span><br><span class="line"># 1.当目录中某个log文件内容被读取完毕后,该文件有两种处理方案(取决于deletePolicy配置):</span><br><span class="line">#   1、删除 2、更改扩展名.COMPLETED</span><br><span class="line"># 2.更改扩展名目的就是为了标示该文件已被读取完毕</span><br><span class="line"># 注意:该目录中的文件名不能相同,如果相同会抛异常</span><br><span class="line">a1.sources.r1.type &#x3D; spooldir</span><br><span class="line">a1.sources.r1.spoolDir &#x3D; &#x2F;opt&#x2F;data</span><br><span class="line">a1.sources.r1.fileHeader &#x3D; true</span><br><span class="line"># 忽略所有以.tmp结尾的文件,不上传</span><br><span class="line">a1.sources.r1.ignorePattern &#x3D; ([^ ]*\.tmp)</span><br><span class="line"></span><br><span class="line"># channel配置</span><br><span class="line">a1.channels.c1.type &#x3D; memory</span><br><span class="line">a1.channels.c1.capacity &#x3D; 1000</span><br><span class="line"></span><br><span class="line"># sink配置</span><br><span class="line">a1.sinks.k1.type &#x3D; hdfs</span><br><span class="line">a1.sinks.k1.hdfs.path &#x3D; hdfs:&#x2F;&#x2F;hadoop101:9000&#x2F;flume2&#x2F;%Y%m%d&#x2F;%H</span><br><span class="line">a1.sinks.k1.hdfs.useLocalTimeStamp &#x3D; true</span><br><span class="line"></span><br><span class="line">a1.sinks.k1.hdfs.filePrefix &#x3D; logs-</span><br><span class="line">a1.sinks.k1.hdfs.round &#x3D; true</span><br><span class="line">a1.sinks.k1.hdfs.roundValue &#x3D; 1</span><br><span class="line">a1.sinks.k1.hdfs.roundUnit &#x3D; hour</span><br><span class="line"></span><br><span class="line">a1.sinks.k1.hdfs.batchSize &#x3D; 100</span><br><span class="line">a1.sinks.k1.hdfs.fileType &#x3D; DataStream</span><br><span class="line"></span><br><span class="line">a1.sinks.k1.hdfs.rollInterval &#x3D; 600</span><br><span class="line">a1.sinks.k1.hdfs.rollSize &#x3D; 134217700</span><br><span class="line">a1.sinks.k1.hdfs.rollCount &#x3D; 0</span><br><span class="line"></span><br><span class="line"># 声明source,sink和channel关系</span><br><span class="line">a1.sources.r1.channels &#x3D; c1</span><br><span class="line"># 注意:一个sink只能对应一个channel</span><br><span class="line"># 一个channel可以对应多个sink</span><br><span class="line">a1.sinks.k1.channel &#x3D; c1</span><br></pre></td></tr></table></figure></li><li><p>开启flume agent监听文件夹：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 说明：在使用Spooling Directory Source时,不要在监控目录中创建并持续修改文件;上传完成的文件会以.COMPLETED结尾;被监控文件夹每500毫秒扫描一次文件变动</span></span><br><span class="line">flume-ng agent -c conf/ -n a1 -f agent_conf/spooldir_hdfs.conf</span><br></pre></td></tr></table></figure></li><li><p>向data文件夹添加文件：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo sobxiong &gt;&gt; data/test1.txt</span><br><span class="line">echo testxixi &gt;&gt; data/test2.txt</span><br></pre></td></tr></table></figure></li><li><p>在HDFS的web监控界面查看文件</p></li><li><p>等待1s，查看data目录中文件后缀名变化</p></li></ol></li></ul></li><li><p>实时监控目录下的多个追加文件</p><ul><li><p>监控文件比对：Exec source适用于监控一个实时追加的文件，不能实现断点续传；Spooldir Source适合用于同步新文件，但不适合对实时追加日志的文件进行监听并同步；而Taildir Source适合用于监听多个实时追加的文件，并且能够实现断点续传</p></li><li><p>案例需求：使用Flume监听整个目录的实时追加文件，并上传至HDFS</p></li><li><p>案例分析：<br><img src="%E5%AE%9E%E6%97%B6%E7%9B%91%E6%8E%A7%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E5%A4%9A%E4%B8%AA%E8%BF%BD%E5%8A%A0%E6%96%87%E4%BB%B6%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90%E5%9B%BE.png" alt="实时监控目录下的多个追加文件案例分析图"></p></li><li><p>实现步骤：</p><ol><li><p>创建并编写Agent配置文件：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">a1.sources &#x3D; r1</span><br><span class="line">a1.channels &#x3D; c1</span><br><span class="line">a1.sinks &#x3D; k1</span><br><span class="line"></span><br><span class="line">a1.sources.r1.type &#x3D; TAILDIR</span><br><span class="line"></span><br><span class="line"># Taildir说明：</span><br><span class="line"># Taildir Source维护了一个json格式的position File,其会定期地往positionFile中更新每个文件读取到的最新的位置因此能够实现断点续传</span><br><span class="line"># Position File的格式如下：</span><br><span class="line"># &#123;&quot;inode&quot;:2496272,&quot;pos&quot;:12,&quot;file&quot;:&quot;&#x2F;opt&#x2F;data&#x2F;demo&#x2F;test.txt&quot;&#125;</span><br><span class="line"># 注：Linux中储存文件元数据的区域就叫做inode,每个inode都有一个号码</span><br><span class="line"># 操作系统用inode号码来识别不同的文件,Unix&#x2F;Linux系统内部不使用文件名,而使用inode号码来识别文件</span><br><span class="line"></span><br><span class="line"># 该文件中记录了source读取到的内容的位置</span><br><span class="line">a1.sources.r1.positionFile &#x3D; &#x2F;opt&#x2F;module&#x2F;flume-1.9.0&#x2F;taildir_position.json</span><br><span class="line">a1.sources.r1.filegroups &#x3D; f1</span><br><span class="line">a1.sources.r1.filegroups.f1 &#x3D; &#x2F;opt&#x2F;data&#x2F;demo&#x2F;*.txt</span><br><span class="line"></span><br><span class="line"># channel配置</span><br><span class="line">a1.channels.c1.type &#x3D; memory</span><br><span class="line">a1.channels.c1.capacity &#x3D; 1000</span><br><span class="line"></span><br><span class="line"># sink配置</span><br><span class="line">a1.sinks.k1.type &#x3D; logger</span><br><span class="line"></span><br><span class="line"># 声明source,sink和channel关系</span><br><span class="line">a1.sources.r1.channels &#x3D; c1</span><br><span class="line">a1.sinks.k1.channel &#x3D; c1</span><br></pre></td></tr></table></figure></li><li><p>开启flume agent监听文件夹：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flume-ng agent -c conf/ -n a1 -f agent_conf/taildir_logger.conf</span><br></pre></td></tr></table></figure></li><li><p>向demo文件夹添加文件：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo sobxiong &gt;&gt; test1.txt</span><br><span class="line">echo testxixi &gt;&gt; test2.txt</span><br></pre></td></tr></table></figure></li><li><p>在HDFS的web监控界面查看文件</p></li></ol></li></ul></li></ol></li></ul><h2 id="Flume进阶"><a href="#Flume进阶" class="headerlink" title="Flume进阶"></a>Flume进阶</h2><ul><li><p>Flume事务<br><img src="Flume%E4%BA%8B%E5%8A%A1%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="Flume事务示意图"></p></li><li><p>Flume Agent内部原理<br><img src="Flume_Agent%E5%86%85%E9%83%A8%E5%8E%9F%E7%90%86%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="Flume Agent内部原理示意图"><br>重要组件：</p><ol><li><strong>ChannelSelector</strong><br>ChannelSelector的作用就是选出Event将要被发往哪个Channel。其共有两种类型，分别是<strong>Replicating(复制)</strong>和<strong>Multiplexing(多路复用)</strong><br>ReplicatingSelector会将同一个Event发往所有的Channel；Multiplexing会根据相应的原则，将不同的Event发往不同的Channel</li><li><strong>SinkProcessor</strong><br>SinkProcessor共有三种类型，分别是<strong>DefaultSinkProcessor</strong>、<strong>LoadBalancingSinkProcessor</strong>和<strong>FailoverSinkProcessor</strong><br>DefaultSinkProcessor对应的是单个的Sink，LoadBalancingSinkProcessor和FailoverSinkProcessor对应的是Sink Group。LoadBalancingSinkProcessor可以实现负载均衡的功能；FailoverSinkProcessor可以错误恢复的功能</li></ol></li><li><p>Flume拓扑结构</p><ol><li>简单串联<br><img src="%E7%AE%80%E5%8D%95%E4%B8%B2%E8%81%94%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="简单串联示意图"><br>介绍：该模式将多个flume顺序连接起来，从最初的source开始到最终sink传送的目的存储系统。此模式不建议桥接过多的flume，flume数量过多不仅会影响传输速率，且一旦传输过程中某个节点flume宕机，会影响整个传输系统</li><li>复制和多路复用<br><img src="%E5%A4%8D%E5%88%B6%E5%92%8C%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="复制和多路复用示意图"><br>Flume支持将事件流向一个或者多个目的地。该模式可将相同数据复制到多个channel中，或将不同数据分发到不同的channel中，sink可以选择传送到不同的目的地</li><li>负载均衡和故障转移<br><img src="%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%92%8C%E6%95%85%E9%9A%9C%E8%BD%AC%E7%A7%BB%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="负载均衡和故障转移示意图"><br>Flume支持使用将多个sink逻辑上分到一个sink组，sink组配合不同的SinkProcessor可以实现负载均衡和错误恢复的功能</li><li>聚合<br><img src="%E8%81%9A%E5%90%88%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="聚合示意图"><br>最常见的也非常实用的模式，日常web应用通常分布在上百个服务器，大者甚至上千个、上万个服务器。产生的日志，处理起来也非常麻烦。用flume的这种组合方式能很好的解决这一问题，每台服务器部署一个flume采集日志，传送到一个集中收集日志的flume，再由此flume上传到hdfs、hive、hbase等再进行日志分析等后续操作</li></ol></li><li><p>Flume开发案例</p><ol><li><p>使用Flume提供的时间戳拦截器：</p><ul><li><p>案例需求：使用netcat向监听的Flume的发送信息并设置Flume提供的时间戳拦截器</p></li><li><p>案例配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># agent1(hadoop101) netcat -&gt; memory -&gt; logger</span><br><span class="line">a1.sources &#x3D; r1</span><br><span class="line">a1.channels &#x3D; c1</span><br><span class="line">a1.sinks &#x3D; k1</span><br><span class="line"></span><br><span class="line">a1.sources.r1.type &#x3D; netcat</span><br><span class="line">a1.sources.r1.bind &#x3D; hadoop101</span><br><span class="line">a1.sources.r1.port &#x3D; 44444</span><br><span class="line"></span><br><span class="line"># 设置一个拦截器(用来在headers中添加时间戳)</span><br><span class="line">a1.sources.r1.interceptors &#x3D; i1</span><br><span class="line">a1.sources.r1.interceptors.i1.type &#x3D; timestamp</span><br><span class="line"></span><br><span class="line">a1.channels.c1.type &#x3D; memory</span><br><span class="line">a1.channels.c1.capacity &#x3D; 1000</span><br><span class="line"></span><br><span class="line">a1.sinks.k1.type &#x3D; logger</span><br><span class="line"></span><br><span class="line">a1.sources.r1.channels &#x3D; c1</span><br><span class="line">a1.sinks.k1.channel &#x3D; c1</span><br></pre></td></tr></table></figure></li></ul></li><li><p>串联：</p><ul><li><p>案例需求：通过netcat向hadoop101的flume发送信息，hadoop101的flume将收到的消息通过arvo sink向hadoop102的flume发送，最终由hadoop102打印日志</p></li><li><p>案例配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"># agent1(hadoop101) netcat -&gt; memory -&gt; arvo</span><br><span class="line">a1.sources &#x3D; r1</span><br><span class="line">a1.channels &#x3D; c1</span><br><span class="line">a1.sinks &#x3D; k1</span><br><span class="line"></span><br><span class="line">a1.sources.r1.type &#x3D; netcat</span><br><span class="line">a1.sources.r1.bind &#x3D; hadoop101</span><br><span class="line">a1.sources.r1.port &#x3D; 44444</span><br><span class="line"></span><br><span class="line">a1.channels.c1.type &#x3D; memory</span><br><span class="line">a1.channels.c1.capacity &#x3D; 1000</span><br><span class="line"></span><br><span class="line">a1.sinks.k1.type &#x3D; avro</span><br><span class="line"># hostname是写出到哪台机器</span><br><span class="line">a1.sinks.k1.hostname &#x3D; hadoop102</span><br><span class="line">a1.sinks.k1.port &#x3D; 33333</span><br><span class="line"></span><br><span class="line">a1.sources.r1.channels &#x3D; c1</span><br><span class="line">a1.sinks.k1.channel &#x3D; c1</span><br><span class="line"></span><br><span class="line"># ------------------------------------------</span><br><span class="line"></span><br><span class="line"># agent1(hadoop102) avro -&gt; memory -&gt; logger</span><br><span class="line">a1.sources &#x3D; r1</span><br><span class="line">a1.channels &#x3D; c1</span><br><span class="line">a1.sinks &#x3D; k1</span><br><span class="line"></span><br><span class="line">a1.sources.r1.type &#x3D; avro</span><br><span class="line">a1.sources.r1.bind &#x3D; hadoop102</span><br><span class="line">a1.sources.r1.port &#x3D; 33333</span><br><span class="line"></span><br><span class="line">a1.channels.c1.type &#x3D; memory</span><br><span class="line">a1.channels.c1.capacity &#x3D; 1000</span><br><span class="line"></span><br><span class="line">a1.sinks.k1.type &#x3D; logger</span><br><span class="line"></span><br><span class="line">a1.sources.r1.channels &#x3D; c1</span><br><span class="line">a1.sinks.k1.channel &#x3D; c1</span><br></pre></td></tr></table></figure></li></ul></li><li><p>复制：</p><ul><li><p>案例需求：通过hadoop101监听本地文件的变化，将新增的内容打包成消息通过arvo sink发送给hadoop102和hadoop103，通过复制的方式，如此hadoop102和hadoop103各自都有一份消息副本；hadoop102和hadoop103打印日志显示结果</p></li><li><p>案例配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"># agent1(hadoop101) exec -&gt; memory -&gt; arvo</span><br><span class="line">a1.sources &#x3D; r1</span><br><span class="line">a1.channels &#x3D; c1 c2</span><br><span class="line">a1.sinks &#x3D; k1 k2</span><br><span class="line"></span><br><span class="line">a1.sources.r1.type &#x3D; exec</span><br><span class="line">a1.sources.r1.command &#x3D; tail -F &#x2F;opt&#x2F;data&#x2F;test.log</span><br><span class="line"># 配置channel selector(replicating默认,不配置也成)</span><br><span class="line">a1.sources.r1.selector.type &#x3D; replicating</span><br><span class="line"></span><br><span class="line">a1.channels.c1.type &#x3D; memory</span><br><span class="line">a1.channels.c1.capacity &#x3D; 1000</span><br><span class="line">a1.channels.c2.type &#x3D; memory</span><br><span class="line">a1.channels.c2.capacity &#x3D; 1000</span><br><span class="line"></span><br><span class="line">a1.sinks.k1.type &#x3D; avro</span><br><span class="line">a1.sinks.k1.hostname &#x3D; hadoop102</span><br><span class="line">a1.sinks.k1.port &#x3D; 33333</span><br><span class="line">a1.sinks.k2.type &#x3D; avro</span><br><span class="line">a1.sinks.k2.hostname &#x3D; hadoop103</span><br><span class="line">a1.sinks.k2.port &#x3D; 33333</span><br><span class="line"></span><br><span class="line">a1.sources.r1.channels &#x3D; c1 c2</span><br><span class="line">a1.sinks.k1.channel &#x3D; c1</span><br><span class="line">a1.sinks.k2.channel &#x3D; c2</span><br><span class="line"></span><br><span class="line"># ------------------------------------------</span><br><span class="line"></span><br><span class="line"># agent1(hadoop102) avro -&gt; memory -&gt; logger</span><br><span class="line">a1.sources &#x3D; r1</span><br><span class="line">a1.channels &#x3D; c1</span><br><span class="line">a1.sinks &#x3D; k1</span><br><span class="line"></span><br><span class="line">a1.sources.r1.type &#x3D; avro</span><br><span class="line">a1.sources.r1.bind &#x3D; hadoop102</span><br><span class="line">a1.sources.r1.port &#x3D; 33333</span><br><span class="line"></span><br><span class="line">a1.channels.c1.type &#x3D; memory</span><br><span class="line">a1.channels.c1.capacity &#x3D; 1000</span><br><span class="line"></span><br><span class="line">a1.sinks.k1.type &#x3D; logger</span><br><span class="line"></span><br><span class="line">a1.sources.r1.channels &#x3D; c1</span><br><span class="line">a1.sinks.k1.channel &#x3D; c1</span><br><span class="line"></span><br><span class="line"># ------------------------------------------</span><br><span class="line"></span><br><span class="line"># agent1(hadoop103) avro -&gt; memory -&gt; logger</span><br><span class="line">a1.sources &#x3D; r1</span><br><span class="line">a1.channels &#x3D; c1</span><br><span class="line">a1.sinks &#x3D; k1</span><br><span class="line"></span><br><span class="line">a1.sources.r1.type &#x3D; avro</span><br><span class="line">a1.sources.r1.bind &#x3D; hadoop103</span><br><span class="line">a1.sources.r1.port &#x3D; 33333</span><br><span class="line"></span><br><span class="line">a1.channels.c1.type &#x3D; memory</span><br><span class="line">a1.channels.c1.capacity &#x3D; 1000</span><br><span class="line"></span><br><span class="line">a1.sinks.k1.type &#x3D; logger</span><br><span class="line"></span><br><span class="line">a1.sources.r1.channels &#x3D; c1</span><br><span class="line">a1.sinks.k1.channel &#x3D; c1</span><br></pre></td></tr></table></figure></li></ul></li><li><p>多路复用：</p><ul><li><p>案例需求：通过hadoop101监听本地文件的变化，将新增的内容打包成消息通过arvo sink发送给hadoop102和hadoop103。由于采用多路复用的方式，sink会依据消息event头部header中的key和value对数据进行分类，将各类分到各自对应的channel；如此hadoop102和hadoop103得到消息的不同部分，hadoop102和hadoop103打印日志显示结果</p></li><li><p>案例配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"># agent1(hadoop101) exec -&gt; memory -&gt; arvo</span><br><span class="line">a1.sources &#x3D; r1</span><br><span class="line">a1.channels &#x3D; c1 c2</span><br><span class="line">a1.sinks &#x3D; k1 k2</span><br><span class="line"></span><br><span class="line">a1.sources.r1.type &#x3D; exec</span><br><span class="line">a1.sources.r1.command &#x3D; tail -F &#x2F;opt&#x2F;data&#x2F;test.log</span><br><span class="line"># 设置为复用</span><br><span class="line">a1.sources.r1.selector.type &#x3D; multiplexing</span><br><span class="line"># event(headers, body),根据headers中的key和value进行数据的发送</span><br><span class="line"># header指的是headers中的key值</span><br><span class="line">a1.sources.r1.selector.header &#x3D; state</span><br><span class="line"># mapping.x指的是value对应的值,&#x3D;y指的是分发到y channel</span><br><span class="line">a1.sources.r1.selector.mapping.CZ &#x3D; c1</span><br><span class="line">a1.sources.r1.selector.mapping.US &#x3D; c2</span><br><span class="line"></span><br><span class="line"># 设置拦截器,给event添加headers内容</span><br><span class="line">a1.sources.r1.interceptors &#x3D; i1</span><br><span class="line">a1.sources.r1.interceptors.i1.type &#x3D; static</span><br><span class="line">a1.sources.r1.interceptors.i1.key &#x3D; state</span><br><span class="line">a1.sources.r1.interceptors.i1.value &#x3D; CZ</span><br><span class="line"></span><br><span class="line">a1.channels.c1.type &#x3D; memory</span><br><span class="line">a1.channels.c1.capacity &#x3D; 1000</span><br><span class="line">a1.channels.c2.type &#x3D; memory</span><br><span class="line">a1.channels.c2.capacity &#x3D; 1000</span><br><span class="line"></span><br><span class="line">a1.sinks.k1.type &#x3D; avro</span><br><span class="line">a1.sinks.k1.hostname &#x3D; hadoop102</span><br><span class="line">a1.sinks.k1.port &#x3D; 33333</span><br><span class="line">a1.sinks.k2.type &#x3D; avro</span><br><span class="line">a1.sinks.k2.hostname &#x3D; hadoop103</span><br><span class="line">a1.sinks.k2.port &#x3D; 33333</span><br><span class="line"></span><br><span class="line">a1.sources.r1.channels &#x3D; c1 c2</span><br><span class="line">a1.sinks.k1.channel &#x3D; c1</span><br><span class="line">a1.sinks.k2.channel &#x3D; c2</span><br><span class="line"></span><br><span class="line"># hadoop102和hadoop103同复制案例</span><br></pre></td></tr></table></figure></li></ul></li><li><p>故障转移：</p><ul><li><p>案例需求：通过hadoop101监听本地文件的变化，将新增的内容打包成消息通过arvo sink发送给hadoop102。hadoop103是hadoop102的备份机，设置hadoop102的优先级大于hadoop103，如此在hadoop102正常时消息event都会发送给hadoop102；当hadoop102错误或宕机时，消息event会发送给hadoop103</p></li><li><p>案例配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># agent1(hadoop101) exec -&gt; memory -&gt; arvo</span><br><span class="line">a1.sources &#x3D; r1</span><br><span class="line">a1.channels &#x3D; c1</span><br><span class="line">a1.sinks &#x3D; k1 k2</span><br><span class="line"></span><br><span class="line">a1.sources.r1.type &#x3D; netcat</span><br><span class="line">a1.sources.r1.bind &#x3D; hadoop101</span><br><span class="line">a1.sources.r1.port &#x3D; 33333</span><br><span class="line"></span><br><span class="line">a1.channels.c1.type &#x3D; memory</span><br><span class="line">a1.channels.c1.capacity &#x3D; 1000</span><br><span class="line"></span><br><span class="line">a1.sinks.k1.type &#x3D; avro</span><br><span class="line">a1.sinks.k1.hostname &#x3D; hadoop102</span><br><span class="line">a1.sinks.k1.port &#x3D; 33333</span><br><span class="line">a1.sinks.k2.type &#x3D; avro</span><br><span class="line">a1.sinks.k2.hostname &#x3D; hadoop103</span><br><span class="line">a1.sinks.k2.port &#x3D; 33333</span><br><span class="line"></span><br><span class="line"># 一个channel对应多个sink时要设置一个sinkgroups</span><br><span class="line">a1.sinkgroups &#x3D; g1</span><br><span class="line"># 该sink组有哪些sink实例</span><br><span class="line">a1.sinkgroups.g1.sinks &#x3D; k1 k2</span><br><span class="line"># 配置sinkProcessor类型：failover&#x2F;load_balance</span><br><span class="line">a1.sinkgroups.g1.processor.type &#x3D; failover</span><br><span class="line"># 配置sink优先级(数值越大优先级越高)</span><br><span class="line">a1.sinkgroups.g1.processor.priority.k1 &#x3D; 5</span><br><span class="line">a1.sinkgroups.g1.processor.priority.k2 &#x3D; 10</span><br><span class="line"></span><br><span class="line">a1.sources.r1.channels &#x3D; c1</span><br><span class="line">a1.sinks.k1.channel &#x3D; c1</span><br><span class="line">a1.sinks.k2.channel &#x3D; c1</span><br><span class="line"></span><br><span class="line"># hadoop102和hadoop103同复制案例</span><br></pre></td></tr></table></figure></li></ul></li><li><p>负载均衡：</p><ul><li><p>案例需求：通过hadoop101监听44444端口，并把监听到的字符串打包成消息通过arvo sink发送给hadoop102和hadoop103。由于设置为负载均衡，故hadoop102和hadoop103都会得到消息event的一部分</p></li><li><p>案例配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># agent1(hadoop101) netcat -&gt; memory -&gt; avro</span><br><span class="line">a1.sources &#x3D; r1</span><br><span class="line">a1.channels &#x3D; c1</span><br><span class="line">a1.sinks &#x3D; k1 k2</span><br><span class="line"></span><br><span class="line">a1.sources.r1.type &#x3D; netcat</span><br><span class="line">a1.sources.r1.bind &#x3D; hadoop101</span><br><span class="line">a1.sources.r1.port &#x3D; 33333</span><br><span class="line"></span><br><span class="line">a1.channels.c1.type &#x3D; memory</span><br><span class="line">a1.channels.c1.capacity &#x3D; 1000</span><br><span class="line"></span><br><span class="line">a1.sinks.k1.type &#x3D; avro</span><br><span class="line">a1.sinks.k1.hostname &#x3D; hadoop102</span><br><span class="line">a1.sinks.k1.port &#x3D; 33333</span><br><span class="line">a1.sinks.k2.type &#x3D; avro</span><br><span class="line">a1.sinks.k2.hostname &#x3D; hadoop103</span><br><span class="line">a1.sinks.k2.port &#x3D; 33333</span><br><span class="line"></span><br><span class="line">a1.sinkgroups &#x3D; g1</span><br><span class="line">a1.sinkgroups.g1.sinks &#x3D; k1 k2</span><br><span class="line">a1.sinkgroups.g1.processor.type &#x3D; load_balance</span><br><span class="line">a1.sinkgroups.g1.processor.selector &#x3D; round_robin</span><br><span class="line"></span><br><span class="line">a1.sources.r1.channels &#x3D; c1</span><br><span class="line">a1.sinks.k1.channel &#x3D; c1</span><br><span class="line">a1.sinks.k2.channel &#x3D; c1</span><br><span class="line"># hadoop102和hadoop103同复制案例</span><br></pre></td></tr></table></figure></li></ul></li><li><p>聚合：</p><ul><li><p>案例需求：hadoop101和hadoop102通过netcat各自监听本机的44444端口，并把监听到的字符串打包成event消息都发送给hadoop103；hadoop103显示到日志中</p></li><li><p>案例配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"># agent1(hadoop101) netcat -&gt; memory -&gt; arvo</span><br><span class="line">a1.sources &#x3D; r1</span><br><span class="line">a1.channels &#x3D; c1</span><br><span class="line">a1.sinks &#x3D; k1</span><br><span class="line"></span><br><span class="line">a1.sources.r1.type &#x3D; netcat</span><br><span class="line">a1.sources.r1.bind &#x3D; hadoop101</span><br><span class="line">a1.sources.r1.port &#x3D; 44444</span><br><span class="line"></span><br><span class="line">a1.channels.c1.type &#x3D; memory</span><br><span class="line">a1.channels.c1.capacity &#x3D; 1000</span><br><span class="line"></span><br><span class="line">a1.sinks.k1.type &#x3D; avro</span><br><span class="line"># hostname是写出到哪台机器</span><br><span class="line">a1.sinks.k1.hostname &#x3D; hadoop103</span><br><span class="line">a1.sinks.k1.port &#x3D; 33333</span><br><span class="line"></span><br><span class="line">a1.sources.r1.channels &#x3D; c1</span><br><span class="line">a1.sinks.k1.channel &#x3D; c1</span><br><span class="line"></span><br><span class="line"># agent1(hadoop102) netcat -&gt; memory -&gt; arvo</span><br><span class="line">a1.sources &#x3D; r1</span><br><span class="line">a1.channels &#x3D; c1</span><br><span class="line">a1.sinks &#x3D; k1</span><br><span class="line"></span><br><span class="line">a1.sources.r1.type &#x3D; netcat</span><br><span class="line">a1.sources.r1.bind &#x3D; hadoop102</span><br><span class="line">a1.sources.r1.port &#x3D; 44444</span><br><span class="line"></span><br><span class="line">a1.channels.c1.type &#x3D; memory</span><br><span class="line">a1.channels.c1.capacity &#x3D; 1000</span><br><span class="line"></span><br><span class="line">a1.sinks.k1.type &#x3D; avro</span><br><span class="line"># hostname是写出到哪台机器</span><br><span class="line">a1.sinks.k1.hostname &#x3D; hadoop103</span><br><span class="line">a1.sinks.k1.port &#x3D; 33333</span><br><span class="line"></span><br><span class="line">a1.sources.r1.channels &#x3D; c1</span><br><span class="line">a1.sinks.k1.channel &#x3D; c1</span><br><span class="line"></span><br><span class="line"># agent1(hadoop103) avro -&gt; memory -&gt; logger</span><br><span class="line">a1.sources &#x3D; r1</span><br><span class="line">a1.channels &#x3D; c1</span><br><span class="line">a1.sinks &#x3D; k1</span><br><span class="line"></span><br><span class="line">a1.sources.r1.type &#x3D; avro</span><br><span class="line">a1.sources.r1.bind &#x3D; hadoop103</span><br><span class="line">a1.sources.r1.port &#x3D; 33333</span><br><span class="line"></span><br><span class="line">a1.channels.c1.type &#x3D; memory</span><br><span class="line">a1.channels.c1.capacity &#x3D; 1000</span><br><span class="line"></span><br><span class="line">a1.sinks.k1.type &#x3D; logger</span><br><span class="line"></span><br><span class="line">a1.sources.r1.channels &#x3D; c1</span><br><span class="line">a1.sinks.k1.channel &#x3D; c1</span><br></pre></td></tr></table></figure></li></ul></li></ol></li><li><p>自定义Interceptor：</p><ul><li><p>案例需求：使用hadoop101主机监听本地netcat，根据消息内容的不同(数字和字母开头)发往不同的主机(数字和字母分别发往hadoop102和hadoop103)</p></li><li><p>实现步骤：</p><ol><li><p>Maven项目导入依赖：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flume<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flume-ng-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写自定义拦截器MyInterceptor——继承Flume的Interceptor，重写方法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 自定义拦截器</span></span><br><span class="line"><span class="comment">* 作用：根据body中的内容在headers中添加指定的kv</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 初始化</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 拦截单个消息</span></span><br><span class="line">  <span class="comment">// channelProcessor调用拦截器时会调用该方法并将event传过来为每个event中的header添加kv</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Event <span class="title">intercept</span><span class="params">(Event event)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1、获取body中内容</span></span><br><span class="line">    <span class="keyword">byte</span>[] body = event.getBody();</span><br><span class="line">    <span class="comment">// 2、判断数据中内容</span></span><br><span class="line">    <span class="comment">// 判断内容是否为数字</span></span><br><span class="line">    <span class="keyword">if</span> (body[<span class="number">0</span>] &gt;= <span class="string">'0'</span> &amp;&amp; body[<span class="number">0</span>] &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">      event.getHeaders().put(<span class="string">"type"</span>, <span class="string">"number"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((body[<span class="number">0</span>] &gt;= <span class="string">'A'</span> &amp;&amp; body[<span class="number">0</span>] &lt;= <span class="string">'Z'</span>) || (body[<span class="number">0</span>] &gt;= <span class="string">'a'</span> &amp;&amp; body[<span class="number">0</span>] &lt;= <span class="string">'z'</span>)) &#123;</span><br><span class="line">      event.getHeaders().put(<span class="string">"type"</span>, <span class="string">"letter"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> event;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 拦截多个消息(batch)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;Event&gt; <span class="title">intercept</span><span class="params">(List&lt;Event&gt; list)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 从集合中遍历每个event</span></span><br><span class="line">    <span class="keyword">for</span> (Event event : list) &#123;</span><br><span class="line">      intercept(event);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 内部类(静态内部类)</span></span><br><span class="line"><span class="comment">  * 作用：返回MyInterceptor的实例</span></span><br><span class="line"><span class="comment">  * 注意：1、静态内部类 2、权限是public</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBuilder</span> <span class="keyword">implements</span> <span class="title">Interceptor</span>.<span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 返回一个interceptor接口实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Interceptor <span class="title">build</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> MyInterceptor(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(Context context)</span> </span>&#123; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将Maven工程打包分发到服务器集群中flume的lib目录下</p></li><li><p>编写配置文件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">a1.sources &#x3D; r1</span><br><span class="line">a1.channels &#x3D; c1 c2</span><br><span class="line">a1.sinks &#x3D; k1 k2</span><br><span class="line"></span><br><span class="line">a1.sources.r1.type &#x3D; netcat</span><br><span class="line">a1.sources.r1.bind &#x3D; hadoop101</span><br><span class="line">a1.sources.r1.port &#x3D; 44444</span><br><span class="line"></span><br><span class="line">a1.sources.r1.selector.type &#x3D; multiplexing</span><br><span class="line">a1.sources.r1.selector.header &#x3D; type</span><br><span class="line">a1.sources.r1.selector.mapping.letter &#x3D; c1</span><br><span class="line">a1.sources.r1.selector.mapping.number &#x3D; c2</span><br><span class="line"></span><br><span class="line">a1.sources.r1.interceptors &#x3D; i1</span><br><span class="line">a1.sources.r1.interceptors.i1.type &#x3D; com.xiong.flume.MyInterceptor$MyBuilder</span><br><span class="line"></span><br><span class="line">a1.channels.c1.type &#x3D; memory</span><br><span class="line">a1.channels.c1.capacity &#x3D; 1000</span><br><span class="line">a1.channels.c2.type &#x3D; memory</span><br><span class="line">a1.channels.c2.capacity &#x3D; 1000</span><br><span class="line"></span><br><span class="line">a1.sinks.k1.type &#x3D; avro</span><br><span class="line">a1.sinks.k1.hostname &#x3D; hadoop102</span><br><span class="line">a1.sinks.k1.port &#x3D; 33333</span><br><span class="line">a1.sinks.k2.type &#x3D; avro</span><br><span class="line">a1.sinks.k2.hostname &#x3D; hadoop103</span><br><span class="line">a1.sinks.k2.port &#x3D; 33333</span><br><span class="line"></span><br><span class="line">a1.sources.r1.channels &#x3D; c1 c2</span><br><span class="line">a1.sinks.k1.channel &#x3D; c1</span><br><span class="line">a1.sinks.k2.channel &#x3D; c2</span><br><span class="line"></span><br><span class="line"># hadoop102和hadoop103同复制案例</span><br></pre></td></tr></table></figure></li><li><p>前后在hadoop102、103和101上启动Flume进程，进行测试</p></li></ol></li></ul></li><li><p>自定义Source：</p><ul><li><p>案例需求：Source是负责接受数据到Flume Agent的组件。通过自定义Source发送随机数据(实际使用场景：读取MySQL数据或其他文件系统)</p></li><li><p>实现步骤：</p><ol><li><p>Maven项目导入依赖：</p></li><li><p>编写自定义数据源MySource——继承Flume的AbstractSource类，实现Configurable和PollableSource接口</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 自定义source</span></span><br><span class="line"><span class="comment">* 需求：使用flume接受数据,并给每条数据添加前缀,输出到控制台。前缀可从flume配置文件中配置</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySource</span> <span class="keyword">extends</span> <span class="title">AbstractSource</span> <span class="keyword">implements</span> <span class="title">Configurable</span>, <span class="title">PollableSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String prefix;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 核心方法 - 获取数据并封装成event,将创建的event放入到channel中</span></span><br><span class="line"><span class="comment">  * 该方法会被循环调用</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> Status —— 一个枚举类,表示向ChannelProcessor中添加数据是否成功</span></span><br><span class="line"><span class="comment">  * READY：成功; BACKOFF：失败</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@throws</span> EventDeliveryException</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Status <span class="title">process</span><span class="params">()</span> <span class="keyword">throws</span> EventDeliveryException </span>&#123;</span><br><span class="line">      List&lt;Event&gt; events = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 设置数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">      <span class="comment">// 创建event</span></span><br><span class="line">      SimpleEvent event = <span class="keyword">new</span> SimpleEvent();</span><br><span class="line">      event.setBody((prefix + UUID.randomUUID().toString().substring(<span class="number">0</span>, <span class="number">8</span>)).getBytes());</span><br><span class="line">      events.add(event);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 获取channelProcessor</span></span><br><span class="line">      ChannelProcessor channelProcessor = getChannelProcessor();</span><br><span class="line">      <span class="comment">// 将数据放入到channel中(ChannelProcessor)</span></span><br><span class="line">      <span class="comment">// channelProcessor.processEvent(event);</span></span><br><span class="line">      channelProcessor.processEventBatch(events);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> Status.BACKOFF;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Status.READY;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当source没数据可封装时,让source所在线程休息</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getBackOffSleepIncrement</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">2000L</span>; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当source没数据可封装时,让source所在线程休息的最大时间</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getMaxBackOffSleepInterval</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">5000L</span>; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取上下文,可以读取配置文件中内容</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    prefix = context.getString(<span class="string">"prefix"</span>, <span class="string">"sobxiong"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将Maven工程打包分发到服务器集群中flume的lib目录下</p></li><li><p>编写配置文件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a1.sources &#x3D; r1</span><br><span class="line">a1.channels &#x3D; c1</span><br><span class="line">a1.sinks &#x3D; k1</span><br><span class="line"></span><br><span class="line"># 自定义source</span><br><span class="line">a1.sources.r1.type &#x3D; com.xiong.flume.MySource</span><br><span class="line">a1.sources.r1.prefix &#x3D; sobxiong</span><br><span class="line"></span><br><span class="line">a1.channels.c1.type &#x3D; memory</span><br><span class="line">a1.channels.c1.capacity &#x3D; 1000</span><br><span class="line"></span><br><span class="line">a1.sinks.k1.type &#x3D; logger</span><br><span class="line"></span><br><span class="line">a1.sources.r1.channels &#x3D; c1</span><br><span class="line">a1.sinks.k1.channel &#x3D; c1</span><br></pre></td></tr></table></figure></li><li><p>启动Flume进程，进行测试</p></li></ol></li></ul></li><li><p>自定义Sink</p><ul><li><p>案例需求：<br>Sink不断地轮询Channel中的事件且批量地移除它们，并将这些事件批量写入到存储、索引系统或者发送到另一个Flume Agent<br>Sink是完全事务性的。在Channel批量删除数据之前，每个Sink用Channel启动一个事务。批量事件一旦成功写出到存储系统或下一个Flume Agent，Sink就利用Channel提交事务。事务一旦被提交，该Channel从自己的内部缓冲区删除事件<br>本案例中只简单地将channel传来的数据进行打印(实际使用场景：读取Channel数据写入MySQL或其他文件系统)</p></li><li><p>实现步骤：</p><ol><li><p>Maven项目导入依赖：</p></li><li><p>编写自定义MySink——继承Flume的AbstractSink类，实现Configurable接口</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySink</span> <span class="keyword">extends</span> <span class="title">AbstractSink</span> <span class="keyword">implements</span> <span class="title">Configurable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String suffix;</span><br><span class="line">  <span class="comment">// 以日志方式输出</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(MySink<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 核心方法,用来处理sink逻辑(将channel中内容写出)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Status <span class="title">process</span><span class="params">()</span> <span class="keyword">throws</span> EventDeliveryException </span>&#123;</span><br><span class="line">    Status status = Status.BACKOFF;</span><br><span class="line">    <span class="comment">// 1、获取Channel</span></span><br><span class="line">    Channel channel = getChannel();</span><br><span class="line">    <span class="comment">// 2、从Channel中获取事务</span></span><br><span class="line">    Transaction transaction = channel.getTransaction();</span><br><span class="line">    <span class="comment">// 开启事务</span></span><br><span class="line">    transaction.begin();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 3、获取数据</span></span><br><span class="line">      Event event = channel.take();</span><br><span class="line">      <span class="comment">// 没有消息就阻塞等待</span></span><br><span class="line">      <span class="keyword">while</span> (event == <span class="keyword">null</span>) &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        event = channel.take();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 4、将数据写出</span></span><br><span class="line">      logger.info(<span class="string">"headers: &#123;&#125; , body: &#123;&#125;"</span>, event.getHeaders(), <span class="keyword">new</span> String(event.getBody()) + suffix);</span><br><span class="line">      <span class="comment">// 5、提交事务</span></span><br><span class="line">      transaction.commit();</span><br><span class="line">      status = Status.READY;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="comment">// 事务回滚</span></span><br><span class="line">      transaction.rollback();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      transaction.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> status;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 读取配置文件中内容</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    suffix = context.getString(<span class="string">"suffix"</span>, <span class="string">" &gt; &gt; &gt; hello"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将Maven工程打包分发到服务器集群中flume的lib目录下</p></li><li><p>编写配置文件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">a1.sources &#x3D; r1</span><br><span class="line">a1.channels &#x3D; c1</span><br><span class="line">a1.sinks &#x3D; k1</span><br><span class="line"></span><br><span class="line"># 自定义source</span><br><span class="line">a1.sources.r1.type &#x3D; netcat</span><br><span class="line">a1.sources.r1.bind &#x3D; hadoop101</span><br><span class="line">a1.sources.r1.port &#x3D; 44444</span><br><span class="line"></span><br><span class="line">a1.channels.c1.type &#x3D; memory</span><br><span class="line">a1.channels.c1.capacity &#x3D; 1000</span><br><span class="line"></span><br><span class="line">a1.sinks.k1.type &#x3D; com.xiong.flume.MySink</span><br><span class="line">a1.sinks.k1.subffix &#x3D; &gt; &gt; &gt; test</span><br><span class="line"></span><br><span class="line">a1.sources.r1.channels &#x3D; c1</span><br><span class="line">a1.sinks.k1.channel &#x3D; c1</span><br></pre></td></tr></table></figure></li><li><p>启动Flume进程，进行测试</p></li></ol></li></ul></li></ul><h2 id="Flume知识点"><a href="#Flume知识点" class="headerlink" title="Flume知识点"></a>Flume知识点</h2><ol><li>如何实现Flume数据传输的监控：使用第三方框架Ganglia</li><li>Flume的Source，Sink，Channel的作用？<br>Source组件是专门用来收集数据的，可以处理各种类型、各种格式的日志数据，包括avro、thrift、exec、jms、spooling directory、netcat、sequence generator、syslog、http、legacy<br>Channel组件对采集到的数据进行缓存，可以存放在Memory或File中<br>Sink组件是用于把数据发送到目的地的组件，目的地包括Hdfs、Logger、avro、thrift、ipc、file、Hbase、solr、自定义</li><li>Flume参数调优<ol><li>Source<br>增加Source个数(使用Tair Dir Source时可增加FileGroups个数)可以增大Source的读取数据的能力。例如：当某一个目录产生的文件过多时需要将这个文件目录拆分成多个文件目录，同时配置好多个Source以保证Source有足够的能力获取到新产生的数据<br>batchSize参数决定Source一次批量运输到Channel的event条数，适当调大这个参数可以提高Source搬运Event到Channel时的性能</li><li>Channel<br>type选择memory时Channel的性能最好，但是如果Flume进程意外挂掉可能会丢失数据。type选择file时Channel的容错性更好，但是性能上会比memory channel差<br>使用file Channel时dataDirs配置多个不同盘下的目录可以提高性能<br>Capacity参数决定Channel可容纳最大的event条数。transactionCapacity参数决定每次Source往channel里面写的最大event条数和每次Sink从channel里面读的最大event条数<strong>transactionCapacity需要大于Source和Sink的batchSize参数</strong></li><li>Sink<br>增加Sink的个数可以增加Sink消费event的能力。Sink也不是越多越好，够用就行，过多的Sink会占用系统资源，造成系统资源的浪费<br>batchSize参数决定Sink一次批量从Channel读取的event条数，适当调大这个参数可以提高Sink从Channel搬出event的性能</li></ol></li><li>Flume的事务机制<br>Flume的事务机制(类似数据库的事务机制)：Flume使用两个独立的事务分别负责从Source到Channel以及从Channel到Sink的事件传递。比如spooling directory source为文件的每一行创建一个事件，一旦事务中所有的事件全部传递到Channel且提交成功，那么Source就将该文件标记为完成。同理，事务以类似的方式处理从Channel到Sink的传递过程，如果因为某种原因使得事件无法记录，那么事务将会回滚。且所有的事件都会保持到Channel中，等待重新传递</li><li>Flume采集数据会丢失吗?<br>根据Flume的架构原理，Flume是不可能丢失数据的，其内部有完善的事务机制。Source到Channel是事务性的，Channel到Sink是事务性的，因此这两个环节不会出现数据的丢失。唯一可能丢失数据的情况是Channel采用memory channel，agent宕机导致数据丢失；或者Channel存储数据已满，导致Source不再写入，未写入的数据丢失<br><strong>Flume不会丢失数据，但是有可能造成数据的重复。例如数据已经成功由Sink发出，但是没有接收到响应，Sink会再次发送数据，此时可能会导致数据的重复</strong></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BigData </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/2020/10/09/BasicSkill/Linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/10/09/BasicSkill/Linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><ul><li><a href="#top命令">top命令</a></li><li><a href="#free命令">free命令</a></li><li><a href="#df命令">df命令</a></li><li><a href="#vmstat命令">vmstat命令</a></li><li><a href="#iostat命令">iostat命令</a></li></ul><a id="more"></a><h2 id="top命令"><a href="#top命令" class="headerlink" title="top命令"></a>top命令</h2><ul><li>查看整机性能：top(主要cpu)<ul><li>按数字1查看cpu各核心情况：<ol><li>us user</li><li>sy system</li><li>id idle(空闲率,越高越好)</li></ol></li><li>load average：a b c(系统1、5、15分钟的系统平均负载量,如果abc平均大于0.6说明系统负担重,大于0.8说明系统快宕机)</li><li>q退出</li></ul></li><li>低配版：uptime</li></ul><h2 id="free命令"><a href="#free命令" class="headerlink" title="free命令"></a>free命令</h2><ul><li>查看内存：free(默认kb)</li><li>free -m(MB)、free -g(GB)</li></ul><h2 id="df命令"><a href="#df命令" class="headerlink" title="df命令"></a>df命令</h2><ul><li>查看磁盘：df(disk free,默认kb)</li><li>df -h(以MB为单位)</li></ul><h2 id="vmstat命令"><a href="#vmstat命令" class="headerlink" title="vmstat命令"></a>vmstat命令</h2><ul><li>查看简单的系统性能：vmstat -n 2 3(2代表每两秒采集一次,3代表共采集三次)</li><li>重要参数：<ol><li>r：runtime process(运行进程数)</li><li>b：blocking process(阻塞进程数,越少越好)</li></ol></li></ul><h2 id="iostat命令"><a href="#iostat命令" class="headerlink" title="iostat命令"></a>iostat命令</h2><ul><li>查看磁盘IO情况：iostat -xdk 2 3(2,3同上)</li><li>重要参数：<ol><li>r/s：每秒读</li><li>w/s：每秒写</li><li>%util：一秒中有百分之多少的时间用于I/O操作，或者说一秒中有多少时间I/O队列是非空的</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BasicSkill </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础知识</title>
      <link href="/2020/10/08/ProgrammingLanguage/Java/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2020/10/08/ProgrammingLanguage/Java/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><ul><li><a href="#基础语法">基础语法</a></li><li><a href="#进阶语法">进阶语法</a></li></ul><a id="more"></a><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h2 id="进阶语法"><a href="#进阶语法" class="headerlink" title="进阶语法"></a>进阶语法</h2><ul><li><p>自动资源管理：Java7增加了一个新特性：该特性提供了另外一种管理资源的方式，这种方式能自动关闭文<br>件(或资源)。这个特性有时被称为自动资源管理(Automatic Resource Management,ARM)，该特性以try语句的扩展版为基础。当不再需要文件(或其他资源)时，可以防止无意中忘记释放它们</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">自动资源管理基于try语句的扩展形式：</span></span><br><span class="line"><span class="comment">当try代码块结束,自动释放资源。不需要显式调用close()方法。该形式也称为"带资源的try语句"</span></span><br><span class="line"><span class="comment">注意:</span></span><br><span class="line"><span class="comment">1、try语句中声明的资源被隐式声明为final,资源的作用局限于带资源的try语句</span></span><br><span class="line"><span class="comment">2、可以在一条try语句中管理多个资源,每个资源以';'隔开即可</span></span><br><span class="line"><span class="comment">3、需要关闭的资源必须实现AutoCloseable接口或其子接口Closeable</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">try</span>(需要关闭的资源声明)&#123;</span><br><span class="line">  <span class="comment">// 可能发生异常的语句</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(异常类型变量名) &#123;</span><br><span class="line">  <span class="comment">// 异常的处理语句</span></span><br><span class="line"><span class="keyword">finally</span>&#123;</span><br><span class="line">  <span class="comment">// 一定执行的语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NIO</title>
      <link href="/2020/10/05/ProgrammingLanguage/Java/NIO/"/>
      <url>/2020/10/05/ProgrammingLanguage/Java/NIO/</url>
      
        <content type="html"><![CDATA[<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><ul><li><a href="#NIO简介">NIO简介</a></li><li><a href="#缓冲区(Buffer)">缓冲区(Buffer)</a></li><li><a href="#通道(Channel)">通道(Channel)</a></li><li><a href="#选择器(Selector)">选择器(Selector)</a></li><li><a href="#其他">其他</a></li></ul><a id="more"></a><h2 id="NIO简介"><a href="#NIO简介" class="headerlink" title="NIO简介"></a>NIO简介</h2><ul><li><p>NIO简介：Java NIO(New I0)是从Java 1.4版本开始引入的一个新的I0 API，可以替代标准的Java I0 API。NIO与原来的I0有同样的作用和目的，但是使用的方式完全不同，NIO支持面向缓冲区的、基于通道的I0操作。NIO将以更加高效的方式进行文件的读写操作</p></li><li><p>NIO系统的核心：通道(Channel)和缓冲区(Buffer)。通道表示打开到I0设备(例如：文件、套接字)的连接。若需要使用NIO系统，需要获取用于连接I0设备的通道以及用于容纳数据的缓冲区。然后操作缓冲区，对数据进行处理。<strong>简言之，Channel负责传输，Buffer负责存储</strong></p></li><li><p>NIO与IO的主要区别：</p><table><thead><tr><th>IO</th><th>NIO</th></tr></thead><tbody><tr><td>面向流(Stream Oriented)</td><td>面向缓冲区(Buffer Oriented)</td></tr><tr><td>阻塞IO(Blocking IO)</td><td>非阻塞IO(Non Blocking IO)</td></tr><tr><td>(无)</td><td>选择器(Selectors)</td></tr></tbody></table></li><li><p>阻塞和非阻塞介绍：</p><ol><li>阻塞：传统的I0流都是阻塞式的。也就是说，当一个线程调用read()或write()时，该线程被阻塞，直到有一些数据被读取或写入，该线程在此期间不能执行其他任务。因此，在完成网络通信进行I0操作时，由于线程会阻塞，所以服务器端必须为每个客户端都提供一个独立的线程进行处理，当服务器端需要处理大量客户端时，性能急剧下降</li><li>非阻塞：NIO是非阻塞模式的。当线程从某通道进行读写数据时，若没有数据可用时，该线程可以进行其他任务。线程通常将非阻塞I0的空闲时间用于在其他通道上执行I0操作，所以单独的线程可以管理多个输入和输出通道。因此，NIO可以让服务器端使用一个或有限几个线程来同时处理连接到服务器端的所有客户端</li></ol></li><li><p>NIO主要有三大核心组件：通道(Channel)、缓冲区(Buffer)以及选择器(Selector)</p></li></ul><h2 id="缓冲区-Buffer"><a href="#缓冲区-Buffer" class="headerlink" title="缓冲区(Buffer)"></a>缓冲区(Buffer)</h2><ul><li><p>介绍：</p><ul><li><p>一个用于特定基本数据类型的容器的，在java.nio包中定义，所有缓冲区都是Buffer抽象类的子类。NIO中的Buffer主要用于与NIO通道进行交互，数据是从通道读入缓冲区，从缓冲区写入通道中的</p></li><li><p>Buffer就像一个数组，可以保存多个相同类型的数据。根据数据类型不同(boolean除外)，有以下Buffer常用子类：ByteBuffer、CharBuffer、ShortBuffer、IntBuffer、LongBuffer、FloatBuffer以及DoubleBuffer。上述Buffer类它们都采用相似的方法进行管理数据，只是各自管理的数据类型不同而已。都是通过如下方法获取一个Bufferd对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个容量为capacity的XxxBuffer对象</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> XxxBuffer <span class="title">allocate</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>基本属性(标记、位置、限制、容量遵守以下不变式：0 &lt;= mark &lt;= position &lt;= limit &lt;= capacity)：</p><ol><li><strong>容量(capacity)</strong>：表示Buffer最大数据容量，capacity不能为负，并且创建后不能更改</li><li><strong>限制(limit)</strong>：第一个不应该读取或写入的数据的索引，即位于limit后的数据不可读写。limit不能为负，并且不能大于其容量capacity</li><li><strong>位置(position)</strong>：下一个要读取或写入的数据的索引。position不能为负，并且不能大于其限制limit</li><li>标记(mark)与重置(reset)：标记是一个索引，通过Buffer中的mark()方法指定Buffer中一个特定的position，之后可以通过调用reset()方法恢复到这个position<br><img src="%E7%BC%93%E5%86%B2%E5%8C%BA%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="缓冲区基本操作示意图"></li></ol></li><li><p>常用方法</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><strong>Buffer clear()</strong></td><td><strong>清空缓冲区并返回对缓冲区的引用</strong></td></tr><tr><td><strong>Buffer flip()</strong></td><td><strong>将缓冲区的界限设置为当前位置,并将当前位置重置为0</strong></td></tr><tr><td>int capacity()</td><td>返回Buffer的capacity大小</td></tr><tr><td>boolean hasRemaining()</td><td>判断缓冲区中是否还有元素</td></tr><tr><td>int limit()</td><td>返回Buffer的界限(limit)的位置</td></tr><tr><td>Buffer limit(int n)</td><td>将设置缓冲区界限为n,并返回一个具有新limit的缓冲区对象</td></tr><tr><td>Buffer mark()</td><td>对缓冲区设置标记</td></tr><tr><td>int position()</td><td>返回缓冲区的当前位置position</td></tr><tr><td>Buffer position(int n)</td><td>将设置缓冲区的当前位置为n,并返回修改后的Buffer对象</td></tr><tr><td>int remaining()</td><td>返回position和limit之间的元素个数</td></tr><tr><td>Buffer reset()</td><td>将位置position转到以前设置的mark所在的位置</td></tr><tr><td>Buffer rewind()</td><td>将位置设为为0,取消设置的mark</td></tr></tbody></table></li><li><p>数据操作：Buffer所有子类提供了两个用于数据操作的方法——get()与put()方法</p><ul><li>获取Buffer中的数据<ol><li>get()：读取单个字节</li><li>get(byte[] dst)：批量读取多个字节到dst中</li><li>get(int index)：读取指定索引位置的字节(不会移动position)</li></ol></li><li>放入数据到Buffer中<ol><li>put(byte b)：将给定单个字节写入缓冲区的当前位置</li><li>put(byte[]src)：将src中的字节写入缓冲区的当前位置</li><li>put(int index, byte b)：将指定字节写入缓冲区的索引位置(不会移动position)</li></ol></li></ul></li><li><p>直接与非直接缓冲区</p><ul><li>字节缓冲区要么是直接的，要么是非直接的。如果为直接字节缓冲区，则Java虚拟机会尽最大努力直接在此缓冲区上执行本机I/0操作。也就是说，在每次调用基础操作系统的一个本机I/0操作之前(或之后)，虚拟机都会尽量避免将缓冲区的内容复制到中间缓冲区中(或从中间缓冲区中复制内容)</li><li>直接字节缓冲区可以通过调用此类的<strong>allocateDirect()</strong>工厂方法来创建。<strong>此方法返回的缓冲区进行分配和取消分配所需成本通常高于非直接缓冲区</strong>。直接缓冲区的内容可以驻留在常规的垃圾回收堆之外，因此，它们对应用程序的内存需求量造成的影响可能并不明显。所以，建议将直接缓冲区主要分配给那些易受基础系统的本机I/0操作影响的大型、持久的缓冲区。-般情况下，最好仅在直接缓冲区能在程序性能方面带来明显好处时分配它们</li><li>直接字节缓冲区还可以通过<strong>FileChannel的map()方法</strong>将文件区域直接映射到内存中来创建。该方法返回<strong>MappedByteBuffer</strong>。Java平台的实现有助于通过JNI从本机代码创建直接字节缓冲区。如果以上这些缓冲区中的某个缓冲区实例指的是不可访问的内存区域，则试图访问该区域不会更改该缓冲区的内容，并且将会在访问期间或稍后的某个时间导致抛出不确定的异常</li><li>字节缓冲区是直接缓冲区还是非直接缓冲区可通过调用其<strong>isDirect()</strong>方法来确定。提供此方法是为了能够在性能关键型代码中执行显式缓冲区管理<br><img src="%E9%9D%9E%E7%9B%B4%E6%8E%A5%E7%BC%93%E5%86%B2%E5%8C%BA.png" alt="非直接缓冲区示意图"><br><img src="%E7%9B%B4%E6%8E%A5%E7%BC%93%E5%86%B2%E5%8C%BA.png" alt="直接缓冲区示意图"></li></ul></li></ul><h2 id="通道-Channel"><a href="#通道-Channel" class="headerlink" title="通道(Channel)"></a>通道(Channel)</h2><ul><li><p>介绍：由java.nio.channels包定义。Channel表示I0源与目标打开的连接。Channel类似于传统的”流”。只不过Channel本身不能直接访问数据，Channel只能与Buffer进行交互</p></li><li><p>主要实现类</p><ol><li>FileChannel：用于读取、写入、映射和操作文件的通道</li><li>DatagramChannel：通过UDP读写网络中的数据通道</li><li>SocketChannel：通过TCP读写网络中的数据</li><li>ServerSocketChannel：可以监听新进来的TCP连接，对每一个新进来的连接都会创建一个Socke tChannel</li></ol></li><li><p>获取通道：</p><ol><li>对支持通道的对象调用getChannel()方法。支持通道的类包括FileInputStream、FileOutputStream、RandomAccessFile、DatagramSocket、Socket、ServerSocket</li><li>使用Files类的静态方法newByteChannel()获取字节通道、或者通过通道的静态方法open()打开并返回指定通道</li></ol></li><li><p>数据传输：</p><ol><li><p>将Buffer数据写入Channel：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> writeLen = channel.write(buffer);</span><br></pre></td></tr></table></figure></li><li><p>从Channel读取数据到Buffer</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> readLen = channel.read(buffer);</span><br></pre></td></tr></table></figure></li></ol></li><li><p>分散与聚集</p><ul><li>分散读取(Scattering Reads)：从Channel中读取的数据”分散”到多个Buffer中<br><strong>注意：按照缓冲区的顺序,从Channel中读取的数据依次将Buffer填满</strong></li><li>聚集写入(Gathering Writes)：将多个Buffer中的数据”聚集”到Channel<br><strong>注意：按照缓冲区的顺序,写入position和limit之间的数据到Channel</strong></li></ul></li><li><p>数据通道相互传输：将数据从源通道传输到其他Channel中</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">toChannel.transferFrom(fromChannel, count, position);</span><br><span class="line">fromChannel.transforTo(position, count, toChannel);</span><br></pre></td></tr></table></figure></li><li><p>FileChannel的常用方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><strong>int read(ByteBuffer dst)</strong></td><td>从Channel中读取数据到ByteBuffer</td></tr><tr><td><strong>long read(ByteBuffer[] dsts)</strong></td><td>将Channel中的数据”分散”到ByteBuffer[]</td></tr><tr><td><strong>int write(ByteBuffer src)</strong></td><td>将ByteBuffer中的数据写入到Channel</td></tr><tr><td><strong>long write(ByteBuffer[] srcs)</strong></td><td>将ByteBuffer[]中的数据”聚集”到Channel</td></tr><tr><td>long position()</td><td>返回此通道的文件位置</td></tr><tr><td>FileChannel position(long p)</td><td>设置此通道的文件位置</td></tr><tr><td>long size()</td><td>返回此通道的文件的当前大小</td></tr><tr><td>FileChannel truncate(long s)</td><td>将此通道的文件截取为给定大小</td></tr><tr><td>void force(boolean metaData)</td><td>强制将所有对此通道的文件更新写入到存储设备中</td></tr></tbody></table></li></ul><h2 id="选择器-Selector"><a href="#选择器-Selector" class="headerlink" title="选择器(Selector)"></a>选择器(Selector)</h2><ul><li><p>介绍：选择器(Selector)是SelectableChannle对象的多路复用器，<strong>Selector可以同时监控多个SelectableChannel的I0状况，也就是说，利用Selector可使一个单独的线程管理多个Channel。Selector是非阻塞I0的核心</strong></p></li><li><p>常见方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>Set&lt;SelectionKey&gt; keys()</td><td>所有的SelectionKey集合。代表注册在该Selector上的Channel</td></tr><tr><td>selectedKeys()</td><td>被选择的SelectionKey集合。返回此Selector的已选择键集</td></tr><tr><td>int select()</td><td>监控所有注册的Channel,当它们中间有需要处理的I0操作时,该方法返回,并将对应得的SelectionKey加入被选择的SelectionKey集合中,该方法返回这些Channel的数量</td></tr><tr><td>int select(long timeout)</td><td>可以设置超时时长的select()操作</td></tr><tr><td>int selectNow()</td><td>执行一个立即返回的select()操作,该方法不会阻塞线程</td></tr><tr><td>Selector wakeup()</td><td>使一个还未返回的select()方法立即返回</td></tr><tr><td>void close()</td><td>关闭该选择器</td></tr></tbody></table></li><li><p>SelectableChannle继承结构<br><img src="SelectableChannle%E7%BB%A7%E6%89%BF%E7%BB%93%E6%9E%84.png" alt="SelectableChannle继承结构"></p></li><li><p>选择器使用：</p><ul><li>创建Selector：通过调用Selector.open()方法创建一个Selector</li><li>向选择器注册通道：SelectableChannel.register(Selector sel,int ops)<ul><li>当调用register()向选择器注册通道时，选择器对通道的监听事件通过第二个参数ops指定</li><li>可以监听的事件类型(<strong>可使用SelectionKey的四个常量表示</strong>)：<ol><li>读：SelectionKey.OP_READ(1)</li><li>写：SelectionKey.OP_WRITE(4)</li><li>连接：SelectionKey.OP_CONNECT(8)</li><li>接收：SelectionKey.OP_ ACCEPT(16)</li></ol></li><li>若注册时不止监听一个事件，则可以使用”位或”操作符连接</li></ul></li></ul></li><li><p>SelectionKey：</p><ul><li><p>介绍：表示SelectableChannel和Selector之间的注册关系。每次向选择器注册通道时就会选择一个事件(选择键)。选择键包含两个表示为整数值的操作集。操作集的每一位都表示该键的通道所支持的一类可选择操作</p></li><li><p>常用方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>int interestOps()</td><td>获取感兴趣事件集合</td></tr><tr><td>int readyOps()</td><td>获取通道已经准备就绪的操作的集合</td></tr><tr><td>SelectableChannel channel()</td><td>获取注册通道</td></tr><tr><td>Selector selector()</td><td>返回选择器</td></tr><tr><td>boolean isReadable()</td><td>检测Channal中读事件是否就绪</td></tr><tr><td>boolean isWritable()</td><td>检测Channal中写事件是否就绪</td></tr><tr><td>boolean isConnectable()</td><td>检测Channel中连接是否就绪</td></tr><tr><td>boolean isAcceptable()</td><td>检测Channel中接收是否就绪</td></tr></tbody></table></li></ul></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li><p>管道(pipe)：NIO管道是2个线程之间的单向数据连接。Pipe有一个source通道和一个sink通道。数据会被写到sink通道，从source通道读取<br><img src="%E7%AE%A1%E9%81%93%E6%95%B0%E6%8D%AE%E8%BF%9E%E6%8E%A5%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="管道数据连接示意图"></p></li><li><p>Path与Paths：</p><ul><li><p>java.nio.file.Path接口代表-一个平台无关的平台路径，描述了目录结构中文件的位置</p></li><li><p>Paths提供get()方法用来获取Path对象：<br>Path get(String first, String … more)：用于将多个字符串串连成路径</p></li><li><p>Path常用方法:</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>boolean endsWith(String path)</td><td>判断是否以path路径结束</td></tr><tr><td>boolean startsWith(String path)</td><td>判断是否以path路径开始</td></tr><tr><td>boolean isAbsolute()</td><td>判断是否是绝对路径</td></tr><tr><td>Path getFileName()</td><td>返回与调用Path对象关联的文件名</td></tr><tr><td>Path getName(int idx)</td><td>返回的指定索引位置idx的路径名称</td></tr><tr><td>int getNameCount()</td><td>返回Path根目录后面元素的数量</td></tr><tr><td>Path getParent()</td><td>返回Path对象包含整个路径,不包含Path对象指定的文件路径</td></tr><tr><td>Path getRoot()</td><td>返回调用Path对象的根路径</td></tr><tr><td>Path resolve(Path p)</td><td>将相对路径解析为绝对路径</td></tr><tr><td>Path toAbsolutePath()</td><td>作为绝对路径返回调用Path对象</td></tr><tr><td>String toString()</td><td>返回调用Path对象的字符串表示形式</td></tr></tbody></table></li></ul></li><li><p>Files：</p><ul><li><p>java.nio.file.Files用于操作文件或目录的工具类</p></li><li><p>Files常用方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>Path copy(Path src, Path dest, CopyOption … how)</td><td>文件的复制</td></tr><tr><td>Path createDirectory(Path path, FileAttribute&lt;?&gt; … attr)</td><td>创建一个目录</td></tr><tr><td>Path createFile(Path path, FileAttribute&lt;?&gt; … arr)</td><td>创建一个文件</td></tr><tr><td>void delete(Path path)</td><td>删除一个文件</td></tr><tr><td>Path move(Path src, Path dest, CopyOption … how)</td><td>将src移动到dest位置</td></tr><tr><td>long size(Path path)</td><td>返回path指定文件的大小</td></tr></tbody></table></li><li><p>Files常用方法(判断)：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>boolean exists(Path path, LinkOption … opts)</td><td>判断文件是否存在</td></tr><tr><td>boolean isDirectory(Path path, LinkOption … opts)</td><td>判断是否是目录</td></tr><tr><td>boolean isExecutable(Path path)</td><td>判断是否是可执行文件</td></tr><tr><td>boolean isHidden(Path path)</td><td>判断是否是隐藏文件</td></tr><tr><td>boolean isReadable(Path path)</td><td>判断文件是否可读</td></tr><tr><td>boolean isWritable(Path path)</td><td>判断文件是否可写</td></tr><tr><td>boolean notExists(Path path, LinkOption … opts)</td><td>判断文件是否不存在</td></tr><tr><td>public static &lt;A extends BasicFileAttributes&gt; A readAttributes(Path path, Class&lt;A&gt; type, LinkOption … options)</td><td>获取与path指定的文件相关联的属性</td></tr></tbody></table></li><li><p>Files常用方法(操作内容)：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>SeekableByteChannel newByteChannel(Path path, OpenOptin … how)</td><td>获取与指定文件的连接,how指定打开方式</td></tr><tr><td>DirectoryStream newDirectoryStream(Path path)</td><td>打开path指定的目录</td></tr><tr><td>InputStream newInputStream(Path path, OpenOptin … how)</td><td>获取InputStream对象</td></tr><tr><td>OutputStream newOutputStream(Path path, OpenOptin … how)</td><td>获取OutputStream对象</td></tr></tbody></table></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka</title>
      <link href="/2020/09/27/BigData/Kafka/"/>
      <url>/2020/09/27/BigData/Kafka/</url>
      
        <content type="html"><![CDATA[<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><ul><li><a href="#Kafka概述">Kafka概述</a></li><li><a href="#Kafka快速入门">Kafka快速入门</a></li><li><a href="#Kafka架构深入">Kafka架构深入</a></li><li><a href="#Kafka_API">Kafka_API</a></li></ul><a id="more"></a><h2 id="Kafka概述"><a href="#Kafka概述" class="headerlink" title="Kafka概述"></a>Kafka概述</h2><ul><li>消息队列(Message Queue)<ul><li>传统消息队列的应用场景<br><img src="%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E4%BC%A0%E7%BB%9F%E5%BC%82%E6%AD%A5%E5%A4%84%E7%90%86%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF.png" alt="消息队列传统异步处理应用场景"></li><li>消息队列的两种模式<ol><li>点对点模式(1对1,消费者主动拉取数据,消息收到后消息清除)<br>消息生产者生产消息发送到Queue中，然后消息消费者从Queue中取出并且消费消息。消息被消费以后，queue中不再有存储，所以消息消费者不可能消费到已经被消费的消息。Queue支持存在多个消费者，但是对一个消息而言，只会有一个消费者可以消费<br><img src="%E7%82%B9%E5%AF%B9%E7%82%B9%E6%A8%A1%E5%BC%8F%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="点对点模式示意图"></li><li>发布/订阅模式(一对多,消费者消费数据之后不会清除消息)<br>消息生产者(发布)将消息发布到topic中，同时有多个消息消费者(订阅)消费该消息。和点对点方式不同，发布到topic的消息会被所有订阅者消费<br><img src="%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="发布订阅模式示意图"></li></ol></li></ul></li><li>Kafka定义：Kafka是一个分布式的基于发布/订阅模式的<strong>消息队列</strong>，主要应用于大数据实时处理领域</li><li>Kafka基础架构：<br><img src="Kafka%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="Kafka基础架构示意图"><ol><li><strong>Producer</strong>：消息生产者，就是向kafka broker发消息的客户端</li><li><strong>Consumer</strong>：消息消费者，向kafka broker取消息的客户端</li><li><strong>Consumer Group(CG)</strong>：消费者组，由多个consumer组成。消费者组内每个消费者负责消费不同分区的数据，一个分区只能由一个消费者消费；消费者组之间互不影响。所有的消费者都属于某个消费者组，即消费者组是逻辑上的一个订阅者</li><li><strong>Broker</strong>：一台kafka服务器就是一个broker，一个集群由多个broker组成，一个broker可以容纳多个topic</li><li><strong>Topic</strong>：可以理解为一个队列，<strong>生产者和消费者面向的都是一个topic</strong></li><li><strong>Partition</strong>：为了实现扩展性，一个非常大的topic可以分布到多个broker(即服务器)上，<strong>一个topic可以分为多个partition</strong>，每个partition是一个有序的队列</li><li><strong>Replica</strong>：副本，为保证集群中的某个节点发生故障时，该节点上的partition数据不丢失且kafka仍然能够继续工作，<strong>kafka提供了副本机制，一个topic的每个分区都有若干个副本，一个leader和若干个follower</strong></li><li><strong>leader</strong>：每个分区多个副本的”主”，生产者发送数据的对象以及消费者消费数据的对象都是leader</li><li><strong>follower</strong>：每个分区多个副本中的”从”，实时从leader中同步数据，保持和leader数据的同步。leader发生故障时，某个follower会成为新的leader</li></ol></li></ul><h2 id="Kafka快速入门"><a href="#Kafka快速入门" class="headerlink" title="Kafka快速入门"></a>Kafka快速入门</h2><ul><li><p>安装部署</p><ul><li><p>集群规划：Hadoop101、hadoop102、hadoop103各自都运行zookeeper和kafka</p></li><li><p>安装包下载：<a href="http://kafka.apache.org/downloads" target="_blank" rel="noopener">http://kafka.apache.org/downloads</a></p></li><li><p>集群部署</p><ul><li><p>解压安装包：tar -zxvf kafka_2.12-2.6.0.tgz -C /opt/module</p></li><li><p>修改配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 需要修改的地方</span><br><span class="line"># broker(主机)的全局唯一编号,不能重复</span><br><span class="line">broker.id=x</span><br><span class="line"># 设置允许删除topic功能</span><br><span class="line">delete.topic.enable=true</span><br><span class="line"># 设置kafka运行日志存放地址</span><br><span class="line">log.dirs=/opt/module/kafka_2.12-2.6.0/logs</span><br><span class="line"># 配置链接zookeeper集群地址</span><br><span class="line">zookeeper.connect=hadoop101:2181,hadoop102:2181,hadoop103:2181</span><br></pre></td></tr></table></figure></li><li><p>配置环境变量(vim + source)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># KAFKA_HOME</span><br><span class="line">export KAFKA_HOME=/opt/module/kafka_2.12-2.6.0</span><br><span class="line">export PATH=$PATH:$KAFKA_HOME/bin</span><br></pre></td></tr></table></figure></li><li><p>分发安装包(修改环境变量和配置文件的broker.id)：xsync kafka_2.12-2.6.0</p></li><li><p>启动集群：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 依次启动hadoop101、hadoop102、hadoop103的zookeeper</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 该命令hadoop101、hadoop102、hadoop103均需使用</span></span><br><span class="line">kafka-server-start.sh -daemon $KAFKA_HOME/config/server.properties</span><br></pre></td></tr></table></figure></li><li><p>kafka群起脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for i in `cat $HADOOP_HOME/etc/hadoop/workers`</span><br><span class="line">do</span><br><span class="line">echo "========== $i =========="</span><br><span class="line">ssh $i 'kafka-server-start.sh -daemon $KAFKA_HOME/config/server.properties'</span><br><span class="line">echo $?</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>Kafka命令行操作(直接使用,不加参数可以查看用法)</p><ul><li><p>查看当前服务器中的所有topic：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics.sh --zookeeper hadoop101:2181 --list</span><br></pre></td></tr></table></figure></li><li><p>创建topic：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics.sh --zookeeper hadoop101:2181 --create --replication-factor 3 --partitions 1 --topic first</span><br></pre></td></tr></table></figure><p>选项说明：</p><ol><li>–topic：定义topic名</li><li>–replication-factor：定义副本数</li><li>–partitions：定义分区数</li></ol></li><li><p>删除topic</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 需要server.properties中设置delete.topic.enable=<span class="literal">true</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 否则只是标记删除</span></span><br><span class="line">kafka-topics.sh --zookeeper hadoop101:2181 --delete --topic first</span><br></pre></td></tr></table></figure></li><li><p>发送消息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 出现 &gt; ,可输入消息字符</span></span><br><span class="line">kafka-console-producer.sh --broker-list hadoop101:9092 --topic first</span><br></pre></td></tr></table></figure></li><li><p>消费消息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> --from-beginning会把topic以往所有的消息数据都取出来</span></span><br><span class="line">kafka-console-consumer.sh --bootstrap-server hadoop101:9092 --from-beginning --topic first</span><br></pre></td></tr></table></figure></li><li><p>修改分区数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics.sh --zookeeper hadoop101:2181 --alter --topic first --partitions 6</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="Kafka架构深入"><a href="#Kafka架构深入" class="headerlink" title="Kafka架构深入"></a>Kafka架构深入</h2><ul><li><p>Kafka工作流程及文件存储机制<br><img src="Kafka%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png" alt="Kafka工作流程示意图"></p><ol><li><p>topic<br>Kafka中消息是以topic进行分类的，生产者生产消息，消费者消费消息，都是面向topic的<br>topic是逻辑上的概念，而partition是物理上的概念，每个partition对应于一个log文件，该log文件中存储的就是producer生产的数据。Producer生产的数据会被不断追加到该log文件末端，且每条数据都有自己的offset。消费者组中的每个消费者，都会实时记录自己消费到了哪个offset，以便出错恢复时从上次的位置继续消费</p></li><li><p>Kafka文件存储机制<br><img src="Kafka%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E6%9C%BA%E5%88%B6.png" alt="Kafka文件存储机制示意图"><br>由于生产者生产的消息会不断追加到log文件末尾，为防止log文件过大导致数据定位效率低下，Kafka采取了分片和索引机制，将每个partition分为多个segment。每个segment对应两个文件——<strong>.index文件和.log文件</strong>。这些文件位于一个文件夹下，该文件夹的命名规则为：topic名称 + 分区序号。例如，first这个topic有三个分区，则其对应的文件夹为first-0,first-1,first-2。index和log文件以当前segment的第一条消息的offset命名</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">00000000000000000000.index</span><br><span class="line">00000000000000000000.log</span><br><span class="line">00000000000000170410.index</span><br><span class="line">00000000000000170410.log</span><br><span class="line">00000000000000239430.index</span><br><span class="line">00000000000000239430.log</span><br></pre></td></tr></table></figure></li><li><p>.index和.log文件详解<br><img src="index%E5%92%8Clog%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3.png" alt="index和log文件详解示意图"><br>.index文件存储大量的索引信息，.log文件存储大量的数据，索引文件中的元数据指向对应数据文件中message的物理偏移地址</p></li></ol></li><li><p>Kafka生产者</p><ul><li><p>分区策略</p><ul><li>分区原因<ol><li><strong>方便在集群中扩展</strong>，每个Partition可以通过调整以适应它所在的机器，而一个topic又可以由多个Partition组成，因此整个集群就可以适应任意大小的数据了</li><li><strong>可以提高并发能力</strong>，因为可以以Partition为单位读写了</li></ol></li><li>分区原则：我们需要将producer发送的数据封装成一个ProducerRecord对象<br><img src="ProducerRecord%E5%AF%B9%E8%B1%A1%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0.png" alt="ProducerRecord对象构造函数"><ol><li>指明partition的情况下，直接将指明的值直接作为partiton值</li><li>没有指明partition值但有key的情况下，将key的hash值与topic的partition数进行取余得到partition值</li><li>既没有partition值又没有key值的情况下，第一次调用时随机生成一个整数(后面每次调用在这个整数上自增)，将这个值与topic可用的partition总数取余得到partition值，也就是常说的 round-robin(轮询)算法</li></ol></li></ul></li><li><p>数据可靠性保证<br>为保证producer发送的数据能可靠地发送到指定的topic，topic的每个partition收到producer发送的数据后都需要向producer发送ack(acknowledgement确认收到)，如果producer收到ack，就会进行下一轮的发送，否则重新发送数据<br><img src="ack%E7%A1%AE%E8%AE%A4%E4%BB%A5%E5%8F%8A%E9%87%8D%E5%8F%91.png" alt="ack确认以及重发"><br><img src="%E4%BD%95%E6%97%B6%E5%8F%91%E9%80%81ack.png" alt="何时发送ack"></p><ol><li><p>副本数据同步策略</p><table><thead><tr><th>方案</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>半数以上完成同步,就发送ack</td><td>延迟低</td><td>选举新的leader时,容忍n台节点的故障,需要2n+1个副本</td></tr><tr><td>全部完成同步,才发送ack</td><td>选举新的leader时,容忍n台节点的故障,需要n+1个副本</td><td>延迟高</td></tr></tbody></table><p>Kafka选择了第二种方案，原因如下：</p><ol><li>同样为了容忍n台节点的故障，第一种方案需要2n+1个副本，而第二种方案只需要n+1个副本，而Kafka的每个分区都有大量的数据，第一种方案会造成大量数据的冗余</li><li>虽然第二种方案的网络延迟会比较高，但网络延迟对Kafka的影响较小</li></ol></li><li><p>ISR<br>采用第二种方案之后，设想以下情景：leader收到数据，所有follower都开始同步数据。但有一个follower因为某种故障迟迟不能与leader进行同步，那leader就要一直等下去，直到它完成同步才能发送ack。这个问题怎么解决呢？<br>Leader维护了一个动态的in-sync replica set(ISR)，意为和leader保持同步的follower集合。当ISR中的follower完成数据的同步之后，leader就会给producer发送ack。如果follower长时间未向leader同步数据，则该follower将被踢出ISR，<strong>该时间阈值由replica.lag.time.max.ms参数设定</strong>。Leader发生故障之后，就会从ISR中选举新的leader</p></li><li><p>ack应答机制<br>对于某些不太重要的数据，对数据的可靠性要求不是很高，能够容忍数据的少量丢失，所以没必要等ISR中的follower全部接收成功。所以Kafka为用户提供了三种可靠性级别，用户根据对可靠性和延迟的要求进行权衡，选择以下的acks参数配置：</p><ol><li>0：producer不等待broker的ack，这一操作提供了一个最低的延迟，broker一接收到还没有写入磁盘就已经返回，当broker故障时有可能<strong>丢失数据</strong></li><li>1：producer等待broker的ack，partition的leader落盘成功后返回ack，如果在follower同步成功之前leader故障，那么将会<strong>丢失数据</strong><br><img src="ack=1%E6%95%B0%E6%8D%AE%E4%B8%A2%E5%A4%B1%E6%A1%88%E4%BE%8B%E7%A4%BA%E6%84%8F%E5%9B%BE1.png" alt="ack=1数据丢失案例示意图1"><br><img src="ack=1%E6%95%B0%E6%8D%AE%E4%B8%A2%E5%A4%B1%E6%A1%88%E4%BE%8B%E7%A4%BA%E6%84%8F%E5%9B%BE2.png" alt="ack=1数据丢失案例示意图2"></li><li>-1(all)：producer等待broker的ack，partition的leader和follower全部落盘成功后才返回ack。但是如果在follower同步完成后，broker发送ack之前，leader发生故障，那么会造成<strong>数据重复</strong><br><img src="ack=-1%E6%95%B0%E6%8D%AE%E4%B8%A2%E5%A4%B1%E6%A1%88%E4%BE%8B%E7%A4%BA%E6%84%8F%E5%9B%BE1.png" alt="ack=-1数据丢失案例示意图1"><br><img src="ack=-1%E6%95%B0%E6%8D%AE%E4%B8%A2%E5%A4%B1%E6%A1%88%E4%BE%8B%E7%A4%BA%E6%84%8F%E5%9B%BE2.png" alt="ack=-1数据丢失案例示意图2"></li></ol></li><li><p>故障处理细节<br> <img src="log%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84hw%E5%92%8Cleo.png" alt="log文件中的hw和leo"></p><ol><li>follower故障<br>follower发生故障后会被临时踢出ISR，待该follower恢复后，follower会读取本地磁盘记录的上次的HW，并将log文件高于HW的部分截取掉，从HW开始向leader进行同步。<strong>等该follower的LEO大于等于该Partition的HW</strong>，即follower追上leader之后，就可以重新加入ISR了</li><li>leader故障<br>leader发生故障之后，会从ISR中选出一个新的leader。之后，为保证多个副本之间的数据一致性，其余的follower会先将各自的log文件高于HW的部分截掉，然后从新的leader同步数据<br>注意：<strong>这只能保证副本之间的数据一致性，并不能保证数据不丢失或者不重复</strong></li></ol></li></ol></li><li><p>Exactly Once语义<br>将服务器的ACK级别设置为-1，可以保证Producer到Server之间不会丢失数据，即At Least Once语义。相对的，将服务器ACK级别设置为0，可以保证生产者每条消息只会被发送一次，即At Most Once语义<br>At Least Once可以保证数据不丢失，但是不能保证数据不重复；相对的，At Least Once可以保证数据不重复，但是不能保证数据不丢失。但是，对于一些非常重要的信息，比如说交易数据，下游数据消费者要求数据既不重复也不丢失，即Exactly Once语义。在0.11版本以前的Kafka，对此是无能为力的，只能保证数据不丢失，再在下游消费者对数据做全局去重。对于多个下游应用的情况，每个都需要单独做全局去重，这就对性能造成了很大影响<br>0.11版本的Kafka，引入了一项重大特性：幂等性。所谓的幂等性就是指Producer不论向Server发送多少次重复数据，Server端都只会持久化一条。幂等性结合At Least Once语义，就构成了Kafka的Exactly Once语义。即：At Least Once + 幂等性 = Exactly Once<br>要启用幂等性，只需要将Producer的参数中enable.idompotence设置为true即可。Kafka的幂等性实现其实就是将原来下游需要做的去重放在了数据上游。开启幂等性的Producer在初始化的时候会被分配一个PID，发往同一Partition的消息会附带Sequence Number。而Broker端会对&lt;PID, Partition, SeqNumber&gt;做缓存，当具有相同主键的消息提交时，Broker只会持久化一条。<br>但是PID重启就会变化，同时不同的Partition也具有不同主键，所以幂等性无法保证跨分区跨会话的Exactly Once</p></li></ul></li><li><p>Kafka消费者</p><ul><li>消费方式<br>consumer采用pull(拉)模式从broker中读取数据<br><strong>push(推)模式很难适应消费速率不同的消费者，因为消息发送速率是由broker决定的</strong>。它的目标是尽可能以最快速度传递消息，但是这样很容易造成consumer来不及处理消息，典型的表现就是拒绝服务以及网络拥塞。而pull模式则可以根据consumer的消费能力以适当的速率消费消息<br><strong>pull模式的不足之处：如果kafka没有数据，消费者可能会陷入循环中，一直返回空数据</strong>。针对这一点，Kafka的消费者在消费数据时会传入一个时长参数timeout，如果当前没有数据可供消费，consumer会等待一段时间之后再返回，这段时长即为timeout</li><li>分区分配策略<br>一个consumer group中有多个consumer，一个topic有多个partition，所以必然会涉及到partition的分配问题——即确定哪个partition由哪个consumer来消费<br>Kafka有两种分配策略：<ol><li>roundrobin：轮询<br><img src="roundrobin%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5.png" alt="roundrobin分配策略"></li><li>range：按顺序均分<br><img src="range%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5.png" alt="range分配策略"></li></ol></li><li>offset维护<br>由于consumer在消费过程中可能会出现断电宕机等故障，consumer恢复后，需要从故障前的位置的继续消费，所以consumer需要实时记录自己消费到了哪个offset，以便故障恢复后继续消费<br>在0.9版本之前，consumer默认将offset保存在Zookeeper中；从0.9版本开始，<strong>consumer默认将offset保存在Kafka一个内置的topic中，该topic为__consumer_offsets</strong></li></ul></li><li><p>Kafka高效读写数据</p><ol><li>顺序写磁盘<br>Kafka的producer生产数据，要写入到log文件中，写的过程是一直追加到文件末端，为顺序写。官网有数据表明，同样的磁盘，顺序写能到到600M/s，而随机写只有100k/s。这与磁盘的机械机构有关，顺序写之所以快，是因为其省去了大量磁头寻址的时间</li><li><strong>应用Pagecache</strong><br>Kafka数据持久化是直接持久化到Pagecache中，这样会产生以下几个好处：<ol><li>I/O Scheduler会将连续的小块写组装成大块物理写从而提高性能</li><li>I/O Scheduler会尝试将一些写操作重新按顺序排好，从而减少磁盘头的移动时间</li><li>充分利用所有空闲内存(非JVM内存)。如果使用应用层Cache(即JVM堆内存)，会增加GC负担</li><li>读操作可直接在Page Cache内进行。如果消费和生产速度相当，甚至不需要通过物理磁盘(直接通过Page Cache)交换数据</li><li>如果进程重启，JVM内的Cache会失效，但Page Cache仍然可用<br>尽管持久化到Pagecache上可能会造成宕机丢失数据的情况，但这可以被Kafka的Replication机制解决。如果为了保证这种情况下数据不丢失而强制将Page Cache中的数据Flush到磁盘，反而会降低性能</li></ol></li><li>零复制(拷贝)技术<br><img src="%E5%B8%B8%E8%A7%84%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="常规数据持久化示意图"><br><img src="%E4%BC%98%E5%8C%96%E7%9A%84%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="优化的数据持久化示意图"></li></ol></li><li><p>Zookeeper在Kafka中的作用<br>Kafka集群中有一个broker会被选举为Controller，<strong>负责管理集群broker的上下线、所有topic的分区副本分配和leader选举等工作</strong><br>Controller的管理工作依赖于Zookeeper<br>以下为partition的leader选举过程：<br><img src="controller%E6%AD%A3%E5%B8%B8%E6%83%85%E5%86%B5%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="controller正常情况示意图"><br><img src="leader%E5%AE%95%E6%9C%BA%E6%83%85%E5%86%B5%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="leader宕机情况示意图"></p></li><li><p>Kafka事务<br>Kafka从0.11版本开始引入了事务支持。事务可以保证Kafka在Exactly Once语义的基础上，生产和消费可以跨分区和会话，要么全部成功，要么全部失败</p><ul><li>Producer事务<br>为了实现跨分区跨会话的事务，需要引入一个全局唯一的Transaction ID，并将Producer获得的PID和Transaction ID绑定。这样当Producer重启后就可以通过正在进行的Transaction ID获得原来的PID<br>为了管理Transaction，Kafka引入了一个新的组件Transaction Coordinator。Producer就是通过和Transaction Coordinator交互获得Transaction ID对应的任务状态。Transaction Coordinator还负责将事务所有写入Kafka的一个内部Topic，这样即使整个服务重启，由于事务状态得到保存，进行中的事务状态可以得到恢复，从而继续进行</li><li>Consumer事务(精准一次性消费)<br>上述事务机制主要是从Producer方面考虑，对于Consumer而言，事务的保证就会相对较弱，尤其是无法保证Commit的信息被精确消费。这是由于Consumer可以通过offset访问任意信息，而且不同的Segment File生命周期不同，同一事务的消息可能会出现重启后被删除的情况<br>如果想完成Consumer端的精准一次性消费，那么需要kafka消费端将消费过程和提交offset过程做原子绑定。此时我们需要将kafka的offset保存到支持事务的自定义介质中(比如mysql)</li></ul></li></ul><h2 id="Kafka-API"><a href="#Kafka-API" class="headerlink" title="Kafka_API"></a>Kafka_API</h2><ul><li><p>Producer API</p><ul><li><p>消息发送流程<br>Kafka的Producer发送消息采用的是<strong>异步发送</strong>的方式。在消息发送的过程中，涉及到了两个线程——<strong>main线程和Sender线程</strong>，以及<strong>一个线程共享变量RecordAccumulator</strong>。main线程将消息发送给RecordAccumulator，Sender线程不断从RecordAccumulator中拉取消息发送到Kafka broker<br><img src="Kafka%E6%B6%88%E6%81%AF%E5%8F%91%E9%80%81%E6%B5%81%E7%A8%8B.png" alt="Kafka消息发送流程示意图"><br>相关参数：<br><strong>batch.size</strong>：只有数据积累到batch.size之后，sender才会发送数据<br><strong>linger.ms</strong>：如果数据迟迟未达到batch.size，sender等待linger.time之后就会发送数据</p></li><li><p>发送API</p><ol><li><p>导入依赖：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kafka-clients<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写测试代码</p><ul><li><p>异步发送</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ProducerConfig封装了一系列配置参数名的常量</span></span><br><span class="line"><span class="comment">// 1、实例化kafka集群</span></span><br><span class="line">Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">properties.put(<span class="string">"key.serializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>);</span><br><span class="line">properties.put(<span class="string">"value.serializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>);</span><br><span class="line">properties.put(<span class="string">"acks"</span>, <span class="string">"all"</span>);</span><br><span class="line">properties.put(<span class="string">"bootstrap.servers"</span>, <span class="string">"hadoop101:9092"</span>);</span><br><span class="line"><span class="comment">// 重试次数</span></span><br><span class="line">properties.put(<span class="string">"retries"</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 批次大小</span></span><br><span class="line">properties.put(<span class="string">"batch.size"</span>, <span class="number">16384</span>);</span><br><span class="line"><span class="comment">// 等待时间</span></span><br><span class="line">properties.put(<span class="string">"linger.ms"</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// RecordAccumulator缓冲区大小</span></span><br><span class="line">properties.put(<span class="string">"buffer.memory"</span>, <span class="number">33554432</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// KafkaProducer,生产者对象,用来发送数据</span></span><br><span class="line">KafkaProducer&lt;String, String&gt; producer = <span class="keyword">new</span> KafkaProducer&lt;&gt;(properties);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、用集群对象发送数据</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// 封装ProducerRecord(发送的消息封装类)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 同步</span></span><br><span class="line">  <span class="comment">// producer.send(new ProducerRecord&lt;&gt;("test",Integer.toString(i),"value" + i);</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 异步</span></span><br><span class="line">  <span class="comment">// 回调函数会在producer收到ack时调用,为异步调用</span></span><br><span class="line">  <span class="comment">// 该方法有两个参数,分别是RecordMetadata和Exception;如果Exception为null,说明消息发送成功。如果Exception不为null,说明消息发送失败</span></span><br><span class="line">  <span class="comment">// 注意：消息发送失败会自动重试,不需要我们在回调函数中手动重试</span></span><br><span class="line">  producer.send(<span class="keyword">new</span> ProducerRecord&lt;&gt;(</span><br><span class="line">    <span class="string">"test"</span>,</span><br><span class="line">    Integer.toString(i),</span><br><span class="line">    <span class="string">"value"</span> + i</span><br><span class="line">  ), (metadata, exception) -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == exception) System.out.println(<span class="string">"metadata = "</span> + metadata);</span><br><span class="line">    <span class="keyword">else</span> exception.printStackTrace();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  System.out.println(<span class="string">"发送了第"</span> + i + <span class="string">"条"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、关闭资源</span></span><br><span class="line">producer.close();</span><br></pre></td></tr></table></figure></li><li><p>同步发送</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同步发送：一条消息发送之后,会阻塞当前线程直至返回ack</span></span><br><span class="line"><span class="comment">// 由于send()方法返回的是一个Future对象,根据Futrue对象的特点,也可实现同步发送效果,只需调用Future对象的get()方法即可</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">  producer.send(<span class="keyword">new</span> ProducerRecord&lt;String, String&gt;(<span class="string">"test"</span>, Integer.toString(i), Integer.toString(i))).get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol></li></ul></li><li><p>Consumer API<br>Consumer消费数据时的可靠性是容易保证的，因为数据在Kafka中是持久化的，不用担心数据丢失问题。但由于consumer在消费过程中可能会出现断电宕机等故障，consumer恢复后，需从故障前的位置继续消费，因此consumer需要实时记录消费到了哪个offset以便故障恢复后继续消费。offset的维护是Consumer消费数据必须考虑的问题</p><ul><li><p>提交offset</p><ol><li><p>导入依赖，同producer</p></li><li><p>编写测试代码</p><ul><li><p>自动提交offset</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ConsumerConfig封装了一系列配置参数名的常量</span></span><br><span class="line"><span class="comment">// 1、新建一个Consumer对象</span></span><br><span class="line">Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">props.put(<span class="string">"bootstrap.servers"</span>, <span class="string">"hadoop101:9092"</span>);</span><br><span class="line">props.put(<span class="string">"group.id"</span>, <span class="string">"test"</span>);</span><br><span class="line"><span class="comment">// 是否开启自动提交offset</span></span><br><span class="line">props.put(<span class="string">"enable.auto.commit"</span>, <span class="string">"true"</span>);</span><br><span class="line"><span class="comment">// 自动提交offset时间间隔</span></span><br><span class="line">props.put(<span class="string">"auto.commit.interval.ms"</span>, <span class="string">"1000"</span>);</span><br><span class="line">props.put(<span class="string">"key.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line">props.put(<span class="string">"value.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line"><span class="comment">// KafkaConsumer,消费者对象,用于消费数据</span></span><br><span class="line">KafkaConsumer&lt;String, String&gt; consumer = <span class="keyword">new</span> KafkaConsumer&lt;&gt;(props);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、用这个对象接受消息</span></span><br><span class="line">consumer.subscribe(Collections.singleton(<span class="string">"first"</span>));</span><br><span class="line"><span class="comment">// 从订阅的话题中拉取数据</span></span><br><span class="line">ConsumerRecords&lt;String, String&gt; consumerRecords = consumer.poll(Duration.ofSeconds(<span class="number">2</span>));</span><br><span class="line"><span class="comment">// 消费拉取的数据</span></span><br><span class="line"><span class="comment">// ConsumerRecord(接受的消息封装)</span></span><br><span class="line"><span class="keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : consumerRecords) &#123;</span><br><span class="line">  System.out.println(<span class="string">"record = "</span> + record);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3、关闭Consumer</span></span><br><span class="line">consumer.close();</span><br></pre></td></tr></table></figure></li><li><p>手动提交offset<br>虽然自动提交offset十分简洁便利，但由于是基于时间提交的，难以把握offset提交的时机。Kafka还提供了手动提交offset的API<br>手动提交offset的方法有两种：commitSync(同步提交)和commitAsync(异步提交)<br>两者相同点：<strong>将本次poll的一批数据最高的偏移量提交</strong><br>两者不同点：commitSync阻塞当前线程一直到提交成功，并且会自动失败重试(由不可控因素导致,也会出现提交失败)；commitAsync则没有失败重试机制，故有可能提交失败</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同步提交offset</span></span><br><span class="line"><span class="comment">// 有失败重试机制,更加可靠</span></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">  <span class="comment">// 消费者拉取数据</span></span><br><span class="line">  ConsumerRecords&lt;String, String&gt; records = consumer.poll(<span class="number">100</span>);</span><br><span class="line">  <span class="keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : records) &#123;</span><br><span class="line">    System.out.printf(record);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 同步提交,当前线程会阻塞直到offset提交成功</span></span><br><span class="line">  consumer.commitSync();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步提交offset</span></span><br><span class="line"><span class="comment">// 比同步吞吐量高</span></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">  <span class="comment">// 消费者拉取数据</span></span><br><span class="line">  ConsumerRecords&lt;String, String&gt; records = consumer.poll(<span class="number">100</span>);</span><br><span class="line">  <span class="keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : records) &#123;</span><br><span class="line">    System.out.printf(record);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 异步提交</span></span><br><span class="line">  consumer.commitAsync(<span class="keyword">new</span> OffsetCommitCallback() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">(Map&lt;TopicPartition, OffsetAndMetadata&gt; offsets, Exception exception)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (exception != <span class="keyword">null</span>) &#123;</span><br><span class="line">        System.err.println(<span class="string">"Commit failed -&gt; "</span> + offsets);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol></li><li><p>数据漏消费和重复消费分析<br>无论是同步提交还是异步提交offset，都有可能会造成数据的漏消费或重复消费。先提交offset后消费，有可能造成数据的漏消费；而先消费后提交offset，有可能会造成数据的重复消费<br><img src="%E6%95%B0%E6%8D%AE%E9%87%8D%E5%A4%8D%E6%B6%88%E8%B4%B9%E7%A4%BA%E6%84%8F%E5%9B%BE1.png" alt="数据重复消费示意图1"><br><img src="%E6%95%B0%E6%8D%AE%E9%87%8D%E5%A4%8D%E6%B6%88%E8%B4%B9%E7%A4%BA%E6%84%8F%E5%9B%BE2.png" alt="数据重复消费示意图2"></p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BigData </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM</title>
      <link href="/2020/09/26/ProgrammingLanguage/Java/JVM/"/>
      <url>/2020/09/26/ProgrammingLanguage/Java/JVM/</url>
      
        <content type="html"><![CDATA[<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><ul><li><a href="#JVM体系结构概述">JVM体系结构概述</a></li><li><a href="#堆体系结构概述">堆体系结构概述</a></li><li><a href="#堆参数调优">堆参数调优</a></li></ul><a id="more"></a><h2 id="JVM体系结构概述"><a href="#JVM体系结构概述" class="headerlink" title="JVM体系结构概述"></a>JVM体系结构概述</h2><ul><li><p>JVM位置：运行与操作系统之上(可以认为是一种中间件)，与硬件没有直接的交互<br><img src="JVM%E4%BD%8D%E7%BD%AE.png" alt="JVM位置"></p></li><li><p>JVM结构<br><img src="JVM%E7%BB%93%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="JVM结构示意图"></p><ol><li><p>类装载器ClassLoader</p><ul><li><p>作用：负责加载class文件，<strong>class文件在文件开头有特定的文件标示</strong>，将class文件字节码内容加载到内存中，并将这些内容转换成方法区中的运行时数据结构。ClassLoader只负责class文件的加载，至于它是否可以运行，则由Execution Engine决定<br><img src="%E7%B1%BB%E8%A3%85%E8%BD%BD%E5%99%A8%E5%B7%A5%E4%BD%9C%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="类装载器工作示意图"></p></li><li><p>种类：</p><ol><li>虚拟机自带的加载器<ol><li>启动类加载器(Bootstrap) C++($JAVA_HOME/jre/lib/rt.jar)</li><li>扩展类加载器(Extension) Java($JAVA_HOME/jre/lib/ext/*.jar)</li><li>应用程序类加载器(AppClassLoader)，Java中也叫系统类加载器(System Class Loader)，加载当前应用的classpath的所有类</li></ol></li><li>用户自定义加载器：java.lang.ClassLoader的子类，用户可以定制类的加载方式<br><img src="%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E7%BB%A7%E6%89%BF%E5%9B%BE.png" alt="类加载器继承图"></li></ol></li><li><p>种类案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="comment">// null</span></span><br><span class="line"><span class="comment">// Object定义在rt.jar中,采用C++的Bootstrap加载器</span></span><br><span class="line">System.out.println(obj.getClass().getClassLoader());</span><br><span class="line"></span><br><span class="line">MyObject mObj = <span class="keyword">new</span> MyObject();</span><br><span class="line"><span class="comment">// sun.misc.Launcher$AppClassLoader@18b4aac2</span></span><br><span class="line"><span class="comment">// MyObject是用户自定义类,采用系统类加载器AppClassLoader</span></span><br><span class="line">System.out.println(mObj.getClass().getClassLoader());</span><br><span class="line"><span class="comment">// sun.misc.Launcher$ExtClassLoader@61bbe9ba</span></span><br><span class="line"><span class="comment">// 系统类加载器的父类即为扩展类加载器ExtClassLoader</span></span><br><span class="line">System.out.println(mObj.getClass().getClassLoader().getParent());</span><br><span class="line"><span class="comment">// null</span></span><br><span class="line"><span class="comment">// 扩展类加载器ExtClassLoader的父类即为C++的Bootstrap加载器</span></span><br><span class="line">System.out.println(mObj.getClass().getClassLoader().getParent().getParent());</span><br></pre></td></tr></table></figure></li><li><p>类加载机制(双亲委派)：一个类收到了类加载请求，它首先不会尝试自己去加载这个类，而是把这个请求委派给父类去完成，每一个层次类加载器都是如此，因此所有的加载请求都应该传送到启动类加载器中，只有当父类加载器反馈自己无法完成这个请求的时候(在它的加载路径下没有找到所需加载的Class)，子类加载器才会尝试自己去加载。采用双亲委派的一个好处是比如加载位于rt.jar包中的类java.lang.Object，不管是哪个加载器加载这个类，最终都是委托给顶层的启动类加载器进行加载，这样就保证了使用不同的类加载器最终得到的都是同样一个Object对象(也防止用户自定义了系统预先定义的类[包名和类名完全相同]造成的类加载冲突——编译器不报错,运行时报错)</p></li></ul></li><li><p>Execution Engine：执行引擎负责解释命令，提交操作系统执行</p></li><li><p>Native Interface(本地接口)：<br> 本地接口的作用是融合不同的编程语言为Java所用，它的初衷是融合C/C++程序(Java诞生的时候是C/C++横行的时候,要想立足,必须能够调用C/C++程序)，于是就在内存中专门开辟了一块区域处理标记为native的代码，它的具体做法是Native Method Stack中登记native方法，在Execution Engine执行时加载native libraies<br> 目前该方法使用得越来越少了，除非是与硬件有关的应用，在企业级应用中已经比较少见。因为现在的异构领域间的通信很发达，比如可以使用Socket通信、Web Service等</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Test.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  Thread t1 = <span class="keyword">new</span> Thread();</span><br><span class="line">  t1.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Thread.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 同一个thread不能start()两次</span></span><br><span class="line">  <span class="keyword">if</span> (threadStatus != <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</span><br><span class="line">  group.add(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">boolean</span> started = <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    start0();</span><br><span class="line">    started = <span class="keyword">true</span>;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!started) &#123;</span><br><span class="line">        group.threadStartFailed(<span class="keyword">this</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable ignore) &#123; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">start0</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>Native Method Stack：登记native方法，在Execution Engine执行时加载本地方法库</p></li><li><p>PC寄存器(类似汇编)：<br> 每个线程都有一个程序计数器，是线程私有的，就是一个指针，指向方法区中的方法字节码(用来存储指向下一条指令的地址,也即将要执行的指令代码)，由执行引擎读取下一条指令<br> 这块内存区域(空间)很小，几乎可以忽略不记，它是当前线程所执行的字节码的行号指示器，字节码解释器通过改变这个计数器的值来选取下一条需要执行的字节码指令<br> 如果执行的是一个Native方法，那这个计数器是空的<br> 用以完成分支、循环、跳转、异常处理、线程恢复等基础功能。不会发生内存溢出(OOM：Out Of Memory)错误</p></li><li><p>Method Area(方法区)：<br> 是供各线程共享的运行时内存区域。它存储了每一个类的结构信息，例如运行时常量池(Runtime Constant Pool)、字段和方法数据、构造函数和普通方法的字节码内容<br> 上面讲的是规范，在不同虚拟机中实现是不一样的，最典型的就是Java7的永久代(PermGen space)和Java8的元空间(Metaspace)<br> 实例变量存在堆内存中，和方法区无关</p></li><li><p>Stack(栈)：</p><ul><li>介绍：栈也叫栈内存，主管Java程序的运行。在线程创建时创建，它的生命期是跟随线程的生命期，线程结束栈内存也就释放，<strong>对于栈来说不存在垃圾回收问题，只要线程一结束该栈就Over，生命周期和线程一致，是线程私有的</strong>。<strong>8种基本类型的变量、对象的引用变量、实例方法都是在函数的栈内存中分配</strong></li><li>栈存储什么(主要保存3类数据)：<ol><li>本地变量(Local Variables)：输入参数、输出参数以及方法内的变量</li><li>栈操作(Operand Stack)：记录出栈、入栈的操作</li><li>栈帧数据(Frame Data)：包括类文件、方法等</li></ol></li><li>栈运行原理：<br>栈中的数据都是以栈帧(Stack Frame)格式存在，栈帧是一个内存区块、一个数据集、一个有关方法(Method)和运行期数据的数据集<br>当一个方法A被调用时就产生了一个栈帧F1，并被压入到栈中；A方法又调用了B方法，于是产生的栈帧F2也被压入栈；B方法又调用了C方法，于是产生的栈帧F3也被压入栈…..方法相继执行完毕后，先弹出F3栈帧，再弹出F2栈帧，再弹出F1栈帧……遵循“先进后出”/“后进先出”原则<br><strong>每个方法执行的同时都会创建一个栈帧，用于存储局部变量表、操作数栈、动态链接、方法出口等信息</strong>。每一个方法从调用直至执行完毕的过程，就对应着一个栈帧在虚拟机中入栈到出栈的过程。<strong>栈的大小和具体JVM的实现有关，通常在256K~756K之间，约等于1Mb左右</strong><br><img src="Java%E6%A0%88%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="Java栈示意图"></li></ul></li></ol></li><li><p>栈/堆/方法区的交互关系<br>HotSpot(Java8)是使用指针的方式来访问对；Java堆中会存在访问<strong>类元数据</strong>的地址；reference存储的就是对象的地址<br><img src="%E6%A0%88%E5%A0%86%E6%96%B9%E6%B3%95%E5%8C%BA%E7%9A%84%E4%BA%A4%E4%BA%92%E5%85%B3%E7%B3%BB.png" alt="栈/堆/方法区的交互关系"></p></li></ul><h2 id="堆体系结构概述"><a href="#堆体系结构概述" class="headerlink" title="堆体系结构概述"></a>堆体系结构概述</h2><ul><li>Heap堆<ul><li>介绍：一个JVM实例只存在一个堆内存，堆内存的大小是可以调节的。类加载器读取了类文件后，需要把类、方法、常变量放到堆内存中，保存所有引用类型的真实信息，以方便执行器执行</li><li>组成部分(<strong>逻辑上划分</strong>)：<ol><li>Young Generation Space(新生区 Young/New)</li><li>Tenure Generation Space(老年区 Old/Tenure)</li><li>Permanent Space(永久区 Perm)<br><img src="%E5%A0%86%E5%86%85%E5%AD%98%E9%80%BB%E8%BE%91%E5%88%92%E5%88%86.png" alt="堆内存逻辑划分"></li></ol></li></ul></li><li>GC过程：<ol><li>新生区是类的诞生、成长和消亡的区域，一个类在这里产生、应用、最后被垃圾回收器收集结束生命。新生区又分为两部分：伊甸区(Eden Space)和幸存者区(Survivor pace)，所有的类都是在伊甸区被new创建出来的。幸存区有两个：0区(Survivor 0 Space)和1区(Survivor 1 Space)</li><li>当伊甸区的空间用完时，程序又需要创建对象，JVM的垃圾回收器将对伊甸区进行垃圾回收(Minor GC)，将伊甸区中的不再被其他对象所引用的对象进行销毁。然后将伊甸区中的剩余对象移动到幸存0区。若幸存0区也满了，再对该区进行垃圾回收，然后移动到1区，如果1区也满了再移动到老年区</li><li>若老年区也满了，那么这时候将发生Major GC(Full GC)进行老年区的内存清理。若老年区执行了Full GC之后发现依然无法进行对象的保存，就会产生OOM异常(OutOfMemoryError)</li></ol></li><li>Minor GC过程(复制 -&gt; 清空 -&gt; 互换)：<br><img src="GC%E8%A7%92%E5%BA%A6%E5%A0%86%E7%9A%84%E5%88%86%E7%B1%BB%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="GC角度堆的分类示意图"><ol><li><strong>Eden、Survivor From区复制到Survivor To区，年龄+1</strong>：首先，当Eden区满的时候会触发首次GC——把还活着的对象拷贝到Survivor From区。当Eden区再次触发GC时会扫描Eden区和From区，对这两个区域进行垃圾回收，经过这次回收后还存活的对象，则直接复制到To区域(如果有对象的年龄已经达到了老年的标准则赋复制老年区)，同时把这些对象的年龄+1</li><li><strong>清空Eden、Survivor From区</strong>：然后，清空Eden和Survivor From区中的对象</li><li><strong>Survivor To区和Survivor From区互换</strong>：最后，Survivor To和Survivor From互换，原Survivor To区成为下一次GC时的Survivor From区。部分对象会在From和To区域中复制来复制去，如此交换15次(由JVM参数MaxTenuringThreshold决定,默认为15)最终如果还是存活，就存入到老年区</li></ol></li><li>方法区(Method Area)<ul><li>介绍：实际而言，方法区(Method Area)和堆一样是各个线程共享的内存区域，它用于存储虚拟机加载的类信息、普通常量、静态常量和编译器编译后的代码等。<strong>虽然JVM规范将方法区描述为堆的一个逻辑部分，但它却还有一个别名叫做Non-Heap(非堆)，目的就是要和堆分开</strong></li><li>方法区的实现：对于HotSpot虚拟机，很多开发者习惯将方法区称之为永久代(Parmanent Gen)，但严格本质上说两者不同，永久代是方法区的一个实现。jdk1.7的版本中，已经将原本放在永久代的字符串常量池移走(永久带是1.7版本的叫法,1.8则为元空间Metaspace)<br><img src="Java7%E5%A0%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="Java7堆体系结构示意图"></li><li>Java7永久区(7及之前)：永久存储区是一个常驻内存区域，用于存放JDK自身所携带的Class、Interface的元数据，也就是说它存储的是运行环境必须的类信息。被装载进此区域的数据是不会被垃圾回收器回收掉的，关闭JVM才会释放此区域所占用的内存</li></ul></li></ul><h2 id="堆参数调优"><a href="#堆参数调优" class="headerlink" title="堆参数调优"></a>堆参数调优</h2><ul><li><p>Java堆：<br><img src="Java7%E5%A0%86%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="Java7堆示意图"><br><img src="Java8%E5%A0%86%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="Java8堆示意图"></p><ol><li>在Java8中永久代已经被移除，被一个称为元空间的区域所取代。元空间的本质和永久代类似</li><li>元空间与永久代之间最大的区别：<strong>永久带使用的JVM的堆内存；Java8以后的元空间并不在虚拟机中，而是使用本机物理内存</strong></li><li>默认情况下，元空间的大小仅受本地内存限制。类的元数据放入Native Memory，字符串池和类的静态变量放入Java堆中，这样可以加载多少类的元数据就不再由MaxPermSize控制而由系统的实际可用空间来控制</li></ol></li><li><p>堆参数(在VM options中指定)</p><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>-Xms</td><td>设置JVM初始内存大小,默认为物理内存的1/64</td></tr><tr><td>-Xmx</td><td>设置JVM最大分配内存,默认为物理内存的1/4</td></tr><tr><td>-XX:+PrintGCDetails</td><td>输出详细的GC处理日志</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回Java虚拟机试图使用的最大内存量</span></span><br><span class="line"><span class="keyword">long</span> maxMemory = Runtime.getRuntime().maxMemory();</span><br><span class="line"><span class="comment">// 返回Java虚拟机中的内存总量</span></span><br><span class="line"><span class="keyword">long</span> totalMemory = Runtime.getRuntime().totalMemory();</span><br><span class="line">System.out.println(<span class="string">"-Xmx:maxMemory = "</span> + maxMemory + <span class="string">"Byte , "</span> + (maxMemory / (<span class="keyword">double</span>) <span class="number">1024</span> / <span class="number">1024</span>) + <span class="string">"MB"</span>);</span><br><span class="line">System.out.println(<span class="string">"-Xms:totalMemory = "</span> + totalMemory + <span class="string">"Byte , "</span> + (totalMemory / (<span class="keyword">double</span>) <span class="number">1024</span> / <span class="number">1024</span>) + <span class="string">"MB"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java.lang.OutOfMemoryError: Java heap space</span></span><br><span class="line"><span class="comment">// byte[] bytes = new byte[40 * 1024 * 1024];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// VM Options: -Xms8m -Xmx8m -XX:+PrintGCDetails</span></span><br><span class="line">String str = <span class="string">"www.sobxiong.com"</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">  str += str + <span class="keyword">new</span> Random().nextInt(<span class="number">88888888</span>) + <span class="keyword">new</span> Random().nextInt(<span class="number">99999999</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[GC (Allocation Failure) [PSYoungGen: 1508K-&gt;496K(2048K)] 1508K-&gt;535K(7680K), 0.0017728 secs] [Times: user=0.01 sys=0.00, real=0.01 secs]</span></span><br><span class="line"><span class="comment">[GC (Allocation Failure) [PSYoungGen: 1882K-&gt;505K(2048K)] 1921K-&gt;797K(7680K), 0.0053175 secs] [Times: user=0.01 sys=0.00, real=0.00 secs]</span></span><br><span class="line"><span class="comment">[GC (Allocation Failure) [PSYoungGen: 2041K-&gt;352K(2048K)] 3331K-&gt;1891K(7680K), 0.0014598 secs] [Times: user=0.00 sys=0.00, real=0.01 secs]</span></span><br><span class="line"><span class="comment">[Full GC (Ergonomics) [PSYoungGen: 1488K-&gt;0K(2048K)] [ParOldGen: 5531K-&gt;1366K(5632K)] 7019K-&gt;1366K(7680K), [Metaspace: 3036K-&gt;3036K(1056768K)], 0.0054889 secs] [Times: user=0.01 sys=0.00, real=0.00 secs]</span></span><br><span class="line"><span class="comment">[GC (Allocation Failure) [PSYoungGen: 1074K-&gt;96K(2048K)] 4436K-&gt;3458K(7680K), 0.0015233 secs] [Times: user=0.01 sys=0.00, real=0.01 secs]</span></span><br><span class="line"><span class="comment">[GC (Allocation Failure) [PSYoungGen: 96K-&gt;96K(2048K)] 3458K-&gt;3458K(7680K), 0.0017007 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]</span></span><br><span class="line"><span class="comment">[Full GC (Allocation Failure) [PSYoungGen: 96K-&gt;0K(2048K)] [ParOldGen: 3362K-&gt;3363K(5632K)] 3458K-&gt;3363K(7680K), [Metaspace: 3055K-&gt;3055K(1056768K)], 0.0047922 secs] [Times: user=0.02 sys=0.00, real=0.00 secs]</span></span><br><span class="line"><span class="comment">[GC (Allocation Failure) [PSYoungGen: 0K-&gt;0K(2048K)] 3363K-&gt;3363K(7680K), 0.0009790 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]</span></span><br><span class="line"><span class="comment">[Full GC (Allocation Failure) [PSYoungGen: 0K-&gt;0K(2048K)] [ParOldGen: 3363K-&gt;3344K(5632K)] 3363K-&gt;3344K(7680K), [Metaspace: 3055K-&gt;3055K(1056768K)], 0.0045256 secs] [Times: user=0.02 sys=0.00, real=0.01 secs]</span></span><br><span class="line"><span class="comment">Heap</span></span><br><span class="line"><span class="comment">PSYoungGen      total 2048K, used 66K [0x00000007bfd80000, 0x00000007c0000000, 0x00000007c0000000)</span></span><br><span class="line"><span class="comment">  eden space 1536K, 4% used [0x00000007bfd80000,0x00000007bfd90978,0x00000007bff00000)</span></span><br><span class="line"><span class="comment">  from space 512K, 0% used [0x00000007bff80000,0x00000007bff80000,0x00000007c0000000)</span></span><br><span class="line"><span class="comment">  to   space 512K, 0% used [0x00000007bff00000,0x00000007bff00000,0x00000007bff80000)</span></span><br><span class="line"><span class="comment">ParOldGen       total 5632K, used 3344K [0x00000007bf800000, 0x00000007bfd80000, 0x00000007bfd80000)</span></span><br><span class="line"><span class="comment">  object space 5632K, 59% used [0x00000007bf800000,0x00000007bfb44040,0x00000007bfd80000)</span></span><br><span class="line"><span class="comment">Metaspace       used 3109K, capacity 4496K, committed 4864K, reserved 1056768K</span></span><br><span class="line"><span class="comment">  class space    used 338K, capacity 388K, committed 512K, reserved 1048576K</span></span><br><span class="line"><span class="comment">Exception in thread "main" java.lang.OutOfMemoryError: Java heap space</span></span><br><span class="line"><span class="comment">  at java.util.Arrays.copyOf(Arrays.java:3332)</span></span><br><span class="line"><span class="comment">  at java.lang.AbstractStringBuilder.ensureCapacityInternal(AbstractStringBuilder.java:124)</span></span><br><span class="line"><span class="comment">  at java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:674)</span></span><br><span class="line"><span class="comment">  at java.lang.StringBuilder.append(StringBuilder.java:208)</span></span><br><span class="line"><span class="comment">  at com.xiong.jvm.Test2.main(Test2.java:12)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不是立刻执行,禁止使用</span></span><br><span class="line"><span class="comment">// System.gc();</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JUC</title>
      <link href="/2020/09/18/ProgrammingLanguage/Java/JUC/"/>
      <url>/2020/09/18/ProgrammingLanguage/Java/JUC/</url>
      
        <content type="html"><![CDATA[<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><ul><li><a href="#JUC是什么">JUC是什么</a></li><li><a href="#Lock接口">Lock接口</a></li><li><a href="#线程间通信">线程间通信</a></li><li><a href="#线程间定制化调用通信">线程间定制化调用通信</a></li><li><a href="#线程八锁">线程八锁</a></li><li><a href="#线程不安全集合">线程不安全集合</a></li><li><a href="#Callable接口">Callable接口</a></li><li><a href="#JUC辅助类">JUC辅助类</a></li><li><a href="#BlockingQueue阻塞队列">BlockingQueue阻塞队列</a></li><li><a href="#ThreadPool线程池">ThreadPool线程池</a></li><li><a href="#Java8流式计算">Java8流式计算</a></li><li><a href="#Java8分支合并">Java8分支合并</a></li><li><a href="#异步回调">异步回调</a></li><li><a href="#volatile">volatile</a></li><li><a href="#CAS">CAS</a></li><li><a href="#值传递和引用传递">值传递和引用传递</a></li><li><a href="#Java锁的类型">Java锁的类型</a></li><li><a href="#死锁及定位分析">死锁及定位分析</a></li></ul><a id="more"></a><h2 id="JUC是什么"><a href="#JUC是什么" class="headerlink" title="JUC是什么"></a>JUC是什么</h2><ul><li><p>JUC介绍：JDK1.5时Java引入的并发编程工具包——java.util.concurrent</p></li><li><p>基础知识回顾：</p><ul><li><p>进程/线程是什么：</p><ul><li>进程：进程是一个具有一定独立功能的程序关于某个数据集合的一次运行活动。它是操作系统动态执行的基本单元，在传统的操作系统中，进程既是基本的分配单元，也是基本的执行单元</li><li>线程：通常在一个进程中可以包含若干个线程，当然一个进程中至少有一个线程，不然没有存在的意义。线程可以利用进程所拥有的资源，在引入线程的操作系统中，通常都是把进程作为分配资源的基本单位，而把线程作为独立运行和独立调度的基本单位，由于线程比进程更小，基本上不拥有系统资源，故对它的调度所付出的开销就会小得多，能更高效的提高系统多个程序间并发执行的程度</li></ul></li><li><p>进程/线程例子：</p><ul><li>进程：QQ.ext、word.exe</li><li>线程：word检查拼写、word容灾备份</li></ul></li><li><p>线程的状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Thread.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> State &#123;</span><br><span class="line">  NEW, <span class="comment">// 创建</span></span><br><span class="line">  RUNNABLE, <span class="comment">// 准备就绪(还需等待OS),Thread实例start()后并不是马上运行,只是进入就绪状态,等待OS</span></span><br><span class="line">  BLOCKED, <span class="comment">// 阻塞</span></span><br><span class="line">  WAITING, <span class="comment">// 等待(一直等下去——不见不散)</span></span><br><span class="line">  TIMED_WAITING, <span class="comment">// 等待(有时限的等待——过时不候)</span></span><br><span class="line">  TERMINATED; <span class="comment">// 终止</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>wait/sleep的区别：</p><ul><li>wait/sleep都可以使当前线程暂停</li><li>wait放开手睡眠，放开手里的锁</li><li>sleep握紧手睡眠，唤醒后手里还有锁</li></ul></li><li><p>并发/并行各自都是什么：</p><ul><li>并发：同一时刻多个线程在访问同一个资源(例子：抢车票)</li><li>并行：多项工作同时执行，之后在汇合(例子：泡脚玩手机)</li></ul></li></ul></li></ul><h2 id="Lock接口"><a href="#Lock接口" class="headerlink" title="Lock接口"></a>Lock接口</h2><ul><li><p>复习Synchronized：</p><ul><li><p><strong>多线程口诀1、2</strong>：</p><ul><li>高内聚低耦合</li><li>线程、操作、资源类</li></ul></li><li><p>实现步骤：</p><ol><li><p>创建资源类</p></li><li><p>资源类里创建同步方法(代码块)</p></li><li><p>创建线程，访问资源</p></li></ol></li><li><p>卖票实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 题目：三个售票员,卖100张票</span></span><br><span class="line"><span class="comment">* 多线程编程的企业级套路 + 模版</span></span><br><span class="line"><span class="comment">* 1、高内聚低耦合</span></span><br><span class="line"><span class="comment">* 2、线程 操作(对外暴露的调用方法) 资源类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SaleTicket</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Ticket ticket = <span class="keyword">new</span> Ticket();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建线程不能直接继承Thread类,因为Java是单继承,资源宝贵,要使用接口方式</span></span><br><span class="line">    <span class="comment">// 如果方法体简单,可以不用继承Runnable接口,而直接采用匿名内部类/lambda表达式</span></span><br><span class="line">    <span class="comment">// 创建线程要使用两个参数Thread(runnable, name)的方式</span></span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">120</span>; i++) ticket.saleTicket();</span><br><span class="line">    &#125;, <span class="string">"A"</span>).start();</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">120</span>; i++) ticket.saleTicket();</span><br><span class="line">    &#125;, <span class="string">"B"</span>).start();</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">120</span>; i++) ticket.saleTicket();</span><br><span class="line">    &#125;, <span class="string">"C"</span>).start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 资源类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">saleTicket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (number &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      System.out.println(Thread.currentThread().getName() + <span class="string">"\t卖出第"</span> + (number--) + <span class="string">"张票\t,还剩下"</span> + number + <span class="string">"张票"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Lock接口：</p><ul><li><p>Lock介绍(摘录自JDK1.8)：Lock implementations provide more extensive locking operations than can be obtained using synchronized methods and statements. They allow more flexible structuring, may have quite different properties, and may support multiple associated Condition objects —— 锁实现提供了比使用同步方法和语句可以获得的更广泛的锁操作。它们允许更灵活的结构，可能具有非常不同的属性，并且可能支持多个关联的条件对象</p></li><li><p>Lock的常用实现类ReentrantLock(可重入锁)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Lock使用模版</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SharedResource</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * synchronized与Lock的区别</span></span><br><span class="line"><span class="comment">  * 1、首先synchronized是java内置关键字,在jvm层面;Lock是个java类</span></span><br><span class="line"><span class="comment">  * 2、synchronized无法判断是否获取锁的状态,Lock可以判断是否获取到锁</span></span><br><span class="line"><span class="comment">  * 3、synchronized会自动释放锁(a:线程执行完同步代码会释放锁;b:线程执行过程中发生异常会释放锁);Lock需在finally中手动释放锁(unlock()方法释放锁),否则容易造成线程死锁</span></span><br><span class="line"><span class="comment">  * 4、用synchronized关键字的两个线程1和线程2,如果当前线程1获得锁,线程2线程等待。如果线程1阻塞,线程2则会一直等待下去;而Lock锁就不一定会等待下去,如果尝试获取不到锁,线程可以不用一直等待就结束了</span></span><br><span class="line"><span class="comment">  * 5.synchronized的锁可重入、不可中断、非公平,而Lock锁可重入、可判断、可公平(默认非公平,二者皆可)</span></span><br><span class="line"><span class="comment">  * 6.Lock锁适合大量同步的代码的同步问题,synchronized锁适合代码少量的同步问题</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">competitionMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// block until condition holds</span></span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// ... method body</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Lock方式卖票实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SaleTicket</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Ticket ticket = <span class="keyword">new</span> Ticket();</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">120</span>; i++) ticket.saleTicket();</span><br><span class="line">    &#125;, <span class="string">"A"</span>).start();</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">120</span>; i++) ticket.saleTicket();</span><br><span class="line">    &#125;, <span class="string">"B"</span>).start();</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">120</span>; i++) ticket.saleTicket();</span><br><span class="line">    &#125;, <span class="string">"C"</span>).start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 资源类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saleTicket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (number &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"\t卖出第"</span> + (number--) + <span class="string">"张票\t,还剩下"</span> + number + <span class="string">"张票"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="线程间通信"><a href="#线程间通信" class="headerlink" title="线程间通信"></a>线程间通信</h2><ul><li><p>题目：两个线程来操作初始值为零的一个变量，实现一个线程对该变量加1,另一个线程对该变量减1。实现交替10个轮次,变量初始值为0</p></li><li><p>线程间通信：</p><ol><li>生产者/消费者模型</li><li>通知等待唤醒机制</li></ol></li><li><p><strong>多线程口诀3</strong>：</p><ol><li>判断</li><li>干活</li><li>通知</li></ol></li><li><p>老版本synchronized实现：</p><ul><li><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cake</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// 1、判断</span></span><br><span class="line">    <span class="keyword">if</span> (number != <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.wait();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2、干活</span></span><br><span class="line">    number++;</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">"\t生产,剩余"</span> + number);</span><br><span class="line">    <span class="comment">// 3、通知</span></span><br><span class="line">    <span class="keyword">this</span>.notifyAll();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">decrement</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// 1、判断</span></span><br><span class="line">    <span class="keyword">if</span> (number == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.wait();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2、干活</span></span><br><span class="line">    number--;</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">"\t消费,剩余"</span> + number);</span><br><span class="line">    <span class="comment">// 3、通知</span></span><br><span class="line">    <span class="keyword">this</span>.notifyAll();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 题目：两个线程来操作初始值为零的一个变量,实现一个线程对该变量加1,另一个线程对该变量减1;实现交替10个轮次,变量初始值为0</span></span><br><span class="line"><span class="comment">* 1、高聚合低耦合前提下,线程操作资源类</span></span><br><span class="line"><span class="comment">* 2、判断/干活/通知</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadWaitNotify</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Cake cake = <span class="keyword">new</span> Cake();</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          cake.increment();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="string">"ProducerA"</span>).start();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          cake.decrement();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="string">"ConsumerA"</span>).start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>结果：符合要求</p></li><li><p>如果换成4个线程(2消费者,2生产者)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只改变main</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  Cake cake = <span class="keyword">new</span> Cake();</span><br><span class="line">  <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        cake.increment();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="string">"ProducerA"</span>).start();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        cake.decrement();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="string">"ConsumerA"</span>).start();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        cake.increment();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="string">"ProducerB"</span>).start();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        cake.decrement();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="string">"ConsumerB"</span>).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>结果：出现错误，有可能生产出大于1的cake来</p></li><li><p>原因：换成4个线程会导致错误——虚假唤醒，因为在Java多线程判断时，不能用if。错误出在了判断上面：如果突然有一个增加cake的线程进入到if里面了，但突然中断了并交出控制权。等到唤醒后由于是if，不需要再次进行验证，而是直接走下去了，所以进行了错误的增加<br><img src="%E8%99%9A%E5%81%87%E5%94%A4%E9%86%92%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="虚假唤醒示意图"></p></li><li><p>解决方法：把所有的资源类的increment()和decrement()方法中的if判断变为while判断</p></li></ul></li><li><p><strong>多线程口诀4</strong>：注意多线程之间的虚假唤醒</p></li><li><p>新版本Lock实现：</p><ul><li><p>新老版本对标：</p><ol><li>synchronized - Lock</li><li>wait - await</li><li>notify - signal</li></ol></li><li><p>Lock示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cake1</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Condition condition = lock.newCondition();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 1、判断</span></span><br><span class="line">      <span class="keyword">while</span> (number != <span class="number">0</span>) &#123;</span><br><span class="line">        condition.await();</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"\t生产,剩余"</span> + number);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 2、干活</span></span><br><span class="line">      number++;</span><br><span class="line">      <span class="comment">// 3、通知</span></span><br><span class="line">      condition.signalAll();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decrement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 1、判断</span></span><br><span class="line">      <span class="keyword">while</span> (number == <span class="number">0</span>) &#123;</span><br><span class="line">        condition.await();</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"\t消费,剩余"</span> + number);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 2、干活</span></span><br><span class="line">      number--;</span><br><span class="line">      <span class="comment">// 3、通知</span></span><br><span class="line">      condition.signalAll();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 题目：两个线程来操作初始值为零的一个变量,实现一个线程对该变量加1,另一个线程对该变量减1;实现交替10个轮次,变量初始值为0</span></span><br><span class="line"><span class="comment">* 1、高聚合低耦合前提下,线程操作资源类</span></span><br><span class="line"><span class="comment">* 2、判断/干活/通知</span></span><br><span class="line"><span class="comment">* 3、多线程交互中,必须要防止多线程的虚假唤醒,也即(判断只能用while,不能用if)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadAwaitSignal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Cake1 cake = <span class="keyword">new</span> Cake1();</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        cake.increment();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="string">"ProducerA"</span>).start();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        cake.decrement();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="string">"ConsumerA"</span>).start();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        cake.increment();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="string">"ProducerB"</span>).start();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        cake.decrement();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="string">"ConsumerB"</span>).start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="线程间定制化调用通信"><a href="#线程间定制化调用通信" class="headerlink" title="线程间定制化调用通信"></a>线程间定制化调用通信</h2><ul><li><p>题目：多线程之间按顺序调用，实现A -&gt; B -&gt; C，三个线程启动,要求如下：AAAAA打印5次，BBBBB打印10次，CCCCC打印15次，以上操作进行10轮</p></li><li><p><strong>多线程口诀5</strong>：标志位</p></li><li><p>实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShareResource</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">1</span>; <span class="comment">// 1 -&gt; A, 2 -&gt; B, 3 -&gt; C</span></span><br><span class="line">  <span class="comment">// 一把锁lock</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">  <span class="comment">// 三把钥匙condition</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Condition conditionA = lock.newCondition();</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Condition conditionB = lock.newCondition();</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Condition conditionC = lock.newCondition();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printFromA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 1、判断</span></span><br><span class="line">      <span class="keyword">while</span> (number != <span class="number">1</span>) &#123;</span><br><span class="line">        conditionA.await();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 2、干活</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        System.out.println(<span class="string">"AAAAA ~~~"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 3、通知(修改标志位,通知下一个)</span></span><br><span class="line">      number = <span class="number">2</span>;</span><br><span class="line">      conditionB.signal();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printFromB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 1、判断</span></span><br><span class="line">      <span class="keyword">while</span> (number != <span class="number">2</span>) &#123;</span><br><span class="line">        conditionB.await();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 2、干活</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        System.out.println(<span class="string">"BBBBB ~~~"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 3、通知(修改标志位,通知下一个)</span></span><br><span class="line">      number = <span class="number">3</span>;</span><br><span class="line">      conditionC.signal();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printFromC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 1、判断</span></span><br><span class="line">      <span class="keyword">while</span> (number != <span class="number">3</span>) &#123;</span><br><span class="line">        conditionC.await();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 2、干活</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++) &#123;</span><br><span class="line">        System.out.println(<span class="string">"CCCCC ~~~"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 3、通知(修改标志位,通知下一个)</span></span><br><span class="line">      number = <span class="number">1</span>;</span><br><span class="line">      conditionA.signal();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 题目：多线程之间按顺序调用,实现A -&gt; B -&gt; C,三个线程启动,要求如下：AAAAA打印5次,BBBBB打印10次,CCCCC打印15次,以上操作进行10轮</span></span><br><span class="line"><span class="comment">* 1、高聚合低耦合前提下,线程操作资源类</span></span><br><span class="line"><span class="comment">* 2、判断/干活/通知</span></span><br><span class="line"><span class="comment">* 3、多线程交互中,必须要防止多线程的虚假唤醒,也即(判断只能用while,不能用if)</span></span><br><span class="line"><span class="comment">* 4、标志位</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadOrderAccess</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ShareResource shareResource = <span class="keyword">new</span> ShareResource();</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) shareResource.printFromA();</span><br><span class="line">    &#125;, <span class="string">"A"</span>).start();</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) shareResource.printFromB();</span><br><span class="line">    &#125;, <span class="string">"B"</span>).start();</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) shareResource.printFromC();</span><br><span class="line">    &#125;, <span class="string">"C"</span>).start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="线程八锁"><a href="#线程八锁" class="headerlink" title="线程八锁"></a>线程八锁</h2><ul><li><p>八锁示例：</p><ul><li><p>情况1(标准访问)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Send Email ~~~"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Send Message ~~~"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、标准访问,请问先打印邮件还是短信? 邮件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lock8</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Phone phone = <span class="keyword">new</span> Phone();</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        phone.sendEmail();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="string">"A"</span>).start();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        phone.sendMessage();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="string">"B"</span>).start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>情况2(其一线程sleep)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    TimeUnit.SECONDS.sleep(<span class="number">4</span>);</span><br><span class="line">    System.out.println(<span class="string">"Send Email ~~~"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Send Message ~~~"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、邮件方法暂停4秒,请问先打印邮件还是短信? 邮件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Phone phone = <span class="keyword">new</span> Phone();</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        phone.sendEmail();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="string">"A"</span>).start();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        phone.sendMessage();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="string">"B"</span>).start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>情况3(新增一个普通方法)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    TimeUnit.SECONDS.sleep(<span class="number">4</span>);</span><br><span class="line">    System.out.println(<span class="string">"Send Email ~~~"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Send Message ~~~"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Hello ~~~"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、在2的基础上,新增并使用一个普通方法hello(),请问先打印邮件还是hello? hello</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Phone phone = <span class="keyword">new</span> Phone();</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        phone.sendEmail();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="string">"A"</span>).start();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        phone.hello();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="string">"B"</span>).start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>情况4(两个对象)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    TimeUnit.SECONDS.sleep(<span class="number">4</span>);</span><br><span class="line">    System.out.println(<span class="string">"Send Email ~~~"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Send Message ~~~"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、两部手机,请问先打印邮件还是短信? 短信</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Phone phone = <span class="keyword">new</span> Phone();</span><br><span class="line">    Phone phone1 = <span class="keyword">new</span> Phone();</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        phone.sendEmail();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="string">"A"</span>).start();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        phone1.sendMessage();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="string">"B"</span>).start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>情况5(改为静态同步方法)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    TimeUnit.SECONDS.sleep(<span class="number">4</span>);</span><br><span class="line">    System.out.println(<span class="string">"Send Email ~~~"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Send Message ~~~"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5、两个静态同步方法,同一部手机,请问先打印邮件还是短信? 邮件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Phone phone = <span class="keyword">new</span> Phone();</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        phone.sendEmail();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="string">"A"</span>).start();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        phone.sendMessage();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="string">"B"</span>).start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>情况6(两个对象调用静态同步方法)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    TimeUnit.SECONDS.sleep(<span class="number">4</span>);</span><br><span class="line">    System.out.println(<span class="string">"Send Email ~~~"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Send Message ~~~"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6、两个静态同步方法,两部手机,请问先打印邮件还是短信? 邮件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Phone phone = <span class="keyword">new</span> Phone();</span><br><span class="line">    Phone phone1 = <span class="keyword">new</span> Phone();</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        phone.sendEmail();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="string">"A"</span>).start();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        phone1.sendMessage();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="string">"B"</span>).start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>情况7(一个静态同步方法,一个普通同步方法)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    TimeUnit.SECONDS.sleep(<span class="number">4</span>);</span><br><span class="line">    System.out.println(<span class="string">"Send Email ~~~"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Send Message ~~~"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7、一个普通同步方法,一个静态同步方法,一部手机,请问先打印邮件还是短信? 短信</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Phone phone = <span class="keyword">new</span> Phone();</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        phone.sendEmail();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="string">"A"</span>).start();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        phone.sendMessage();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="string">"B"</span>).start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>情况8(一个静态同步方法,一个普通同步方法,两个对)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    TimeUnit.SECONDS.sleep(<span class="number">4</span>);</span><br><span class="line">    System.out.println(<span class="string">"Send Email ~~~"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Send Message ~~~"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 8、一个普通同步方法,一个静态同步方法,两部手机,请问先打印邮件还是短信? 短信</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Phone phone = <span class="keyword">new</span> Phone();</span><br><span class="line">    Phone phone1 = <span class="keyword">new</span> Phone();</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        phone.sendEmail();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="string">"A"</span>).start();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        phone1.sendMessage();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="string">"B"</span>).start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>八锁分析：</p><ul><li>情况1、2：如果一个对象有多个synchronized方法，某个时刻内只要有一个线程去调用当前对象的一个synchronized方法，那么其它线程只能等待。换句话说，某个时刻内只能有唯一一个线程去访问这些synchronized方法。锁作用的是当前对象this，this被锁定后其它的线程都不能进入到当前对象的其它的synchronized方法(情况1、2都进入了sendEmail()方法,因此不响应sendMessage()方法)</li><li>情况3、4：普通方法和同步锁无关，一个线程调用了synchronized方法，另一个线程可以同时调用普通方法；当换成两个对象后，synchronized锁的是对象实例，而当前有两个实例，锁的就不是同一把锁了，因此sendMessage先打印</li><li>情况5、6：对于静态同步方法，锁是当前类的Class对象，对于同一个Phone类锁是相同的(Phone.class)，因此进入sendEmail()方法后不会响应sendMessage()方法，而是等待sendEmail()方法执行完毕</li><li>情况7、8：对于普通同步方法和静态同步方法，他们锁的对象不同，普通同步方法锁的是当前对象实例(Phone的一个实例对象)，而静态同步方法锁的是当前类的Class对象(Phone.class)。他们锁的对象不同，不会相互影响，因此先打印sendMessage</li></ul></li><li><p><strong>线程八锁总结</strong>：</p><ul><li>synchronized实现同步的基础：Java中的每一个对象都可以作为锁。具体表现为以下3种形式：<ul><li>对于普通同步方法，锁是当前实例对象</li><li>对于静态同步方法，锁是当前类的Class对象</li><li>对于同步方法块，锁是Synchonized括号里配置的对象</li></ul></li><li>当一个线程试图访问同步代码块时，它首先必须得到锁，退出或抛出异常时必须释放锁。也就是说如果一个实例对象的普通同步方法获取锁后，该实例对象的其他普通同步方法必须等待已获取锁的方法释放锁后才能获取锁</li><li>其他实例对象的普通同步方法跟当前实例对象的普通同步方法用的是不同的锁(不同的实例对象)，所以无须等待当前实例对象已获取锁的普通同步方法释放锁就可以获取他们自己的锁</li><li>所有静态同步方法用的是同一把锁——类对象本身，普通同步方法的锁和静态同步方法的锁是两个不同的对象，所以静态同步方法与普通同步方法之间是不会有竞态条件的。但一旦一个静态同步方法获取锁后，其他静态同步方法都必须等待该方法释放锁后才能获取锁(而不管是同一个实例对象的静态同步方法之间，还是不同实例对象的静态同步方法之间，只要它们是同一个类的实例对象)</li></ul></li></ul><h2 id="线程不安全集合"><a href="#线程不安全集合" class="headerlink" title="线程不安全集合"></a>线程不安全集合</h2><ul><li><p>线程不安全的集合</p><ul><li><p>ArrayList</p><ul><li><p>情况1：3个线程同时读写ArrayList(结果：运行基本不报错,但是会出现List中有时内容为null或者集合元素个数不等于3的情况)</p></li><li><p>情况2：30个线程同时读写ArrayList(结果：运行报错——java.util.ConcurrentModificationException并发修改异常)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span> or <span class="number">30</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      list.add(UUID.randomUUID().toString().substring(<span class="number">0</span>, <span class="number">8</span>));</span><br><span class="line">      System.out.println(list);</span><br><span class="line">    &#125;, <span class="string">"list"</span> + i).start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>出错原因：ArrayList本身就是线程不安全的(为了性能考虑,不加锁性能提升但会出错误)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ArrayList.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">  ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">  elementData[size++] = e;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>解决方案：</p><ol><li><p>改用Vector(线程安全,加了synchronized,加锁数据一致但性能下降;性能较差,不要使用)</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vector.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">  modCount++;</span><br><span class="line">  ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">  elementData[elementCount++] = e;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Collections工具类<br> 少量数据可以使用，通过在ArrayList外包装一层同步机制<br> <code>Collections.synchronizedList(new ArrayList&lt;&gt;())</code></p></li><li><p>CopyOnWriteArrayList(推荐使用)<br> CopyOnWrite容器即写时复制的容器。往一个容器添加元素的时候，不直接往当前容器Object[]添加，而是先将当前容器Object[]进行copy，复制出一个新的容器Object[] newElements，然后向新的容器Object[] newElements里添加元素。添加元素后，再将原容器的引用指向新的容器setArray(newElements)<br> 这样做的好处是可以对CopyOnWrite容器进行并发的读，而不需要加锁，因为当前容器不会添加任何元素。所以CopyOnWrite容器是一种读写分离的思想，读和写不同的容器  </p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CopyOnWriteArrayList.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">  <span class="comment">// 加锁</span></span><br><span class="line">  lock.lock();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    Object[] elements = getArray();</span><br><span class="line">    <span class="keyword">int</span> len = elements.length;</span><br><span class="line">    <span class="comment">// copy原始数据</span></span><br><span class="line">    Object[] newElements = Arrays.copyOf(elements, len + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 新增数据</span></span><br><span class="line">    newElements[len] = e;</span><br><span class="line">    <span class="comment">// 引用更新</span></span><br><span class="line">    setArray(newElements);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// 解锁</span></span><br><span class="line">    lock.unlock();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul></li><li><p>HashSet(HashSet底层就是HashMap)</p><ul><li><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// new HashSet&lt;&gt;()</span></span><br><span class="line">  <span class="comment">// Collections.synchronizedSet(new HashSet&lt;&gt;())</span></span><br><span class="line">  <span class="comment">// new CopyOnWriteArraySet&lt;&gt;()</span></span><br><span class="line">  Set&lt;String&gt; set = <span class="keyword">new</span> CopyOnWriteArraySet&lt;&gt;();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      set.add(UUID.randomUUID().toString().substring(<span class="number">0</span>, <span class="number">8</span>));</span><br><span class="line">      System.out.println(set);</span><br><span class="line">    &#125;, <span class="string">"set"</span> + i).start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>解决方案：</p><ol><li><p>Collections工具类<br> <code>Collections.synchronizedSet(new HashSet&lt;&gt;())</code></p></li><li><p>CopyOnWriteArraySet<br> 底层还是CopyOnWriteArrayList</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyOnWriteArraySet</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">5457747651344034263L</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> CopyOnWriteArrayList&lt;E&gt; al;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Creates an empty set.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">CopyOnWriteArraySet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    al = <span class="keyword">new</span> CopyOnWriteArrayList&lt;E&gt;();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul></li><li><p>HashMap</p><ul><li><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// new HashMap&lt;&gt;()</span></span><br><span class="line">  <span class="comment">// Collections.synchronizedMap(new HashMap&lt;&gt;())</span></span><br><span class="line">  <span class="comment">// new ConcurrentHashMap&lt;&gt;()</span></span><br><span class="line">  Map&lt;String, String&gt; map = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">300</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      map.put(Thread.currentThread().getName(), UUID.randomUUID().toString().substring(<span class="number">0</span>, <span class="number">8</span>));</span><br><span class="line">      System.out.println(map);</span><br><span class="line">    &#125;, <span class="string">"map"</span> + i).start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>解决方案：</p><ol><li>Collections工具类<br> <code>Collections.synchronizedMap(new HashMap&lt;&gt;())</code></li><li>ConcurrentHashMap</li></ol></li></ul></li></ul></li></ul><h2 id="Callable接口"><a href="#Callable接口" class="headerlink" title="Callable接口"></a>Callable接口</h2><ul><li><p>获得多线程的方法有几种?</p><ol><li>继承Thread类(不建议使用)</li><li>实现Runnale接口</li><li>实现Callable接口</li><li>从线程池获取</li></ol></li><li><p>Callable是什么：一个JDK1.5推出的线程接口，比Runnable更强大。是一个函数式接口，可用作lambda表达式。能在线程执行完成后返回结果(应用场景一般在于批处理业务,如转账时需要返回结果的状态码,代表本次操作的成功与否)</p></li><li><p>与Runnable的区别：</p><ol><li>是否有返回值</li><li>是否会抛出异常</li><li>落地方法不同(run()/call())</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread2</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; <span class="keyword">return</span> <span class="keyword">null</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>怎么使用：</p><ol><li><p><del>直接替换runnable：不可行，Thread的构造方法传参都是Runnable接口，没有Callable接口</del></p></li><li><p>找中间人FutureTask：FutureTask类实现了Runnable接口，并且接收一个Callable接口作为构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// FutureTask.class</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureTask</span>&lt;<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">RunnableFuture</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">FutureTask</span><span class="params">(Callable&lt;V&gt; callable)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (callable == <span class="keyword">null</span>)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">this</span>.callable = callable;</span><br><span class="line">    <span class="keyword">this</span>.state = NEW;       <span class="comment">// ensure visibility of callable</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread2</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    TimeUnit.SECONDS.sleep(<span class="number">4</span>);</span><br><span class="line">    System.out.println(<span class="string">"~~~"</span> + Thread.currentThread().getName() + <span class="string">" Come in call() ~~~"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"1024"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 多线程第3种创建多线程的方式</span></span><br><span class="line"><span class="comment">* get()方法一般请放在最后一行,它会阻塞线程</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallableDemo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">    FutureTask&lt;String&gt; futureTask = <span class="keyword">new</span> FutureTask&lt;&gt;(<span class="keyword">new</span> MyThread2());</span><br><span class="line">    <span class="keyword">new</span> Thread(futureTask, <span class="string">"A"</span>).start();</span><br><span class="line">    <span class="keyword">new</span> Thread(futureTask, <span class="string">"B"</span>).start();</span><br><span class="line">    <span class="comment">// System.out.println(Thread.currentThread().getName() + "计算中~~~");</span></span><br><span class="line">    <span class="comment">// 使用类似自旋锁的方式判断是否运行完毕</span></span><br><span class="line">    <span class="keyword">while</span> (!futureTask.isDone())&#123;</span><br><span class="line">        TimeUnit.MILLISECONDS.sleep(<span class="number">500</span>);</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"计算中~~~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(futureTask.get());</span><br><span class="line">    System.out.println(futureTask.get());</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">"计算完成~~~"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>运行结果如下</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">main计算中~~~</span><br><span class="line">main计算中~~~</span><br><span class="line">main计算中~~~</span><br><span class="line">main计算中~~~</span><br><span class="line">main计算中~~~</span><br><span class="line">main计算中~~~</span><br><span class="line">main计算中~~~</span><br><span class="line">~~~A Come in call() ~~~</span><br><span class="line">main计算中~~~</span><br><span class="line">1024</span><br><span class="line">1024</span><br><span class="line">main计算完成~~~</span><br></pre></td></tr></table></figure><p>说明：多个线程执行一个FutureTask时只会计算一次，结果缓存，因此Come in call()方法只打印一次。如果需要两个线程同时计算任务时，需要定义两个futureTask</p></li></ol></li><li><p>FutureTask/Callable应用场景：在主线程中需要执行比较耗时的操作但又不想阻塞主线程时，可把这些操作交给FutureTask对象在后台完成。当主线程将来需要操作结果时可以通过FutureTask对象获得后台作业的计算结果或者执行状态。一般FutureTask多用于耗时的计算任务，主线程可在完成自己的任务后再去获取结果。仅在计算完成时才能检索结果；如果计算尚未完成，则会阻塞get()方法。get()方法获取结果只有在计算完成时获取，否则会阻塞直到任务转入完成状态，最后返回结果或者抛出异常。一旦计算完成，就不会再重新开始或取消计算，如果再次调用结果方法，会将缓存的结果直接返回</p></li></ul><h2 id="JUC辅助类"><a href="#JUC辅助类" class="headerlink" title="JUC辅助类"></a>JUC辅助类</h2><ul><li><p>CountDownLatch(减少计数)</p><ul><li><p>概念：让一些线程阻塞直到另一些线程完成一系列操作才被唤醒</p></li><li><p>原理：CountDownLatch主要有两个方————countDown()以及await()。当一个或多个线程调用await()方法时，这些线程会阻塞。其它线程调用countDown()方法会将计数器减1(调用countDown()方法的线程不会阻塞)，当计数器的值变为0时，因await()方法阻塞的线程会被唤醒，继续执行</p></li><li><p>例子：</p><ul><li><p>场景：假设一个自习室里有7个人，其中有一个是班长，班长的主要职责就是在其它6个同学走了后关灯、锁教室门然后走人，因此班长是需要最后一个走的。需要一种方法能够控制班长这个线程最后一个执行，而其它线程是随机执行的</p></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要求：所有子线程完成后(所有同学离开教室),主线程退出(班长离开教室)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountDownLatchDemo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">6</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">int</span> finalI = i;</span><br><span class="line">      <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          TimeUnit.SECONDS.sleep(finalI);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" 离开教室~~~"</span>);</span><br><span class="line">        countDownLatch.countDown();</span><br><span class="line">      &#125;, UUID.randomUUID().toString().substring(<span class="number">0</span>, <span class="number">8</span>)).start();</span><br><span class="line">    &#125;</span><br><span class="line">    countDownLatch.await();</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">" 班长关门走人~~~"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 常规方法无法完成,会有乱序</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeDoor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">new</span> Thread(() -&gt; System.out.println(Thread.currentThread().getName() + <span class="string">" 离开教室~~~"</span>), i + <span class="string">""</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">" 班长关门走人~~~"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>运行结果如下</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 普通版本</span><br><span class="line">0 离开教室~~~</span><br><span class="line">2 离开教室~~~</span><br><span class="line">3 离开教室~~~</span><br><span class="line">1 离开教室~~~</span><br><span class="line">main 班长关门走人~~~</span><br><span class="line">4 离开教室~~~</span><br><span class="line">5 离开教室~~~</span><br><span class="line"></span><br><span class="line"># CountDownLatch版本</span><br><span class="line">a4055b7f 离开教室~~~</span><br><span class="line">816b8658 离开教室~~~</span><br><span class="line">1876e706 离开教室~~~</span><br><span class="line">9657fae5 离开教室~~~</span><br><span class="line">4833f0f9 离开教室~~~</span><br><span class="line">6d229a84 离开教室~~~</span><br><span class="line">main 班长关门走人~~~</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>CyclicBarrier(循环栅栏)</p><ul><li><p>概念：让一些线程阻塞直到另一些线程完成一系列操作才被唤醒。方式与CountDownLatch相反，做加法，开始为0，加到某个值时才开始执行</p></li><li><p>原理：CyclicBarrier的字面意思是可循环(Cyclic)使用的屏障(Barrier)。它做的事情是让一组线程到达一个屏障(也可以叫同步点)时被阻塞，直到最后一个线程到达屏障时，屏障才会开门；此时所有被屏障拦截的线程才会继续干活。线程进入屏障通过CyclicBarrier的await()方法</p></li><li><p>例子：</p><ul><li><p>场景：集齐7颗龙珠召唤神龙</p></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要求：子线程全部完成后再运行指定方法(集齐七棵龙珠召唤神龙)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CyclicBarrierDemo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    CyclicBarrier cyclicBarrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">7</span>, () -&gt; System.out.println(Thread.currentThread().getName() + <span class="string">" 召唤神龙~~~"</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">7</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">int</span> finalI = i;</span><br><span class="line">      <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          TimeUnit.SECONDS.sleep(finalI);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"收集到第"</span> + finalI + <span class="string">"颗龙珠~~~"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          cyclicBarrier.await();</span><br><span class="line">          <span class="comment">// 在7个线程中最后一个线程到达await()屏障,之后下面的语句和cyclicBarrier中设定的动作才会被调度执行</span></span><br><span class="line">          System.out.println(Thread.currentThread().getName() + <span class="string">"收集第"</span> + finalI + <span class="string">"颗龙珠完毕~~~"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, i + <span class="string">""</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>运行结果如下</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1 收集到第1颗龙珠~~~</span><br><span class="line">2 收集到第2颗龙珠~~~</span><br><span class="line">3 收集到第3颗龙珠~~~</span><br><span class="line">4 收集到第4颗龙珠~~~</span><br><span class="line">5 收集到第5颗龙珠~~~</span><br><span class="line">6 收集到第6颗龙珠~~~</span><br><span class="line">7 收集到第7颗龙珠~~~</span><br><span class="line">7 召唤神龙~~~</span><br><span class="line">7 收集第7颗龙珠完毕~~~</span><br><span class="line">1 收集第1颗龙珠完毕~~~</span><br><span class="line">3 收集第3颗龙珠完毕~~~</span><br><span class="line">2 收集第2颗龙珠完毕~~~</span><br><span class="line">6 收集第6颗龙珠完毕~~~</span><br><span class="line">5 收集第5颗龙珠完毕~~~</span><br><span class="line">4 收集第4颗龙珠完毕~~~</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>Semaphore(信号量)</p><ul><li><p>概念：信号量，用于两个目的：</p><ol><li>用于共享资源的互斥使用</li><li>用于并发线程数的控制</li></ol></li><li><p>原理：在信号量上了定义两种操作：acquire()————获取，当一个线程调用acquire()操作时，它要么成功并获取信号量(信号量减1)，要么一直等下去直到有线程释放信号量或超时；release()————释放，会将信号量的值加1，然后唤醒等待的线程</p></li><li><p>例子：</p><ul><li><p>场景：抢车位，假设有6辆车，3个停车位</p></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要求：只有三个线程，但是希望六个线程都能够运行(有3个空闲车位,共有6辆车,一开始3辆车抢到,之后开走1辆另外的车占1个车位)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SemaphoreDemo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 模拟资源类,有3个空车位</span></span><br><span class="line">    <span class="comment">// false表示非公平锁,默认也是非公平锁</span></span><br><span class="line">    Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">3</span>, <span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">int</span> finalI = i;</span><br><span class="line">      <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 获取信号量(车位)</span></span><br><span class="line">          semaphore.acquire();</span><br><span class="line">          System.out.println(Thread.currentThread().getName() + <span class="string">" 抢到了车位 ~~~"</span>);</span><br><span class="line">          TimeUnit.SECONDS.sleep(finalI);</span><br><span class="line">          System.out.println(Thread.currentThread().getName() + <span class="string">" 离开了车位 ~~~"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          <span class="comment">// 释放信号量(车位)</span></span><br><span class="line">          semaphore.release();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, i + <span class="string">"号车"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>运行结果如下</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">0号车 抢到了车位 ~~~</span><br><span class="line">2号车 抢到了车位 ~~~</span><br><span class="line">1号车 抢到了车位 ~~~</span><br><span class="line">0号车 离开了车位 ~~~</span><br><span class="line">3号车 抢到了车位 ~~~</span><br><span class="line">1号车 离开了车位 ~~~</span><br><span class="line">4号车 抢到了车位 ~~~</span><br><span class="line">2号车 离开了车位 ~~~</span><br><span class="line">5号车 抢到了车位 ~~~</span><br><span class="line">3号车 离开了车位 ~~~</span><br><span class="line">4号车 离开了车位 ~~~</span><br><span class="line">5号车 离开了车位 ~~~</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="BlockingQueue阻塞队列"><a href="#BlockingQueue阻塞队列" class="headerlink" title="BlockingQueue阻塞队列"></a>BlockingQueue阻塞队列</h2><ul><li><p>阻塞队列介绍：<br>首先是一个队列，大致的数据结构如下图所示：<br><img src="%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="阻塞队列示意图"></p><ol><li>线程1往阻塞队列里添加元素，线程2从阻塞队列里移除元素</li><li><code>当队列是空的，从队列中获取元素的操作将会被阻塞</code></li><li><code>当队列是满的，从队列中添加元素的操作将会被阻塞</code></li><li>试图从空的队列中获取元素的线程将会被阻塞，直到其他线程往空的队列插入新的元素</li><li>试图向已满的队列中添加新元素的线程将会被阻塞，直到其他线程从队列中移除一个或多个元素，或者完全清空使队列变得空闲起来，再进行后续新增</li></ol></li><li><p>阻塞的解释：在多线程领域，所谓的阻塞就是指在某些情况下线程会被挂起，但一旦条件满足，被挂起的线程又会自动被唤起</p></li><li><p>阻塞队列的好处：</p><ol><li>不需要关心什么时候需要阻塞线程，什么时候需要唤醒线程，为这一切BlockingQueue都一手包办了</li><li>在concurrent包发布以前，多线程环境下每个程序员都必须去自己控制这些细节，尤其还要兼顾效率和线程安全，而这会给程序开发带来不小的复杂度</li></ol></li><li><p>阻塞队列种类：</p><ul><li>继承图：<br><img src="%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97%E7%BB%A7%E6%89%BF%E5%9B%BE.png" alt="阻塞队列继承图"></li><li>各实现类介绍：<ol><li><strong>ArrayBlockingQueue</strong>：由数组结构组成的有界阻塞队列</li><li><strong>LinkedBlockingQueue</strong>：由链表结构组成的有界(但大小默认值为integer.MAX_VALUE)的阻塞队列</li><li>PriorityBlockingQueue：支持优先级排序的无界阻塞队列</li><li>DelayQueue：使用优先级队列实现的延迟无界阻塞队列</li><li><strong>SynchronousQueue</strong>：不存储元素的阻塞队列，也即单个元素的队列(生产一个,消费一个,不存储元素,不消费不生产)</li><li>LinkedTransferQueue：由链表组成的无界阻塞队列</li><li>LinkedBlockingDeque：由链表组成的双向阻塞队列</li></ol></li></ul></li><li><p>阻塞队列核心方法：<br><img src="%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97%E6%A0%B8%E5%BF%83%E6%96%B9%E6%B3%95.png" alt="阻塞队列核心方法"></p><table><thead><tr><th>方法类型</th><th>解释</th></tr></thead><tbody><tr><td><strong>抛出异常</strong></td><td><strong>当阻塞队列满时，再往队列里add插入元素会抛出异常IllegalStateException:Queue full；当阻塞队列空时，再往队列里remove移除元素会抛出异常NoSuchElementException</strong></td></tr><tr><td>特殊值</td><td>插入方法————成功ture，失败false；移除方法————成功返回出队列的元素，队列里没有就返回null</td></tr><tr><td>一直阻塞</td><td>当阻塞队列满时，生产者线程继续往队列里put元素，队列会一直阻塞生产者线程直到put数据成功(元素被消费)或响应中断退出；当阻塞队列空时，消费者线程试图从队列里take元素，队列会一直阻塞消费者线程直到队列可用(元素被生产)</td></tr><tr><td>超时退出</td><td>当阻塞队列满时，队列会阻塞生产者线程一定时间，超过限时后生产者线程会退出</td></tr></tbody></table></li><li><p>用处</p><ol><li><p>线程池</p></li><li><p>消息中间件</p></li><li><p>生产者消费者模式</p><ul><li><p>需求：一个初始值为0的变量，两个线程对其交替操作，一个加1，一个减1，来五轮</p></li><li><p>多线程口诀：</p><ol><li>线程、操作、资源类</li><li>判断、干活、通知</li><li>防止虚假唤醒机制</li></ol></li><li><p>传统版：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShareData</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Condition condition = lock.newCondition();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 加锁</span></span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 循环判断</span></span><br><span class="line">      <span class="keyword">while</span> (num != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 等待,不生产</span></span><br><span class="line">        condition.await();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 干活</span></span><br><span class="line">      num++;</span><br><span class="line">      System.out.println(Thread.currentThread().getName() + <span class="string">"\t"</span> + num);</span><br><span class="line">      <span class="comment">// 通知唤醒</span></span><br><span class="line">      condition.signalAll();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="comment">// 解锁</span></span><br><span class="line">      lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deIncrement</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 加锁</span></span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 判断</span></span><br><span class="line">      <span class="keyword">while</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 等待,不生产</span></span><br><span class="line">        condition.await();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 干活</span></span><br><span class="line">      num--;</span><br><span class="line">      System.out.println(Thread.currentThread().getName() + <span class="string">"\t"</span> + num);</span><br><span class="line">      <span class="comment">// 通知唤醒</span></span><br><span class="line">      condition.signalAll();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="comment">// 解锁</span></span><br><span class="line">      lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProdConsumerTraditionDemo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ShareData shareData = <span class="keyword">new</span> ShareData();</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          shareData.increment();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="string">"t1"</span>).start();</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          shareData.deIncrement();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="string">"t2"</span>).start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>运行结果如下</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">t1 1</span><br><span class="line">t2 0</span><br><span class="line">t1 1</span><br><span class="line">t2 0</span><br><span class="line">t1 1</span><br><span class="line">t2 0</span><br><span class="line">t1 1</span><br><span class="line">t2 0</span><br></pre></td></tr></table></figure></li><li><p>阻塞队列版：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyResource</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 默认开启,进行生产/消费</span></span><br><span class="line">  <span class="comment">// volatile修饰,保证多线程内存可见性</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger atomicInteger = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">  <span class="comment">// 依赖注入,定义接口,而非实现</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> BlockingQueue&lt;String&gt; blockingQueue;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MyResource</span><span class="params">(BlockingQueue&lt;String&gt; blockingQueue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.blockingQueue = blockingQueue;</span><br><span class="line">    System.out.println(blockingQueue.getClass().getName());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myProduce</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    String data;</span><br><span class="line">    <span class="keyword">boolean</span> returnValue;</span><br><span class="line">    <span class="comment">// 多线程环境的判断一定要使用while进行,防止出现虚假唤醒</span></span><br><span class="line">    <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">      data = atomicInteger.incrementAndGet() + <span class="string">""</span>;</span><br><span class="line">      returnValue = blockingQueue.offer(data, <span class="number">2L</span>, TimeUnit.SECONDS);</span><br><span class="line">      <span class="keyword">if</span> (returnValue) &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" insert "</span> + data + <span class="string">" succeed~~~"</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" insert "</span> + data + <span class="string">" fail~~~"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">" myProduce() finish~~~"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myConsume</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    String result;</span><br><span class="line">    <span class="comment">// 多线程环境的判断一定要使用while进行,防止出现虚假唤醒</span></span><br><span class="line">    <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">      result = blockingQueue.poll(<span class="number">2L</span>, TimeUnit.SECONDS);</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">null</span> == result || result.isEmpty()) &#123;</span><br><span class="line">        flag = <span class="keyword">false</span>;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" over 2 seconds"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(Thread.currentThread().getName() + <span class="string">" get "</span> + result + <span class="string">" succeed~~~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">" myConsume() finish~~~"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.flag = <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProduceConsumeBlockQueueDemo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    MyResource myResource = <span class="keyword">new</span> MyResource(<span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">10</span>));</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      System.out.println(Thread.currentThread().getName() + <span class="string">" produce thread start~~~"</span>);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        myResource.myProduce();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="string">"Produce Thread"</span>).start();</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      System.out.println(Thread.currentThread().getName() + <span class="string">" Consume thread start~~~"</span>);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        myResource.myConsume();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="string">"Consume Thread"</span>).start();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">      myResource.stop();</span><br><span class="line">      System.out.println(<span class="string">"Main Stop()~~~"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>运行结果如下</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">java.util.concurrent.ArrayBlockingQueue</span><br><span class="line">Produce Thread produce thread start~~~</span><br><span class="line">Consume Thread Consume thread start~~~</span><br><span class="line">Produce Thread insert 1 succeed~~~</span><br><span class="line">Consume Thread get 1 succeed~~~</span><br><span class="line">Produce Thread insert 2 succeed~~~</span><br><span class="line">Consume Thread get 2 succeed~~~</span><br><span class="line">Produce Thread insert 3 succeed~~~</span><br><span class="line">Consume Thread get 3 succeed~~~</span><br><span class="line">Produce Thread insert 4 succeed~~~</span><br><span class="line">Consume Thread get 4 succeed~~~</span><br><span class="line">Produce Thread insert 5 succeed~~~</span><br><span class="line">Consume Thread get 5 succeed~~~</span><br><span class="line">Main Stop()~~~</span><br><span class="line">Produce Thread myProduce() finish~~~</span><br><span class="line">Consume Thread over 2 seconds</span><br></pre></td></tr></table></figure></li></ul></li></ol></li></ul><h2 id="ThreadPool线程池"><a href="#ThreadPool线程池" class="headerlink" title="ThreadPool线程池"></a>ThreadPool线程池</h2><ul><li><p>为什么使用线程池：主要特点有线程复用、控制最大并发数、管理线程<br>线程池做的主要工作就是控制运行的线程的数量，处理过程中将任务放入到队列中，然后线程创建后，启动这些任务，如果线程数量超过了最大数量则排队等候，等其它线程执行完毕，再从队列中取出任务来执行</p><ol><li>降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的销耗</li><li>提高响应速度。当任务到达时，任务可以不需要等待线程创建就能立即执行</li><li>提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会销耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控</li></ol></li><li><p>线程池如何使用：</p><ul><li>线程池类继承图：<br><img src="%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%B1%BB%E7%BB%A7%E6%89%BF%E5%9B%BE.png" alt="线程池类继承图"></li><li>获取线程池的几种方式：<ol><li>Executors.newFixedThreadPool(int)：创建一个具有n个固定线程的线程池<ul><li>执行长期的任务，性能较好</li><li>创建一个<strong>定长线程池</strong>，可控制线程数最大并发数，超出的线程会在队列中等待</li><li>corePoolSize和MaxmumPoolSize是相等的，为输入的n；使用的底层阻塞队列是LinkedBlockingQueue</li></ul></li><li>Executors.newSingleThreadExecutor()：创建一个只有1个线程的单线程池<ul><li>一个任务一个任务执行的场景</li><li>创建一个<strong>单线程化的线程池</strong>，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序执行</li><li>corePoolSize和MaxmumPoolSize都设置为1；使用的底层阻塞队列是<strong>LinkedBlockingQueue</strong></li></ul></li><li>Executors.newCachedThreadPool()：创建一个可扩容的线程池<ul><li>使用执行很多短期异步的小程序或负载较轻的服务器</li><li>创建一个<strong>可缓存线程池</strong>，如果线程长度超过处理需要，可灵活回收空闲线程。如无线程可回收，则新建新线程</li><li>corePoolSize设置为0，maxmumPoolSize设置为Integer.MAX_VALUE；使用的底层阻塞队列是<strong>SynchronousQueue</strong>；来了任务就创建线程运行，如果线程空闲超过传入指定的keepAliveTime时间，就销毁线程</li></ul></li><li>Executors.newScheduledThreadPool(int)：创建周期性执行任务的线程池<ul><li>线程池支持定时以及周期性执行任务，创建一个corePoolSize为传入参数，最大线程数为整形的最大数的线程池</li><li>使用的底层阻塞队列为DelayedWorkQueue</li></ul></li></ol></li></ul></li><li><p>Executors创建线程原理：<br><img src="Executors%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E5%8E%9F%E7%90%86.png" alt="Executors创建线程原理"></p></li><li><p>线程池参数解释：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                          TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                          ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                          RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">    maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">    maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">    keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">  <span class="keyword">if</span> (workQueue == <span class="keyword">null</span> || threadFactory == <span class="keyword">null</span> || handler == <span class="keyword">null</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">  <span class="keyword">this</span>.acc = System.getSecurityManager() == <span class="keyword">null</span> ? <span class="keyword">null</span> : AccessController.getContext();</span><br><span class="line">  <span class="keyword">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">  <span class="keyword">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">  <span class="keyword">this</span>.workQueue = workQueue;</span><br><span class="line">  <span class="keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">  <span class="keyword">this</span>.threadFactory = threadFactory;</span><br><span class="line">  <span class="keyword">this</span>.handler = handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>corePoolSize：核心线程数，线程池中的常驻核心线程数<ul><li>在创建线程池后，当有请求任务就会安排池中的线程去执行请求任务</li><li>当线程池中的线程数目达到corePoolSize后，就会把到达的请求任务放到缓存队列中</li></ul></li><li>maximumPoolSize：线程池中能够容纳同时执行的最大线程数，此值必须大于等于1</li><li>keepAliveTime：多余的空闲线程的存活时间，<ul><li>若当前池中线程数量超过corePoolSize，且当空闲时间达到keepAliveTime时，多余线程会被销毁，直到只剩下corePoolSize个线程为止</li><li>默认情况下，只有当线程池中的线程数大于corePoolSize时，keepAliveTime才会起作用</li></ul></li><li>unit：keepAliveTime的时间单位</li><li>workQueue：任务队列，用于存储被提交但尚未被执行的任务(也即上面介绍的阻塞队列)<ul><li>LinkedBlockingQueue：链表阻塞队列</li><li>SynchronousBlockingQueue：同步阻塞队列</li></ul></li><li>threadFactory：表示生成线程池中工作线程的线程工厂，用于创建线程，<strong>一般默认即可</strong></li><li>handler：拒绝策略，表示当队列满了并且工作线程大于等于线程池的最大线程数(maximumPoolSize)时，如何来拒绝请求执行的Runnable的策略</li></ol></li><li><p>线程池底层工作原理：<br><img src="%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%BA%95%E5%B1%82%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png" alt="线程池底层工作原理"></p><ol><li>在创建了线程池后，开始等待提交过来的任务请求</li><li>当调用execute()方法添加一个请求任务时，线程池会做出如下判断：<ol><li>如果正在运行的线程数量小于corePoolSize，那么马上创建线程运行这个任务</li><li>如果正在运行的线程数量大于或等于corePoolSize，那么将这个任务<strong>放入队列</strong></li><li>如果这个时候队列满了，且正在运行的线程数量还小于maximumPoolSize，那么还是要创建非核心线程立刻运行这个任务</li><li>如果队列满了且正在运行的线程数量大于或等于maximumPoolSize，那么线程池会<strong>启动饱和拒绝策略来执行</strong></li></ol></li><li>当一个线程完成任务时，它会从队列中取下一个任务来执行</li><li>当一个线程无事可做超过一定的时间(keepAliveTime)时，线程会判断：<ol><li>如果当前运行的线程数大于corePoolSize，那么该线程就被停掉</li><li>当线程池的所有任务完成后，<strong>线程池线程数目最终会收缩到corePoolSize</strong></li></ol></li></ol></li><li><p>线程池拒绝策略</p><ul><li>拒绝策略是什么：等待队列已经排满了，再也塞不下新任务了。同时，线程池中也达到了最大线程数，无法继续为新任务服务。这时就需要一种拒绝策略机制合理地处理这个问题</li><li>JDK内置的拒绝策略(内置拒绝策略均实现了RejectedExecutionHandle接口)<ol><li>AbortPolicy(默认)：直接抛出RejectedExecutionException异常阻止系统正常运行</li><li>CallerRunsPolicy：”调用者运行”调节机制，该策略既不会抛弃任务也不会抛出异常，而是将某些任务回退到调用者，从而降低新任务的流量</li><li>DiscardOldestPolicy：抛弃队列中等待最久的任务，然后把当前任务加入队列中尝试再次提交当前任务</li><li>DiscardPolicy：该策略默默地丢弃无法处理的任务，不予任何处理也不抛出异常。如果允许任务丢失，这是最好的一种策略</li></ol></li></ul></li><li><p>线程池的选用</p><ul><li><p>在工作中单一的/固定数的/可变的三种创建线程池的方法哪个用的多：一个都不用<br><code>如Alibaba Java开发手册规定所示</code><br><img src="Alibaba_Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%E8%A7%84%E5%AE%9A.png" alt="Alibaba Java开发手册规定"></p></li><li><p>自定义线程池示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThreadPoolDemo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(Runtime.getRuntime().availableProcessors());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// RejectedExecutionException AbortPolicy</span></span><br><span class="line">    <span class="comment">// CallerRunsPolicy()</span></span><br><span class="line">    <span class="comment">// DiscardPolicy()</span></span><br><span class="line">    <span class="comment">// DiscardOldestPolicy()</span></span><br><span class="line">    ExecutorService threadPool = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">        <span class="number">2</span>,</span><br><span class="line">        <span class="number">5</span>,</span><br><span class="line">        <span class="number">2L</span>,</span><br><span class="line">        TimeUnit.SECONDS,</span><br><span class="line">        <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;(<span class="number">3</span>),</span><br><span class="line">        Executors.defaultThreadFactory(),</span><br><span class="line">        <span class="keyword">new</span> ThreadPoolExecutor.DiscardOldestPolicy());</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 模拟有10个顾客来银行办理业务</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">        threadPool.execute(() -&gt; &#123;</span><br><span class="line">          System.out.println(Thread.currentThread().getName() + <span class="string">"办理业务~~~"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="comment">// 线程池必须要关闭,重量资源</span></span><br><span class="line">      threadPool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">useSystemPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1池5个工作线程</span></span><br><span class="line">    <span class="comment">// ExecutorService threadPool = Executors.newFixedThreadPool(5);</span></span><br><span class="line">    <span class="comment">// 1池1个工作线程</span></span><br><span class="line">    <span class="comment">// ExecutorService threadPool = Executors.newSingleThreadExecutor();</span></span><br><span class="line">    <span class="comment">// 1池N个工作线程</span></span><br><span class="line">    ExecutorService threadPool = Executors.newCachedThreadPool();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 模拟有10个顾客来银行办理业务</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">        threadPool.execute(() -&gt; &#123;</span><br><span class="line">          System.out.println(Thread.currentThread().getName() + <span class="string">"办理业务~~~"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="comment">// 线程池必须要关闭,重量资源</span></span><br><span class="line">      threadPool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>线程池的合理参数配置<br>生产环境中如何配置corePoolSize和maximumPoolSize大小：根据具体业务来配置，分为CPU密集型和IO密集型</p><ol><li>CPU密集型<br>CPU密集的意思是该任务需要大量的运算，而没有阻塞，CPU一直全速运行<br>CPU密集任务只有在真正的多核CPU上才可能得到加速(通过多线程)；而在单核CPU上，无论开几个模拟的多线程该任务都不可能得到加速，因为CPU总的运算能力就那些<br>CPU密集型任务配置尽可能少的线程数量：一般为————CPU核数 + 1</li><li>IO密集型<br>由于IO密集型任务线程并不是一直在执行任务，则应配置尽可能多的线程，如CPU核数 * 2<br>IO密集型即该任务需要大量的IO操作，即大量的阻塞<br>在单线程上运行IO密集型的任务会导致浪费大量的CPU运算能力花费在等待上；IO密集型任务中使用多线程可以大大地加速程序的运行，即使在单核CPU上。这种加速主要就是利用了被浪费掉的阻塞时间<br>IO密集时，大部分线程都被阻塞，故需要多配置线程数：参考————CPU核数 / (1 - 阻塞系数)<br>通常阻塞系数在0.8 ~ 0.9左右<br>例如：8核CPU：8 / (1 - 0.9) = 80个线程数</li></ol></li></ul><h2 id="Java8流式计算"><a href="#Java8流式计算" class="headerlink" title="Java8流式计算"></a>Java8流式计算</h2><ul><li><p>函数式接口(只有一个方法(除default和static方法)的接口)：</p><ul><li><p>Lambda表达式口诀：<strong>拷贝小括号，写死右括号，落地大括号</strong></p></li><li><p>Lambda案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Foo1</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">default</span> <span class="keyword">double</span> <span class="title">div</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123; <span class="keyword">return</span> x / y; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">multiply</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x * y; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Lambda表达式</span></span><br><span class="line"><span class="comment">* 口诀：拷贝小括号(参数),写死右括号,落地大括号</span></span><br><span class="line"><span class="comment">* 注释<span class="doctag">@FunctionalInterface</span>(只有一个方法的接口,函数式接口)</span></span><br><span class="line"><span class="comment">* default方法允许接口有默认实现(jdk1.8),可以有多个</span></span><br><span class="line"><span class="comment">* 静态方法实现</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaExpress</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Foo foo = () -&gt; System.out.println(<span class="string">"Hello LambdaExpress"</span>);</span><br><span class="line">    foo.sayHello();</span><br><span class="line"></span><br><span class="line">    Foo1 foo1 = (x, y) -&gt; <span class="number">2</span> * x + y;</span><br><span class="line">    System.out.println(foo1.add(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">    System.out.println(foo1.div(<span class="number">1.0</span>, <span class="number">0.3333</span>));</span><br><span class="line">    System.out.println(Foo1.multiply(<span class="number">2</span>, <span class="number">5</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Java内置核心四大函数式接口<br><img src="Java%E5%86%85%E7%BD%AE%E6%A0%B8%E5%BF%83%E5%9B%9B%E5%A4%A7%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3.png" alt="Java内置核心四大函数式接口"></p></li></ul></li><li><p>Stream流</p><ul><li><p>是什么：流(Stream)是数据渠道，用于操作数据源(集合、数组等)所生成的元素序列。集合讲的是数据，流讲的是计算</p></li><li><p>特点：</p><ol><li>Stream自己不会存储元素</li><li>Stream不会改变源对象。相反，他们会返回一个持有结果的新Stream</li><li>Stream操作是延迟执行的。这意味着他们会等到需要结果的时候才执行(懒加载)</li></ol></li><li><p>怎么用：</p><ol><li>创建一个Stream：一个数据源(数组、集合)</li><li>中间操作：一个中间操作，处理数据源数据</li><li>终止操作：一个终止操作，执行中间操作链，产生结果</li></ol></li><li><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Integer id;</span><br><span class="line">  <span class="keyword">private</span> String  userName;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span>     age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 题目：请按照给出数据，找出同时满足</span></span><br><span class="line"><span class="comment">*      偶数ID且年龄大于24且用户名转为大写且用户名字母倒排序</span></span><br><span class="line"><span class="comment">*      最后只输出一个用户名字</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamDemo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    User u1 = <span class="keyword">new</span> User(<span class="number">11</span>,<span class="string">"a"</span>,<span class="number">23</span>);</span><br><span class="line">    User u2 = <span class="keyword">new</span> User(<span class="number">12</span>,<span class="string">"b"</span>,<span class="number">24</span>);</span><br><span class="line">    User u3 = <span class="keyword">new</span> User(<span class="number">13</span>,<span class="string">"c"</span>,<span class="number">22</span>);</span><br><span class="line">    User u4 = <span class="keyword">new</span> User(<span class="number">14</span>,<span class="string">"d"</span>,<span class="number">28</span>);</span><br><span class="line">    User u5 = <span class="keyword">new</span> User(<span class="number">16</span>,<span class="string">"e"</span>,<span class="number">26</span>);</span><br><span class="line"></span><br><span class="line">    List list = Arrays.asList(u1,u2,u3,u4,u5);</span><br><span class="line">    list.stream().filter(p -&gt; p.getId() % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">      .filter(p -&gt; p.getAge() &gt; <span class="number">24</span>)</span><br><span class="line">      .map(f -&gt; f.getUserName().toUpperCase())</span><br><span class="line">      .sorted((o1, o2) -&gt; o2.compareTo(o1))</span><br><span class="line">      .limit(<span class="number">1</span>)</span><br><span class="line">      .forEach(System.out::println);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="Java8分支合并"><a href="#Java8分支合并" class="headerlink" title="Java8分支合并"></a>Java8分支合并</h2><ul><li><p>原理(类同MapReduce)：<br>Fork：把一个复杂任务进行分拆，大事化小<br>Join：把分拆任务的结果进行合并</p></li><li><p>相关类：</p><ol><li>ForkJoinPool(分支合并线程池)<br><img src="ForkJoinPool%E7%BB%A7%E6%89%BF%E5%9B%BE.png" alt="ForkJoinPool继承图"></li><li>ForkJoinTask(类似FutureTask)<br><img src="ForkJoinTask%E7%BB%A7%E6%89%BF%E5%9B%BE.png" alt="ForkJoinTask继承图"></li><li>RecursiveTask(递归任务,继承自ForkJoinTask,递归自己)<br><img src="RecursiveTask%E7%BB%A7%E6%89%BF%E5%9B%BE.png" alt="RecursiveTask继承图"></li></ol></li><li><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer ADJUST_VALUE = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> begin;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> end;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> result = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MyTask</span><span class="params">(<span class="keyword">long</span> begin, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.begin = begin;</span><br><span class="line">      <span class="keyword">this</span>.end = end;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> Long <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((end - begin) &lt;= ADJUST_VALUE) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">long</span> i = begin; i &lt;= end; i++) &#123;</span><br><span class="line">        result += i;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">long</span> middle = (end + begin) / <span class="number">2</span>;</span><br><span class="line">      MyTask leftTask = <span class="keyword">new</span> MyTask(begin, middle);</span><br><span class="line">      MyTask rightTask = <span class="keyword">new</span> MyTask(middle + <span class="number">1</span>, end);</span><br><span class="line">      leftTask.fork();</span><br><span class="line">      rightTask.fork();</span><br><span class="line">      result = leftTask.join() + rightTask.join();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForkJoinDemo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">    MyTask myTask = <span class="keyword">new</span> MyTask(<span class="number">0</span>, <span class="number">1023423423L</span>);</span><br><span class="line">    ForkJoinPool threadPool = <span class="keyword">new</span> ForkJoinPool();</span><br><span class="line">    ForkJoinTask&lt;Long&gt; forkJoinTask = threadPool.submit(myTask);</span><br><span class="line">    System.out.println(forkJoinTask.get());</span><br><span class="line">    threadPool.shutdown();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="异步回调"><a href="#异步回调" class="headerlink" title="异步回调"></a>异步回调</h2><ul><li><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">  <span class="comment">// 同步</span></span><br><span class="line">  CompletableFuture&lt;Void&gt; completableFuture = CompletableFuture.runAsync(() -&gt; System.out.println(Thread.currentThread().getName() + <span class="string">"无返回!"</span>));</span><br><span class="line">  completableFuture.get();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 异步</span></span><br><span class="line">  CompletableFuture&lt;Integer&gt; completableFuture2 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">"有返回!"</span>);</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1024</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 异步回调</span></span><br><span class="line">  System.out.println(completableFuture2.whenComplete((t, u) -&gt; &#123;</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">"：t = "</span> + t);</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">"：u = "</span> + u);</span><br><span class="line">  &#125;).exceptionally(f -&gt; &#123;</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">"：f = "</span> + f.getMessage());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">4444</span>;</span><br><span class="line">  &#125;).get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h2><ul><li><p>介绍：volatile是Java虚拟机提供的轻量级的同步机制</p><ol><li>保证可见性</li><li><strong>不保证原子性</strong></li><li>禁止指令重排</li></ol></li><li><p>JMM介绍：<br>JMM(Java内存模型Java Memory Model,简称JMM)本身是一种抽象的概念，<strong>并不真实存在</strong>。它描述的是一组规则或规范，通过这组规范定义了程序中各个变量(包括实例字段、静态字段和构成数组对象的元素)的访问方式<br>JMM关于同步规定：</p><ol><li>线程解锁前，必须把共享变量的值刷新回主内存</li><li>线程加锁前，必须读取主内存的最新值到自己的工作内存</li><li>加锁解锁是同一把锁</li></ol><p>由于JVM运行程序的实体是线程，而每个线程创建时JVM都会为其创建一个工作内存(有些地方成为栈空间)。工作内存是每个线程的私有数据区域，而Java内存模型中规定所有变量都存储在<strong>主内存</strong>。主内存是共享内存区域，所有线程都可访问，<strong>但线程对变量的操作(读取赋值等)必须在工作内存中进行。首先要将变量从主内存拷贝到自己的工作空间，然后对变量进行操作，操作完成再将变量写回主内存</strong>。不能直接操作主内存中的变量，各个线程中的工作内存储存着主内存中的<strong>变量副本拷贝</strong>，因此不同的线程无法访问对方的工作内存，线程间的通讯(传值)必须通过主内存来完成，其简要访问过程如下图所示：<br><img src="%E7%BA%BF%E7%A8%8B%E9%97%B4%E9%80%9A%E8%AE%AF%E8%AE%BF%E9%97%AE%E5%86%85%E5%AD%98%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="线程间通讯访问内存示意图"><br><img src="%E5%9B%BE%E8%A7%A3%E4%B8%BB%E5%86%85%E5%AD%98%E5%B7%A5%E4%BD%9C%E5%86%85%E5%AD%98%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="图解主内存工作内存示意图"></p></li><li><p>可见性：通过JMM的介绍，可知各个线程对主内存中共享变量的操作都是各个线程各自拷贝到自己的工作内存操作后再写回主内存中的。这将导致可能存在一个线程A修改了共享变量X的值，该值还未写回主内存中；此时另外一个线程B又对内存中的共享变量X进行操作，但此时线程A工作内存中的共享变量X对线程B来说并不不可见。这种工作内存与主内存同步延迟现象就造成了可见性问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 资源类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyData</span> </span>&#123;</span><br><span class="line">  <span class="comment">// volatile int number = 0;</span></span><br><span class="line">  <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123; number++; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证volatile可见性</span></span><br><span class="line"><span class="comment">// 假如int number = 0;number变量之前没有volatile关键字修饰,没有可见性</span></span><br><span class="line"><span class="comment">// 添加了volatile,可解决可见性问题</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileDemo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    MyData myData = <span class="keyword">new</span> MyData();</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      System.out.println(Thread.currentThread().getName() + <span class="string">"\t come in"</span>);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      myData.add();</span><br><span class="line">      System.out.println(Thread.currentThread().getName() + <span class="string">"\t update number"</span>);</span><br><span class="line">    &#125;, <span class="string">"Test"</span>).start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环等待,直到number被更新</span></span><br><span class="line">    <span class="keyword">while</span> (myData.number == <span class="number">0</span>) ;</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">"\t mission is over , number = "</span> + myData.number);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">当number不加volatile关键字时,主内存不更新,一直在循环中</span></span><br><span class="line"><span class="comment">打印:</span></span><br><span class="line"><span class="comment">Test come in</span></span><br><span class="line"><span class="comment">Test update number</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">当number加volatile关键字时,主内存可见,循环能正常退出</span></span><br><span class="line"><span class="comment">打印:</span></span><br><span class="line"><span class="comment">Test come in</span></span><br><span class="line"><span class="comment">Test update number</span></span><br><span class="line"><span class="comment">main mission is over , number = 1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>原子性：操作不可分割，完整性。即某个线程正在做某个具体业务时，中间不可以被加塞或被分割。需整体完整，要么同时成功要么同时失败</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 资源类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyData</span> </span>&#123;</span><br><span class="line">  <span class="comment">// AtomicInteger number = new AtomicInteger();</span></span><br><span class="line">  <span class="keyword">volatile</span> <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// public void add() &#123; number.getAndIncrement(); &#125;</span></span><br><span class="line">  <span class="comment">// public synchronized void add() &#123; number++; &#125;</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123; number++; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证volatile不保证原子性</span></span><br><span class="line"><span class="comment">// 如何保证原子性：</span></span><br><span class="line"><span class="comment">// 1、加synchronized关键字()</span></span><br><span class="line"><span class="comment">// 2、使用AtomicInteger原子整型类替换int</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileDemo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    MyData myData = <span class="keyword">new</span> MyData();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">1000</span>; j++) &#123; myData.add(); &#125;</span><br><span class="line">      &#125;, <span class="string">"Thread "</span> + i).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待20个线程全部即算完成后,主线程继续执行(当还有子线程时,主线程算一个)</span></span><br><span class="line">    <span class="keyword">while</span> (Thread.activeCount() &gt; <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="comment">// 线程让步,让出CPU执行时间给其他线程</span></span><br><span class="line">      Thread.yield();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 打印最终的结果值</span></span><br><span class="line">    System.out.println(myData.number);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">当add()不加synchronized关键字时</span></span><br><span class="line"><span class="comment">打印小于20000的数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">当add()加synchronized关键字时</span></span><br><span class="line"><span class="comment">打印20000</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// add()方法对应的字节码反编译</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyData</span> </span>&#123;</span><br><span class="line">  <span class="keyword">volatile</span> <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123; number++; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">Code:</span><br><span class="line">    <span class="number">0</span>: aload_0</span><br><span class="line">    <span class="number">1</span>: dup</span><br><span class="line">    2: getfield      #2                  // Field number:I</span><br><span class="line">    <span class="number">5</span>: iconst_1</span><br><span class="line">    <span class="number">6</span>: iadd</span><br><span class="line">    7: putfield      #2                  // Field number:I</span><br><span class="line">    <span class="number">10</span>: <span class="keyword">return</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">n++被拆分成三个指令：</span></span><br><span class="line"><span class="comment">1、执行getfield从主内存拿到原始number</span></span><br><span class="line"><span class="comment">2、执行iadd进行加1操作</span></span><br><span class="line"><span class="comment">3、执行putfield把累加后的值写回主内存</span></span><br><span class="line"><span class="comment">可能会出现写覆盖,因此小于20000</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>数值丢失的原因：假设线程1和2同时修改各自工作空间的内容，因此可见性，因此需要重新写入主内存。但在线程1写入时，线程2也同时写入，这导致线程1的写入操作被挂起；线程2写完后线程1继续写入，这样线程1写入的值覆盖了线程2写入的值，造成数据丢失</p></li><li><p>有序性：计算机在执行程序时为了提高性能，编译器和处理器常常会做<strong>指令重排</strong>，一般分为以下3种：<br><code>源代码 -&gt; 编译器优化的重排 -&gt; 指令并行的重排 -&gt; 内存系统的重排 -&gt; 最终执行指令</code><br>单线程环境里确保程序最终执行结果和代码顺序执行的结果一致<br>处理器在进行重新排序是必须要考虑指令之间的<strong>数据依赖性</strong><br>多线程环境中线程交替执行，由于编译器优化重排的存在，两个线程使用的变量能否保持一致性是无法确定的，结果无法预测</p></li><li><p>指令重排案例：</p><ol><li><p>案例一：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSort</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> x = <span class="number">11</span>; <span class="comment">// 语句1</span></span><br><span class="line">  <span class="keyword">int</span> y = <span class="number">12</span>; <span class="comment">// 语句2</span></span><br><span class="line">  x = x + <span class="number">5</span>; <span class="comment">// 语句3</span></span><br><span class="line">  y = x * x; <span class="comment">// 语句4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 正常单线程情况：1234<br> 多线程环境可能的情况：2134、1324<br> 上述的过程就可以当做是指令的重排，即内部执行顺序和我们的代码顺序不一样。但是指令重排也是有限制的，即不会此情况：4321<br> 因为处理器在进行重排时候，必须考虑到指令之间的数据依赖性。语句4依赖于y以及x的申明，因为存在数据依赖，无法首先执行</p></li><li><p>案例二：</p><p> <code>int a = 0, b = 0, x = 0, y = 0;</code></p><table><thead><tr><th>线程1</th><th>线程2</th></tr></thead><tbody><tr><td>x = a;</td><td>y = b;</td></tr><tr><td>b = 1;</td><td>a = 2;</td></tr><tr><td>x = 0; y = 0;</td><td></td></tr></tbody></table><p> 如果编译器对这段代码进行执行重排优化后，可能出现下列情况：</p><table><thead><tr><th>线程1</th><th>线程2</th></tr></thead><tbody><tr><td>b = 1;</td><td>a = 2;</td></tr><tr><td>x = a;</td><td>y = b;</td></tr><tr><td>x = 2; y = 1;</td><td></td></tr></tbody></table><p> 这也就说明在多线程环境下，由于编译器优化重排的存在，两个线程使用的变量能否保持一致是无法确定的</p></li><li><p>案例三：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResortSeqDemo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    a = <span class="number">1</span>;</span><br><span class="line">    flag = <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">      a = a + <span class="number">5</span>;</span><br><span class="line">      System.out.println(<span class="string">"Value: "</span> + a);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 按照正常的顺序分别调用method01()和method02()，那么最终输出就是a = 6<br> 但如果在多线程环境下，因为method01()和method02()之间不能存在数据依赖的问题，因此原先的顺序可能是</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span>;</span><br><span class="line">flag = <span class="keyword">true</span>;</span><br><span class="line">a = a + <span class="number">5</span>;</span><br><span class="line">System.out.println(<span class="string">"Value:"</span> + a);</span><br></pre></td></tr></table></figure><p> 但是在经过编译器，指令，或者内存的重排后，可能会出现这样的情况：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">flag = <span class="keyword">true</span>;</span><br><span class="line">a = a + <span class="number">5</span>;</span><br><span class="line">System.out.println(<span class="string">"Value:"</span> + a);</span><br><span class="line">a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p> 先执行flag = true后，另外一个线程马上调用方法2，满足flag的判断，最终a = a + 5，结果为5，这样出现了数据不一致的问题<br> 多线程环境中线程交替执行，由于编译器优化重排的存在，两个线程中使用的变量能否保证一致性是无法确定的，结果无法预测<br> 这就需要通过volatile来修饰变量，来保证线程安全性</p></li></ol></li><li><p>volatile对指令重排作用总结：<br>volatile实现禁止指令重排优化，从而避免了多线程环境下程序出现乱序执行的现象<br>内存屏障(Memory Barrier)又称内存栅栏，是一个CPU指令，作用有两个：</p><ol><li>保证特定操作的顺序</li><li>保证某些变量的内存可见性(利用该特性实现volatile的内存可见性)<br>由于编译器和处理器都能执行指令重排的优化，如果在指令间插入一条Memory Barrier则会告诉编译器和CPU，不管什么指令都不能和这条Memory Barrier指令重排序，即<strong>通过插入内存屏障禁止在内存屏障前后的指令执行重排序优化</strong>。内存屏障另外一个作用是刷新出各种CPU的缓存数，因此任何CPU上的线程都能读取到这些数据的最新版本<br><img src="volatile%E6%8C%87%E4%BB%A4%E9%87%8D%E6%8E%92%E5%86%85%E5%AD%98%E5%B1%8F%E9%9A%9C.png" alt="volatile指令重排内存屏障示意图"></li></ol></li><li><p>线程安全保证：</p><ol><li>工作内存与主内存同步延迟现象导致的可见性问题：<ul><li>可通过synchronized或volatile关键字解决，它们都可使一个线程修改后的变量立即对其它线程可见</li></ul></li><li>对于指令重排导致的可见性问题和有序性问题：<ul><li>可以使用volatile关键字解决，volatile关键字的另一个作用就是禁止重排序优化</li></ul></li></ol></li><li><p>volatile的应用：单例模式DCL</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// version1：普通方式/加synchronized关键字</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> SingletonDemo instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">"\t Constructor"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonDemo <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123; instance = <span class="keyword">new</span> SingletonDemo(); &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 比较内存地址(单线程) 正确</span></span><br><span class="line">    System.out.println(SingletonDemo.getInstance() == SingletonDemo.getInstance());</span><br><span class="line">    <span class="comment">// 查看打印信息(多线程) -&gt; 打印多次构造器,错误</span></span><br><span class="line">    <span class="comment">// 改进：getInstance()方法添加关键字synchronized</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">new</span> Thread(</span><br><span class="line">        () -&gt; SingletonDemo.getInstance(),</span><br><span class="line">        <span class="string">"Thread"</span> + i).start();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">通过引入synchronized关键字,能够解决高并发环境下的单例模式问题</span></span><br><span class="line"><span class="comment">但synchronized属于重量级的同步机制,它只允许一个线程同时访问获取实例的方法;为了保证数据一致性而减低了并发性,因此采用的比较少</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// version2：DCL(Double Check Lock:双端检锁机制)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonDemo <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 同步代码段的时候，进行检测</span></span><br><span class="line">    <span class="keyword">synchronized</span> (SingletonDemo<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123; instance = <span class="keyword">new</span> SingletonDemo(); &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的DCL(双端检锁)机制不一定线程安全，原因是由于指令重排的存在；加入volatile可以禁止指令重排<br>原因在于某一个线程在执行到第一次检测，读取到的instance不为null时，instance的引用对象可能没有完成初始化：<br><code>instance = new SingletonDemo();</code><br>可以分为以下步骤(伪代码)<br><code>memory = allocate(); // 1、分配对象内存空间</code><br><code>instance(memory); // 2、初始化对象</code><br><code>instance = memory; // 3、设置instance指向刚分配的内存地址,此时instance != null</code><br>步骤2和步骤3不存在数据依赖关系。而且无论重排前还是重排后程序执行的结果在单线程中并没有改变，因此这种重排优化是允许的<br><code>memory = allocate(); // 1、分配对象内存空间</code><br><code>instance = memory; // 3、设置instance指向刚分配的内存地址,此时instance != null;但对象还没有初始化完</code><br><code>instance(memory); // 2、初始化对象</code><br>当我们执行到重排后的步骤2试图获取instance的时候会得到null，因为对象的初始化还没有完成，而在重排后的步骤3才完成。因此执行单例模式的代码时候，就会重新再创建一个instance实例<br><strong>指令重排只会保证串行语义的执行一致性(单线程),并不会关心多线程间的语义一致性</strong><br>所以当一条线程访问instance不为null时，由于instance实例未必完成初始化,也就造成了线程安全问题。因此需要引入volatile来保证出现指令重排的问题，从而保证单例模式的线程安全性</p></li></ul><h2 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h2><ul><li><p>概念：<br>CAS的全称是Compare-And-Swap(比较并交换)，它是<strong>一条CPU并发原语</strong><br>它的功能是判断内存某个位置的值是否为预期值，如果是则更改为新的值，这个过程是原子性的<br>CAS并发原语体现在Java语言中就是sun.misc.Unsafe类的各个方法。调用UnSafe类中的CAS方法，JVM会帮我们实现<strong>CAS汇编指令</strong>，这是一种完全<strong>依赖于硬件</strong>的功能，通过它实现了原子操作。CAS是一种系统原语(属于操作系统原语范畴)，由若干条指令组成，用于完成某个功能的一个过程。<strong>原语的执行必须是连续的，在执行过程中不允许被中断，也就是说CAS是一条CPU的原子指令，不会造成所谓的数据不一致的问题，也就是说CAS是线程安全的</strong></p></li><li><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建了一个AtomicInteger实例,并初始化为5</span></span><br><span class="line">AtomicInteger atomicInteger = <span class="keyword">new</span> AtomicInteger(<span class="number">5</span>);</span><br><span class="line"><span class="comment">// 调用CAS方法,企图更新成2019</span></span><br><span class="line"><span class="comment">// 两个参数：前者为5，表示期望值;后者为2019,是要求更新的值</span></span><br><span class="line">System.out.println(atomicInteger.compareAndSet(<span class="number">5</span>, <span class="number">2019</span>) + <span class="string">"\t current data = "</span> + atomicInteger.get());</span><br><span class="line"><span class="comment">// 再次调用CAS方法,企图更新成1024</span></span><br><span class="line">System.out.println(atomicInteger.compareAndSet(<span class="number">5</span>, <span class="number">1024</span>) + <span class="string">"\t current data = "</span> + atomicInteger.get());</span><br></pre></td></tr></table></figure><p>第一次执行CAS方法时，期望值和原本值满足，因此修改成功，返回true和2019；但第二次执行主内存值已修改为2019，不满足期望值，本次写入失败，因此返回了false和2019<br>类似于SVN或者Git的版本号，如果没有人更改过，就能够正常提交，否者需要先将代码pull下来，合并代码后，然后提交</p></li><li><p>CAS底层原理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Atomically increments by one the current value.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> the previous value</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// atomicInteger.getAndIncrement()方法源码</span></span><br><span class="line"><span class="comment">// this：当前atomicInteger对象</span></span><br><span class="line"><span class="comment">// valueOffset：内存偏移量,即内存地址</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndIncrement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> unsafe.getAndAddInt(<span class="keyword">this</span>, valueOffset, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大致意思是通过valueOffset直接利用内存地址获取到值然后进行加1的操作<br>底层又调用了一个unsafe类的getAndAddInt()方法<br>AtomicInteger底层部分代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicInteger</span> <span class="keyword">extends</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// setup to use Unsafe.compareAndSwapInt for updates</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Unsafe unsafe = Unsafe.getUnsafe();</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> valueOffset;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> value;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>Unsafe类：<br> Unsafe是CAS的核心类，由于Java方法无法直接访问底层系统，需要通过本地(Native)方法来访问，Unsafe相当于一个后门，基于该类可以直接操作特定的内存数据。Unsafe类存在于sun.misc包中，其内部方法操作可以像C指针一样直接操作内存。Java中的CAS操作的执行依赖于Unsafe类的方法<br> <code>注意Unsafe类的所有方法都是native修饰的，也就是说unsafe类中的方法都直接调用操作系统底层资源执行相应的任务</code><br> <code>为什么Atomic修饰的包装类，能够保证原子性，依靠的就是底层的unsafe类</code></p></li><li><p>变量valueOffset：表示该变量值(Atomic修饰的值)在内存中的偏移地址，Unsafe就是根据内存偏移地址获取数据的</p></li><li><p>变量value用volatile修饰：保证多线程之间内存的可见性</p></li><li><p>具体的unsafe.getAndAddInt()方法：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAddInt</span><span class="params">(Object var1, <span class="keyword">long</span> var2, <span class="keyword">int</span> var4)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> var5;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// getIntVolatile()和compareAndSwapInt()都是native方法</span></span><br><span class="line">    var5 = <span class="keyword">this</span>.getIntVolatile(var1, var2);</span><br><span class="line">  &#125; <span class="keyword">while</span>(!<span class="keyword">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class="line">  <span class="keyword">return</span> var5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 解释：</p><ul><li>参数解释：<ol><li>val1：AtomicInteger对象本身</li><li>var2：值的引用内存地址</li><li>var4：需要增加的int值</li><li>var5：用var1和var2找到的主内存中的真实值——即从主内存中拷贝到工作内存中的值(每次都要从主内存拿到最新的值并拷贝到当前线程的本地内存，然后执行compareAndSwapInt()方法再和主内存的值进行比较——在高并发环境下可能主内存值又被更新。线程不可以直接越过高速缓存直接操作主内存，所以需要执行比较方法，值统一后再执行加1操作——底层原子绑定)</li></ol></li><li>实现思路：操作时需要比较当前线程工作内存中的值和主内存中的值，假设执行compareAndSwapInt()方法返回false，那么就一直执行while循环体的内容，一直刷新主内存中的值到当前线程的工作内存，直到期望的值和真实值一样<ol><li>用该对象当前的值与var5比较</li><li>如果相同，更新为var5 + var4并返回true</li><li>如果不同，继续从主内存中取最新的值然后再比较，重复流程1，直到值相同，更新完成<br>该处没有使用synchronized加锁机制，而使用CAS，这能提高并发性，同样也能实现一致性。这是因为每个线程进来后，进入do while循环体，不断地获取内存中的值，判断是否为最新的值，为最新值后再进行更新操作</li></ol></li><li>具体案例：假设线程A和线程B同时执行getAndInt()方法(分别跑在不同的CPU上)<ol><li>AtomicInteger里面的value原始值为3(即主内存中AtomicInteger的value为3)，根据JMM模型，线程A和线程B各自持有一份值为3的AtomicInteger副本，并分别存储在各自的工作内存中</li><li>线程A通过getIntVolatile()方法拿到最新value值3，此时线程A被挂起(该线程失去CPU执行权)</li><li>线程B此时通过getIntVolatile()方法获取到最新value值，也是3。此时线程B没有被挂起，并执行了compareAndSwapInt()方法，主内存的值也是3，成功修改主内存值为4，线程B退出循环</li><li>此时线程A恢复，执行compareAndSwapInt()方法，比较发现工作内存的值3和主内存中的值4不一致，说明该值已被其它线程抢先一步修改过。因此A线程本次修改失败，再次进入循环体</li><li>线程A重新获取主内存最新的value值，因为变量value被volatile修饰，所以其它线程对它的修改线程A总能够看到，线程A继续执行compareAndSwapInt()方法进行比较并交换直到成功</li></ol></li></ul></li></ol></li><li><p>Unsafe类的CAS思想：自旋(自我旋转,直到成功)</p></li><li><p>底层实现：Unsafe类中的compareAndSwapInt是一个本地方法，该方法的实现位于unsafe.cpp中</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">UNSAFE_ENTRY(jboolean, Unsafe_CompareAndSwapInt(JNIEnv *env, jobject unsafe, jobject obj, jlong offset, jint e, jint x))</span><br><span class="line">  <span class="comment">// 先想办法拿到变量value在内存中的地址</span></span><br><span class="line">  <span class="comment">// 通过Atomic::cmpxchg实现比较替换,其中参数X是即将更新的值,参数e是原内存的值</span></span><br><span class="line">  UnsafeWrapper(<span class="string">"Unsafe_CompareAndSwapInt"</span>);</span><br><span class="line">  oop p = JNIHandles::resolve(obj);</span><br><span class="line">  jint* addr = (jint *) index_oop_from_field_offset_long(p, offset);</span><br><span class="line">  <span class="keyword">return</span> (jint)(Atomic::cmpxchg(x, addr, e)) == e;</span><br><span class="line">UNSAFE_END</span><br></pre></td></tr></table></figure></li><li><p>CAS缺点：</p><ol><li>循环时间长，CPU开销大(因为执行的是do-while语句,如果比较不一致会一直循环;最差的情况就是某个线程一直取到的值和预期值都不一样,导致无限循环)</li><li>只能保证一个共享变量的原子操作<ul><li>当对一个共享变量执行操作时，可以通过CAS方式来保证原子操作</li><li>当对多个共享变量执行操作时，CAS方式就无法保证操作的原子性，此时只能用锁来保证原子性</li></ul></li><li>引出ABA问题</li></ol></li><li><p>ABA问题：</p><ul><li><p>介绍：<br>CAS算法实现的一个重要前提：需要取出内存中某时刻的数据，并在当下时刻比较并交换，在这个时间差上可能会发生数据的变化<br>比如线程1从内存位置V中取出值为A，此时另一线程2也从内存V中取出A，并且线程2进行了一些操作将值更新为B之后又将值更新为A；这时线程1进行CAS操作发现内存中仍然是A，然后线程1操作成功<br><strong>尽管线程1的CAS操作成功，但不代表该过程就是没有问题的</strong></p></li><li><p>原子引用AtomicReference(能操作对象)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  String userName;</span><br><span class="line">  <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line">User user1 = <span class="keyword">new</span> User(<span class="string">"zhangsan"</span>, <span class="number">22</span>);</span><br><span class="line">User user2 = <span class="keyword">new</span> User(<span class="string">"lisi"</span>, <span class="number">23</span>);</span><br><span class="line">AtomicReference&lt;User&gt; atomicReference = <span class="keyword">new</span> AtomicReference&lt;&gt;();</span><br><span class="line">atomicReference.set(user1);</span><br><span class="line"></span><br><span class="line">System.out.println(atomicReference.compareAndSet(user1, user2) + <span class="string">"\t"</span> + atomicReference.get().toString());</span><br><span class="line">System.out.println(atomicReference.compareAndSet(user1, user2) + <span class="string">"\t"</span> + atomicReference.get().toString());</span><br><span class="line"><span class="comment">// 结果：</span></span><br><span class="line"><span class="comment">// true User&#123;userName='lisi', age=23&#125;</span></span><br><span class="line"><span class="comment">// false User&#123;userName='lisi', age=23&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>ABA问题的解决(AtomicStampedReference,新增版本号(类似时间戳)标记)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ABA问题的模拟</span></span><br><span class="line"><span class="keyword">static</span> AtomicReference&lt;Integer&gt; atomicReference = <span class="keyword">new</span> AtomicReference&lt;&gt;(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">  System.out.println(atomicReference.compareAndSet(<span class="number">100</span>, <span class="number">101</span>) + <span class="string">"\t"</span> + atomicReference.get());</span><br><span class="line">  System.out.println(atomicReference.compareAndSet(<span class="number">101</span>, <span class="number">100</span>) + <span class="string">"\t"</span> + atomicReference.get());</span><br><span class="line">&#125;, <span class="string">"ABA A"</span>).start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">  <span class="comment">// 暂停1秒,保证t1线程完成ABA操作</span></span><br><span class="line">  <span class="keyword">try</span> &#123; TimeUnit.SECONDS.sleep(<span class="number">1</span>); &#125;</span><br><span class="line">  <span class="keyword">catch</span> (InterruptedException e) &#123; e.printStackTrace(); &#125;</span><br><span class="line">  System.out.println(atomicReference.compareAndSet(<span class="number">100</span>, <span class="number">2019</span>) + <span class="string">"\t"</span> + atomicReference.get());</span><br><span class="line">&#125;, <span class="string">"ABA B"</span>).start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果：</span></span><br><span class="line"><span class="comment">// true 101</span></span><br><span class="line"><span class="comment">// true 100</span></span><br><span class="line"><span class="comment">// true 2019</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ABA问题的解决AtomicStampedReference</span></span><br><span class="line"><span class="comment">// 新增版本号标记数据版本</span></span><br><span class="line"><span class="keyword">static</span> AtomicStampedReference&lt;Integer&gt; atomicStampedReference = <span class="keyword">new</span> AtomicStampedReference&lt;&gt;(<span class="number">100</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">  System.out.println(Thread.currentThread().getName() + <span class="string">"\t Version 1st: "</span> + atomicStampedReference.getStamp());</span><br><span class="line">  <span class="comment">// 等待线程B获取版本号</span></span><br><span class="line">  <span class="keyword">try</span> &#123; TimeUnit.SECONDS.sleep(<span class="number">1</span>); &#125;</span><br><span class="line">  <span class="keyword">catch</span> (InterruptedException e) &#123; e.printStackTrace(); &#125;</span><br><span class="line">  atomicStampedReference.compareAndSet(<span class="number">100</span>, <span class="number">101</span>, atomicStampedReference.getStamp(), atomicStampedReference.getStamp() + <span class="number">1</span>);</span><br><span class="line">  System.out.println(Thread.currentThread().getName() + <span class="string">"\t Version 2nd: "</span> + atomicStampedReference.getStamp());</span><br><span class="line">  atomicStampedReference.compareAndSet(<span class="number">101</span>, <span class="number">100</span>, atomicStampedReference.getStamp(), atomicStampedReference.getStamp() + <span class="number">1</span>);</span><br><span class="line">  System.out.println(Thread.currentThread().getName() + <span class="string">"\t Version 3rd: "</span> + atomicStampedReference.getStamp());</span><br><span class="line">&#125;, <span class="string">"ABA Solution A"</span>).start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">  <span class="keyword">int</span> stamp = atomicStampedReference.getStamp();</span><br><span class="line">  System.out.println(Thread.currentThread().getName() + <span class="string">"\t Version 1st: "</span> + stamp);</span><br><span class="line">  <span class="comment">// 等待线程A完成一次ABA操作</span></span><br><span class="line">  <span class="keyword">try</span> &#123; TimeUnit.SECONDS.sleep(<span class="number">3</span>); &#125;</span><br><span class="line">  <span class="keyword">catch</span> (InterruptedException e) &#123; e.printStackTrace(); &#125;</span><br><span class="line">  System.out.println(Thread.currentThread().getName() + <span class="string">"\t Result = "</span> + atomicStampedReference.compareAndSet(<span class="number">100</span>, <span class="number">2019</span>, stamp, stamp + <span class="number">1</span>) + <span class="string">"\t Current Version = "</span> + atomicStampedReference.getStamp() + <span class="string">"\t Value = "</span> + atomicStampedReference.getReference());</span><br><span class="line">&#125;, <span class="string">"ABA Solution B"</span>).start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果：</span></span><br><span class="line"><span class="comment">// ABA Solution A Version 1st: 1</span></span><br><span class="line"><span class="comment">// ABA Solution B Version 1st: 1</span></span><br><span class="line"><span class="comment">// ABA Solution A Version 2nd: 2</span></span><br><span class="line"><span class="comment">// ABA Solution A Version 3rd: 3</span></span><br><span class="line"><span class="comment">// ABA Solution B Result = false Current Version = 3 Value = 100</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>CAS总结：</p><ol><li>CAS是compare and swap的缩写，表示比较当前工作内存中的值和主物理内存中的值；如果相同则执行规定操作，否则继续比较直到主内存和工作内存的值一致为止</li><li>CAS有3个操作数，内存值V，旧的预期值A，要修改的更新值B。当且仅当预期值A和内存值V相同时，将内存值V修改为B，否者什么都不做</li></ol></li></ul><h2 id="值传递和引用传递"><a href="#值传递和引用传递" class="headerlink" title="值传递和引用传递"></a>值传递和引用传递</h2><ul><li><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Integer id;</span><br><span class="line">  <span class="keyword">private</span> String personName;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String personName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.personName = personName;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransferValueDemo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeValue1</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    age = <span class="number">30</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeValue2</span><span class="params">(Person person)</span> </span>&#123;</span><br><span class="line">    person.setPersonName(<span class="string">"XXXX"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeValue3</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    str = <span class="string">"XXX"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    TransferValueDemo test = <span class="keyword">new</span> TransferValueDemo();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义基本数据类型</span></span><br><span class="line">    <span class="keyword">int</span> age = <span class="number">20</span>;</span><br><span class="line">    test.changeValue1(age);</span><br><span class="line">    System.out.println(<span class="string">"age: "</span> + age);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例化person类</span></span><br><span class="line">    Person person = <span class="keyword">new</span> Person(<span class="string">"SOBXiong"</span>);</span><br><span class="line">    test.changeValue2(person);</span><br><span class="line">    System.out.println(<span class="string">"personName: "</span> + person.getPersonName());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// String</span></span><br><span class="line">    String str = <span class="string">"SOBXiong"</span>;</span><br><span class="line">    test.changeValue3(str);</span><br><span class="line">    System.out.println(<span class="string">"string: "</span> + str);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">age: 20</span></span><br><span class="line"><span class="comment">personName: XXXX</span></span><br><span class="line"><span class="comment">string: SOBXiong</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>ChangeValue1()执行过程<br>八种基本数据类型，在栈里面分配内存，属于值传递<br><code>栈管运行，堆管存储</code><br>执行changeValue1()时，int是基本数据类型，所以传递的是int = 20这个值，传递的是一个副本，main方法里面的age并没有改变，因此输出的结果age还是20，属于值传递<br><img src="changeValue1()%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E5%9B%BE%E8%A7%A3.png" alt="changeValue1()执行过程图解"></p></li><li><p>ChangeValue2()执行过程<br>Person是属于对象，作为方法参数时也是值传递，只不过传递的是引用——在堆空间的内存地址。执行changeValue2()时复制了内存地址，两个值都是指向同一个地址<br><img src="changeValue2()%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E5%9B%BE%E8%A7%A3.png" alt="changeValue2()执行过程图解"></p></li><li><p>ChangeValue3()执行过程<br>String不属于基本数据类型，但是为什么执行完成后值未改变？<br>这时因为String的特殊性，当执行String str = “SOBXiong”的时候，JVM会检查常量池中是否已存在”SOBXiong”，如果存在则不会创建，会生成一个引用指向常量池中的”SOBXiong”并把str赋值为引用的值；如果不存在，则会新建”SOBXiong”并把引用指向它并将str赋值为引用的值<br><img src="changeValue3()%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E5%9B%BE%E8%A7%A3.png" alt="changeValue3()执行过程图解"></p></li></ul><h2 id="Java锁的类型"><a href="#Java锁的类型" class="headerlink" title="Java锁的类型"></a>Java锁的类型</h2><ul><li><p>公平锁/非公平锁</p><ul><li>概念：<ol><li>公平锁：多个线程按照申请锁的顺序来获取锁，先来先服务，就是公平的，也即队列</li><li>非公平锁：多个线程获取锁的顺序并不是按照申请锁的顺序，有可能后申请的线程比先申请的线程优先获取锁，在高并发环境下有可能造成优先级翻转，或者饥饿线程(某个线程一直得不到锁)</li></ol></li><li>如何创建：<ol><li>并发包中ReentrantLock的创建可以指定构造函数的boolean值来得到公平锁/非公平锁，默认是非公平锁，因为非公平锁有吞吐量比公平锁高的优点<br> <code>Lock lock = new ReentrantLock(true);</code></li><li>synchronized也是一种非公平锁</li></ol></li><li>两者区别：<ol><li><strong>公平锁</strong>：很公平。在并发环境中每个线程在获取锁时会先查看此锁维护的等待队列，如果为空或当前线程是等待队列中的第一个，就占用锁，否则就会加入到等待队列中，此后按照FIFO的规则</li><li><strong>非公平锁</strong>：较粗鲁，一上来就直接尝试占有锁，如果尝试失败，再采用类似公平锁的方式</li></ol></li></ul></li><li><p>可重入锁(递归锁)</p><ul><li><p>概念：<br>可重入锁就是递归锁<br>指同一线程外层函数获得锁之后，内层递归函数仍然能获取到该锁的代码，同一线程在外层方法获取锁时，进入内层方法会自动获取锁<br>也即————<strong>线程可以进入任何一个它已拥有的锁所同步的代码块</strong><br>ReentrantLock/Synchronized是典型的可重入锁</p></li><li><p>作用：可避免死锁</p></li><li><p>可重入锁验证：</p><ul><li><p>案例一：验证Synchronized</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendSMS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">" invoked sendSMS()"</span>);</span><br><span class="line">    <span class="comment">// 在同步方法中调用另外一个同步方法</span></span><br><span class="line">    sendEmail();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">" invoked sendEmail()"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReenterLockDemo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Phone phone = <span class="keyword">new</span> Phone();</span><br><span class="line">    <span class="keyword">new</span> Thread(phone::sendSMS, <span class="string">"t1"</span>).start();</span><br><span class="line">    <span class="keyword">new</span> Thread(phone::sendSMS, <span class="string">"t2"</span>).start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>运行结果如下</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">t1 invoked sendSMS()</span><br><span class="line">t1 invoked sendEmail()</span><br><span class="line">t2 invoked sendSMS()</span><br><span class="line">t2 invoked sendEmail()</span><br></pre></td></tr></table></figure><p>说明：sendSMS()同步方法调用sendEmail()同步方法，synchronized锁的是对象，假如不是重入锁，那么sendSMS()方法要获取一次锁，sendEmail()又要获取一次锁，就会造成死锁；由于是同一线程，再次获取锁时就是sendSMS()获取的那个锁，没有新锁产生。同时由于synchronized锁的是对象，线程t1得到锁后，线程t2只能等t1运行完sendSMS()同步方法释放完锁</p></li><li><p>案例二：验证ReentrantLock</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">  Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      lock.lock();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" get Lock"</span>);</span><br><span class="line">        setLock();</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      System.out.println(Thread.currentThread().getName() + <span class="string">" set Lock"</span>);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    getLock();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReenterLockDemo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Phone phone = <span class="keyword">new</span> Phone();</span><br><span class="line">    Thread t3 = <span class="keyword">new</span> Thread(phone, <span class="string">"t3"</span>);</span><br><span class="line">    Thread t4 = <span class="keyword">new</span> Thread(phone, <span class="string">"t4"</span>);</span><br><span class="line">    t3.start();</span><br><span class="line">    t4.start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>运行结果如下</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">t3 get Lock</span><br><span class="line">t3 set Lock</span><br><span class="line">t4 get Lock</span><br><span class="line">t4 set Lock</span><br></pre></td></tr></table></figure><p>说明：与加synchronized锁一样，多次获取锁后，锁是重入的，并不会锁死自己</p></li><li><p>案例三：案例二变形</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  lock.lock();</span><br><span class="line">  lock.lock();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">" get Lock"</span>);</span><br><span class="line">    setLock();</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    lock.unlock();</span><br><span class="line">    lock.unlock();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>运行结果如下</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">t3 get Lock</span><br><span class="line">t3 set Lock</span><br><span class="line">t4 get Lock</span><br><span class="line">t4 set Lock</span><br></pre></td></tr></table></figure><p>说明：结果与案例二一样，因此不管有几把锁，实际都是同一把锁，用同一把钥匙都能打开</p></li><li><p>案例四：案例三变形</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  lock.lock();</span><br><span class="line">  lock.lock();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">" get Lock"</span>);</span><br><span class="line">    setLock();</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    lock.unlock();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>运行结果如下</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t3 get Lock</span><br><span class="line">t3 set Lock</span><br></pre></td></tr></table></figure><p>说明：加锁两次，解锁一次。程序在输出上述两句后阻塞(线程阻塞)，也就是说ReentrantLock申请加锁几次就要解锁几次</p></li><li><p>案例五：案例三变形</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  lock.lock();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">" get Lock"</span>);</span><br><span class="line">    setLock();</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    lock.unlock();</span><br><span class="line">    lock.unlock();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>运行结果如下</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">t3 get Lock</span><br><span class="line">t3 set Lock</span><br><span class="line">t4 get Lock</span><br><span class="line">t4 set Lock</span><br><span class="line">Exception in thread "t3" Exception in thread "t4" java.lang.IllegalMonitorStateException</span><br><span class="line">  at java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(ReentrantLock.java:151)</span><br><span class="line">  at java.util.concurrent.locks.AbstractQueuedSynchronizer.release(AbstractQueuedSynchronizer.java:1261)</span><br><span class="line">  at java.util.concurrent.locks.ReentrantLock.unlock(ReentrantLock.java:457)</span><br><span class="line">  at com.xiong.interview.Phone.getLock(ReenterLockDemo.java:16)</span><br><span class="line">  at com.xiong.interview.Phone.run(ReenterLockDemo.java:31)</span><br><span class="line">  at java.lang.Thread.run(Thread.java:748)</span><br><span class="line">java.lang.IllegalMonitorStateException</span><br><span class="line">  at java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(ReentrantLock.java:151)</span><br><span class="line">  at java.util.concurrent.locks.AbstractQueuedSynchronizer.release(AbstractQueuedSynchronizer.java:1261)</span><br><span class="line">  at java.util.concurrent.locks.ReentrantLock.unlock(ReentrantLock.java:457)</span><br><span class="line">  at com.xiong.interview.Phone.getLock(ReenterLockDemo.java:16)</span><br><span class="line">  at com.xiong.interview.Phone.run(ReenterLockDemo.java:31)</span><br><span class="line">  at java.lang.Thread.run(Thread.java:748)</span><br></pre></td></tr></table></figure><p>说明：加锁次数小于解锁次数，直接抛异常</p></li></ul></li></ul></li><li><p>自旋锁：</p><ul><li><p>概念：SpinLock，指尝试获取锁的线程不会立即阻塞，而是采用循环的方式去尝试获取锁。好处是减少线程上下文切换的消耗，缺点是循环会消耗CPU资源<br>上文提及的<a href="##CAS">比较并交换(CAS)</a>底层使用的就是自旋</p></li><li><p>手写自旋锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpinLockDemo</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 原子引用线程</span></span><br><span class="line">  AtomicReference&lt;Thread&gt; atomicReference = <span class="keyword">new</span> AtomicReference&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Thread thread = Thread.currentThread();</span><br><span class="line">    <span class="keyword">while</span> (!atomicReference.compareAndSet(<span class="keyword">null</span>, thread)) &#123; &#125;</span><br><span class="line">    System.out.println(thread.getName() + <span class="string">" Come in ~~~"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myUnlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Thread thread = Thread.currentThread();</span><br><span class="line">    atomicReference.compareAndSet(thread, <span class="keyword">null</span>);</span><br><span class="line">    System.out.println(thread.getName() + <span class="string">" Come out ~~~"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SpinLockDemo spinLockDemo = <span class="keyword">new</span> SpinLockDemo();</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      spinLockDemo.myLock();</span><br><span class="line">      <span class="comment">// 暂停一会</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      spinLockDemo.myUnlock();</span><br><span class="line">    &#125;,<span class="string">"Thread A"</span>).start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 暂停一会</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      spinLockDemo.myLock();</span><br><span class="line">      spinLockDemo.myUnlock();</span><br><span class="line">    &#125;,<span class="string">"Thread B"</span>).start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>运行结果如下</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Thread A Come in ~~~</span><br><span class="line">Thread A Come out ~~~</span><br><span class="line">Thread B Come in ~~~</span><br><span class="line">Thread B Come out ~~~</span><br></pre></td></tr></table></figure><p>说明：打印第1句5s后打印后三句话，而且out紧接第一句话。A线程调用myLock()方法自己持有锁5s，线程B进入方法后发现有线程持有锁，因此只能通过自旋等待，A线程调用myUnlock()方法释放锁后，线程B才能继续执行</p></li></ul></li><li><p>独占锁(写锁)/共享锁(读锁)/互斥锁</p><ul><li><p>概念：<br>独占锁：指该锁一次只能被一个线程所持有。ReentrantLock和Synchronized都是独占锁<br>共享锁：指该锁可以被多个线程锁持有<br>ReentrantReadWriteLock其读锁是共享，写锁是独占。写的时候只能一个人写，但是读的时候可以多个人同时读。读锁的共享锁可保证并发读是非常高效的。读写/写写的过程是互斥的</p></li><li><p>为什么会有写锁和读锁：<br>独占锁一次只能一个线程访问，但有一个读写分离的场景，读时想同时进行，原来独占锁的并发性就没这么好了。读锁并不会造成数据不一致的问题，因此可以多个人共享读<br>多个线程同时读一个资源类没有任何问题，为了满足并发，读取共享资源应该可以同时进行。但若有一个线程去写共享资源，就不应该再有其他线程对该资源进行读或写操作</p></li><li><p>案例：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCache</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">volatile</span> Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">"\t 正在写入："</span> + key);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 模拟网络拥堵</span></span><br><span class="line">      TimeUnit.MILLISECONDS.sleep(<span class="number">300</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    map.put(key, value);</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">"\t 写入完成"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">"\t 正在读取:"</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 模拟网络拥堵</span></span><br><span class="line">      TimeUnit.MILLISECONDS.sleep(<span class="number">300</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    Object value = map.get(key);</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">"\t 读取完成："</span> + value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    MyCache myCache = <span class="keyword">new</span> MyCache();</span><br><span class="line">    <span class="comment">// 线程操作资源类，5个线程写</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">int</span> tempInt = i;</span><br><span class="line">      <span class="keyword">new</span> Thread(() -&gt; myCache.put(tempInt + <span class="string">""</span>, tempInt + <span class="string">""</span>), String.valueOf(i)).start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 线程操作资源类， 5个线程读</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">int</span> tempInt = i;</span><br><span class="line">      <span class="keyword">new</span> Thread(() -&gt; myCache.get(tempInt + <span class="string">""</span>), String.valueOf(i)).start();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <code>运行结果如下</code></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">0 正在写入：0</span><br><span class="line">3 正在写入：3</span><br><span class="line">2 正在写入：2</span><br><span class="line">1 正在写入：1</span><br><span class="line">4 正在写入：4</span><br><span class="line">0 正在读取:</span><br><span class="line">1 正在读取:</span><br><span class="line">2 正在读取:</span><br><span class="line">3 正在读取:</span><br><span class="line">4 正在读取:</span><br><span class="line">0 写入完成</span><br><span class="line">4 读取完成：4</span><br><span class="line">3 读取完成：3</span><br><span class="line">3 写入完成</span><br><span class="line">2 写入完成</span><br><span class="line">2 读取完成：2</span><br><span class="line">4 写入完成</span><br><span class="line">0 读取完成：null</span><br><span class="line">1 写入完成</span><br><span class="line">1 读取完成：null</span><br></pre></td></tr></table></figure><ul><li><p>案例说明：在写入时，写线程被其他线程打断，这就造成还没写完就被挂起，其他线程开始写，这可能会造成数据的不一致。写操作需要原子 + 独占，整个过程必须是一个完整的统一体，中间不许被分割、打断。结果的打印顺序与真实顺序有出入，因为也是多线程的，实际读取到null的应该在写入完成之前执行</p></li><li><p>解决方案：加读写锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 增量部分</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个读写锁,是一个读写一体的锁</span></span><br><span class="line"><span class="keyword">private</span> ReentrantReadWriteLock lock = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 写锁加锁</span></span><br><span class="line">  lock.writeLock().lock();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">"\t 正在写入："</span> + key);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 模拟网络拥堵</span></span><br><span class="line">      TimeUnit.MILLISECONDS.sleep(<span class="number">300</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    map.put(key, value);</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">"\t 写入完成"</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// 写锁释放</span></span><br><span class="line">    lock.writeLock().unlock();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 读锁加锁</span></span><br><span class="line">  lock.readLock().lock();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">"\t 正在读取:"</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 模拟网络拥堵</span></span><br><span class="line">      TimeUnit.MILLISECONDS.sleep(<span class="number">300</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">"\t 读取完成："</span> + map.get(key));</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// 读锁释放</span></span><br><span class="line">    lock.readLock().unlock();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>运行结果如下</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">0 正在写入：0</span><br><span class="line">0 写入完成</span><br><span class="line">1 正在写入：1</span><br><span class="line">1 写入完成</span><br><span class="line">2 正在写入：2</span><br><span class="line">2 写入完成</span><br><span class="line">3 正在写入：3</span><br><span class="line">3 写入完成</span><br><span class="line">4 正在写入：4</span><br><span class="line">4 写入完成</span><br><span class="line">0 正在读取:</span><br><span class="line">1 正在读取:</span><br><span class="line">2 正在读取:</span><br><span class="line">3 正在读取:</span><br><span class="line">4 正在读取:</span><br><span class="line">1 读取完成：1</span><br><span class="line">3 读取完成：3</span><br><span class="line">2 读取完成：2</span><br><span class="line">4 读取完成：4</span><br><span class="line">0 读取完成：0</span><br></pre></td></tr></table></figure></li><li><p>解决方案说明：写锁一次只允许一个线程进入执行写操作，而读锁允许多个线程同时进入执行读取的操作。结果证明写入操作中间不会被打断，而读操作可以同时进入</p></li></ul></li></ul></li></ul><h2 id="死锁及定位分析"><a href="#死锁及定位分析" class="headerlink" title="死锁及定位分析"></a>死锁及定位分析</h2><ul><li><p>死锁概念：死锁是指两个或多个以上的进程在执行过程中，因争夺资源而造成一种互相等待的现象。若无外力干涉，那它们都将无法继续推进下去。如果资源充足，进程的资源请求都能得到满足，死锁出现的可能性很低，否则就会因争夺有限的资源而陷入死锁<br><img src="%E6%AD%BB%E9%94%81%E6%83%85%E5%86%B5%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="死锁情况示意图"></p></li><li><p>产生原因：</p><ol><li>系统资源不足</li><li>进程运行推进的顺序不对</li><li>资源分配不当</li></ol></li><li><p>死锁产生的四个必要条件：</p><ol><li>互斥条件：一个资源每次只能被一个进程使用</li><li>请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放</li><li>不剥夺条件：进程已获得的资源，在末使用完之前，不能强行剥夺</li><li>循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系</li></ol></li><li><p>死锁案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HoldLockThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Object lockA;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Object lockB;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">HoldLockThread</span><span class="params">(Object lockA, Object lockB)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.lockA = lockA;</span><br><span class="line">    <span class="keyword">this</span>.lockB = lockB;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (lockA) &#123;</span><br><span class="line">      System.out.println(Thread.currentThread().getName() + <span class="string">" 自己持有&#123;"</span> + lockA + <span class="string">"&#125; , 尝试获得&#123;"</span> + lockB + <span class="string">'&#125;'</span>);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">synchronized</span> (lockB) &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" 自己持有&#123;"</span> + lockB + <span class="string">"&#125; , 尝试获得&#123;"</span> + lockA + <span class="string">'&#125;'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLockDemo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Object lockA = <span class="keyword">new</span> Object(), lockB = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; <span class="keyword">new</span> HoldLockThread(lockA, lockB).run(), <span class="string">"Thread A"</span>).start();</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; <span class="keyword">new</span> HoldLockThread(lockB, lockA).run(), <span class="string">"Thread B"</span>).start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>运行结果如下</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Thread B 自己持有&#123;java.lang.Object@1b77d269&#125; , 尝试获得&#123;java.lang.Object@42f5503f&#125;</span><br><span class="line">Thread A 自己持有&#123;java.lang.Object@42f5503f&#125; , 尝试获得&#123;java.lang.Object@1b77d269&#125;</span><br></pre></td></tr></table></figure><p>说明：打印上述信息后，主线程阻塞，无法结束</p></li><li><p>排查死锁：</p><ol><li><p>使用jps命令定位进程编号：jps -l<br> <img src="jps%E5%AE%9A%E4%BD%8Djava%E8%BF%9B%E7%A8%8B%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="jps定位java进程示意图"></p></li><li><p>使用jstack命令查看堆栈信息：jstack pid</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line">Full thread dump Java HotSpot(TM) 64-Bit Server VM (25.251-b08 mixed mode):</span><br><span class="line"></span><br><span class="line">"Attach Listener" #14 daemon prio=9 os_prio=31 tid=0x00007fcd65818000 nid=0x5903 waiting on condition [0x0000000000000000]</span><br><span class="line">  java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">"DestroyJavaVM" #13 prio=5 os_prio=31 tid=0x00007fcd6607d000 nid=0xe03 waiting on condition [0x0000000000000000]</span><br><span class="line">  java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">"Thread B" #12 prio=5 os_prio=31 tid=0x00007fcd67815000 nid=0x5803 waiting for monitor entry [0x0000700006488000]</span><br><span class="line">  java.lang.Thread.State: BLOCKED (on object monitor)</span><br><span class="line">        at com.xiong.interview.HoldLockThread.run(DeadLockDemo.java:24)</span><br><span class="line">        - waiting to lock &lt;0x000000076ac374a8&gt; (a java.lang.Object)</span><br><span class="line">        - locked &lt;0x000000076ac374b8&gt; (a java.lang.Object)</span><br><span class="line">        at com.xiong.interview.DeadLockDemo.lambda$main$1(DeadLockDemo.java:34)</span><br><span class="line">        at com.xiong.interview.DeadLockDemo$$Lambda$2/1595428806.run(Unknown Source)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:748)</span><br><span class="line"></span><br><span class="line">"Thread A" #11 prio=5 os_prio=31 tid=0x00007fcd638b8000 nid=0x5703 waiting for monitor entry [0x0000700006385000]</span><br><span class="line">  java.lang.Thread.State: BLOCKED (on object monitor)</span><br><span class="line">        at com.xiong.interview.HoldLockThread.run(DeadLockDemo.java:24)</span><br><span class="line">        - waiting to lock &lt;0x000000076ac374b8&gt; (a java.lang.Object)</span><br><span class="line">        - locked &lt;0x000000076ac374a8&gt; (a java.lang.Object)</span><br><span class="line">        at com.xiong.interview.DeadLockDemo.lambda$main$0(DeadLockDemo.java:33)</span><br><span class="line">        at com.xiong.interview.DeadLockDemo$$Lambda$1/2065951873.run(Unknown Source)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:748)</span><br><span class="line"></span><br><span class="line">"Service Thread" #10 daemon prio=9 os_prio=31 tid=0x00007fcd64056800 nid=0xa903 runnable [0x0000000000000000]</span><br><span class="line">  java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">"C1 CompilerThread3" #9 daemon prio=9 os_prio=31 tid=0x00007fcd66057800 nid=0x4203 waiting on condition [0x0000000000000000]</span><br><span class="line">  java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">"C2 CompilerThread2" #8 daemon prio=9 os_prio=31 tid=0x00007fcd65052800 nid=0x4303 waiting on condition [0x0000000000000000]</span><br><span class="line">  java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">"C2 CompilerThread1" #7 daemon prio=9 os_prio=31 tid=0x00007fcd63843000 nid=0x4403 waiting on condition [0x0000000000000000]</span><br><span class="line">  java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">"C2 CompilerThread0" #6 daemon prio=9 os_prio=31 tid=0x00007fcd6604e800 nid=0x4603 waiting on condition [0x0000000000000000]</span><br><span class="line">  java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">"Monitor Ctrl-Break" #5 daemon prio=5 os_prio=31 tid=0x00007fcd6780e800 nid=0x3f03 runnable [0x0000700005c70000]</span><br><span class="line">  java.lang.Thread.State: RUNNABLE</span><br><span class="line">        at java.net.SocketInputStream.socketRead0(Native Method)</span><br><span class="line">        at java.net.SocketInputStream.socketRead(SocketInputStream.java:116)</span><br><span class="line">        at java.net.SocketInputStream.read(SocketInputStream.java:171)</span><br><span class="line">        at java.net.SocketInputStream.read(SocketInputStream.java:141)</span><br><span class="line">        at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)</span><br><span class="line">        at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)</span><br><span class="line">        at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)</span><br><span class="line">        - locked &lt;0x000000076ac839b8&gt; (a java.io.InputStreamReader)</span><br><span class="line">        at java.io.InputStreamReader.read(InputStreamReader.java:184)</span><br><span class="line">        at java.io.BufferedReader.fill(BufferedReader.java:161)</span><br><span class="line">        at java.io.BufferedReader.readLine(BufferedReader.java:324)</span><br><span class="line">        - locked &lt;0x000000076ac839b8&gt; (a java.io.InputStreamReader)</span><br><span class="line">        at java.io.BufferedReader.readLine(BufferedReader.java:389)</span><br><span class="line">        at com.intellij.rt.execution.application.AppMainV2$1.run(AppMainV2.java:61)</span><br><span class="line"></span><br><span class="line">"Signal Dispatcher" #4 daemon prio=9 os_prio=31 tid=0x00007fcd6701b000 nid=0x4803 runnable [0x0000000000000000]</span><br><span class="line">  java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">"Finalizer" #3 daemon prio=8 os_prio=31 tid=0x00007fcd65813800 nid=0x3103 in Object.wait() [0x0000700005964000]</span><br><span class="line">  java.lang.Thread.State: WAITING (on object monitor)</span><br><span class="line">        at java.lang.Object.wait(Native Method)</span><br><span class="line">        - waiting on &lt;0x000000076ab08ee0&gt; (a java.lang.ref.ReferenceQueue$Lock)</span><br><span class="line">        at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:144)</span><br><span class="line">        - locked &lt;0x000000076ab08ee0&gt; (a java.lang.ref.ReferenceQueue$Lock)</span><br><span class="line">        at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:165)</span><br><span class="line">        at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:216)</span><br><span class="line"></span><br><span class="line">"Reference Handler" #2 daemon prio=10 os_prio=31 tid=0x00007fcd66813000 nid=0x2f03 in Object.wait() [0x0000700005861000]</span><br><span class="line">  java.lang.Thread.State: WAITING (on object monitor)</span><br><span class="line">        at java.lang.Object.wait(Native Method)</span><br><span class="line">        - waiting on &lt;0x000000076ab06c00&gt; (a java.lang.ref.Reference$Lock)</span><br><span class="line">        at java.lang.Object.wait(Object.java:502)</span><br><span class="line">        at java.lang.ref.Reference.tryHandlePending(Reference.java:191)</span><br><span class="line">        - locked &lt;0x000000076ab06c00&gt; (a java.lang.ref.Reference$Lock)</span><br><span class="line">        at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:153)</span><br><span class="line"></span><br><span class="line">"VM Thread" os_prio=31 tid=0x00007fcd6580f000 nid=0x4f03 runnable</span><br><span class="line"></span><br><span class="line">"GC task thread#0 (ParallelGC)" os_prio=31 tid=0x00007fcd6500c800 nid=0x2007 runnable</span><br><span class="line"></span><br><span class="line">"GC task thread#1 (ParallelGC)" os_prio=31 tid=0x00007fcd6500d000 nid=0x1b03 runnable</span><br><span class="line"></span><br><span class="line">"GC task thread#2 (ParallelGC)" os_prio=31 tid=0x00007fcd6500e000 nid=0x1d03 runnable</span><br><span class="line"></span><br><span class="line">"GC task thread#3 (ParallelGC)" os_prio=31 tid=0x00007fcd65012800 nid=0x2a03 runnable</span><br><span class="line"></span><br><span class="line">"GC task thread#4 (ParallelGC)" os_prio=31 tid=0x00007fcd65013800 nid=0x2c03 runnable</span><br><span class="line"></span><br><span class="line">"GC task thread#5 (ParallelGC)" os_prio=31 tid=0x00007fcd65014000 nid=0x5303 runnable</span><br><span class="line"></span><br><span class="line">"GC task thread#6 (ParallelGC)" os_prio=31 tid=0x00007fcd65014800 nid=0x2e03 runnable</span><br><span class="line"></span><br><span class="line">"GC task thread#7 (ParallelGC)" os_prio=31 tid=0x00007fcd65015000 nid=0x5103 runnable</span><br><span class="line"></span><br><span class="line">"VM Periodic Task Thread" os_prio=31 tid=0x00007fcd65053000 nid=0xa803 waiting on condition</span><br><span class="line"></span><br><span class="line">JNI global references: 319</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Found one Java-level deadlock:</span><br><span class="line">=============================</span><br><span class="line">"Thread B":</span><br><span class="line">  waiting to lock monitor 0x00007fcd6504d758 (object 0x000000076ac374a8, a java.lang.Object),</span><br><span class="line">  which is held by "Thread A"</span><br><span class="line">"Thread A":</span><br><span class="line">  waiting to lock monitor 0x00007fcd6504d6a8 (object 0x000000076ac374b8, a java.lang.Object),</span><br><span class="line">  which is held by "Thread B"</span><br><span class="line"></span><br><span class="line">Java stack information for the threads listed above:</span><br><span class="line">===================================================</span><br><span class="line">"Thread B":</span><br><span class="line">        at com.xiong.interview.HoldLockThread.run(DeadLockDemo.java:24)</span><br><span class="line">        - waiting to lock &lt;0x000000076ac374a8&gt; (a java.lang.Object)</span><br><span class="line">        - locked &lt;0x000000076ac374b8&gt; (a java.lang.Object)</span><br><span class="line">        at com.xiong.interview.DeadLockDemo.lambda$main$1(DeadLockDemo.java:34)</span><br><span class="line">        at com.xiong.interview.DeadLockDemo$$Lambda$2/1595428806.run(Unknown Source)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:748)</span><br><span class="line">"Thread A":</span><br><span class="line">        at com.xiong.interview.HoldLockThread.run(DeadLockDemo.java:24)</span><br><span class="line">        - waiting to lock &lt;0x000000076ac374b8&gt; (a java.lang.Object)</span><br><span class="line">        - locked &lt;0x000000076ac374a8&gt; (a java.lang.Object)</span><br><span class="line">        at com.xiong.interview.DeadLockDemo.lambda$main$0(DeadLockDemo.java:33)</span><br><span class="line">        at com.xiong.interview.DeadLockDemo$$Lambda$1/2065951873.run(Unknown Source)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:748)</span><br><span class="line"></span><br><span class="line">Found 1 deadlock.</span><br></pre></td></tr></table></figure><p> 说明：查看最后一行，看到<code>Found 1 deadlock</code>，即存在一个死锁，上面的部分信息指示了出现问题的文件和行数</p></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx</title>
      <link href="/2020/09/06/Middleware/Nginx/"/>
      <url>/2020/09/06/Middleware/Nginx/</url>
      
        <content type="html"><![CDATA[<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><ul><li><a href="#Nginx简介">Nginx简介</a></li><li><a href="#Nginx安装">Nginx安装</a></li><li><a href="#Nginx常用的命令和配置文件">Nginx常用的命令和配置文件</a></li><li><a href="#Nginx配置实例-反向代理">Nginx配置实例-反向代理</a></li><li><a href="#Nginx配置实例-负载均衡">Nginx配置实例-负载均衡</a></li><li><a href="#Nginx配置实例-动静分离">Nginx配置实例-动静分离</a></li><li><a href="#Nginx搭建高可用集群">Nginx搭建高可用集群</a></li><li><a href="#Nginx原理简述">Nginx原理简述</a></li></ul><a id="more"></a><h2 id="Nginx简介"><a href="#Nginx简介" class="headerlink" title="Nginx简介"></a>Nginx简介</h2><ul><li>Nginx概述：是一个高性能的HTTP和反向代理服务器,特点是占有内存少，并发能力强，事实上Nginx的并发能力确实在同类型的网页服务器中表现较好</li><li>Nginx的作用：<ul><li>作为Web服务器：Nginx可以作为静态页面的web服务器，同时还支持CGI协议的动态语言，比如perl、php等。但是不支持java。Java程序只能通过与tomcat配合完成</li><li>正向代理：如果把局域网外的Internet想象成一个巨大的资源库，则局域网中的客户端要访问Internet，则需要通过代理服务器来访问，这种代理服务就称为正向代理(需要设置代理地址)</li><li>反向代理：客户端对代理是无感知的，因为客户端不需要任何配置就可以访问。我们只需要将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后再返回给客户端。此时反向代理服务器和目标服务器对外就是一个服务器，暴露的是代理服务器地址，隐藏了真实服务器IP地址</li><li>负载均衡：单个服务器解决不了并发需求，可以增加服务器的数量，然后将请求分发到各个服务器上，将原先请求集中到单个服务器上的情况变为将请求分发到多个服务器上，将负载分发到不同的服务器。这就是所说的负载均衡</li><li>动静分离：为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度。降低原来单个服务器的压力</li></ul></li></ul><h2 id="Nginx安装"><a href="#Nginx安装" class="headerlink" title="Nginx安装"></a>Nginx安装</h2><ul><li><p>进入Nginx官网<a href="http://nginx.org/" target="_blank" rel="noopener">http://nginx.org/</a>的download板块下载</p></li><li><p>具体安装Nginx</p><ul><li><p>安装所需的第三方库：pcre、openssl、zlib</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install make zlib zlib-devel gcc-c++ libtool openssl openssl-devel</span><br></pre></td></tr></table></figure></li><li><p>安装nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 解压缩nginx的tar.gz包</span></span><br><span class="line">tar -zxvf nginx-1.18.0.tar.gz -C /opt/module</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入目录,执行./configure</span></span><br><span class="line">cd /opt/module/nginx-1.18.0</span><br><span class="line">sudo ./configure</span><br><span class="line"><span class="meta">#</span><span class="bash"> make安装</span></span><br><span class="line">sudo make &amp;&amp; make install</span><br></pre></td></tr></table></figure></li><li><p>测试(注意Linux的防火墙设置)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入/usr/<span class="built_in">local</span>/nginx/sbin目录</span></span><br><span class="line">cd /usr/local/nginx/sbin</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动nginx</span></span><br><span class="line">sudo ./nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入当前虚拟机的地址的80端口,查看是否能看到Welcome to nginx</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> http://sobxiong.com</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="Nginx常用的命令和配置文件"><a href="#Nginx常用的命令和配置文件" class="headerlink" title="Nginx常用的命令和配置文件"></a>Nginx常用的命令和配置文件</h2><ul><li><p>Nginx常用的命令(当前路径:/usr/local/nginx/sbin)</p><ul><li>查看nginx版本号：./nginx -v</li><li>启动命令：./nginx</li><li>关闭命令：./nginx -s stop</li><li>重新加载命令(重新加载配置文件)：./nginx - s reload</li></ul></li><li><p>nginx.conf配置文件</p><ul><li><p>介绍：Nginx默认的配置文件都放在主目录下的conf目录，主配置文件nginx.conf也在其中，后续对nginx的使用基本上都是对此配置文件进行相应的修改</p></li><li><p>配置文件示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application&#x2F;octet-stream;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  &#x2F;50x.html;</span><br><span class="line">        location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置文件解释：根据上述文件，可以明显地将nginx.conf配置文件分为三部分</p><ul><li><p><strong>全局块</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Nginx服务器并发处理服务的关键配置,worker_processes值越大,可以支持的并发处理量也越多</span><br><span class="line"># 但是会受到硬件、软件等设备的制约,一般设置为当前计算机的CPU核心数</span><br><span class="line">worker_processes  1;</span><br></pre></td></tr></table></figure><p>从配置文件开始到events块之间的内容，主要会设置一些影响nginx服务器整体运行的配置指令，主要包括配置运行Nginx服务器的用户(组)、允许生成的worker process数、进程pid存放路径、日志存放路径和类型以及配置文件的引入等</p></li><li><p><strong>events块</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">events &#123;</span><br><span class="line">    # 每个work process支持的最大连接数为1024</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>events块涉及的指令主要影响Nginx服务器与用户的网络连接。常用的设置包括是否开启对多work process下的网络连接进行序列化、是否允许同时接收多个网络连接、选取哪种事件驱动模型来处理连接请求、每个work process可以同时支持的最大连接数等。这部分的配置对Nginx的性能影响较大，在实际中应该灵活配置</p></li><li><p><strong>http块</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application&#x2F;octet-stream;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  &#x2F;50x.html;</span><br><span class="line">            location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这算是Nginx服务器配置中修改最频繁的部分，代理、缓存和日志定义等绝大多数功能和第三方模块的配置都在这里<br><strong>http块还可以包括http全局块、server块</strong></p><ul><li>http全局块：配置的指令包括文件引入、MIME-TYPE定义、日志自定义、连接超时时间、单链接请求数上限等</li><li>server块：<br>server块和虚拟主机有密切关系。虚拟主机从用户角度看和一台独立的硬件主机是完全一样的，该技术的产生是为了节省互联网服务器硬件成本<br>每个http块可以包括多个server块，而每个server块就相当于一个虚拟主机<br>而每个server块也分为全局server块以及可以同时包含多个locaton块<ul><li>全局server块：最常见的配置是本虚拟机主机的监听配置和本虚拟主机的名称或IP配置</li><li>location块：<br>一个server块可以配置多个location块<br>该块的主要作用是基于Nginx服务器接收到的请求字符串(例如server_name/uri-string)，对虚拟主机名称(也可以是IP别名)之外的字符串(例如前面的/uri-string)进行匹配，对特定的请求进行处理。地址定向、数据缓存和应答控制等功能，还有许多第三方模块的配置也在这里进行</li></ul></li></ul></li></ul></li></ul></li></ul><h2 id="Nginx配置实例-反向代理"><a href="#Nginx配置实例-反向代理" class="headerlink" title="Nginx配置实例-反向代理"></a>Nginx配置实例-反向代理</h2><ul><li><p>反向代理实例1</p><ul><li><p>最终需求：使用nginx反向代理，访问 <a href="http://www.123.com" target="_blank" rel="noopener">www.123.com</a> 跳转到虚拟机的8080端口</p></li><li><p>实现步骤：</p><ul><li><p>测试端口8080准备：</p><ul><li>虚拟机安装Tomcat并启动(启动命令bin/startup.sh)</li><li>在mac中通过浏览器访问虚拟机Tomcat主页：<a href="http://172.16.85.201:8080" target="_blank" rel="noopener">http://172.16.85.201:8080</a></li></ul></li><li><p>修改host文件：在mac中修改hosts文件，将 <a href="http://www.123.com" target="_blank" rel="noopener">www.123.com</a> 映射到虚拟机地址172.16.85.201。此时可以通过 <a href="http://www.123.com:8080" target="_blank" rel="noopener">www.123.com:8080</a> 访问到测试端口</p></li><li><p>修改Nginx配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen  80;</span><br><span class="line">    server_name 172.16.85.201;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;127.0.0.1:8080;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>最终测试</li></ul></li></ul></li></ul></li><li><p>反向代理实例2</p><ul><li><p>最终需求：使用Nginx反向代理，根据访问的路径跳转到不同端口的服务中。其中Nginx监听端口为 9001，要求访问<a href="http://172.16.85.201:9001/edu/" target="_blank" rel="noopener">http://172.16.85.201:9001/edu/</a>直接跳转到172.16.85.201:8080，访问<a href="http://172.16.85.201:9001/vod/" target="_blank" rel="noopener">http://172.16.85.201:9001/vod/</a>直接跳转到172.16.85.201:8081</p></li><li><p>实现步骤：</p><ul><li><p>准备两个Tomcat服务器，一个8080端口，一个8081端口；创建文件夹和测试页面(在8080的Tomcat目录下创建edu目录，其内创建一个a.html测试页面;同理在8081的Tomcat目录下创建vod目录，其内创建一个b.html测试页面)</p></li><li><p>修改Nginx配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen  9001;</span><br><span class="line">    server_name 172.16.85.201;</span><br><span class="line"></span><br><span class="line">    location ~ &#x2F;edu&#x2F; &#123;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;127.0.0.1:8080;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ &#x2F;vod&#x2F; &#123;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;127.0.0.1:8081;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>分别测试网址&lt;172.16.85.201:9001/edu/a.html&gt;和&lt;172.16.85.201:9001/vod/b.html&gt;，验证结果</p></li></ul></li></ul></li><li><p>Location指令说明</p><ul><li><p>用途：用于匹配URL</p></li><li><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location [ &#x3D; | ~ | ~* | ^~] uri &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>参数说明：</p><ul><li>= ：用于不含正则表达式的uri前，要求请求字符串与uri严格匹配，如果匹配成功，就停止继续向下搜索并立即处理该请求</li><li>~：用于表示uri包含正则表达式，并且区分大小写</li><li>~*：用于表示uri包含正则表达式，并且不区分大小写</li><li>^~：用于不含正则表达式的uri前，要求Nginx服务器找到标识uri和请求字符串匹配度最高的 location后，立即使用此location处理请求，而不再使用location块中的正则uri和请求字符串做匹配</li><li><strong>如果uri包含正则表达式，则必须要有<del>或者</del>*标识</strong></li></ul></li></ul></li></ul><h2 id="Nginx配置实例-负载均衡"><a href="#Nginx配置实例-负载均衡" class="headerlink" title="Nginx配置实例-负载均衡"></a>Nginx配置实例-负载均衡</h2><ul><li><p>负载均衡示例</p><ul><li><p>最终效果：浏览器访问<a href="http://172.16.85.201/edu.a.html" target="_blank" rel="noopener">http://172.16.85.201/edu.a.html</a>，能够将请求负载均衡到8080端口和8081端口</p></li><li><p>准备工作：</p><ul><li>准备一台虚拟机，装上两个Tomcat服务器，端口为8080和8081</li><li>在两个Tomcat服务器的webapps目录中，创建edu文件夹和其中的a.html用于测试</li></ul></li><li><p>在Nginx的配置文件中进行负载均衡的配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">upstream myserver&#123;</span><br><span class="line">  server 172.16.85.201:8080;</span><br><span class="line">  server 172.16.85.201:8081;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  listen       80;</span><br><span class="line">  server_name  172.16.85.201;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">    proxy_pass  http://myserver;</span><br><span class="line">    root   html;</span><br><span class="line">    index  index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Nginx分配服务器策略</p><ul><li><p>轮询(默认)：每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除</p></li><li><p>weight(权重)：weight代表权重，默认为1，权重越高被分配的客户端越多</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream myserver&#123;</span><br><span class="line">  server 172.16.85.201:8080 weight=10;</span><br><span class="line">  server 172.16.85.201:8081 weight=20;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ip_hash(适用于session)：每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream myserver&#123;</span><br><span class="line">  ip_hash;</span><br><span class="line">  server 172.16.85.201:8080;</span><br><span class="line">  server 172.16.85.201:8081;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>fair(第三方,公平)：按后端服务器的响应时间来分配请求，响应时间短的优先分配</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream myserver&#123;</span><br><span class="line">  server 172.16.85.201:8080;</span><br><span class="line">  server 172.16.85.201:8081;</span><br><span class="line">  fair;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="Nginx配置实例-动静分离"><a href="#Nginx配置实例-动静分离" class="headerlink" title="Nginx配置实例-动静分离"></a>Nginx配置实例-动静分离</h2><ul><li><p>基本介绍：Nginx动静分离简单来说就是把动态跟静态请求分开，不能理解成只是单纯的把动态页面和<br>静态页面物理分离。严格意义上说应该是动态请求跟静态请求分开，可以理解成使用Nginx处理静态页面，Tomcat处理动态页面。动静分离从目前实现角度来讲大致分为两种：一种是纯粹把静态文件独立成单独的域名，放在独立的服务器上，也是目前主流推崇的方案；另外一种方法就是动态跟静态文件混合在一起发布，通过nginx来分开</p></li><li><p>动静分离示例</p><ul><li><p>准备工作：在虚拟机linux系统的本地文件系统中准备静态资源，用于进行访问</p></li><li><p>Nginx进行动静分离的配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen       80;</span><br><span class="line">  server_name  172.16.85.201;</span><br><span class="line"></span><br><span class="line">  location /text/ &#123;</span><br><span class="line">    root    /opt/data/;</span><br><span class="line">    index   index.html index.htm;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  location /image/ &#123;</span><br><span class="line">    root    /opt/data/;</span><br><span class="line">    # 开启该配置后,访问/image/页面会展示当前目录下的文件基本信息列表</span><br><span class="line">    autoindex   on;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="Nginx搭建高可用集群"><a href="#Nginx搭建高可用集群" class="headerlink" title="Nginx搭建高可用集群"></a>Nginx搭建高可用集群</h2><ul><li><p>准备工作：</p><ul><li><p>准备两台Linux虚拟机，各自都装上Nginx</p></li><li><p>在两台服务器安装keepalived：yum install keepalived -y</p></li><li><p>修改/etc/keepalived下的keepalived.conf配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">  notification_email &#123;</span><br><span class="line">    acassen@firewall.loc</span><br><span class="line">    failover@firewall.loc</span><br><span class="line">    sysadmin@firewall.loc</span><br><span class="line">  &#125;</span><br><span class="line">  notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line">  smtp_server 172.16.85.201</span><br><span class="line">  smtp_connect_timeout 30</span><br><span class="line">  router_id LVS_DEVEL</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script chk_http_port &#123;</span><br><span class="line">  script "/opt/data/nginx_check.sh"</span><br><span class="line">  #(检测脚本执行的间隔)</span><br><span class="line">  interval 2</span><br><span class="line">  weight 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">  # 备份服务器上将MASTER改为BACKUP</span><br><span class="line">  state MASTER</span><br><span class="line">  # 网卡</span><br><span class="line">  interface ens33</span><br><span class="line">  # 主、备机的virtual_router_id必须相同</span><br><span class="line">  virtual_router_id 51</span><br><span class="line">  # 主、备机取不同的优先级,主机值较大,备份机值较小</span><br><span class="line">  priority 100</span><br><span class="line">  advert_int 1</span><br><span class="line">  authentication &#123;</span><br><span class="line">    auth_type PASS</span><br><span class="line">    auth_pass 1111</span><br><span class="line">  &#125;</span><br><span class="line">  virtual_ipaddress &#123;</span><br><span class="line">    # VRRP H 虚拟地址</span><br><span class="line">    172.16.85.250</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在/opt/data下添加检测脚本文件nginx_check.sh：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">A=`ps -C nginx –no-header |wc -l`</span><br><span class="line">if [ $A -eq 0 ];then</span><br><span class="line">    /usr/local/nginx/sbin/nginx</span><br><span class="line">    sleep 2</span><br><span class="line">    if [ `ps -C nginx --no-header |wc -l` -eq 0 ];then</span><br><span class="line">        killall keepalived</span><br><span class="line">    fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li><li><p>启动两台Linux虚拟机上的nginx和keepalived</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动nginx(/usr/<span class="built_in">local</span>/nginx/sbin)</span></span><br><span class="line">./nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动keepalived服务</span></span><br><span class="line">systemctl start keepalived.service</span><br></pre></td></tr></table></figure></li><li><p>输入ifconfig可以查看到虚拟ip——172.16.85.250</p></li></ul></li><li><p>测试</p><ul><li>在主机上访问172.16.85.250，nginx主页显示正常</li><li>把主服务器(172.16.85.250)的nginx和keepalived停止</li><li>再次访问172.16.85.250，主页依旧正常</li></ul></li></ul><h2 id="Nginx原理简述"><a href="#Nginx原理简述" class="headerlink" title="Nginx原理简述"></a>Nginx原理简述</h2><ul><li>Nginx主要采用master-worker模式</li><li>一个master和多个worker的好处：<ul><li>可以使用nginx –s reload热部署</li><li>每个worker是独立的进程，如果有其中的一个worker出现问题，其他worker可继续进行争抢，实现请求过程，不会造成服务中断</li></ul></li><li>worker个数：和服务器cpu数相等</li><li>发送请求，占用了多少worker的连接数：2/4</li><li>Nginx有一个master，有四个worker，每个worker支持最大的连接数1024，那么支持的最大并发数是多少?<br>普通的静态访问最大并发数是worker_connections * worker_processes / 2；如果作为反向代理，最大并发数量应该是worker_connections * worker_processes / 4</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Middleware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark</title>
      <link href="/2020/09/04/BigData/Spark/"/>
      <url>/2020/09/04/BigData/Spark/</url>
      
        <content type="html"><![CDATA[<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><ul><li><a href="#Spark概述">Spark概述</a></li><li><a href="#Spark快速上手">Spark快速上手</a></li><li><a href="#Spark运行环境">Spark运行环境</a></li><li><a href="#Spark核心编程">Spark核心编程</a></li></ul><a id="more"></a><h2 id="Spark概述"><a href="#Spark概述" class="headerlink" title="Spark概述"></a>Spark概述</h2><ul><li>Spark是什么：一种基于内存的快速、通用、可扩展的大数据分析计算引擎(unified analytics engine for large-scale data processing)</li><li>Spark And Hadoop<ul><li>从时间节点上看：<ul><li>Hadoop<ul><li>2006年1月，Doug Cutting加入Yahoo，领导Hadoop的开发</li><li>2008年1月，Hadoop成为Apache顶级项目</li><li>2011年1.0正式发布</li><li>2012年3月稳定版发布</li><li>2013年10月发布2.X(Yarn)版本</li></ul></li><li>Spark<ul><li>2009年，Spark诞生于伯克利大学的AMPLab实验室</li><li>2010年，伯克利大学正式开源了Spark项目</li><li>2013年6月，Spark成为了Apache基金会下的项目</li><li>2014年2月，Spark以飞快的速度成为了Apache的顶级项目</li><li>2015年至今，Spark变得愈发火爆，大量的国内公司开始重点部署或者使用Spark</li></ul></li></ul></li><li>从功能上看：<ul><li>Hadoop<ul><li>Hadoop是由Java编写的，在分布式服务器集群上存储海量数据并运行分布式分析应用的开源框架</li><li>作为Hadoop分布式文件系统，HDFS处于Hadoop生态圈的最下层，存储着所有的数据，支持着Hadoop的所有服务。它的理论基础源于Google的The Google File System这篇论文，是GFS的开源实现</li><li>MapReduce是一种编程模型，Hadoop根据Google的MapReduce论文将其实现。作为Hadoop的分布式计算模型，MapReduce是Hadoop的核心。基于这个框架，分布式并行程序的编写变得异常简单。综合了HDFS的分布式存储和MapReduce的分布式计算，Hadoop在处理海量数据时，性能横向扩展变得非常容易</li><li>HBase是对Google的Bigtable的开源实现，但又和Bigtable存在许多不同之处。HBase是一个基于HDFS的分布式数据库，擅长实时地随机读/写超大规模数据集。它也是Hadoop中非常重要的组件</li></ul></li><li>Spark<ul><li>Spark是一种由Scala开发的快速、通用、可扩展的大数据分析引擎</li><li>Spark Core中提供了Spark最基础与最核心的功能</li><li>Spark SQL是Spark用来操作结构化数据的组件。通过Spark SQL，用户可以使用SQL或者Apache Hive版本的SQL方言(HQL)来查询数据</li><li>Spark Streaming是Spark平台针对实时数据进行流式计算的组件，提供了丰富的处理数据流的API</li></ul></li></ul></li><li>综合以上，Spark出现的时间相对较晚，并且主要功能主要是用于数据计算。因此Spark一直被认为是Hadoop MapReduce框架的升级版</li></ul></li><li>Spark Or Hadoop<ul><li>Hadoop MapReduce由于其设计初衷并不是为了满足循环迭代式数据流处理，因此在多并行运行的数据可复用场景(如：机器学习、图挖掘算法、交互式数据挖掘算法)中存在诸多计算效率等问题。因此Spark应运而生，Spark就是在传统的MapReduce计算框架的基础上，优化其计算过程，从而大大加快了数据分析、挖掘的运行和读写速度，并将计算单元缩小到更适合并行计算和重复使用的RDD计算模型</li><li>机器学习中ALS、凸优化梯度下降等都需要基于数据集或者数据集的衍生数据反复查询、反复操作。MR模式不太合适，即使多MR串行处理，性能和时间也是一个问题，而且数据的共享依赖于磁盘。另外一种是交互式数据挖掘，MR显然不擅长。而Spark所基于的Scala语言恰恰擅长函数的处理</li><li>Spark是一个分布式数据快速分析项目。它的核心技术是弹性分布式数据集(Resilient Distributed Datasets)，它提供了比MapReduce更丰富的模型，可以快速在内存中对数据集进行多次迭代，来支持复杂的数据挖掘算法和图形计算算法</li><li><strong>Spark和Hadoop的根本差异是多个作业之间的数据通信问题：Spark多个作业之间的数据通信是基于内存的，而Hadoop是基于磁盘的</strong></li><li>Spark Task的启动时间快。Spark采用fork线程的方式，而Hadoop采用创建新的进程的方式</li><li>Spark只有在shuffle的时候将数据写入磁盘，而Hadoop中多个MR作业之间的数据交互都要依赖于磁盘交互</li><li>Spark的缓存机制比HDFS的缓存机制高效</li><li>综上所述，在绝大多数的数据计算场景中，Spark确实会比MapReduce更有优势。但Spark是基于内存的，所以在实际的生产环境中，由于内存的限制，可能会由于内存资源不够而导致Job执行失败，此时MapReduce是一个更好的选择，所以Spark并不能完全替代MR</li></ul></li><li>Spark核心模块<br><img src="Spark%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97.png" alt="Spark核心模块"><ul><li>Spark Core：Spark Core中提供了Spark最基础与最核心的功能。Spark其他的功能如Spark SQL、Spark Streaming、GraphX以及MLlib都是在Spark Core的基础上进行扩展的</li><li>Spark SQL：Spark SQL是Spark用来操作结构化数据的组件。通过Spark SQL，用户可以使用SQL或者Apache Hive版本的SQL方言(HQL)来查询数据</li><li>Spark Streaming：Spark Streaming是Spark平台针对实时数据进行流式计算的组件，提供了丰富的处理数据流的API</li><li>Spark MLlib：MLlib是Spark提供的一个机器学习算法库。MLlib不仅提供了模型评估、数据导入等额外的功能，还提供了一些更底层的机器学习原语</li><li>Spark GraphX：GraphX是Spark面向图计算提供的框架与算法库</li></ul></li></ul><h2 id="Spark快速上手"><a href="#Spark快速上手" class="headerlink" title="Spark快速上手"></a>Spark快速上手</h2><ul><li><p>在IDEA上初体验Spark API</p><ul><li><p>创建Maven项目(IDEA中最简单的maven项目,不采用任何模版项目)</p></li><li><p>IDEA安装Scala插件</p></li><li><p>pom添加依赖关系</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-core_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 该插件用于将Scala代码编译成class文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.alchim31.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scala-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 声明绑定到maven的compile阶段 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>testCompile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="tag">&lt;/<span class="name">descriptorRef</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>WordCount案例</p><ul><li><p>配置log4j日志输出(过滤Spark框架的执行日志)——在resource目录下创建log4j.properties文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">log4j.rootCategory</span>=<span class="string">ERROR, console</span></span><br><span class="line"><span class="meta">log4j.appender.console</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.console.target</span>=<span class="string">System.err</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout.ConversionPattern</span>=<span class="string">%d&#123;yy/MM/dd HH:mm:ss&#125; %p %c&#123;1&#125;: %m%n</span></span><br><span class="line"><span class="comment"># Set the default spark-shell log level to ERROR. When running the spark-shell, the</span></span><br><span class="line"><span class="comment"># log level for this class is used to overwrite the root logger's log level, so that</span></span><br><span class="line"><span class="comment"># the user can have different defaults for the shell and regular Spark apps.</span></span><br><span class="line"><span class="meta">log4j.logger.org.apache.spark.repl.Main</span>=<span class="string">ERROR</span></span><br><span class="line"><span class="comment"># Settings to quiet third party logs that are too verbose</span></span><br><span class="line"><span class="meta">log4j.logger.org.spark_project.jetty</span>=<span class="string">ERROR</span></span><br><span class="line"><span class="meta">log4j.logger.org.spark_project.jetty.util.component.AbstractLifeCycle</span>=<span class="string">ERROR</span></span><br><span class="line"><span class="meta">log4j.logger.org.apache.spark.repl.SparkIMain$exprTyper</span>=<span class="string">ERROR</span></span><br><span class="line"><span class="meta">log4j.logger.org.apache.spark.repl.SparkILoop$SparkILoopInterpreter</span>=<span class="string">ERROR</span></span><br><span class="line"><span class="meta">log4j.logger.org.apache.parquet</span>=<span class="string">ERROR</span></span><br><span class="line"><span class="meta">log4j.logger.parquet</span>=<span class="string">ERROR</span></span><br><span class="line"><span class="comment"># SPARK-9183: Settings to avoid annoying messages when looking up nonexistent UDFs in SparkSQL with Hive support</span></span><br><span class="line"><span class="meta">log4j.logger.org.apache.hadoop.hive.metastore.RetryingHMSHandler</span>=<span class="string">FATAL</span></span><br><span class="line"><span class="meta">log4j.logger.org.apache.hadoop.hive.ql.exec.FunctionRegistry</span>=<span class="string">ERROR</span></span><br></pre></td></tr></table></figure></li><li><p>案例代码：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark02_WordCount</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// Spark是一个计算框架</span></span><br><span class="line">    <span class="comment">// 开发人员使用Spark框架的Api实现计算</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1、准备Spark环境</span></span><br><span class="line">    <span class="comment">// setMaster：设定Spark环境的位置</span></span><br><span class="line">    <span class="keyword">val</span> sparkConfig = <span class="keyword">new</span> <span class="type">SparkConf</span>()</span><br><span class="line">      .setMaster(<span class="string">"local"</span>)</span><br><span class="line">      .setAppName(<span class="string">"wordCount"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、建立和Spark的连接</span></span><br><span class="line">    <span class="comment">// jdbc：connection</span></span><br><span class="line">    <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConfig)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、实现业务操作</span></span><br><span class="line">    <span class="comment">// 3.1、读取指定目录下的数据文件(多个)</span></span><br><span class="line">    <span class="comment">// 参数path可以指向单一的文件/文件目录</span></span><br><span class="line">    <span class="comment">// RDD: 更适合并行计算的数据模型</span></span><br><span class="line">    <span class="keyword">val</span> fileRDD: <span class="type">RDD</span>[<span class="type">String</span>] = sparkContext.textFile(path = <span class="string">"./src/main/resources/input"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.2、将读取的内容进行扁平化操作,切分单词</span></span><br><span class="line">    <span class="keyword">val</span> wordRDD: <span class="type">RDD</span>[<span class="type">String</span>] = fileRDD.flatMap(_.split(<span class="string">" "</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.3、将分词后的数据进行结构的转换</span></span><br><span class="line">    <span class="comment">// word -&gt; (word,1)</span></span><br><span class="line">    <span class="keyword">val</span> mapRDD: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = wordRDD.map(word =&gt; (word, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.4、将转换结构后的数据根据单词进行分组聚合</span></span><br><span class="line">    <span class="comment">// reduceByKey: 根据数据key进行分组,然后对value进行统计聚合</span></span><br><span class="line">    <span class="keyword">val</span> wordSumRDD: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = mapRDD.reduceByKey(_ + _)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印</span></span><br><span class="line">    <span class="keyword">val</span> wordCountArray: <span class="type">Array</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = wordSumRDD.collect()</span><br><span class="line">    println(wordCountArray.mkString(<span class="string">","</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4、释放连接</span></span><br><span class="line">    sparkContext.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="Spark运行环境"><a href="#Spark运行环境" class="headerlink" title="Spark运行环境"></a>Spark运行环境</h2><ul><li><p>基本介绍：Spark作为一个数据处理框架和计算引擎，被设计在所有常见的集群环境中运行，在国内工作中主流的环境为Yarn，不过逐渐容器式环境也慢慢流行起来<br><img src="Spark%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83.png" alt="Spark运行环境"></p></li><li><p>Local本地模式</p><ul><li><p>介绍：所谓的Local模式就是不需要其他任何节点资源就可以在本地执行Spark代码的环境，一般用于教学、调试、演示等。而之前在IDEA中运行代码的环境我们称之为开发环境</p></li><li><p>环境准备：</p><ul><li>解压缩spark文件</li><li>引入hadoop等Jar包</li></ul></li><li><p>启动Local环境</p><ul><li><p>进入解压缩的目录，执行：bin/spark-shell –master local[*]</p></li><li><p>启动后，可以使用当前主机的4040端口进行Web UI监控</p></li><li><p>命令行工具</p><ul><li><p>准备：在spark根目录下的data目录中，添加word.txt文件，准备一些英文单词</p></li><li><p>在Local环境中输入</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc.textFile(<span class="string">"data/word.txt"</span>).flatMap(_.split(<span class="string">""</span>)).map((_,<span class="number">1</span>)).reduceByKey(_+_).collect</span><br></pre></td></tr></table></figure></li><li><p>回车后会实时输出结果，sc是Spark Context的简写，该变量由命令行工具提供</p></li><li><p>退出：:quit(Scala)或者Ctrl + C</p></li></ul></li><li><p>提交应用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bin/spark-submit \</span><br><span class="line">--class org.apache.spark.examples.SparkPi \</span><br><span class="line">--master local[2] \</span><br><span class="line">./examples/jars/spark-examples_2.12-2.4.5.jar \</span><br><span class="line">10</span><br></pre></td></tr></table></figure></li><li><p>提交应用参数解释</p><ul><li>–class：表示要执行程序的主类</li><li>–master local[2]：部署模式，默认为本地模式，数字表示分配的虚拟CPU核数量</li><li>spark-examples_2.12-2.4.5.jar：运行的应用类所在的jar包</li><li>10：表示程序的入口参数，用于设定当前应用的任务数量</li></ul></li></ul></li></ul></li><li><p>Standalone模式</p><ul><li><p>介绍：local本地模式只是用来进行练习演示的，真实工作中还是要将应用提交到对应的集群中去执行。Spark自身节点运行的集群模式叫做独立部署(Standalone)模式。Spark的Standalone模式体现了经典的master-slave模式</p></li><li><p>集群规划：</p><table><thead><tr><th>hadoop101</th><th>hadoop102</th><th>hadoop103</th></tr></thead><tbody><tr><td>Worker Master</td><td>Worker</td><td>Worker</td></tr></tbody></table></li><li><p>环境准备</p><ul><li><p>解压缩spark文件</p></li><li><p>引入hadoop等Jar包</p></li><li><p>修改配置(conf目录)</p><ul><li><p>修改slaves.template文件名改为slaves</p></li><li><p>修改slaves文件，添加work节点：hadoop101、hadoop102、hadoop103(用回车分割,不能其他空格空行)</p></li><li><p>修改spark-env.sh.template文件名为spark-env.sh</p></li><li><p>修改spark-env.sh文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/opt/module/jdk1.8.0_251</span><br><span class="line">SPARK_MASTER_HOST=hadoop101</span><br><span class="line">SPARK_MASTER_PORT=7077</span><br></pre></td></tr></table></figure></li><li><p>分发配置文件：xsync spark-env.sh</p></li></ul></li></ul></li><li><p>启动集群</p><ul><li>执行脚本命令：sbin/start-all.sh</li><li>查看Master资源监控Web UI界面：<a href="http://hadoop101:8080" target="_blank" rel="noopener">http://hadoop101:8080</a></li></ul></li><li><p>提交应用(–master spark://hadoop101:7077：独立部署模式,连接到Spark集群)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bin/spark-submit \</span><br><span class="line">--class org.apache.spark.examples.SparkPi \</span><br><span class="line">--master spark://hadoop101:7077 \</span><br><span class="line">./examples/jars/spark-examples_2.12-2.4.5.jar \</span><br><span class="line">10</span><br></pre></td></tr></table></figure></li><li><p>提交参数说明</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bin/spark-submit \</span><br><span class="line">--class &lt;main-class&gt;</span><br><span class="line">--master &lt;master-url&gt; \</span><br><span class="line">... # other options</span><br><span class="line">&lt;application-jar&gt; \</span><br><span class="line">[application-arguments]</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>解释</th><th>可选值举例</th></tr></thead><tbody><tr><td>–class</td><td>Spark程序中包含主函数的类</td><td>/</td></tr><tr><td>–master</td><td>Spark程序运行的模式</td><td>local模式(local[*])、standalone模式(spark://hadoop101:7077)、Yarn模式(Yarn)</td></tr><tr><td>–executor-memory 1G</td><td>指定每个executor可用内存为1G</td><td>符合集群内存配置即可，具体情况具体分析</td></tr><tr><td>–total-executor-cores 2</td><td>指定所有executor使用的cpu核数为2个</td><td>同上</td></tr><tr><td>–executor-cores</td><td>指定每个executor使用的cpu核数</td><td>同上</td></tr><tr><td>application-jar</td><td>打包好的应用jar(包含依赖)。该URL在集群中全局可见。比如hdfs://共享存储系统；如果是file://path，那么所有的节点的path都要包含同样的jar</td><td>同上</td></tr><tr><td>application-arguments</td><td>传给main()方法的参数</td><td>同上</td></tr></tbody></table></li><li><p>配置历史服务器</p><ul><li><p>介绍：由于spark-shell停止或spark任务结束后，集群监控的4040页面就看不到历史任务的运行情况，所以开发时都配置历史服务器记录任务运行情况</p></li><li><p>具体配置步骤：</p><ul><li><p>修改spark-defaults.conf.template文件名为spark-defaults.conf</p></li><li><p>修改spark-default.conf文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 设置开启日志记录</span><br><span class="line">spark.eventLog.enabled  true</span><br><span class="line"># 设置日志存储路径</span><br><span class="line">spark.eventLog.dir  hdfs://hadoop101:9000/spark_log</span><br></pre></td></tr></table></figure></li><li><p>启动hadoop集群，hdfs上的spark_log目录需要提前存在</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sbin/start-dfs.sh</span><br><span class="line">hadoop dfs -mkdir /spark_log</span><br></pre></td></tr></table></figure></li><li><p>修改spark-env.sh文件，添加日志配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 设置历史日志选项</span><br><span class="line"># 参数1：Web UI访问端口号</span><br><span class="line"># 参数2：指定历史服务器日志存储路径</span><br><span class="line"># 参数3: 指定保存Application历史记录的个数,如果超过这个值,旧的应用程序信息将被删除(是内存中的应用数,而不是页面上显示的应用数)</span><br><span class="line">export SPARK_HISTORY_OPTS="</span><br><span class="line">-Dspark.history.ui.port=18080</span><br><span class="line">-Dspark.history.fs.logDirectory=hdfs://hadoop101:9000/spark_log</span><br><span class="line">-Dspark.history.retainedApplications=30"</span><br></pre></td></tr></table></figure></li><li><p>分发配置文件：xsync conf</p></li><li><p>重启集群和历史服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sbin/start-all.sh</span><br><span class="line">sbin/start-history-server.sh</span><br></pre></td></tr></table></figure></li><li><p>重新执行任务</p></li><li><p>查看历史服务情况：<a href="http://hadoop101:18080" target="_blank" rel="noopener">http://hadoop101:18080</a></p></li></ul></li></ul></li><li><p>配置高可用(HA)</p><ul><li><p>介绍：所谓的高可用是因为当前集群中的Master节点只有一个，因此会存在单点故障问题。为了解决单点故障问题，需要在集群中配置多个Master节点，一旦处于活动状态的Master发生故障时，由备用Master提供服务，保证作业可以继续执行。这里的高可用一般采用Zookeeper设置</p></li><li><p>集群规划：</p><table><thead><tr><th>hadoop101</th><th>hadoop102</th><th>hadoop103</th></tr></thead><tbody><tr><td>Master、Zookeeper、Worker</td><td>Master、Zookeeper、Worker</td><td>Zookeeper、Worker</td></tr></tbody></table></li><li><p>停止集群：sbin/stop-all.sh</p></li><li><p>启动Zookeeper：bin/zkServer.sh start</p></li><li><p>修改spark-env.sh配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 注释master的host和port,不能把master固定</span><br><span class="line"># SPARK_MASTER_HOST=hadoop101</span><br><span class="line"># SPARK_MASTER_PORT=7077</span><br><span class="line">SPARK_MASTER_WEBUI_PORT=8989</span><br><span class="line"></span><br><span class="line"># 设置zookeeper配置</span><br><span class="line">export SPARK_DAEMON_JAVA_OPTS="</span><br><span class="line">-Dspark.deploy.recoveryMode=ZOOKEEPER</span><br><span class="line">-Dspark.deploy.zookeeper.url=hadoop101,hadoop102,hadoop103</span><br><span class="line">-Dspark.deploy.zookeeper.dir=/spark"</span><br></pre></td></tr></table></figure></li><li><p>分发配置文件：xsync spark-env.sh</p></li><li><p>重启集群：sbin/start-all.sh</p></li><li><p>启动hadoop102的单独master节点(使hadoop102节点的master状态处于备用状态)：sbin/start-master.sh</p></li><li><p>提交应用到高可用集群：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bin/spark-submit \</span><br><span class="line">--class org.apache.spark.examples.SparkPi \</span><br><span class="line">--master spark://hadoop101:7077,hadoop102:7077 \</span><br><span class="line">--deploy-mode cluster \</span><br><span class="line">./examples/jars/spark-examples_2.12-2.4.5.jar \</span><br><span class="line">10</span><br></pre></td></tr></table></figure></li><li><p>停止hadoop101的master进程：kill -9 xxx(Master的进程号)</p></li><li><p>查看hadoop102的Master资源监控Web UI(8989端口)，经过一段时间，hadoop102节点master状态提升为活动状态</p></li></ul></li></ul></li><li><p>Yarn模式</p><ul><li><p>基本介绍：独立部署(Standalone)模式由Spark自身提供计算资源，无需其他框架提供资源。这种方式降低了和其他第三方资源框架的耦合性，独立性非常强。但是Spark主要是计算框架，而不是资源调度框架，所以资源调度并不是它的强项，因此还是和其他专业的资源调度框架集成会更靠谱一些。其中，在国内工作中，Yarn使用的非常多</p></li><li><p>环境准备</p><ul><li><p>解压缩spark文件</p></li><li><p>引入hadoop等Jar包</p></li><li><p>修改配置文件</p><ul><li><p><strong>hadoop的配置文件yarn-site.xml</strong>，并分发</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  是否启动一个线程检查每个任务正使用的物理内存量,如果任务超出分配值,</span></span><br><span class="line"><span class="comment">  则直接将其杀掉,默认是true</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.pmem-check-enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  是否启动一个线程检查每个任务正使用的虚拟内存量,</span></span><br><span class="line"><span class="comment">  如果任务超出分配值,则直接将其杀掉,默认是true</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.vmem-check-enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>spark的配置文件spark-env.sh，并分发</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/opt/module/jdk1.8.0_251</span><br><span class="line"># 设置yarn配置目录</span><br><span class="line">YARN_CONF_DIR=/opt/module/hadoop-3.1.3/etc/hadoop</span><br></pre></td></tr></table></figure></li></ul></li><li><p>启动HDFS和YARN集群</p></li><li><p>提交应用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bin/spark-submit \</span><br><span class="line">--class org.apache.spark.examples.SparkPi \</span><br><span class="line">--master yarn \</span><br><span class="line">./examples/jars/spark-examples_2.12-2.4.5.jar \</span><br><span class="line">10</span><br></pre></td></tr></table></figure></li><li><p>之后便可以在hadoop102节点的8088的Web UI上查看到跑的Spark应用</p></li><li><p>配置历史服务器</p><ul><li><p>参照Standalone模式的spark-env.sh配置</p></li><li><p>修改spark-defaults.conf配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spark.yarn.historyServer.address=hadoop101:18080</span><br><span class="line">spark.history.ui.port=18080</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li><li><p>k8s以及Mesos模式</p><ul><li><p>Mesos介绍：Mesos是Apache下的开源分布式资源管理框架，它被称为是分布式系统的内核，在Twitter得到广泛使用，管理着Twitter超过300000台服务器上的应用部署。但国内依然使用着传统的Hadoop大数据框架，所以国内使用Mesos框架的并不多，但原理其实都差不多<br><img src="Mesos%E6%A1%86%E6%9E%B6%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="Mesos框架架构图"></p></li><li><p>k8s模式：容器化部署是目前业界很流行的一项技术，基于Docker镜像运行能够让用户更加方便地对应用进行管理和运维。容器管理工具中最为流行的就是Kubernetes(k8s)，Spark也在最近的版本中支持了k8s部署模式。具体介绍网址如下：<a href="https://spark.apache.org/docs/latest/running-on-kubernetes.html" target="_blank" rel="noopener">https://spark.apache.org/docs/latest/running-on-kubernetes.html</a></p></li></ul></li><li><p>部署模式对比</p><table><thead><tr><th>模式</th><th>机器数</th><th>需启动的进程</th><th>应用场景</th></tr></thead><tbody><tr><td>Local</td><td>1</td><td>无</td><td>Spark</td></tr><tr><td>Standalone</td><td>3</td><td>Master及Worker</td><td>单独部署</td></tr><tr><td>Yarn</td><td>1</td><td>Yarn以及HDFS</td><td>混合部署</td></tr></tbody></table></li><li><p>端口号总结</p><ul><li>Spark查看当前Spark-shell运行任务情况端口号：4040(计算)</li><li>Spark Master内部通信服务端口号：7077</li><li>Standalone模式下，Spark Master Web端口号：8080(资源)</li><li>Spark历史服务器端口号：18080</li><li>Hadoop YARN任务运行情况查看端口号：8088</li></ul></li></ul><h2 id="Spark核心编程"><a href="#Spark核心编程" class="headerlink" title="Spark核心编程"></a>Spark核心编程</h2><ul><li><p>基本介绍：Spark计算框架为了能够进行高并发和高吞吐的数据处理，封装了三大数据结构，用于处理不同的应用场景。三大数据结构分别是：</p><ul><li>RDD : 弹性分布式数据集</li><li>累加器：分布式共享<strong>只写</strong>变量</li><li>广播变量：分布式共享<strong>只读</strong>变量</li></ul></li><li><p>RDD</p><ul><li><p>基本介绍：RDD(Resilient Distributed Dataset)弹性分布式数据集，是Spark中最基本的数据处理模型。Scala代码中是一个抽象类，它代表一个弹性的、不可变、可分区并且其中元素可并行计算的集合</p></li><li><p>重点：</p><ul><li>弹性：<ul><li>存储的弹性：内存与磁盘的自动切换</li><li>容错的弹性：数据丢失可以自动恢复</li><li>计算的弹性：计算出错重试机制</li><li>分片的弹性：可根据需要重新分片</li></ul></li><li>分布式：数据存储在大数据集群(hadoop的HDFS集群)不同节点上</li><li>数据集：RDD封装了计算逻辑，并不保存数据</li><li>数据抽象：RDD是一个抽象类，需要子类具体实现</li><li>不可变：RDD封装了计算逻辑，是不可以改变的，想要改变，只能产生新的RDD，在新的RDD里面封装计算逻辑</li><li>可分区、并行计算</li></ul></li><li><p>核心属性</p><ul><li><p>分区列表：RDD数据结构中存在分区列表，用于执行任务时并行计算，是实现分布式计算的重要属性</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">def</span> <span class="title">getPartitions</span></span>: <span class="type">Array</span>[<span class="type">Partition</span>]</span><br></pre></td></tr></table></figure></li><li><p>分区计算函数：Spark在计算时，是使用分区函数对每一个分区进行计算</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeveloperApi</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute</span></span>(split: <span class="type">Partition</span>, context: <span class="type">TaskContext</span>): <span class="type">Iterator</span>[<span class="type">T</span>]</span><br></pre></td></tr></table></figure></li><li><p>RDD之间的依赖关系：RDD是计算模型的封装，当需求中需要将多个计算模型进行组合时，就需要将多个RDD建立依赖关系</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">def</span> <span class="title">getDependencies</span></span>: <span class="type">Seq</span>[<span class="type">Dependency</span>[_]] = deps</span><br></pre></td></tr></table></figure></li><li><p>分区器(可选)：当数据为KV类型数据时，可以通过设定分区器自定义数据的分区</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@transient</span> <span class="keyword">val</span> partitioner: <span class="type">Option</span>[<span class="type">Partitioner</span>] = <span class="type">None</span></span><br></pre></td></tr></table></figure></li><li><p>首选位置(可选)：计算数据时，可以根据计算节点的状态选择不同的节点位置进行计算</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">def</span> <span class="title">getPreferredLocations</span></span>(split: <span class="type">Partition</span>): <span class="type">Seq</span>[<span class="type">String</span>] = <span class="type">Nil</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>执行原理<br>从计算的角度来讲，数据处理过程中需要计算资源(内存 &amp; CPU)和计算模型(逻辑)。执行时，需要将计算资源和计算模型进行协调和整合<br>Spark框架在执行时，先申请资源，然后将应用程序的数据处理逻辑分解成一个一个的计算任务。然后将任务发到已经分配资源的计算节点上，按照指定的计算模型进行数据计算。最后得到计算结果<br>RDD是Spark框架中用于数据处理的核心模型<br>在Yarn环境中，RDD的工作原理：</p><ol><li>启动Yarn集群环境<br><img src="Yarn%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="Yarn集群环境示意图"></li><li>Spark通过申请资源创建调度节点和计算节点<br><img src="Spark%E7%94%B3%E8%AF%B7%E8%B5%84%E6%BA%90%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="Spark申请资源示意图"></li><li>Spark框架根据需求将计算逻辑根据分区划分成不同的任务<br><img src="Spark%E5%88%92%E5%88%86%E4%BB%BB%E5%8A%A1%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="Spark划分任务示意图"></li><li>调度节点将任务根据计算节点状态发送到对应的计算节点进行计算<br><img src="%E8%B0%83%E5%BA%A6%E8%AE%A1%E7%AE%97%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="调度计算示意图"><br>RDD在整个流程中主要用于将逻辑进行封装，并生成Task发送给Executor节点执行计算</li></ol></li><li><p>基础编程</p><ul><li><p>RDD创建</p><ul><li><p>从集合(内存)中创建RDD：两个方法parallelize()和makeRDD()，其中后者只是包装了前者</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local"</span>).setAppName(<span class="string">"spark-sobxiong"</span>)</span><br><span class="line"><span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"><span class="comment">// 从内存中创建RDD</span></span><br><span class="line"><span class="comment">// 1、parallelize:并行</span></span><br><span class="line"><span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">Int</span>] = sparkContext.parallelize(list)</span><br><span class="line">println(rdd.collect().mkString(<span class="string">","</span>))</span><br><span class="line"><span class="comment">// makeRDD底层代码就是调用了parallelize,只是为了方便理解</span></span><br><span class="line"><span class="keyword">val</span> rdd1: <span class="type">RDD</span>[<span class="type">Int</span>] = sparkContext.makeRDD(list)</span><br><span class="line">println(rdd1.collect().mkString(<span class="string">","</span>))</span><br><span class="line">sparkContext.stop()</span><br></pre></td></tr></table></figure></li><li><p>从外部存储(文件)创建RDD：包括本地文件系统、所有Hadoop支持的数据集(HDFS、HBase等)</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local"</span>).setAppName(<span class="string">"spark-sobxiong"</span>)</span><br><span class="line"><span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"><span class="comment">// 从磁盘File中创建RDD</span></span><br><span class="line"><span class="comment">// path：读取文件(目录)的路径</span></span><br><span class="line"><span class="comment">// 相对路径,如果是IDEA,那么是从项目根开始查找</span></span><br><span class="line"><span class="comment">// path路径根据环境的不同自动发生改变</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Spark读取文件时,默认采用Hadoop读取文件的规则——一行一行读取</span></span><br><span class="line"><span class="comment">// 指向文件目录,目录的文本文件都会被读取</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取目录</span></span><br><span class="line"><span class="comment">// val fileRDD: RDD[String] = sparkContext.textFile(path = "input")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取指定文件</span></span><br><span class="line"><span class="comment">// val fileRDD: RDD[String] = sparkContext.textFile(path = "input/w.txt")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取通配符文件</span></span><br><span class="line"><span class="keyword">val</span> fileRDD: <span class="type">RDD</span>[<span class="type">String</span>] = sparkContext.textFile(path = <span class="string">"input/word*.txt"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件路径还可以指向第三方存储系统：HDFS</span></span><br><span class="line"><span class="comment">// val fileRDD: RDD[String] = sparkContext.textFile(path = "hdfs://input/word*.txt")</span></span><br><span class="line">println(fileRDD.collect().mkString(<span class="string">","</span>))</span><br><span class="line">sparkContext.stop()</span><br></pre></td></tr></table></figure></li><li><p>从其他RDD创建：通过一个RDD运算完后，再产生新的RDD</p></li><li><p>直接创建RDD(new)：使用new的方式直接构造RDD，一般由Spark框架自身使用</p></li></ul></li><li><p>RDD并行度与分区：</p><ul><li><p>基本介绍：默认情况下，Spark可以将一个作业切分成多个任务(Task)后，发送给Executor节点并行计算，而能够并行计算的任务数量我们称之为并行度。该数量可以在构建RDD时指定。这里的并行执行的任务数量并不是指的切分任务的数量，不要混淆了</p></li><li><p>案例：</p><ul><li><p>内存分区案例1：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"spark-sobxiong"</span>)</span><br><span class="line"><span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从内存中创建RDD</span></span><br><span class="line"><span class="comment">// makeRDD</span></span><br><span class="line"><span class="comment">// 参数1：seq: Seq[T] 数据源</span></span><br><span class="line"><span class="comment">// 参数2：numSlices: Int = defaultParallelism(默认并行度——分区的数量)</span></span><br><span class="line"><span class="comment">// 简单总结：RDD中分区的数量就是并行度,设定并行度就是在设定分区数量</span></span><br><span class="line"><span class="comment">// scheduler.conf.getInt("spark.default.parallelism", totalCores)</span></span><br><span class="line"><span class="comment">// 并行度默认会从Spark配置信息中获取spark.default.parallelism的值</span></span><br><span class="line"><span class="comment">// 如果获取不到指定参数,会采用默认值totalCores——机器的总核数</span></span><br><span class="line"><span class="comment">// 机器总核数= 当前环境中可用核数</span></span><br><span class="line"><span class="comment">// local -&gt; 单核(单线程) -&gt; 1</span></span><br><span class="line"><span class="comment">// local[4] -&gt; 4核(4个线程) -&gt; 4</span></span><br><span class="line"><span class="comment">// local[*] -&gt; 当前最大核数 -&gt; 8</span></span><br><span class="line"><span class="keyword">val</span> rdd = sparkContext.makeRDD(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"><span class="comment">// println(rdd.collect().mkString(","))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将RDD的处理后的数据保存到分区文件中</span></span><br><span class="line">rdd.saveAsTextFile(<span class="string">"output"</span>)</span><br><span class="line"></span><br><span class="line">sparkContext.stop()</span><br></pre></td></tr></table></figure></li><li><p>内存分区案例2：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"spark-sobxiong"</span>)</span><br><span class="line"><span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 12,34</span></span><br><span class="line"><span class="comment">// 内存中的集合按照平均分的方式进行分区处理</span></span><br><span class="line"><span class="comment">// val rdd = sparkContext.makeRDD(List(1, 2, 3, 4), 2)</span></span><br><span class="line"><span class="comment">// rdd.saveAsTextFile("output1")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1234</span></span><br><span class="line"><span class="comment">// 1,2,34</span></span><br><span class="line"><span class="comment">// 12345</span></span><br><span class="line"><span class="comment">// 1,23,45</span></span><br><span class="line"><span class="comment">// saveAsTextFile方法如果文件已存在,会发生错误</span></span><br><span class="line"><span class="comment">// 内存中数据的分区基本上就是平均分,如果不能整除,会采用一个基本的算法实现分配</span></span><br><span class="line"><span class="keyword">val</span> rdd1 = sparkContext.makeRDD(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>,<span class="number">5</span>), <span class="number">3</span>)</span><br><span class="line">rdd1.saveAsTextFile(<span class="string">"output2"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1,2,3,4</span></span><br><span class="line"><span class="comment">// val rdd2 = sparkContext.makeRDD(List(1, 2, 3, 4), 4)</span></span><br><span class="line"><span class="comment">// rdd2.saveAsTextFile("output3")</span></span><br><span class="line"></span><br><span class="line">sparkContext.stop()</span><br></pre></td></tr></table></figure></li><li><p>文件分区案例1：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"spark-sobxiong"</span>)</span><br><span class="line"><span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line"><span class="comment">// textFile</span></span><br><span class="line"><span class="comment">// 参数1 path：读取文件的路径</span></span><br><span class="line"><span class="comment">// 参数2 minPartitions：最小分区数量</span></span><br><span class="line"><span class="comment">// minPartitions默认值为math.min(defaultParallelism, 2)</span></span><br><span class="line"><span class="comment">// 其中defaultParallelism是totalCores</span></span><br><span class="line"><span class="comment">//    val fileRDD1 = sparkContext.textFile("input/w.txt")</span></span><br><span class="line"><span class="comment">//    fileRDD1.saveAsTextFile("output")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    val fileRDD2 = sparkContext.textFile("input/w.txt", 1)</span></span><br><span class="line"><span class="comment">//    fileRDD2.saveAsTextFile("output2")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、Spark读取文件采用的是Hadoop的读取规则</span></span><br><span class="line"><span class="comment">// 文件切片规则：以字节方式来切片</span></span><br><span class="line"><span class="comment">// 数据读取规则：以行为单位来读取</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、问题：</span></span><br><span class="line"><span class="comment">//     文件到底切成几片(分区的数量)</span></span><br><span class="line"><span class="comment">//     文件字节数,预计切片数量(2)</span></span><br><span class="line"><span class="comment">// 所谓的最小分区数,取决于总的字节数是否能整除分区数并且剩余的字节小于一定比率(10%,hadoop方式)</span></span><br><span class="line"><span class="comment">// 实际产生的分区数量可能大于最小分区数</span></span><br><span class="line"><span class="keyword">val</span> fileRDD1 = sparkContext.textFile(<span class="string">"input/w.txt"</span>, <span class="number">2</span>)</span><br><span class="line">fileRDD1.saveAsTextFile(<span class="string">"output3"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 分区的数据如何存储?</span></span><br><span class="line"><span class="comment">// 分区数据是以行为单位读取的,不是以字节</span></span><br><span class="line"><span class="comment">// 数据是以行的方式读取,但是会考虑偏移量(数据的offset)的设置</span></span><br><span class="line"><span class="comment">// 1@@ =&gt; 012</span></span><br><span class="line"><span class="comment">// 2@@ =&gt; 345</span></span><br><span class="line"><span class="comment">// 3@@ =&gt; 678</span></span><br><span class="line"><span class="comment">// 4   =&gt; 9</span></span><br><span class="line"><span class="comment">// 10 byte / 4 = 2 .... 2 =&gt; 5</span></span><br><span class="line"><span class="comment">// 以行为单位...</span></span><br><span class="line"><span class="comment">// 以下左右都是闭区间(取得到)</span></span><br><span class="line"><span class="comment">// 0 =&gt; (0, 2) =&gt; 1</span></span><br><span class="line"><span class="comment">// 1 =&gt; (2, 4) =&gt; 2</span></span><br><span class="line"><span class="comment">// 2 =&gt; (4, 6) =&gt; 3</span></span><br><span class="line"><span class="comment">// 3 =&gt; (6, 8) =&gt;</span></span><br><span class="line"><span class="comment">// 4 =&gt; (8,10) =&gt; 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    val fileRDD3 = sparkContext.textFile("input/w.txt", 4)</span></span><br><span class="line"><span class="comment">//    fileRDD3.saveAsTextFile("output3")</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    val fileRDD4 = sparkContext.textFile("input/w.txt", 3)</span></span><br><span class="line"><span class="comment">//    fileRDD4.saveAsTextFile("output4")</span></span><br><span class="line"></span><br><span class="line">sparkContext.stop</span><br></pre></td></tr></table></figure></li><li><p>文件分区案例2：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"spark-sobxiong"</span>)</span><br><span class="line"><span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6 / 2 = 3</span></span><br><span class="line"><span class="comment">// (0 , 0 + 3)</span></span><br><span class="line"><span class="comment">// (3 , 3 + 3)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1@@ =&gt; 012</span></span><br><span class="line"><span class="comment">// 234 =&gt; 345</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// hadoop分区是以文件为单位进行划分的</span></span><br><span class="line"><span class="comment">// 读取数据不能跨越文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 10 / 3 = 3 ... 1 =&gt; 4</span></span><br><span class="line"><span class="comment">// (0,3) (3,6)</span></span><br><span class="line"><span class="keyword">val</span> fileRDD1 = sparkContext.textFile(<span class="string">"input"</span>, <span class="number">3</span>)</span><br><span class="line">fileRDD1.saveAsTextFile(<span class="string">"output"</span>)</span><br><span class="line"></span><br><span class="line">sparkContext.stop</span><br></pre></td></tr></table></figure></li></ul></li><li><p>分区原理</p><ul><li><p>读取内存数据时，数据可以按照并行度的设定进行数据的分区操作，数据分区规则的Spark核心源码如下：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">positions</span></span>(length: <span class="type">Long</span>, numSlices: <span class="type">Int</span>): <span class="type">Iterator</span>[(<span class="type">Int</span>, <span class="type">Int</span>)] = &#123;</span><br><span class="line">  (<span class="number">0</span> until numSlices).iterator.map &#123; i =&gt;</span><br><span class="line">    <span class="keyword">val</span> start = ((i * length) / numSlices).toInt</span><br><span class="line">    <span class="keyword">val</span> end = (((i + <span class="number">1</span>) * length) / numSlices).toInt</span><br><span class="line">    (start, end)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>读取文件数据时，数据是按照Hadoop文件读取的规则进行切片分区，而切片规则和数据读取的规则有些差异，具体Spark核心源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> InputSplit[] getSplits(JobConf job, <span class="keyword">int</span> numSplits)</span><br><span class="line">  <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">long</span> totalSize = <span class="number">0</span>;                           <span class="comment">// compute total size</span></span><br><span class="line">  <span class="keyword">for</span> (FileStatus file: files) &#123;                <span class="comment">// check we have valid files</span></span><br><span class="line">    <span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Not a file: "</span>+ file.getPath());</span><br><span class="line">    &#125;</span><br><span class="line">    totalSize += file.getLen();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">long</span> goalSize = totalSize / (numSplits == <span class="number">0</span> ? <span class="number">1</span> : numSplits);</span><br><span class="line">  <span class="keyword">long</span> minSize = Math.max(job.getLong(org.apache.hadoop.mapreduce.lib.input.</span><br><span class="line">    FileInputFormat.SPLIT_MINSIZE, <span class="number">1</span>), minSplitSize);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (FileStatus file: files) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">if</span> (isSplitable(fs, path)) &#123;</span><br><span class="line">      <span class="keyword">long</span> blockSize = file.getBlockSize();</span><br><span class="line">      <span class="keyword">long</span> splitSize = computeSplitSize(goalSize, minSize, blockSize);</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">long</span> <span class="title">computeSplitSize</span><span class="params">(<span class="keyword">long</span> goalSize, <span class="keyword">long</span> minSize, <span class="keyword">long</span> blockSize)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Math.max(minSize, Math.min(goalSize, blockSize));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>RDD转换算子：RDD根据数据处理方式的不同将算子整体上分为Value类型、双Value类型和Key-Value类型</p><ul><li><p>Value类型</p><ul><li><p>map</p><ul><li><p>函数签名：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">map</span></span>[<span class="type">U</span>: <span class="type">ClassTag</span>](f: <span class="type">T</span> =&gt; <span class="type">U</span>): <span class="type">RDD</span>[<span class="type">U</span>]</span><br></pre></td></tr></table></figure></li><li><p>函数说明：将处理的数据逐条进行映射转换(可以是类型的转换,也可以是值的转换)</p></li><li><p>案例1：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"spark-sobxiong"</span>)</span><br><span class="line"><span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Spark - RDD - 算子(方法)</span></span><br><span class="line"><span class="keyword">val</span> rdd = sparkContext.makeRDD(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 旧RDD -&gt; 转换算子 -&gt; 新RDD</span></span><br><span class="line"><span class="comment">// 转换算子能将旧的RDD通过方法转换为新的RDD,但是不会触发作业的执行</span></span><br><span class="line"><span class="comment">// 分区问题</span></span><br><span class="line"><span class="comment">// RDD中有分区列表</span></span><br><span class="line"><span class="comment">// 默认分区数量不变,数据会转换后输出</span></span><br><span class="line"><span class="keyword">val</span> rdd1 = rdd.map(_ * <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取数据</span></span><br><span class="line"><span class="comment">// collect方法不会转换RDD,会触发作业的执行</span></span><br><span class="line"><span class="comment">// 所以将collect这样的方法称之为行动(action)算子</span></span><br><span class="line"><span class="comment">//    println(rdd1.collect.mkString(","))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    rdd1.saveAsTextFile("output")</span></span><br><span class="line">println(rdd1.collect.mkString(<span class="string">","</span>))</span><br><span class="line">sparkContext.stop</span><br></pre></td></tr></table></figure></li><li><p>案例2：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"spark-sobxiong"</span>)</span><br><span class="line"><span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> rdd = sparkContext.makeRDD(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> rdd1 = rdd.map(x =&gt; &#123;</span><br><span class="line">  println(<span class="string">s"Map 1st : <span class="subst">$x</span>"</span>)</span><br><span class="line">  x</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> rdd2 = rdd1.map(x =&gt; &#123;</span><br><span class="line">  println(<span class="string">s"Map 2nd : <span class="subst">$x</span>"</span>)</span><br><span class="line">  x</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// (1, 2)           1(1)           1(2) 2(1) 2(2)</span></span><br><span class="line"><span class="comment">// (3, 4) 3(1) 3(2)      4(1) 4(2)</span></span><br><span class="line"><span class="comment">// 分区内数据按照顺序依次执行,每一条数据的所有逻辑全部执行完毕后才会执行下一条数据</span></span><br><span class="line"><span class="comment">// 分区间数据执行没有顺序,而且无需等待</span></span><br><span class="line">println(rdd2.collect.mkString(<span class="string">","</span>))</span><br><span class="line">sparkContext.stop</span><br></pre></td></tr></table></figure></li><li><p>小功能：从服务器日志数据apache.log中获取用户请求URL资源路径</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"spark-sobxiong"</span>)</span><br><span class="line"><span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从服务器日志数据apache.log中获取用户请求URL资源路径</span></span><br><span class="line"><span class="keyword">val</span> fileRDD = sparkContext.textFile(<span class="string">"input/apache.log"</span>)</span><br><span class="line"><span class="keyword">val</span> urlRDD = fileRDD.map(</span><br><span class="line">  line =&gt; &#123;</span><br><span class="line">    <span class="keyword">val</span> datas = line.split(<span class="string">" "</span>)</span><br><span class="line">    datas(<span class="number">6</span>)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">urlRDD.collect.foreach(println)</span><br><span class="line">sparkContext.stop</span><br></pre></td></tr></table></figure></li></ul></li><li><p>mapPartitions</p><ul><li><p>函数签名：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mapPartitions</span></span>[<span class="type">U</span>: <span class="type">ClassTag</span>](</span><br><span class="line">  f: <span class="type">Iterator</span>[<span class="type">T</span>] =&gt; <span class="type">Iterator</span>[<span class="type">U</span>],</span><br><span class="line">  preservesPartitioning: <span class="type">Boolean</span> = <span class="literal">false</span>): <span class="type">RDD</span>[<span class="type">U</span>]</span><br></pre></td></tr></table></figure></li><li><p>函数说明：将待处理的数据以分区为单位发送到计算节点进行处理(可以进行任意的处理,哪怕是过滤数据)</p></li><li><p>案例：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"spark-sobxiong"</span>)</span><br><span class="line"><span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line"><span class="comment">// mapPartitions</span></span><br><span class="line"><span class="comment">// 以分区为单位进行计算,和map算子很相似</span></span><br><span class="line"><span class="comment">// 区别就在于map算子是一个一个执行,mapPartitions是一个分区一个分区执行</span></span><br><span class="line"><span class="comment">// 类似于批处理</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// map方法是全量数据操作,不能丢失数据</span></span><br><span class="line"><span class="comment">// mapPartitions一次性获取分区的所有数据,那么可以执行迭代器集合的所有操作(filter、max、sum)</span></span><br><span class="line"><span class="keyword">val</span> dataRDD = sparkContext.makeRDD(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>), <span class="number">2</span>)</span><br><span class="line"><span class="comment">//    val rdd = dataRDD.mapPartitions(iter =&gt; &#123;</span></span><br><span class="line"><span class="comment">//      iter.map(_ * 2)</span></span><br><span class="line"><span class="comment">//    &#125;)</span></span><br><span class="line"><span class="comment">//    println(rdd.collect.mkString(","))</span></span><br><span class="line"><span class="keyword">val</span> rdd = dataRDD.mapPartitions(iter =&gt; &#123;</span><br><span class="line">  iter.filter(_ % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br><span class="line">println(rdd.collect.mkString(<span class="string">","</span>))</span><br><span class="line">sparkContext.stop</span><br></pre></td></tr></table></figure></li><li><p>小功能：获取每个数据分区的最大值</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"spark-sobxiong"</span>)</span><br><span class="line"><span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"><span class="keyword">val</span> dataRDD = sparkContext.makeRDD(<span class="type">List</span>(<span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>), <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取每个数据分区的最大值</span></span><br><span class="line"><span class="keyword">val</span> rdd = dataRDD.mapPartitions(iter =&gt; <span class="type">List</span>(iter.max).iterator)</span><br><span class="line">println(rdd.collect.mkString(<span class="string">","</span>))</span><br><span class="line">sparkContext.stop</span><br></pre></td></tr></table></figure></li></ul></li><li><p>mapPartitionsWithIndex</p><ul><li><p>函数签名：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mapPartitionsWithIndex</span></span>[<span class="type">U</span>: <span class="type">ClassTag</span>](</span><br><span class="line">  f: (<span class="type">Int</span>, <span class="type">Iterator</span>[<span class="type">T</span>]) =&gt; <span class="type">Iterator</span>[<span class="type">U</span>],</span><br><span class="line">  preservesPartitioning: <span class="type">Boolean</span> = <span class="literal">false</span>): <span class="type">RDD</span>[<span class="type">U</span>]</span><br></pre></td></tr></table></figure></li><li><p>函数说明：将待处理的数据以分区为单位发送到计算节点进行处理(可以进行任意的处理,哪怕是过滤数据)，在处理时同时可以获取当前分区索引</p></li><li><p>案例：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"spark-sobxiong"</span>)</span><br><span class="line"><span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取每个分区最大值以及分区号</span></span><br><span class="line"><span class="keyword">val</span> dataRDD = sparkContext.makeRDD(<span class="type">List</span>(<span class="number">1</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>), <span class="number">3</span>)</span><br><span class="line"><span class="keyword">val</span> rdd = dataRDD.mapPartitionsWithIndex(</span><br><span class="line">  (index, iter) =&gt; &#123;</span><br><span class="line">    <span class="type">List</span>((index, iter.max)).iterator</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">println(rdd.collect.mkString(<span class="string">","</span>))</span><br><span class="line">sparkContext.stop</span><br></pre></td></tr></table></figure></li><li><p>小功能：获取第二个数据分区的数据</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"spark-sobxiong"</span>)</span><br><span class="line"><span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取第二个数据分区的数据</span></span><br><span class="line"><span class="keyword">val</span> dataRDD = sparkContext.makeRDD(<span class="type">List</span>(<span class="number">1</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>), <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取的分区索引是从0开始的</span></span><br><span class="line"><span class="keyword">val</span> rdd = dataRDD.mapPartitionsWithIndex(</span><br><span class="line">  (index, iter) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (index == <span class="number">1</span>) iter</span><br><span class="line">    <span class="keyword">else</span> <span class="type">Nil</span>.iterator</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">println(rdd.collect.mkString(<span class="string">","</span>))</span><br><span class="line">sparkContext.stop</span><br></pre></td></tr></table></figure></li></ul></li><li><p>flatMap</p><ul><li><p>函数签名：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flatMap</span></span>[<span class="type">U</span>: <span class="type">ClassTag</span>](f: <span class="type">T</span> =&gt; <span class="type">TraversableOnce</span>[<span class="type">U</span>]): <span class="type">RDD</span>[<span class="type">U</span>]</span><br></pre></td></tr></table></figure></li><li><p>函数说明：将处理的数据进行扁平化后再进行映射处理，也称之为扁平映射</p></li><li><p>案例：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"spark-sobxiong"</span>)</span><br><span class="line"><span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> dataRDD = sparkContext.makeRDD(</span><br><span class="line">  <span class="type">List</span>(</span><br><span class="line">    <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>), <span class="type">List</span>(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">  )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> rdd = dataRDD.flatMap(list =&gt; list)</span><br><span class="line">println(rdd.collect.mkString(<span class="string">","</span>))</span><br><span class="line">sparkContext.stop</span><br></pre></td></tr></table></figure></li><li><p>小功能：将List(List(1, 2), 3, List(4, 5))进行扁平化操作</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"spark-sobxiong"</span>)</span><br><span class="line"><span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> dataRDD = sparkContext.makeRDD(</span><br><span class="line">  <span class="type">List</span>(</span><br><span class="line">    <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>), <span class="number">3</span>, <span class="type">List</span>(<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">  )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> rdd = dataRDD.flatMap &#123;</span><br><span class="line">  <span class="keyword">case</span> list: <span class="type">List</span>[_] =&gt; list</span><br><span class="line">  <span class="keyword">case</span> d =&gt; <span class="type">List</span>(d)</span><br><span class="line">&#125;</span><br><span class="line">println(rdd.collect.mkString(<span class="string">","</span>))</span><br><span class="line">sparkContext.stop</span><br></pre></td></tr></table></figure></li></ul></li><li><p>glom</p><ul><li><p>函数签名：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">glom</span></span>(): <span class="type">RDD</span>[<span class="type">Array</span>[<span class="type">T</span>]]</span><br></pre></td></tr></table></figure></li><li><p>函数说明：将同一个分区的数据直接转换为相同类型的内存数组进行处理，分区不变</p></li><li><p>案例：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"spark-sobxiong"</span>)</span><br><span class="line"><span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line"><span class="comment">// glom =&gt; 将每个分组的数据在转换为数组</span></span><br><span class="line"><span class="keyword">val</span> dataRDD = sparkContext.makeRDD(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>), <span class="number">2</span>)</span><br><span class="line"><span class="keyword">val</span> valueRDD = dataRDD.glom</span><br><span class="line">valueRDD.foreach(array =&gt; println(array.mkString(<span class="string">","</span>)))</span><br><span class="line"></span><br><span class="line">sparkContext.stop</span><br></pre></td></tr></table></figure></li><li><p>小功能：计算所有分区最大值求和(分区内取最大值,分区间最大值求和)</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"spark-sobxiong"</span>)</span><br><span class="line"><span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line"><span class="comment">// glom</span></span><br><span class="line"><span class="comment">// 计算所有分区最大值求和(分区内取最大值,分区间最大值求和)</span></span><br><span class="line"><span class="keyword">val</span> dataRDD = sparkContext.makeRDD(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将每个分区的数据转换为数组</span></span><br><span class="line"><span class="keyword">val</span> glomRDD = dataRDD.glom</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将数组中的最大值取出</span></span><br><span class="line"><span class="comment">// Array -&gt; max</span></span><br><span class="line"><span class="keyword">val</span> maxRDD = glomRDD.map(array =&gt; array.max)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将取出的最大值求和</span></span><br><span class="line"><span class="keyword">val</span> sum = maxRDD.collect.sum</span><br><span class="line">println(sum)</span><br><span class="line">sparkContext.stop</span><br></pre></td></tr></table></figure></li></ul></li><li><p>groupBy</p><ul><li><p>函数签名：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">groupBy</span></span>[<span class="type">K</span>](f: <span class="type">T</span> =&gt; <span class="type">K</span>)(<span class="keyword">implicit</span> kt: <span class="type">ClassTag</span>[<span class="type">K</span>]): <span class="type">RDD</span>[(<span class="type">K</span>, <span class="type">Iterable</span>[<span class="type">T</span>])]</span><br></pre></td></tr></table></figure></li><li><p>函数说明：将数据根据指定的规则进行分组，分区默认不变，但数据会被打乱重新组合(将这样的操作称之为shuffle)。极限情况下，数据可能被分在同一个分区中。一个组的数据在一个分区中，但并不是说一个分区中只有一个组</p></li><li><p>案例：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"spark-sobxiong"</span>)</span><br><span class="line"><span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"><span class="keyword">val</span> dataRDD = sparkContext.makeRDD(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>), <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分组</span></span><br><span class="line"><span class="comment">// groupBy方法可以根据指定的规则进行分组,指定的规则的返回值就是分组的key</span></span><br><span class="line"><span class="comment">// groupBy方法的返回值为元组</span></span><br><span class="line"><span class="comment">//     元组的第一个元素：表示分组的key</span></span><br><span class="line"><span class="comment">//     元组的第二个元素：表示相同key的数据形成的可迭代的集合</span></span><br><span class="line"><span class="comment">// groupBy方法执行完毕后,会将数据进行分组操作,但是分区不会改变</span></span><br><span class="line"><span class="comment">//     不同组的数据会打乱分散到不同的分区中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果将上游的分区数据打乱重新组合到下游的分区中,那么这个操作称之为shuffle</span></span><br><span class="line"><span class="comment">// 如果数据被打乱重新组合,那么数据就可能出现不均匀的情况,可以改变下游RDD的数据分区</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// groupBy方法可能会导致数据不均匀,如果想改变分区,可以传递参数</span></span><br><span class="line"><span class="keyword">val</span> rdd = dataRDD.groupBy(_ % <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">rdd.saveAsTextFile(<span class="string">"output"</span>)</span><br><span class="line"><span class="comment">//    println(s"Group Num = $&#123;rdd.glom.collect.length&#125;")</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    rdd.collect.foreach &#123;</span></span><br><span class="line"><span class="comment">//      case (key, list) =&gt; println(s"Key = $key , list = &#123; $&#123;list.mkString(",")&#125; &#125;")</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">sparkContext.stop</span><br></pre></td></tr></table></figure></li><li><p>小功能：将List(“Hello”, “hive”, “hbase”, “Hadoop”)根据单词首写字母进行分组</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"spark-sobxiong"</span>)</span><br><span class="line"><span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据单词首写字母进行分组</span></span><br><span class="line"><span class="keyword">val</span> dataRDD = sparkContext.makeRDD(<span class="type">List</span>(<span class="string">"Hello"</span>, <span class="string">"hive"</span>, <span class="string">"hbase"</span>, <span class="string">"Hadoop"</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// StringOps =&gt; String(0),隐式转换,取首个字符串Char</span></span><br><span class="line"><span class="keyword">val</span> valueRDD = dataRDD.groupBy(word =&gt; word(<span class="number">0</span>))</span><br><span class="line">valueRDD.foreach(println)</span><br><span class="line"></span><br><span class="line">sparkContext.stop</span><br></pre></td></tr></table></figure></li><li><p>小功能：从服务器日志数据apache.log中获取每个时间段访问量</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"spark-sobxiong"</span>)</span><br><span class="line"><span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> fileRDD = sparkContext.textFile(<span class="string">"input/apache.log"</span>)</span><br><span class="line"><span class="keyword">val</span> timeRDD = fileRDD.map(log =&gt; log.split(<span class="string">" "</span>)(<span class="number">3</span>))</span><br><span class="line"><span class="keyword">val</span> hourRDD = timeRDD.groupBy(time =&gt; time.substring(<span class="number">11</span>, <span class="number">13</span>))</span><br><span class="line">hourRDD.map(it =&gt; (it._1, it._2.size)).foreach(println)</span><br><span class="line"></span><br><span class="line">sparkContext.stop</span><br></pre></td></tr></table></figure></li></ul></li><li><p>filter</p><ul><li><p>函数签名：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter</span></span>(f: <span class="type">T</span> =&gt; <span class="type">Boolean</span>): <span class="type">RDD</span>[<span class="type">T</span>]</span><br></pre></td></tr></table></figure></li><li><p>函数说明：将数据根据指定的规则进行过滤筛选，符合规则的数据保留，不符合规则的数据丢弃。当数据进行筛选过滤后分区不变，但分区内的数据可能不均衡。生产环境下，可能会出现<strong>数据倾斜</strong></p></li><li><p>案例：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"spark-sobxiong"</span>)</span><br><span class="line"><span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> dataRDD = sparkContext.makeRDD(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>), <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// filter过滤</span></span><br><span class="line"><span class="comment">// 根据指定的规则对数据进行筛选过滤,满足条件的数据保留,不满足的数据丢弃</span></span><br><span class="line"><span class="keyword">val</span> rdd = dataRDD.filter(_ % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">rdd.collect.foreach(println)</span><br><span class="line">sparkContext.stop</span><br></pre></td></tr></table></figure></li></ul></li><li><p>sample</p><ul><li><p>函数签名：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sample</span></span>(</span><br><span class="line">  withReplacement: <span class="type">Boolean</span>,</span><br><span class="line">  fraction: <span class="type">Double</span>,</span><br><span class="line">  seed: <span class="type">Long</span> = <span class="type">Utils</span>.random.nextLong): <span class="type">RDD</span>[<span class="type">T</span>]</span><br></pre></td></tr></table></figure></li><li><p>函数说明：根据指定的规则从数据集中抽取数据</p></li><li><p>案例：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"spark-sobxiong"</span>)</span><br><span class="line"><span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> dataRDD = sparkContext.makeRDD(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// sample用于从数据集中抽取数据</span></span><br><span class="line"><span class="comment">// 参数1：withReplacement(Boolean)表示数据抽取后是否放回,可以重复抽取</span></span><br><span class="line"><span class="comment">// 参数2：fraction(Double)表示数据抽取的几率(每个数据被抽取的几率,不是数据总量的比率)——不放回的场合可重复抽取</span></span><br><span class="line"><span class="comment">// 参数3：seed(Long,默认Utils.random.nextLong)表示随机数种子,可以确定数据的抽取</span></span><br><span class="line"><span class="comment">//  随机数不随机,所谓的随机数依靠随机算法实现</span></span><br><span class="line"><span class="keyword">val</span> valueDRR = dataRDD.sample(withReplacement = <span class="literal">false</span>, <span class="number">0.5</span>, <span class="number">1</span>)</span><br><span class="line">println(valueDRR.collect.mkString(<span class="string">","</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> valueDRR2 = dataRDD.sample(withReplacement = <span class="literal">true</span>, <span class="number">0.5</span>)</span><br><span class="line">println(valueDRR2.collect.mkString(<span class="string">","</span>))</span><br><span class="line"></span><br><span class="line">sparkContext.stop</span><br></pre></td></tr></table></figure></li></ul></li><li><p>distinct</p><ul><li><p>函数签名：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">distinct</span></span>()(<span class="keyword">implicit</span> ord: <span class="type">Ordering</span>[<span class="type">T</span>] = <span class="literal">null</span>): <span class="type">RDD</span>[<span class="type">T</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">distinct</span></span>(numPartitions: <span class="type">Int</span>)(<span class="keyword">implicit</span> ord: <span class="type">Ordering</span>[<span class="type">T</span>] = <span class="literal">null</span>): <span class="type">RDD</span>[<span class="type">T</span>]</span><br></pre></td></tr></table></figure></li><li><p>函数说明：将数据集中重复数据去重</p></li><li><p>案例：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"spark-sobxiong"</span>)</span><br><span class="line"><span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> dataRDD = sparkContext.makeRDD(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// distinct 去重</span></span><br><span class="line"><span class="comment">// distinct 可以改变分区的数量</span></span><br><span class="line">dataRDD.distinct.foreach(println)</span><br><span class="line">sparkContext.stop</span><br></pre></td></tr></table></figure></li></ul></li><li><p>coalesce</p><ul><li><p>函数签名：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">coalesce</span></span>(numPartitions: <span class="type">Int</span>, shuffle: <span class="type">Boolean</span> = <span class="literal">false</span>,</span><br><span class="line">            partitionCoalescer: <span class="type">Option</span>[<span class="type">PartitionCoalescer</span>] = <span class="type">Option</span>.empty)</span><br><span class="line">            (<span class="keyword">implicit</span> ord: <span class="type">Ordering</span>[<span class="type">T</span>] = <span class="literal">null</span>): <span class="type">RDD</span>[<span class="type">T</span>]</span><br></pre></td></tr></table></figure></li><li><p>函数说明：根据数据量<strong>缩减分区</strong>，用于大数据集过滤后提高小数据集的执行效率。当spark程序中存在过多小任务时，可以通过coalesce()方法收缩合并分区、减少分区的个数、减小任务调度成本</p></li><li><p>案例：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"spark-sobxiong"</span>)</span><br><span class="line"><span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> dataRDD = sparkContext.makeRDD(<span class="type">List</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>), <span class="number">2</span>)</span><br><span class="line"><span class="comment">//    val filterRDD = dataRDD.filter(num =&gt; num % 2 == 0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    filterRDD.saveAsTextFile("output")</span></span><br><span class="line"><span class="comment">// 多 -&gt; 少</span></span><br><span class="line"><span class="comment">// 当数据过滤后,发现数据不够均匀,那么可以缩减分区</span></span><br><span class="line"><span class="comment">//    filterRDD.coalesce(1).saveAsTextFile("output")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果发现数据分区不合理,也可以缩减分区</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// coalesce主要目的是缩减分区,扩大分区时没有效果</span></span><br><span class="line"><span class="comment">// 为什么不能扩大分区? 因为在分区缩减时,数据不会打乱重新组合,没有shuffle的过程</span></span><br><span class="line"><span class="comment">//    dataRDD.coalesce(2).saveAsTextFile("output")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果非得要将数据扩大分区,那么必须打乱数据后重新组合,必须使用shuffle</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// coalesce()</span></span><br><span class="line"><span class="comment">// 参数1：numPartitions: Int——表示缩减分区后的分区数量</span></span><br><span class="line"><span class="comment">// 参数2：shuffle: Boolean = false——表示分区改变时是否会打乱重新组合数据</span></span><br><span class="line">dataRDD.coalesce(<span class="number">6</span>, shuffle = <span class="literal">true</span>).saveAsTextFile(<span class="string">"output"</span>)</span><br><span class="line">sparkContext.stop</span><br></pre></td></tr></table></figure></li></ul></li><li><p>repartition</p><ul><li><p>函数签名：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">repartition</span></span>(numPartitions: <span class="type">Int</span>)(<span class="keyword">implicit</span> ord: <span class="type">Ordering</span>[<span class="type">T</span>] = <span class="literal">null</span>): <span class="type">RDD</span>[<span class="type">T</span>]</span><br></pre></td></tr></table></figure></li><li><p>函数说明：该操作内部其实执行的是coalesce操作，参数shuffle的默认值为true。无论是将分区数多的RDD转换为分区数少的RDD，还是将分区数少的RDD转换为分区数多的RDD，repartition操作都可以完成，因为无论如何都会经shuffle过程</p></li><li><p>案例：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"spark-sobxiong"</span>)</span><br><span class="line"><span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> dataRDD = sparkContext.makeRDD(<span class="type">List</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>), <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缩减分区 -&gt; coalesce()</span></span><br><span class="line"><span class="comment">// 扩大分区 -&gt; repartition()——底层就是coalesce(..., true)</span></span><br><span class="line">dataRDD.repartition(<span class="number">5</span>).saveAsTextFile(<span class="string">"output"</span>)</span><br><span class="line">sparkContext.stop</span><br></pre></td></tr></table></figure></li></ul></li><li><p>sortBy</p><ul><li><p>函数签名：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sortBy</span></span>[<span class="type">K</span>](</span><br><span class="line">  f: (<span class="type">T</span>) =&gt; <span class="type">K</span>,</span><br><span class="line">  ascending: <span class="type">Boolean</span> = <span class="literal">true</span>,</span><br><span class="line">  numPartitions: <span class="type">Int</span> = <span class="keyword">this</span>.partitions.length)</span><br><span class="line">  (<span class="keyword">implicit</span> ord: <span class="type">Ordering</span>[<span class="type">K</span>], ctag: <span class="type">ClassTag</span>[<span class="type">K</span>]): <span class="type">RDD</span>[<span class="type">T</span>]</span><br></pre></td></tr></table></figure></li><li><p>函数说明：该操作用于排序数据。在排序之前可以将数据通过f函数进行处理，之后按照f函数处理的结果进行排序，默认为正序排列。排序后新产生的RDD的分区数与原RDD的分区数一致</p></li><li><p>案例：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"spark-sobxiong"</span>)</span><br><span class="line"><span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> dataRDD = sparkContext.makeRDD(<span class="type">List</span>(<span class="number">1</span>, <span class="number">4</span>, <span class="number">-2</span>, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// sortBy</span></span><br><span class="line"><span class="comment">// 默认排序规则为升序</span></span><br><span class="line"><span class="comment">// sortBy可以通过传递第二个参数改变排序的方式(false逆序)</span></span><br><span class="line"><span class="comment">// sortBy可以设定第三个参数,用于改变分区</span></span><br><span class="line">dataRDD.sortBy(num =&gt; num, ascending = <span class="literal">false</span>).foreach(println)</span><br><span class="line"></span><br><span class="line">sparkContext.stop</span><br></pre></td></tr></table></figure></li></ul></li><li><p>pipe</p><ul><li><p>函数签名：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pipe</span></span>(command: <span class="type">String</span>): <span class="type">RDD</span>[<span class="type">String</span>]</span><br></pre></td></tr></table></figure></li><li><p>函数说明：管道——针对每个分区，都调用一次shell脚本，返回输出的RDD(注意：shell脚本需要放在计算节点可以访问到的位置)</p></li><li><p>案例：</p><ul><li><p>编写一个脚本，并增加执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> vim pipe.sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">echo "Start"</span><br><span class="line">while read LINE; do</span><br><span class="line">  echo "&gt;&gt;&gt;"$&#123;LINE&#125;</span><br><span class="line">done</span><br><span class="line"><span class="meta">#</span><span class="bash"> chmod 777 pipe.sh</span></span><br></pre></td></tr></table></figure></li><li><p>命令行工具中创建一个只有一个分区的RDD：val rdd = sc.makeRDD(List(“hi”,”Hello”,”how”,”are”,”you”), 1)</p></li><li><p>将脚本作用该RDD并打印：rdd.pipe(“/opt/data/pipe.sh”).collect</p></li></ul></li></ul></li></ul></li><li><p>双Value类型</p><ul><li><p>intersection</p><ul><li><p>函数签名：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">intersection</span></span>(other: <span class="type">RDD</span>[<span class="type">T</span>]): <span class="type">RDD</span>[<span class="type">T</span>]</span><br></pre></td></tr></table></figure></li><li><p>函数说明：对源RDD和参数RDD求交集后返回一个新的RDD</p></li></ul></li><li><p>union</p><ul><li><p>函数签名：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">union</span></span>(other: <span class="type">RDD</span>[<span class="type">T</span>]): <span class="type">RDD</span>[<span class="type">T</span>]</span><br></pre></td></tr></table></figure></li><li><p>函数说明：对源RDD和参数RDD求并集后返回一个新的RDD</p></li></ul></li><li><p>subtract</p><ul><li><p>函数签名：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subtract</span></span>(other: <span class="type">RDD</span>[<span class="type">T</span>]): <span class="type">RDD</span>[<span class="type">T</span>]</span><br></pre></td></tr></table></figure></li><li><p>函数说明：以一个RDD元素为主，去除两个RDD中重复元素，将其他元素保留下来。求差集</p></li></ul></li><li><p>zip</p><ul><li><p>函数签名：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">zip</span></span>[<span class="type">U</span>: <span class="type">ClassTag</span>](other: <span class="type">RDD</span>[<span class="type">U</span>]): <span class="type">RDD</span>[(<span class="type">T</span>, <span class="type">U</span>)]</span><br></pre></td></tr></table></figure></li><li><p>函数说明：将两个RDD中的元素，以键值对的形式进行合并。其中，键值对中的Key为第1个RDD中的元素，Value为第2个RDD中的元素</p></li><li><p>案例：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"spark-sobxiong"</span>)</span><br><span class="line"><span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> dataRDD1 = sparkContext.makeRDD(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>), <span class="number">2</span>)</span><br><span class="line"><span class="keyword">val</span> dataRDD2 = sparkContext.makeRDD(<span class="type">List</span>(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>), <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 并集：数据合并,分区也会合并</span></span><br><span class="line"><span class="comment">//    println(dataRDD1.union(dataRDD2).collect.mkString(","))</span></span><br><span class="line">dataRDD1.union(dataRDD2).saveAsTextFile(<span class="string">"output11"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交集：分区数不变,数据被打乱重组(shuffle),保留最大分区数量</span></span><br><span class="line"><span class="comment">//    println(dataRDD1.intersection(dataRDD2).collect.mkString(","))</span></span><br><span class="line">dataRDD1.intersection(dataRDD2).saveAsTextFile(<span class="string">"output12"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 差集：数据被打乱重组(shuffle)</span></span><br><span class="line"><span class="comment">// 当调用rdd的subtract()方法时,以当前rdd的分区为主,所以分区数量等于当前rdd的分区数量</span></span><br><span class="line"><span class="comment">//    println(dataRDD1.subtract(dataRDD2).collect.mkString(","))</span></span><br><span class="line">dataRDD1.subtract(dataRDD2).saveAsTextFile(<span class="string">"output13"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拉链：分区数不变</span></span><br><span class="line"><span class="comment">// 两个RDD的分区一致,但是数据量不相同的场合：</span></span><br><span class="line"><span class="comment">// =&gt; Exception：Can only zip RDDs with the same number of elements in each partition</span></span><br><span class="line"><span class="comment">// 两个RDD的分区不一致,数据量也不相同,但是每个分区数据量一致/分区数不一致</span></span><br><span class="line"><span class="comment">// =&gt; Exception：Can't zip RDDs with unequal numbers of partitions</span></span><br><span class="line"><span class="comment">//    println(dataRDD1.zip(dataRDD2).collect.mkString(","))</span></span><br><span class="line">dataRDD1.zip(dataRDD2).saveAsTextFile(<span class="string">"output14"</span>)</span><br><span class="line"></span><br><span class="line">sparkContext.stop</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>KV类型</p><ul><li><p>partitionBy</p><ul><li><p>函数签名：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partitionBy</span></span>(partitioner: <span class="type">Partitioner</span>): <span class="type">RDD</span>[(<span class="type">K</span>, <span class="type">V</span>)]</span><br></pre></td></tr></table></figure></li><li><p>函数说明：将数据按照指定Partitioner重新进行分区。Spark默认的分区器是HashPartitioner</p></li><li><p>案例：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"spark-sobxiong"</span>)</span><br><span class="line"><span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line"><span class="comment">// K-V类型的数据操作</span></span><br><span class="line"><span class="keyword">val</span> dataRDD = sparkContext.makeRDD(</span><br><span class="line">  <span class="type">List</span>((<span class="string">"a"</span>, <span class="number">1</span>), (<span class="string">"b"</span>, <span class="number">2</span>), (<span class="string">"c"</span>, <span class="number">3</span>), (<span class="string">"d"</span>, <span class="number">4</span>)), <span class="number">1</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// Spark中很多方法是基于Key进行操作,所以数据格式应该为键值对(对偶元组)</span></span><br><span class="line"><span class="comment">// 如果数据类型为K-V类型,那么Spark会自动给RDD补充很多新的方法(扩展)</span></span><br><span class="line"><span class="comment">// 隐式转换(A =&gt; B)</span></span><br><span class="line"><span class="comment">// partitionBy()方法来自于PairRDDFunctions.class</span></span><br><span class="line"><span class="comment">// RDD的伴生对象中提供了隐式函数可以将RDD[K,V]转换为PairRDDFunctions</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// partitionBy：根据指定的规则对数据进行分区</span></span><br><span class="line"><span class="comment">// 其他影响分区的方法：groupBy、filter -&gt; coalesce、repartition(shuffle)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// partitionBy(Partitioner)方法,参数为partitioner——分区器对象</span></span><br><span class="line"><span class="comment">// Partitioner为抽象类,其实现类有：HashPartitioner、RangePartitioner</span></span><br><span class="line"><span class="comment">// HashPartitioner分区规则：将当前数据key的hashCode进行取余操作</span></span><br><span class="line"><span class="comment">// HashPartitioner是spark默认的分区器</span></span><br><span class="line"><span class="comment">// sortBy()使用了RangePartitioner</span></span><br><span class="line">dataRDD.partitionBy(<span class="keyword">new</span> <span class="type">HashPartitioner</span>(<span class="number">2</span>)).saveAsTextFile(<span class="string">"output"</span>)</span><br><span class="line">sparkContext.stop</span><br></pre></td></tr></table></figure></li><li><p>小功能：自定义分区器</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">  <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"spark-sobxiong"</span>)</span><br><span class="line">  <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 自定义分区器——自己决定数据放置在哪个分区做处理</span></span><br><span class="line">  <span class="keyword">val</span> dataRDD = sparkContext.makeRDD(<span class="type">List</span>(</span><br><span class="line">    (<span class="string">"cba"</span>, <span class="string">"Message 1"</span>), (<span class="string">"cba"</span>, <span class="string">"Message 2"</span>), (<span class="string">"cba"</span>, <span class="string">"Message 3"</span>),</span><br><span class="line">    (<span class="string">"nba"</span>, <span class="string">"Message 1"</span>), (<span class="string">"nba"</span>, <span class="string">"Message 2"</span>), (<span class="string">"wnba"</span>, <span class="string">"Message 1"</span>)</span><br><span class="line">  ), <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> rdd = dataRDD.partitionBy(<span class="keyword">new</span> <span class="type">MyPartitioner</span>(<span class="number">3</span>))</span><br><span class="line">  rdd.mapPartitionsWithIndex((index, datas) =&gt; &#123;</span><br><span class="line">    datas.map(data =&gt; (index, data))</span><br><span class="line">  &#125;).collect.foreach(println)</span><br><span class="line"></span><br><span class="line">  sparkContext.stop</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义分区器</span></span><br><span class="line"><span class="comment">// 1、继承Partitioner</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPartitioner</span>(<span class="params">num: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Partitioner</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 获取分区的数量</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">numPartitions</span></span>: <span class="type">Int</span> = num</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 根据数据的Key来决定数据在哪个分区中进行处理</span></span><br><span class="line">  <span class="comment">// 方法的返回值表示分区编号(索引)</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">getPartition</span></span>(key: <span class="type">Any</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    key <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"nba"</span> =&gt; <span class="number">0</span></span><br><span class="line">      <span class="keyword">case</span> _ =&gt; <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>reduceByKey</p><ul><li><p>函数签名：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reduceByKey</span></span>(func: (<span class="type">V</span>, <span class="type">V</span>) =&gt; <span class="type">V</span>): <span class="type">RDD</span>[(<span class="type">K</span>, <span class="type">V</span>)]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reduceByKey</span></span>(func: (<span class="type">V</span>, <span class="type">V</span>) =&gt; <span class="type">V</span>, numPartitions: <span class="type">Int</span>): <span class="type">RDD</span>[(<span class="type">K</span>, <span class="type">V</span>)]</span><br></pre></td></tr></table></figure></li><li><p>函数说明：可以将数据按照相同的Key对Value进行聚合</p></li><li><p>案例：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"spark-sobxiong"</span>)</span><br><span class="line"><span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line"><span class="comment">// reduceByKey：根据数据的Key进行分组,然后对value进行聚合</span></span><br><span class="line"><span class="comment">// 参数1——func: (V, V) =&gt; V表示相同key的value的聚合方式</span></span><br><span class="line"><span class="comment">// 参数2——numPartitions: Int表示聚合后的分区数量</span></span><br><span class="line">println(sparkContext.makeRDD(<span class="type">List</span>(</span><br><span class="line">  (<span class="string">"hello"</span>, <span class="number">1</span>), (<span class="string">"scala"</span>, <span class="number">1</span>), (<span class="string">"Hello"</span>, <span class="number">2</span>), (<span class="string">"scala"</span>, <span class="number">2</span>)</span><br><span class="line">)).reduceByKey(_ + _).collect.mkString(<span class="string">","</span>))</span><br><span class="line">sparkContext.stop</span><br></pre></td></tr></table></figure></li></ul></li><li><p>groupByKey</p><ul><li><p>函数签名：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">groupByKey</span></span>(): <span class="type">RDD</span>[(<span class="type">K</span>, <span class="type">Iterable</span>[<span class="type">V</span>])]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">groupByKey</span></span>(numPartitions: <span class="type">Int</span>): <span class="type">RDD</span>[(<span class="type">K</span>, <span class="type">Iterable</span>[<span class="type">V</span>])]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">groupByKey</span></span>(partitioner: <span class="type">Partitioner</span>): <span class="type">RDD</span>[(<span class="type">K</span>, <span class="type">Iterable</span>[<span class="type">V</span>])]</span><br></pre></td></tr></table></figure></li><li><p>函数说明：将分区的数据直接转换为相同类型的内存数组进行后续处理</p></li><li><p>案例：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"spark-sobxiong"</span>)</span><br><span class="line"><span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line"><span class="comment">// groupByKey：根据固定的规则(数据的Key)进行分组</span></span><br><span class="line"><span class="comment">// groupBy：根据指定的规则对数据进行分组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// groupByKey()方法返回的数据类型为元组</span></span><br><span class="line"><span class="comment">// 元组的元素1——表示为用于分组的Key</span></span><br><span class="line"><span class="comment">// 元素的元素2——表示为分组后的相同Key的value的集合</span></span><br><span class="line"></span><br><span class="line">sparkContext.makeRDD(<span class="type">List</span>(</span><br><span class="line">  (<span class="string">"hello"</span>, <span class="number">1</span>), (<span class="string">"scala"</span>, <span class="number">1</span>), (<span class="string">"Hello"</span>, <span class="number">2</span>), (<span class="string">"scala"</span>, <span class="number">2</span>)</span><br><span class="line">)).groupByKey.map &#123;</span><br><span class="line">  <span class="keyword">case</span> (word, iter) =&gt; (word, iter.sum)</span><br><span class="line">&#125;.collect.foreach(println)</span><br><span class="line">sparkContext.stop</span><br></pre></td></tr></table></figure></li></ul></li><li><p>aggregateByKey</p><ul><li><p>函数签名：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">aggregateByKey</span></span>[<span class="type">U</span>: <span class="type">ClassTag</span>](zeroValue: <span class="type">U</span>)(seqOp: (<span class="type">U</span>, <span class="type">V</span>) =&gt; <span class="type">U</span>,</span><br><span class="line">  combOp: (<span class="type">U</span>, <span class="type">U</span>) =&gt; <span class="type">U</span>): <span class="type">RDD</span>[(<span class="type">K</span>, <span class="type">U</span>)]</span><br></pre></td></tr></table></figure></li><li><p>函数说明：将数据根据不同的规则进行分区内计算和分区间计算</p></li><li><p>案例：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"spark-sobxiong"</span>)</span><br><span class="line"><span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将分区内相同的Key取最大值,分区间相同的Key求和</span></span><br><span class="line"><span class="comment">// 分区内和分区间的计算规则不同</span></span><br><span class="line"><span class="comment">// reduceByKey：分区内和分区间计算规则相同</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 0 -&gt; [(a, 2), (c, 3)]</span></span><br><span class="line"><span class="comment">// 1 -&gt; [(b, 4), (c, 6)]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// aggregateByKey：根据Key进行数据聚合</span></span><br><span class="line"><span class="comment">// Scala语法：函数柯里化</span></span><br><span class="line"><span class="comment">// 参数1——zeroValue: U表示计算的初始值,用于在分区内进行计算时当作初始值使用(首次遇到Key)</span></span><br><span class="line"><span class="comment">// 参数2——seqOp: (U, V) =&gt; U表示分区内的计算规则,相同key的value计算</span></span><br><span class="line"><span class="comment">// 参数3——combOp: (U, U) =&gt; U)表示分区间的计算规则,相同key的value的计算</span></span><br><span class="line">println(sparkContext.makeRDD(<span class="type">List</span>(</span><br><span class="line">  (<span class="string">"a"</span>, <span class="number">1</span>), (<span class="string">"a"</span>, <span class="number">2</span>), (<span class="string">"c"</span>, <span class="number">3</span>),</span><br><span class="line">  (<span class="string">"b"</span>, <span class="number">4</span>), (<span class="string">"c"</span>, <span class="number">5</span>), (<span class="string">"c"</span>, <span class="number">6</span>)</span><br><span class="line">), <span class="number">2</span>).aggregateByKey(zeroValue = <span class="number">0</span>)(</span><br><span class="line">  (x, y) =&gt; math.max(x, y),</span><br><span class="line">  (x, y) =&gt; x + y</span><br><span class="line">).collect.mkString(<span class="string">","</span>))</span><br><span class="line"></span><br><span class="line">sparkContext.stop</span><br></pre></td></tr></table></figure></li></ul></li><li><p>foldByKey</p><ul><li><p>函数签名：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foldByKey</span></span>(zeroValue: <span class="type">V</span>)(func: (<span class="type">V</span>, <span class="type">V</span>) =&gt; <span class="type">V</span>): <span class="type">RDD</span>[(<span class="type">K</span>, <span class="type">V</span>)]</span><br></pre></td></tr></table></figure></li><li><p>函数说明：当分区内计算规则和分区间计算规则相同时，aggregateByKey就可以简化为foldByKey</p></li><li><p>案例：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"spark-sobxiong"</span>)</span><br><span class="line"><span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> dataRDD = sparkContext.makeRDD(<span class="type">List</span>(</span><br><span class="line">  (<span class="string">"a"</span>, <span class="number">1</span>), (<span class="string">"a"</span>, <span class="number">2</span>), (<span class="string">"c"</span>, <span class="number">3</span>),</span><br><span class="line">  (<span class="string">"b"</span>, <span class="number">4</span>), (<span class="string">"c"</span>, <span class="number">5</span>), (<span class="string">"c"</span>, <span class="number">6</span>)</span><br><span class="line">), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算规则相同,都是求和,可以实现wordCount</span></span><br><span class="line"><span class="comment">//    dataRDD.aggregateByKey(0)(</span></span><br><span class="line"><span class="comment">//      (x, y) =&gt; x + y,</span></span><br><span class="line"><span class="comment">//      (x, y) =&gt; x + y</span></span><br><span class="line"><span class="comment">//    )</span></span><br><span class="line">println(dataRDD.aggregateByKey(<span class="number">0</span>)(_ + _, _ + _).collect.mkString(<span class="string">","</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果分区内计算规则和分区间计算规则相同,可以将aggregateByKey简化为foldByKey</span></span><br><span class="line">println(dataRDD.foldByKey(<span class="number">0</span>)(_ + _).collect.mkString(<span class="string">","</span>))</span><br><span class="line"></span><br><span class="line">sparkContext.stop</span><br></pre></td></tr></table></figure></li></ul></li><li><p>combineByKey</p><ul><li><p>函数签名：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">combineByKey</span></span>[<span class="type">C</span>](</span><br><span class="line">  createCombiner: <span class="type">V</span> =&gt; <span class="type">C</span>,</span><br><span class="line">  mergeValue: (<span class="type">C</span>, <span class="type">V</span>) =&gt; <span class="type">C</span>,</span><br><span class="line">  mergeCombiners: (<span class="type">C</span>, <span class="type">C</span>) =&gt; <span class="type">C</span>): <span class="type">RDD</span>[(<span class="type">K</span>, <span class="type">C</span>)]</span><br></pre></td></tr></table></figure></li><li><p>函数说明：最通用的对kv型rdd进行聚集操作的聚集函数(aggregation function)。类似于aggregate()，combineByKey()允许用户返回值的类型与输入不一致</p></li><li><p>案例：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"spark-sobxiong"</span>)</span><br><span class="line"><span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line"><span class="comment">// combineByKey</span></span><br><span class="line"><span class="comment">// 每个Key的平均值：相同key的数据的总和 / 相同key的数量</span></span><br><span class="line"><span class="keyword">val</span> dataRDD = sparkContext.makeRDD(<span class="type">List</span>(</span><br><span class="line">  (<span class="string">"a"</span>, <span class="number">88</span>), (<span class="string">"b"</span>, <span class="number">95</span>), (<span class="string">"a"</span>, <span class="number">91</span>), (<span class="string">"b"</span>, <span class="number">93</span>), (<span class="string">"a"</span>, <span class="number">95</span>), (<span class="string">"b"</span>, <span class="number">98</span>)</span><br><span class="line">), <span class="number">2</span>)</span><br><span class="line"><span class="comment">// 计算时需要将value的格式发生改变,只需要第一个value改变结构即可</span></span><br><span class="line"><span class="comment">// 如果计算时发现相同key的value不符合计算规则的格式时,那么选择combineByKey</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// combineByKey()</span></span><br><span class="line"><span class="comment">// 参数1——createCombiner: V =&gt; C表示将计算的第一个值结构进行转换</span></span><br><span class="line"><span class="comment">// mergeValue: (C, V) =&gt; C表示分区内的计算规则</span></span><br><span class="line"><span class="comment">// mergeCombiners: (C, C) =&gt; C表示分区间的计算规则</span></span><br><span class="line">dataRDD.combineByKey(</span><br><span class="line">  value =&gt; (value, <span class="number">1</span>),</span><br><span class="line">  (tuple: (<span class="type">Int</span>, <span class="type">Int</span>), value) =&gt; (tuple._1 + value, tuple._2),</span><br><span class="line">  (tuple1: (<span class="type">Int</span>, <span class="type">Int</span>), tuple2: (<span class="type">Int</span>, <span class="type">Int</span>)) =&gt; (tuple1._1 + tuple2._1, tuple1._2 + tuple2._2)</span><br><span class="line">).map &#123; <span class="keyword">case</span> (key, (total, cnt)) =&gt; (key, total * <span class="number">1.0</span> / cnt) &#125;</span><br><span class="line">  .collect.foreach(println)</span><br><span class="line"></span><br><span class="line">sparkContext.stop</span><br></pre></td></tr></table></figure></li></ul></li><li><p>sortByKey</p><ul><li><p>函数签名：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sortByKey</span></span>(ascending: <span class="type">Boolean</span> = <span class="literal">true</span>, numPartitions: <span class="type">Int</span> = self.partitions.length): <span class="type">RDD</span>[(<span class="type">K</span>, <span class="type">V</span>)]</span><br></pre></td></tr></table></figure></li><li><p>函数说明：在一个(K,V)的RDD上调用，K必须实现Ordered接口，返回一个按照key进行排序的</p></li><li><p>案例：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">  <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"spark-sobxiong"</span>)</span><br><span class="line">  <span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> dataRDD = sparkContext.makeRDD(<span class="type">List</span>(</span><br><span class="line">    (<span class="keyword">new</span> <span class="type">User</span>, <span class="number">1</span>), (<span class="keyword">new</span> <span class="type">User</span>, <span class="number">2</span>), (<span class="keyword">new</span> <span class="type">User</span>, <span class="number">3</span>)</span><br><span class="line">  ))</span><br><span class="line"></span><br><span class="line">  println(dataRDD.sortByKey(ascending = <span class="literal">true</span>).collect.mkString(<span class="string">","</span>))</span><br><span class="line"></span><br><span class="line">  sparkContext.stop</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义Key进行排序需要将Key混入特质Ordered</span></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params"></span>) <span class="keyword">extends</span> <span class="title">Ordered</span>[<span class="type">User</span>] <span class="keyword">with</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">compare</span></span>(that: <span class="type">User</span>): <span class="type">Int</span> = <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>join</p><ul><li><p>函数签名：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">join</span></span>[<span class="type">W</span>](other: <span class="type">RDD</span>[(<span class="type">K</span>, <span class="type">W</span>)]): <span class="type">RDD</span>[(<span class="type">K</span>, (<span class="type">V</span>, <span class="type">W</span>))]</span><br></pre></td></tr></table></figure></li><li><p>函数说明：在类型为(K,V)和(K,W)的RDD上调用，返回一个相同key对应的所有元素连接在一起的(K,(V,W))的RDD</p></li><li><p>案例：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"rddMemory"</span>)</span><br><span class="line"><span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> dataRDD1 = sparkContext.makeRDD(<span class="type">List</span>(</span><br><span class="line">  (<span class="string">"a"</span>, <span class="number">1</span>), (<span class="string">"b"</span>, <span class="number">2</span>), (<span class="string">"c"</span>, <span class="number">3</span>), (<span class="string">"d"</span>, <span class="number">5</span>), (<span class="string">"a"</span>, <span class="number">10</span>)</span><br><span class="line">))</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> dataRDD2 = sparkContext.makeRDD(<span class="type">List</span>(</span><br><span class="line">  (<span class="string">"b"</span>, <span class="number">2</span>), (<span class="string">"a"</span>, <span class="number">5</span>), (<span class="string">"c"</span>, <span class="number">9</span>), (<span class="string">"c"</span>, <span class="number">2</span>)</span><br><span class="line">))</span><br><span class="line"></span><br><span class="line"><span class="comment">// join可以将两个rdd中相同的key的value连接在一起</span></span><br><span class="line"><span class="comment">// join性能不太高,会形成笛卡尔积,不建议用</span></span><br><span class="line">println(dataRDD1.join(dataRDD2).collect.mkString(<span class="string">","</span>))</span><br><span class="line"></span><br><span class="line">sparkContext.stop</span><br></pre></td></tr></table></figure></li></ul></li><li><p>leftOuterJoin</p><ul><li><p>函数签名：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leftOuterJoin</span></span>[<span class="type">W</span>](other: <span class="type">RDD</span>[(<span class="type">K</span>, <span class="type">W</span>)]): <span class="type">RDD</span>[(<span class="type">K</span>, (<span class="type">V</span>, <span class="type">Option</span>[<span class="type">W</span>]))]</span><br></pre></td></tr></table></figure></li><li><p>函数说明：类似于SQL语句的左外连接</p></li></ul></li><li><p>cogroup</p><ul><li><p>函数签名：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cogroup</span></span>[<span class="type">W</span>](other: <span class="type">RDD</span>[(<span class="type">K</span>, <span class="type">W</span>)]): <span class="type">RDD</span>[(<span class="type">K</span>, (<span class="type">Iterable</span>[<span class="type">V</span>], <span class="type">Iterable</span>[<span class="type">W</span>]))]</span><br></pre></td></tr></table></figure></li><li><p>函数说明：在类型为(K,V)和(K,W)的RDD上调用，返回一个(K,(Iterable&lt;V&gt;,Iterable&lt;W&gt;))类型的RDD</p></li><li><p>案例：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"spark-sobxiong"</span>)</span><br><span class="line"><span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> dataRDD1 = sparkContext.makeRDD(<span class="type">List</span>(</span><br><span class="line">  (<span class="string">"a"</span>, <span class="number">1</span>), (<span class="string">"b"</span>, <span class="number">2</span>), (<span class="string">"c"</span>, <span class="number">3</span>), (<span class="string">"d"</span>, <span class="number">5</span>), (<span class="string">"a"</span>, <span class="number">10</span>)</span><br><span class="line">))</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> dataRDD2 = sparkContext.makeRDD(<span class="type">List</span>(</span><br><span class="line">  (<span class="string">"b"</span>, <span class="number">2</span>), (<span class="string">"a"</span>, <span class="number">5</span>), (<span class="string">"c"</span>, <span class="number">9</span>), (<span class="string">"c"</span>, <span class="number">2</span>), (<span class="string">"e"</span>, <span class="number">5</span>)</span><br><span class="line">))</span><br><span class="line"></span><br><span class="line"><span class="comment">//    dataRDD1.leftOuterJoin(dataRDD2).collect.foreach(println)</span></span><br><span class="line"><span class="comment">//    println("-----------")</span></span><br><span class="line"><span class="comment">//    dataRDD1.rightOuterJoin(dataRDD2).collect.foreach(println)</span></span><br><span class="line">dataRDD1.cogroup(dataRDD2).collect.foreach(println)</span><br><span class="line"></span><br><span class="line">sparkContext.stop</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li><li><p>案例实操</p><ul><li><p>数据准备：agent.log(时间戳，省份，城市，用户，广告，中间字段使用空格分隔)</p></li><li><p>需求描述：统计出每一个省份每个广告被点击数量排行的Top3</p></li><li><p>代码实现：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"spark-sobxiong"</span>)</span><br><span class="line"><span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 统计出每一个省份每个广告被点击数量排行的Top3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、获取原始数据</span></span><br><span class="line"><span class="keyword">val</span> dataRDD = sparkContext.textFile(<span class="string">"input/agent.log"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、将原始数据进行结构转换,方便统计：(省份-广告, 1)</span></span><br><span class="line"><span class="keyword">val</span> mapRDD = dataRDD.map(line =&gt; &#123;</span><br><span class="line">  <span class="keyword">val</span> datas = line.split(<span class="string">" "</span>)</span><br><span class="line">  (<span class="string">s"<span class="subst">$&#123;datas(1)&#125;</span>-<span class="subst">$&#123;datas(4)&#125;</span>"</span>, <span class="number">1</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、将相同Key的数据进行分组聚合：(省份-广告, sum)</span></span><br><span class="line"><span class="keyword">val</span> reduceRDD = mapRDD.reduceByKey(_ + _)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、将聚合后的结果进行结构的转换：(省份, (广告, sum))</span></span><br><span class="line"><span class="keyword">val</span> mapRDD2 = reduceRDD.map &#123;</span><br><span class="line">  <span class="keyword">case</span> (key, sum) =&gt;</span><br><span class="line">    <span class="keyword">val</span> keys = key.split(<span class="string">"-"</span>)</span><br><span class="line">    (keys(<span class="number">0</span>), (keys(<span class="number">1</span>), sum))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5、将相同的身份的数据分在一个组中：(省份, Iterator[(广告1, sum1)、...])</span></span><br><span class="line"><span class="keyword">val</span> groupRDD = mapRDD2.groupByKey</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6、将分组后的数据进行排序(降序),取Top3</span></span><br><span class="line"><span class="keyword">val</span> sortRDD = groupRDD.mapValues(iter =&gt; &#123;</span><br><span class="line">  iter.toList.sortWith((left, right) =&gt; left._2 &gt; right._2).take(<span class="number">3</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7、采集打印</span></span><br><span class="line">sortRDD.collect.foreach(println)</span><br><span class="line"></span><br><span class="line">sparkContext.stop</span><br></pre></td></tr></table></figure></li></ul></li><li><p>RDD行动算子</p></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BigData </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala</title>
      <link href="/2020/07/24/ProgrammingLanguage/Scala/Scala/"/>
      <url>/2020/07/24/ProgrammingLanguage/Scala/Scala/</url>
      
        <content type="html"><![CDATA[<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><ul><li><a href="#Scala概述">Scala概述</a></li><li><a href="#变量">变量</a></li><li><a href="#运算符">运算符</a></li><li><a href="#程序流程控制">程序流程控制</a></li><li><a href="#函数式编程基础">函数式编程基础</a></li><li><a href="#面向对象编程-基础">面向对象编程-基础</a></li><li><a href="#面向对象编程-中级">面向对象编程-中级</a></li></ul><a id="more"></a><h2 id="Scala概述"><a href="#Scala概述" class="headerlink" title="Scala概述"></a>Scala概述</h2><ul><li><p>学习Scala的原因</p><ul><li>Spark是新一代内存级大数据计算框架，是大数据的重要内容</li><li>Spark就是使用Scala编写的。因此为了更好的学习Spark, 需要掌握Scala这门语言</li><li>Scala是Scalable Language的简写，是一门多范式(范式/编程方式[面向对象/函数式编程])的编程语言</li><li>联邦理工学院洛桑(EPFL)的Martin Odersky于2001年开始设计Scala(2003年推出)</li><li>Spark的兴起，带动Scala语言的发展</li></ul></li><li><p>Scala由来<br>创始人马丁·奥德斯基(Martin Odersky)是编译器及编程的狂热爱好者，长时间的编程之后，希望发明一种语言，能够让写程序这样的基础工作变得高效，简单。所以当接触到JAVA语言后，对JAVA这门便携式，运行在网络，且存在垃圾回收的语言产生了极大的兴趣，所以决定将函数式编程语言的特点融合到JAVA中，由此发明了两种语言(Pizza &amp; Scala)<br>Pizza和Scala极大地推动了Java编程语言的发展(jdk5.0的泛型，for循环增强, 自动类型转换等，都是从Pizza引入的新特性;jdk8.0的类型推断，Lambda表达式就是从scala引入的特性)<br>现在主流JVM的javac编译(jdk5.0、8.0)就是马丁·奥德斯基编写出来的</p></li><li><p>Scala和Java以及JVM的关系分析图<br><img src="Scala%E5%92%8CJava%E4%BB%A5%E5%8F%8AJVM%E7%9A%84%E5%85%B3%E7%B3%BB%E5%88%86%E6%9E%90%E5%9B%BE.png" alt="Scala和Java以及JVM的关系分析图"></p></li><li><p>Scala语言的特点<br>Scala是一门以java虚拟机(JVM)为运行环境并将面向对象和函数式编程的最佳特性结合在一起的<strong>静态类型</strong>编程语言</p><ul><li>Scala是一门多范式(multi-paradigm)的编程语言，Scala支持面向对象和函数式编程</li><li>Scala源代码(.scala)会被编译成Java字节码(.class)，然后运行于JVM之上，并可以调用现有的Java类库，实现两种语言的无缝对接</li><li>Scala简洁高效</li><li>Scala设计时参考了Java的设计思想，源于Java</li></ul></li><li><p>Mac上搭建Scala开发环境(Window/Linux类似)</p><ul><li>Scala需要Java运行时库，首先先安装JDK环境</li><li>在<a href="http://www.scala-lang.org/" target="_blank" rel="noopener">http://www.scala-lang.org/</a>下载mac版本tar.gz包</li><li>解压tar.gz包(不配置环境变量)</li><li>在命令行下cd进入解压包的bin目录下</li><li>输入scala进入Scala Cli，会打印版本信息</li></ul></li><li><p>搭建IDEA的Scala开发环境</p><ul><li>在Plugin面板中安装(如果下载太慢,去官网下载对应版本的插件到本地,在安装)</li><li>新建空的maven项目</li><li>当前默认不支持scala的框架，需要引入scala框架，右键项目点击add framework support</li><li>选中scala，在use library中设定解压的目录</li><li>右键main目录创建一个diretory，名为scala，右键scala目录，mark directory，选择source root</li></ul></li><li><p>Scala执行流程</p><ul><li>.scala源文件通过scalac编译成.class字节码，再通过scala运行</li><li>.scala源文件直接通过scala运行(运行慢)</li></ul></li><li><p>Scala程序特点</p><ul><li>以.scala为扩展名</li><li>执行入口为main()函数</li><li>严格区分大小写</li><li>方法由一条条语句构成，每个语句后不需要添加分号</li><li>如果在一行有多条语句，除了最后一行语句不要分号，其他语句都需要分号</li></ul></li><li><p>Scala输出的三种方式</p><ul><li>字符串通过’+’方式(类似Java)</li><li>printf方式进行格式化(%,类似C)</li><li>字符串通过$引用(类似Kotlin)</li></ul></li><li><p>Scala在IDEA下进行源码关联</p><ul><li>在官网下载source源码包</li><li>解压到本地</li><li>在IDEA中打开一个源码文件，在右上角上点击Attach Sources</li><li>选中解压后的本地目录</li></ul></li><li><p>Scala注释</p><ul><li>单行/多行注释(同Java)</li><li>文档注释：scaladoc -d 源码.scala</li></ul></li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li><p>Scala变量声明</p><ul><li>基础语法：var | val 变量名 [:变量类型] = 变量值</li><li>声明变量时，类型可以省略(编译器自动推导,即类型推导)</li><li>类型确定后，就不能修改，说明Scala是强数据类型语言</li><li>在声明/定义一个变量时，可以使用var或者val来修饰，var修饰的变量可改变，val修饰的变量不可改(同Kotlin)</li><li>val修饰的变量在编译后，等同于加上final(同Kotlin)</li><li>var修饰的对象引用可以改变，val修饰的则不可改变，但对象的状态(值,属性)却是可以改变的(比如自定义对象、数组、集合等等)</li><li>变量声明时，需要初始值</li></ul></li><li><p>数据类型</p><ul><li><p>Scala与Java有着相同的数据类型，在Scala中数据类型都是对象(包装了基础数据类型)，也就是说scala没有java中的原生类型(同Kotlin)</p></li><li><p>Scala数据类型分为两大类AnyVal(值类型)和AnyRef(引用类型)——注意：不管是AnyVal还是AnyRef都是对象<br><img src="Scala%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BD%93%E7%B3%BB%E5%9B%BE.png" alt="Scala数据类型体系图"></p><ul><li>在Scala中有一个根类型Any，他是所有类的父类</li><li>scala中一切皆为对象，分为两类AnyVal和AnyRef，它们都是Any子类</li><li>Null类型是scala的特殊类型，只有一个值null，是bottom class，也是所有AnyRef类型的子类</li><li>Nothing类型也是bottom class，是所有类的子类，开发中通常可以将Nothing类型的值返回给任意变量或函数(抛异常使用很多)</li></ul></li><li><p>数据类型列表</p><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>Byte[1]</td><td>8位有符号补码整数。数值区间为-128～127</td></tr><tr><td>Short[2]</td><td>16位有符号补码整数。数值区间为-32768～32767</td></tr><tr><td>Int[3]</td><td>32位有符号补码整数。数值区间为-2^31～2^31-1</td></tr><tr><td>Long[4]</td><td>64位有符号补码整数。数值区间为-2^63～2^63-1</td></tr><tr><td>Float[4]</td><td>32位，IEEE754标准的单精度浮点数</td></tr><tr><td>Double[8]</td><td>64位，IEEE754标准的双精度浮点数</td></tr><tr><td>Char[2]</td><td>16位无符号Unicode字符, 区间值为U+0000～U+FFFF</td></tr><tr><td>String</td><td>字符序列</td></tr><tr><td>Boolean[1]</td><td>true或false</td></tr><tr><td>Unit</td><td>表示无值，和其他语言中void等同。用作不返回任何结果的方法的结果类型。Unit只有一个实例值，写成()</td></tr><tr><td>Null</td><td>null</td></tr><tr><td>Nothing</td><td>Nothing类型在Scala的类层级的最低端；它是任何其他类型的子类型</td></tr><tr><td>Any</td><td>Any是所有其他类的超类</td></tr><tr><td>AnyRef</td><td>AnyRef类是Scala里所有引用类(reference class)的基类</td></tr></tbody></table><ul><li>整数类型使用细节<ul><li>Scala各整数类型有固定的表数范围和字段长度，不受具体OS的影响，以保证Scala程序的可移植性</li><li>Scala的整型常量/字面量默认为Int型，声明Long型常量/字面量需后加’l’或’L’</li><li>表示特大整数：BigInt类</li></ul></li><li>浮点类型使用细节<ul><li>与整数类型类似，Scala浮点类型也有固定的表数范围和字段长度，不受具体OS的影响</li><li>Scala的浮点型常量默认为Double型，声明Float型常量，须后加’f’或’F’</li><li>两种表示方式<ul><li>十进制数形式：如5.12、512.0f、.512(必须有小数点)</li><li>科学计数法形式：如5.12e2</li></ul></li><li>通常情况下应使用Double类型，比Float类型更精准(小数点后大致7位)</li><li>表示更为精确的小数：BigDecimal</li></ul></li><li>字符类型使用细节<ul><li>字符常量是用单引号’’括起来的单个字符</li><li>Scala也允许使用转义字符’&#39;来将其后的字符转变为特殊字符型常量(同Java)</li><li>Char相当于一个整数，可以进行运算</li><li>字符类型存取本质<ul><li>存储：字符 -&gt; 码值 -&gt; 二进制 -&gt; 存储</li><li>读取：二进制 -&gt; 码值 -&gt; 字符 -&gt; 读取</li></ul></li></ul></li><li>Unit、Null和Nothing类型使用细节<ul><li>Null类只有一个实例对象null，类似于Java中的null引用。null可以赋值给任意引用类型(AnyRef)，但是不能赋值给值类型</li><li>Unit类型用来标识过程，也就是没有明确返回值的函数，类似于Java里的void。Unit只有一个实例()</li><li>Nothing可以作为没有正常返回值的方法的返回类型，非常直观的告诉你这个方法不会正常返回，而且由于Nothing是其他任意类型的子类，它还能跟要求返回值的方法兼容</li></ul></li></ul></li></ul></li><li><p>值类型转换</p><ul><li><p>隐式转换：当Scala程序在进行赋值或者运算时，精度小的类型自动转换为精度大的数据类型<br><img src="%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%B2%BE%E5%BA%A6%E5%A4%A7%E5%B0%8F%E6%8E%92%E5%BA%8F%E5%9B%BE.png" alt="数据类型精度大小排序图"><br>细节说明：</p><ul><li>有多种类型的数据混合运算时，系统首先自动将所有数据转换成容量最大的那种数据类型，然后再进行计算</li><li>当我们把精度(容量)大的数据类型赋值给精度(容量)小的数据类型时会报错</li><li>byte、short和char之间不会相互自动转换，三者计算时首先都转换为int类型</li><li>自动提升原则：表达式结果的类型自动提升为操作数中(容量、精度)最大的类型</li></ul></li><li><p>强制类型转换：自动类型转换的逆过程，将容量大的数据类型转换为容量小的数据类型。使用时要加上强制转函数，<strong>但可能造成精度降低或溢出</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java</span></span><br><span class="line">int num = (int)<span class="number">2.5</span></span><br><span class="line"><span class="comment">// scala</span></span><br><span class="line"><span class="keyword">var</span> num : <span class="type">Int</span> = <span class="number">2.7</span>.toInt</span><br></pre></td></tr></table></figure><p>细节说明：</p><ul><li>强转符号只针对于最近的操作数有效，往往会使用小括号提升优先级</li><li>Char类型可以保存Int的常量值，但不能保存Int的变量值，需要强转</li></ul></li><li><p>值类型和String类型的转换</p><ul><li>基本类型转String类型：将基本类型的值 + “”(同Java)</li><li>String类型转基本数据类型：调用String.toXxx方法</li><li>小数字符串转Int会抛出异常，不会进行截取</li></ul></li></ul></li><li><p>标识符命名规则</p><ul><li>基本和Java一致</li><li>首字符为字母，后续字符任意字母和数字，美元符号，可后接下划线_</li><li>数字不可以开头</li><li>首字符为操作符(比如+ - * /)，后续字符也需跟至少一个操作符(反编译后scala将其转译)</li><li>操作符(比如+-*/)不能在标识符中间和最后</li><li>用反引号``包括的任意字符串，即使是关键字也可以</li><li>预定义标识符可以用，如Int，但不推荐</li></ul></li><li><p>Scala的39个关键字</p><ul><li>package, import, class, object, trait, extends, with, type, forSome</li><li>private, protected, abstract, sealed, final, implicit, lazy, override</li><li>try, catch, finally, throw</li><li>if, else, match, case, do, while, for, return, yield</li><li>def, val, var</li><li>this, super</li><li>new</li><li>true, false, null</li></ul></li></ul><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul><li><p>运算符分类</p><ul><li>算术运算符<ul><li>%的运算原则：a % b = a - a / b * b(同Java)</li><li>在scala中没有++和–，使用+=1和-=1代替</li><li>/的整数除和小数除是有区别的；整数除只保留整数部分而舍弃小数部分</li></ul></li><li>关系运算符(==、!=、&gt;、&lt;、&lt;=、&gt;=)<ul><li>关系运算的结果都是Boolean类型(true/false)</li><li>如果两个浮点数进行比较，应当保证数据类型一致</li></ul></li><li>逻辑运算符(&amp;&amp;、||、!)</li><li>赋值运算符(=、+=、-=、*=、/=、%=、&lt;&lt;=、&gt;&gt;=、&amp;=、^=、|=)<ul><li>运算顺序从右往左</li><li>赋值运算符的左边只能是变量，右边可以是变量、表达式、常量值/字面量</li></ul></li><li>位运算符(&amp;、|、^、~、&lt;&lt;、&gt;&gt;、&gt;&gt;&gt;)</li><li>Scala不支持三目运算符(x ? x : x)，使用if-else代替(类似kotlin)</li><li>运算符优先级(同Java)<ul><li>()[]</li><li>单目运算</li><li>算术运算</li><li>移位运算</li><li>比较运算</li><li>位运算</li><li>关系运算</li><li>赋值运算</li><li>,<br><img src="%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7.png" alt="运算符优先级"></li></ul></li></ul></li><li><p>键盘输入语句</p><ul><li>输入String：StdIn.readLine()</li><li>输入Int：StdIn.readInt</li><li>…</li></ul></li></ul><h2 id="程序流程控制"><a href="#程序流程控制" class="headerlink" title="程序流程控制"></a>程序流程控制</h2><ul><li><p>三大流程控制</p><ul><li>顺序控制</li><li>分支控制<ul><li>Scala中任意表达式都是有返回值的，也就意味着if else表达式其实是有返回结果的，具体返回结果的值取决于满足条件的代码体的最后一行内容</li><li>Scala中没有switch，使用<strong>模式匹配(match-case)来处理</strong></li></ul></li><li>循环控制<ul><li>for循环<ul><li>基本语法：<ul><li>for(i &lt;- start to end)：其中i表示循环的变量，i将会从start～end循环，前后闭合</li><li>for(item &lt;- list)：集合遍历</li><li>for(i &lt;- start until end)：与to不同的是前闭后开</li><li>for(i &lt;- start to end if i % 2 != 0)：循环守卫，即循环保护式(也称条件判断式,守卫)。保护式为true则进入循环体内部，为false则跳过，类似于continue</li><li>for(i &lt;- start to end ; j = f(i))：引入变量，’;’不可少；其次i和j均为val不可变类型变量</li><li>for(i &lt;- start1 to end1 ; j &lt;- start2 to end2)：嵌套循环，’;’不可少；上面代码不常用，基本用单层for的嵌套</li><li>val res = for(i &lt;- start to end) yield i：循环返回值，将遍历过程中的每个结果i返回到一个新的Vector集合中；yield后可以是一个代码块，在最后一行返回</li><li>for(i &lt;- Range(start,end,step))：控制for循环的步长</li></ul></li><li>补充<ul><li>{}和()对于for表达式都可以</li><li>有一个不成文的约定：当for推导式仅包含单一表达式时使用圆括号，当其包含多个表达式时使用大括号</li><li>当使用{}来换行写表达式时，分号就不用写了</li></ul></li></ul></li><li>while/do-while循环(同Java)<ul><li>与if语句不同，while语句本身没有返回值，即结果是Unit类型</li><li>while没有返回值，所以用while语句来计算并返回结果时，不可避免地使用声明在while外部的变量，那么就等同于循环的内部对外部的变量造成了影响，所以不推荐使用，而是推荐使用for循环</li></ul></li></ul></li></ul></li><li><p>while循环的中断</p><ul><li><p>说明：Scala内置控制结构特地去掉了break和continue，是为了更好的适应函数化编程，推荐使用函数式的风格解决break和contine的功能，而不是一个关键字</p></li><li><p>if-else和循环守卫也可以实现continue效果</p></li><li><p>举例说明(break的使用)：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入break相关函数</span></span><br><span class="line"><span class="keyword">import</span> util.control.<span class="type">Breaks</span>._</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">breakable()函数</span></span><br><span class="line"><span class="comment">  1、是一个高阶函数：可以接受函数的函数</span></span><br><span class="line"><span class="comment">  2、源码实现：</span></span><br><span class="line"><span class="comment">    def breakable(op: =&gt; Unit) &#123;</span></span><br><span class="line"><span class="comment">      try &#123;</span></span><br><span class="line"><span class="comment">        op</span></span><br><span class="line"><span class="comment">      &#125; catch &#123;</span></span><br><span class="line"><span class="comment">        case ex: BreakControl =&gt;</span></span><br><span class="line"><span class="comment">          if (ex ne breakException) throw ex</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    op：=&gt; Unit表示接受的参数是一个没有参数和返回值的函数，可简单理解为一段代码块</span></span><br><span class="line"><span class="comment">  3、breakable对break()抛出的异常做了处理，代码就继续执行</span></span><br><span class="line"><span class="comment">  4、传入代码块时，一般将()改为&#123;&#125;(类似Kotlin)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">breakable&#123;</span><br><span class="line">  <span class="keyword">while</span>(n &lt;= <span class="number">20</span>)&#123;</span><br><span class="line">    n+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">18</span>)&#123;</span><br><span class="line">      <span class="comment">// 在scala中使用函数break()中断循环</span></span><br><span class="line">      <span class="comment">// def break(): Nothing = &#123; throw breakException &#125;</span></span><br><span class="line">      <span class="keyword">break</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="函数式编程基础"><a href="#函数式编程基础" class="headerlink" title="函数式编程基础"></a>函数式编程基础</h2><ul><li><p>函数式编程介绍</p><ul><li>概念说明<ul><li>函数式编程<ul><li>是一种”编程范式”</li><li>属于”结构化编程”的一种，主要思想是把运算过程尽量写成一系列嵌套的函数调用</li><li>函数式编程中，将函数也当做数据类型，因此可以接受函数当作输入(参数)和输出(返回值)</li></ul></li><li>在scala中，<strong>方法</strong>和<strong>函数</strong>几乎可以等同(比如他们的定义、使用、运行机制都一样的)，只是函数的使用方式更加的灵活多样</li><li>函数式编程是从编程方式(范式)的角度来谈的，可以这样理解：函数式编程把函数当做一等公民，充分利用函数、支持的函数的多种使用方式。<br>比如：在Scala当中，函数是一等公民，像变量一样，既可以作为函数的参数使用，也可以将函数赋值给一个变量。函数的创建不用依赖于类或者对象；而在Java当中，函数的创建则要依赖于类、抽象类或者接口</li><li>Scala中函数式编程和面向对象编程(是以对象为基础的编程方式)融合在一起</li></ul></li><li>函数式编程、面向对象编程关系分析<br><img src="%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E3%80%81%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E5%85%B3%E7%B3%BB%E5%88%86%E6%9E%90%E5%9B%BE.png" alt="函数式编程、面向对象编程关系分析图"></li></ul></li><li><p>函数的定义(为完成某一功能的程序指令(语句)的集合)</p><ul><li><p>基本语法</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">函数名</span> </span>([参数名: 参数类型], ...) [[: 返回值类型] =] &#123;</span><br><span class="line">  语句...</span><br><span class="line">  <span class="keyword">return</span> 返回值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>语法介绍</p><ul><li>函数声明关键字为def(definition)</li><li>[参数名: 参数类型], …：表示函数的输入(参数列表)，可以没有。如果有，多个参数使用逗号间隔</li><li>函数返回值<ul><li>(: 返回值类型 =) 明确返回值的类型</li><li>(=) 表示返回值类型不确定，使用类型推导完成</li><li>(空)，表示没有返回值，return不生效</li><li>如果没有return，默认以执行到最后一行的结果作为返回值</li></ul></li></ul></li></ul></li><li><p>函数注意事项</p><ul><li>递归调用的规则<ul><li>程序执行一个函数时，就创建一个新的受保护的独立空间(新函数栈)</li><li>函数的局部变量是独立的，不会相互影响</li><li>递归调用必须有递归出口，否则就是无限递归</li></ul></li><li>函数的形参列表可以是多个，如果函数没有形参，调用时可以不带()</li><li>形参列表和返回值列表的数据类型可以是值类型和引用类型</li><li>Scala中的函数可以根据函数体最后一行代码自行推断函数返回值类型。那么在这种情况下，return关键字可以省略</li><li>因为Scala可以自行推断，所以在省略return关键字的场合，返回值类型也可以省略</li><li>如果函数明确使用return关键字，那么函数返回就不能使用自行推断了，这时要明确写成(: 返回类型 =  )，当然如果你什么都不写，即使有return，返回值也为()</li><li>如果函数明确声明无返回值(声明Unit)，那么函数体中即使使用return关键字也不会有返回值</li><li>如果明确函数无返回值或不确定返回值类型，那么返回值类型可以省略(或声明为Any)</li><li>Scala语法中任何的语法结构都可以嵌套其他语法结构(灵活)，即：函数中可以再声明/定义函数，类中可以再声明类，方法中可以再声明/定义方法</li><li>Scala函数的形参，在声明参数时，直接赋初始值(默认值)，这时调用函数时，如果没有指定实参，则会使用默认值。如果指定了实参，则实参会覆盖默认值</li><li>如果函数存在多个参数，每一个参数都可以设定默认值，那么这个时候，传递的参数到底是覆盖默认值，还是赋值给没有默认值的参数，就不确定了(默认按照声明顺序[从左到右])。在这种情况下，可以采用带名参数(类似Kotlin)</li><li>Scala函数的形参默认是val的，因此不能在函数中进行修改</li><li>递归函数未执行之前是无法推断出来结果类型，在使用时必须有明确的返回值类型</li><li>Scala函数支持可变参数，可变参数必须放在最后，如args :Int*</li></ul></li><li><p>过程</p><ul><li>基本介绍：将函数的返回类型为Unit的函数称之为过程(procedure)，如果明确函数没有返回值，那么等号可以省略</li><li>注意区分：如果函数声明时没有返回值类型，但是有等号，可以进行类型推断(最后一行代码)；这时这个函数实际是有返回值的，该函数并不是过程</li></ul></li><li><p>惰性函数</p><ul><li><p>一种应用场景<br>惰性计算(<strong>尽可能延迟表达式求值</strong>)是许多函数式编程语言的特性。惰性集合在需要时提供其元素，无需预先计算它们，这带来了一些好处：首先，可以将耗时的计算推迟到绝对需要的时候；其次，可以创造无限个集合，只要它们继续收到请求，就会继续提供元素。函数的惰性使用能够得到更高效的代码。Java并没有为惰性提供原生支持，Scala提供了</p></li><li><p>Java实现懒加载(单例模式——懒汉式)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyDemo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> LazyDemo instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">LazyDemo</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> LazyDemo <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 如果没有初始化过,那么进行初始化</span></span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">      instance = <span class="keyword">new</span> LazyDemo();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>介绍<br>当函数返回值被声明为lazy时，函数的执行将被推迟，直到我们首次对此取值，该函数才会执行。这种函数我们称之为惰性函数，在Java的某些框架代码中称之为懒加载(延迟加载)</p></li><li><p>案例</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">  <span class="keyword">lazy</span> <span class="keyword">val</span> res = sum(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">  println(<span class="string">"-----------------"</span>)</span><br><span class="line">  println(<span class="string">"res = "</span> + res)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span></span>(n1 : <span class="type">Int</span>, n2 : <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">  println(<span class="string">"sum() ~~~"</span>)</span><br><span class="line">  n1 + n2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">结果：</span></span><br><span class="line"><span class="comment">-----------------</span></span><br><span class="line"><span class="comment">sum() ~~~</span></span><br><span class="line"><span class="comment">res = 30</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>注意事项和细节</p><ul><li>lazy不能修饰var类型的变量</li><li>不但在调用函数时，加了lazy会导致函数的执行被推迟；<strong>在声明一个变量时，如果声明了lazy，那么变量值得分配也会推迟。比如lazy val i = 10</strong></li></ul></li></ul></li><li><p>异常</p><ul><li><p>介绍</p><ul><li>Scala提供try和catch块来处理异常：try块用于包含可能出错的代码；catch块用于处理try块中发生的异常。可以根据需要在程序中有任意数量的try…catch块</li><li>语法处理上和Java类似，但是又不尽相同(许多异常包装了Java中的Exception——类似Kotlin)</li></ul></li><li><p>Java异常回顾</p><ul><li><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">  <span class="comment">// ArithmeticException,除0异常</span></span><br><span class="line">  <span class="keyword">int</span> c = b / i;</span><br><span class="line">&#125; <span class="keyword">catch</span>(Exception e)  &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="comment">// 最终要执行的代码</span></span><br><span class="line">  System.out.println(<span class="string">"java finally"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Java异常处理的注意点：</p><ul><li>java语言按照try—catch-catch-…—finally的方式来处理异常</li><li>不管有没有异常捕获，都会执行finally，因此通常可以在finally代码块中释放资源</li><li>可以有多个catch，分别捕获对应的异常，这时需要把范围小的异常类写在前面，把范围大的异常类写在后面，否则编译错误。会提示”Exception ‘java.lang.xxxxxx’ has already been caught”</li></ul></li></ul></li><li><p>Scala异常处理</p><ul><li><p>示例：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">val</span> r = <span class="number">10</span> / <span class="number">0</span></span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> ex: <span class="type">ArithmeticException</span>=&gt; println(<span class="string">"ArithmeticException!"</span>)</span><br><span class="line">  <span class="keyword">case</span> ex: <span class="type">Exception</span> =&gt; println(<span class="string">"Normal Exception!"</span>)</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="comment">// 最终要执行的代码</span></span><br><span class="line">  println(<span class="string">"scala finally"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Scala异常处理的注意点：</p><ul><li><p>在scala异常处理中只有一个catch；在catch中有多个case，每个case可以匹配一种异常；”=&gt;”是一个关键符号，表示后面是对该异常的处理代码块</p></li><li><p>我们将可疑代码封装在try块中。在try块之后使用了一个catch处理程序来捕获异常。如果发生任何异常，catch处理程序将处理它，程序将不会异常终止</p></li><li><p>Scala的异常的工作机制和Java一样，但是Scala没有”checked(编译期)”异常，即Scala没有编译异常这个概念，异常都是在运行的时候捕获处理</p></li><li><p>可使用throw关键字抛出一个异常对象。所有异常都是Throwable的子类型。throw表达式是有类型的，就是Nothing(因为Nothing是所有类型的子类型，所以throw表达式可以用在任何需要类型的地方)</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">  <span class="keyword">val</span> res = test()</span><br><span class="line">  println(res)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span></span>(): <span class="type">Nothing</span> = &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">Exception</span>(<span class="string">"My Exception!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在Scala里，借用了模式匹配的思想来做异常的匹配。因此可以在catch的代码里，使用一系列case子句来匹配异常。”=&gt;”可以接着多条语句(换行)，类似java的switch-case语句</p></li><li><p>异常捕捉的机制与其他语言中一样，如果有异常发生，catch子句是按次序捕捉的。因此在catch子句中，越具体的异常越要靠前，越普遍的异常越靠后。如果把越普遍的异常写在前，把具体的异常写在后，scala不会报错，但这样是非常不好的编程风格</p></li><li><p>finally子句用于执行不管是正常处理还是有异常发生时都需要执行的步骤，一般用于对象的清理工作，这点和Java一样</p></li><li><p>Scala提供了throws关键字来声明异常。可以使用方法定义声明异常。它向调用者函数提供了此方法可能引发此异常的信息。它有助于调用函数处理并将该代码包含在try-catch块中，以避免程序异常终止。在scala中，可以使用throws注释来声明异常</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">  f11()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于NumberFormatException.class</span></span><br><span class="line"><span class="meta">@throws</span>(classOf[<span class="type">NumberFormatException</span>])</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f11</span></span>()  = &#123;</span><br><span class="line">  <span class="string">"abc"</span>.toInt</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul><h2 id="面向对象编程-基础"><a href="#面向对象编程-基础" class="headerlink" title="面向对象编程-基础"></a>面向对象编程-基础</h2><ul><li><p>Scala是面向对象的</p><ul><li>Java是面向对象的编程语言。但由于历史原因，Java中还存在着非面向对象的内容：基本类型、null、静态方法等</li><li>Scala来源于Java，所以天生就是面向对象的语言，而且Scala是纯粹的面向对象的语言(即在Scala中，一切皆为对象)</li></ul></li><li><p>Scala定义类</p><ul><li><p>基本语法(基本与Java一致)：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] <span class="class"><span class="keyword">class</span> <span class="title">类名</span> </span>&#123;</span><br><span class="line">  类体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意事项</p><ul><li>在scala语法中类并不声明为public，所有这些类都具有公有可见性(即默认就是public)</li><li>一个Scala源文件可以包含多个类(同Java)，而且默认都是public</li></ul></li><li><p>属性/成员变量注意事项</p><ul><li><p>属性的定义语法同变量：[访问修饰符] var/val 属性名称 [：类型] = 属性值</p></li><li><p>属性的定义类型可以为任意类型，包含值类型或引用类型</p></li><li><p>Scala中声明一个属性必须显式初始化，Scala可根据初始化数据的类型自动推断，此时属性类型可以省略(这与Java不同)</p></li><li><p>如果赋值为null，则一定要加类型。因为不加类型，那么该属性的类型就是Null类型</p></li><li><p>如果在定义属性时暂时不赋值，也可以使用符号”_”，让系统分配默认值</p><table><thead><tr><th>类型</th><th>_对应的值</th></tr></thead><tbody><tr><td>Byte/Short/Int/Long</td><td>0</td></tr><tr><td>Float/Double</td><td>0.0</td></tr><tr><td>Boolean</td><td>false</td></tr><tr><td>String和其他引用类型</td><td>null</td></tr></tbody></table></li><li><p>同一类型不同对象的属性相互独立，互不影响</p></li></ul></li></ul></li><li><p>创建对象</p><ul><li>基本语法：val | var 对象名 [: 类型] = new 类型()</li><li>说明<ul><li>如果我们不希望改变对象的引用(即内存地址)，应该声明为val，否则声明为var。scala设计者推荐使用val：因为一般来说，在程序中，我们只是改变对象的属性的值，而不是改变对象的引用</li><li>scala在声明对象变量时，可以根据创建对象的类型自动推断，所以类型声明可以省略(java不可省略,类似Kotlin)。<strong>但当类型和后面new的对象类型有继承关系即多态时，就必须写</strong></li></ul></li></ul></li><li><p>访问属性</p><ul><li><p>基本语法：对象名.属性名</p></li><li><p>原理：</p><ul><li><p>示例：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">  <span class="keyword">val</span> test = <span class="keyword">new</span> <span class="type">Person</span></span><br><span class="line">  test.age = <span class="number">5</span></span><br><span class="line">  test.name = <span class="string">"xiong"</span></span><br><span class="line">  println(<span class="string">s"age = <span class="subst">$&#123;test.age&#125;</span> , name = <span class="subst">$&#123;test.name&#125;</span> , tag = <span class="subst">$&#123;test.tag&#125;</span>"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name: <span class="type">String</span> = _</span><br><span class="line">  <span class="keyword">var</span> age: <span class="type">Int</span> = _</span><br><span class="line">  <span class="keyword">val</span> tag = <span class="string">"SOBXiong"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>反编译的.class文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test$.class</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span>$ </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> test$ MODULE$;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    test.Person test = <span class="keyword">new</span> test.Person();</span><br><span class="line">    <span class="comment">// 对象名.属性名修改属性是通过底层编译器翻译包装了java方法实现的</span></span><br><span class="line">    test.age_$eq(<span class="number">5</span>);</span><br><span class="line">    test.name_$eq(<span class="string">"xiong"</span>);</span><br><span class="line">    <span class="comment">// 对象名.属性名获取属性也是通过底层编译器翻译包装了java方法实现的</span></span><br><span class="line">    Predef$.MODULE$.println((<span class="keyword">new</span> StringBuilder(<span class="number">25</span>)).append(<span class="string">"age = "</span>).append(test.age()).append(<span class="string">" , name = "</span>).append(test.name()).append(<span class="string">" , tag = "</span>).append(test.tag()).toString());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> test$() &#123; MODULE$ = <span class="keyword">this</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="comment">// var变量翻译后自动生成getter/setter方法</span></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.name; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> name_$eq(String x$<span class="number">1</span>) &#123; <span class="keyword">this</span>.name = x$<span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">age</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.age; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> age_$eq(<span class="keyword">int</span> x$<span class="number">1</span>) &#123; <span class="keyword">this</span>.age = x$<span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// val变量翻译为final变量(不可变),且只提供getter方法,不提供setter修改的方法</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String tag = <span class="string">"SOBXiong"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">tag</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.tag; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>方法</p><ul><li><p>基本说明：Scala中的方法其实就是函数</p></li><li><p>基本语法：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">方法名</span></span>(参数列表) [：返回值类型] = &#123;</span><br><span class="line">  方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方法调用机制原理</p><ul><li>当scala程序开始执行时，先在栈区开辟一个main栈。main栈最后被销毁(scala程序终止)</li><li>当scala程序执行到一个方法时，总会开一个新的栈</li><li>每个栈是独立的空间，变量(基本数据类型)是独立的，相互不影响(引用类型除外)</li><li>当方法执行完毕后，该方法开辟的栈就会被JVM机回收</li></ul></li></ul></li><li><p>构造器</p><ul><li><p>基本介绍：构造器(constructor)又叫构造方法，是类的一种特殊的方法，<strong>主要作用是完成对新对象的初始化</strong></p></li><li><p>Java构造器回顾</p><ul><li><p>基本语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] 类名(参数列表) &#123;</span><br><span class="line">  构造方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>特点</p><ul><li>在Java中一个类可以定义多个不同的构造方法(构造方法重载)</li><li>如果没有定义构造方法，系统会自动生成一个默认无参构造方法(也叫默认构造器)，比如Person(){}</li><li>一旦定义了自己的构造方法，默认的构造方法就被覆盖了，就不能再使用默认的无参构造方法，除非显式地定义一下</li></ul></li></ul></li><li><p>Scala构造器</p><ul><li><p>介绍：和Java一样，Scala创建新对象也需要调用构造方法，并且可以有任意多个构造方法(即scala中构造器也支持重载)。Scala类的构造器包括：<strong>主构造器</strong>和<strong>辅助构造器</strong></p></li><li><p>基本语法</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">类名</span>(<span class="params">形参列表</span>) </span>&#123;<span class="comment">// 主构造器</span></span><br><span class="line">  <span class="comment">// 类体</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">this</span></span>(形参列表) &#123;...&#125;<span class="comment">// 辅助构造器1</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">this</span></span>(形参列表) &#123;...&#125;<span class="comment">// 辅助构造器2、3...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>构造器参数</p><ul><li>Scala类的主构造器的形参若未用任何修饰符修饰，那么这个参数是局部变量</li><li>如果参数使用val关键字声明，那么Scala会将参数作为类的私有的只读属性使用</li><li>如果参数使用var关键字声明，那么那么Scala会将参数作为类的成员属性使用，并会提供属性对应的xxx()[类似getter]以及xxx_$eq()[类似setter]方法(这时的成员属性是私有的，但是可读写)</li></ul></li><li><p>Bean属性</p><ul><li>介绍<br>JavaBeans规范定义了Java的属性是像getXxx()和setXxx()的方法。许多Java框架都依赖这个命名习惯。为了与Java的互操作性，产生了@BeanProperty注解。在Scala字段前加@BeanProperty时会自动生成规范的setXxx()以及getXxx()方法。这时可以使用对象.setXxx()和对象.getXxx()来修改和获取属性值</li><li>注意<br>给某个属性加入@BeanPropetry注解后，会生成getXXX和setXXX的方法，并且对原来底层自动生成类似xxx(),xxx_$eq()方法，没有冲突，二者可以共存</li></ul></li><li><p>注意事项和细节</p><ul><li>Scala构造器作用是完成对新对象的初始化，<strong>构造器没有返回值</strong></li><li>主构造器的声明直接放置于类名之后</li><li>主构造器会执行类定义中的所有语句，这可以体会到Scala把函数式编程和面向对象编程融合在一起(构造器也是方法/函数)</li><li><strong>如果主构造器无参数，小括号可省略，构建对象时调用的构造方法的小括号也可以省略</strong></li><li>辅助构造器名称为this(和Java、Kotlin不一样)，<strong>多个辅助构造器通过不同参数列表进行区分(底层就是构造器重载)</strong></li><li>如果想让主构造器变成私有的，可以在()之前加上private，这样只能通过辅助构造器来构造对象</li><li>辅助构造器的声明不能和主构造器的声明一致，否则会发生错误(构造器名重复)</li></ul></li><li><p>示例：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">  <span class="keyword">val</span> p1 = <span class="keyword">new</span> <span class="type">Person</span>(<span class="string">"sobxiong"</span>)</span><br><span class="line">  p1.showInfo()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  println(<span class="string">"类定义语句~~~"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="meta">@BeanProperty</span> <span class="keyword">var</span> name: <span class="type">String</span> = _</span><br><span class="line">  <span class="meta">@BeanProperty</span> <span class="keyword">var</span> age: <span class="type">Int</span> = _</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">this</span></span>(name: <span class="type">String</span>) &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    辅助构造器无论是直接或间接,最终都一定要调用主构造器,执行主构造器的逻辑</span></span><br><span class="line"><span class="comment">    而且需要放在辅助构造器的第一行(这点和Java一样,Java中一个构造器要调用同类的其它构造器也需要放在第一行)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">// 直接调用主构造器</span></span><br><span class="line">    <span class="keyword">this</span>()</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">this</span></span>(name: <span class="type">String</span>, age: <span class="type">Int</span>) &#123;</span><br><span class="line">    <span class="comment">// 直接调用主构造器</span></span><br><span class="line">    <span class="keyword">this</span>()</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">this</span></span>(age: <span class="type">Int</span>) &#123;</span><br><span class="line">    <span class="comment">// 间接调用主构造器</span></span><br><span class="line">    <span class="keyword">this</span>(<span class="string">"匿名"</span>)</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">showInfo</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="string">"person信息如下:"</span>)</span><br><span class="line">    println(<span class="string">"name = "</span> + <span class="keyword">this</span>.name)</span><br><span class="line">    println(<span class="string">"age = "</span> + <span class="keyword">this</span>.age)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">结果如下：</span></span><br><span class="line"><span class="comment">类定义语句~~~</span></span><br><span class="line"><span class="comment">person信息如下:</span></span><br><span class="line"><span class="comment">name = sobxiong</span></span><br><span class="line"><span class="comment">age = 0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>反编译的.class文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.name; &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> name_$eq(String x$<span class="number">1</span>) &#123; <span class="keyword">this</span>.name = x$<span class="number">1</span>; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> name(); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String x$<span class="number">1</span>)</span> </span>&#123; name_$eq(x$<span class="number">1</span>); &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">age</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.age; &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> age_$eq(<span class="keyword">int</span> x$<span class="number">1</span>) &#123; <span class="keyword">this</span>.age = x$<span class="number">1</span>; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> age(); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> x$<span class="number">1</span>)</span> </span>&#123; age_$eq(x$<span class="number">1</span>); &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Predef$.MODULE$.println(<span class="string">"类定义语句~~~"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="string">""</span>);</span><br><span class="line">    age_$eq(age);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>();</span><br><span class="line">    name_$eq(name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>();</span><br><span class="line">    name_$eq(name);</span><br><span class="line">    age_$eq(age);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Predef$.MODULE$.println(<span class="string">"person信息如下:"</span>);</span><br><span class="line">    Predef$.MODULE$.println((<span class="keyword">new</span> StringBuilder(<span class="number">7</span>)).append(<span class="string">"name = "</span>).append(name()).toString());</span><br><span class="line">    Predef$.MODULE$.println((<span class="keyword">new</span> StringBuilder(<span class="number">6</span>)).append(<span class="string">"age = "</span>).append(age()).toString());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="面向对象编程-中级"><a href="#面向对象编程-中级" class="headerlink" title="面向对象编程-中级"></a>面向对象编程-中级</h2><ul><li><p>包</p><ul><li><p>回顾Java包</p><ul><li>Java包的三大作用<ul><li>区分相同名字的类</li><li>当类很多时，可以很好的管理类</li><li>控制访问范围</li></ul></li><li>Java包的声明：package xxx;</li><li>Java包的本质：创建不同的文件夹保存类文件</li><li>Java包的要求：<ul><li>包名和源码所在的系统文件目录结构要一致</li><li>编译后的字节码文件路径也和包名保持一致</li></ul></li></ul></li><li><p>Scala包</p><ul><li><p>基本语法：package xxx</p></li><li><p>Scala的作用：</p><ul><li>区分相同名字的类</li><li>当类很多时，可以很好的管理类</li><li>控制访问范围</li><li>可以对类的功能进行扩展</li></ul></li><li><p><em>Scala包名和源码所在的系统文件目录可以不一致，但编译后的.class字节码文件路径和包名会保持一致</em>(该工作由编译器完成)</p></li><li><p>包的命名规则：只能包含数字、字母、下划线、小圆点(.)，但不能用数字开头，也不要使用关键字</p></li><li><p>包的命名规范：com.公司名.项目名.业务模块名</p></li><li><p>Scala自动引用的常用包：java.lang.*、scala、Predef</p></li><li><p>Scala包注意事项和使用细节：</p><ul><li><p>scala多种等价的包形式</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统的包形式</span></span><br><span class="line"><span class="keyword">package</span> com.atguigu.scala</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="keyword">val</span> name = <span class="string">"Nick"</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">play</span></span>(message: <span class="type">String</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="keyword">this</span>.name + <span class="string">" "</span> + message)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价的第二种包形式</span></span><br><span class="line"><span class="keyword">package</span> com.atguigu</span><br><span class="line"><span class="keyword">package</span> scala</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="keyword">val</span> name = <span class="string">"Nick"</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">play</span></span>(message: <span class="type">String</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="keyword">this</span>.name + <span class="string">" "</span> + message)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 嵌套包形式</span></span><br><span class="line"><span class="keyword">package</span> com.atguigu&#123;</span><br><span class="line">  <span class="keyword">package</span> scala&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">      <span class="keyword">val</span> name = <span class="string">"Nick"</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">play</span></span>(message: <span class="type">String</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        println(<span class="keyword">this</span>.name + <span class="string">" "</span> + message)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>嵌套包的好处：可以灵活地在同一个文件中将类(class, object)、特质(trait)创建在不同的包中</p></li><li><p>作用域原则：可以直接向上访问。即：<strong>Scala可在子包中直接访问父包中的内容，大括号体现作用域</strong>。(<em>提示: Java中子包使用父包的类,需要import</em>)。在子包和父包类重名时，默认采用就近原则，如果希望指定使用某个类，需要指定包名</p></li><li><p>父包要访问子包的内容时，需要import对应的类</p></li><li><p>可以在同一个.scala文件中，声明多个并列的package(建议嵌套的pakage不要超过3层)</p></li><li><p>包名可以相对也可以绝对。在一般情况下，我们使用相对路径来引入包，只有当包名冲突时，使用绝对路径来处理</p></li></ul></li></ul></li><li><p>包对象</p><ul><li><p>基本介绍：包可以包含类(class, object)和特质(trait)，但不能包含函数/方法或变量的定义。这是Java虚拟机的局限。为了弥补这一点不足，scala提供了包对象的概念来解决这个问题</p></li><li><p>示例：</p><ul><li><p>示例代码：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiong &#123;</span><br><span class="line">  <span class="comment">// 每个包都可以有一个包对象</span></span><br><span class="line">  <span class="comment">// 需要在父包中定义它,且名称与子包一样。</span></span><br><span class="line">  <span class="keyword">package</span> <span class="class"><span class="keyword">object</span> <span class="title">scala</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">"jack"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sayOk</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">      println(<span class="string">"package object sayOk!"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">package</span> scala &#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">test</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="comment">// 包对象scala中声明的name变量</span></span><br><span class="line">        println(name)</span><br><span class="line">        <span class="comment">// 调用包对象scala中声明的sayOk方法</span></span><br><span class="line">        sayOk()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">object</span> <span class="title">TestObj</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> t = <span class="keyword">new</span> <span class="type">Test</span>()</span><br><span class="line">        t.test()</span><br><span class="line">        <span class="comment">// 因为TestObj和scala这个包对象在同一包,因此也可以使用name属性</span></span><br><span class="line">        println(<span class="string">"name ="</span> + name)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>机制分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当创建包对象后,在该包下生成final修饰的package和package$类</span></span><br><span class="line"><span class="comment">// package$.class</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">package</span>$ </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">package</span>$ MODULE$;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.name; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> name_$eq(String x$<span class="number">1</span>) &#123; <span class="keyword">this</span>.name = x$<span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayOk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    scala.Predef$.MODULE$.println(<span class="string">"package object sayOk!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">package</span>$() &#123;</span><br><span class="line">    MODULE$ = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">"jack"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test.class</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Predef$.MODULE$.println(<span class="keyword">package</span>$.MODULE$.name());</span><br><span class="line">    <span class="keyword">package</span>$.MODULE$.sayOk();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TestObj$.class</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TestObj</span>$ </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> TestObj$ MODULE$;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Test t = <span class="keyword">new</span> Test();</span><br><span class="line">    t.test();</span><br><span class="line">    scala.Predef$.MODULE$.println((<span class="keyword">new</span> StringBuilder(<span class="number">6</span>)).append(<span class="string">"name ="</span>).append(<span class="keyword">package</span>$.MODULE$.name()).toString());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> TestObj$() &#123; MODULE$ = <span class="keyword">this</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>注意事项</p><ul><li>每个包都可以有一个包对象，需要在父包中定义它</li><li>包对象名称需要和包名一致，一般用来对包的功能进行补充</li></ul></li></ul></li><li><p>包的可见性</p><ul><li><p>回顾Java</p><ul><li><p>访问修饰符介绍(控制方法和变量的访问权限、范围)</p><ul><li>公开级别：用public修饰，对外公开</li><li>受保护级别：用protected修饰，对子类和同一个包中的类公开</li><li>默认级别：没有修饰符号，向同一个包的类公开</li><li>私有级别：用private修饰，只有类本身可以访问，不对外公开</li></ul><table><thead><tr><th>访问级别</th><th>访问控制修饰符</th><th>同类</th><th>同包</th><th>子类</th><th>不同包</th></tr></thead><tbody><tr><td>公开</td><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>受保护</td><td>protected</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>默认</td><td>/</td><td>√</td><td>√</td><td>×</td><td>×</td></tr><tr><td>私有</td><td>private</td><td>√</td><td>×</td><td>×</td><td>×</td></tr></tbody></table></li><li><p>修饰符注意事项</p><ul><li>修饰符可以用来修饰类中的属性，成员方法以及类</li><li>只有默认和public才能修饰类，并且遵循上述访问权限的特点</li></ul></li></ul></li><li><p>Scala的包的可见性(四种修饰符与Java一样)</p><ul><li><p>当属性访问权限为默认时，从底层看属性是private的，但是因为提供了xxx_$eq()[类似setter]/xxx()[类似getter]方法，因此从使用效果看任何地方都可以访问</p></li><li><p>当方法访问权限为默认时，默认为public访问权限</p></li><li><p>private为私有权限，只在类的内部和伴生对象中可用</p></li><li><p>protected为受保护权限，scala中受保护权限比Java中更严格，只能子类访问，同包无法访问(编译器)</p></li><li><p>在scala中没有public关键字，即不能用public显式地修饰属性和方法</p></li><li><p>包访问权限(表示属性有了限制，同时包也有了限制)，这点和Java不一样，体现出Scala包使用的灵活性</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiong.scala</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  增加包访问权限后</span></span><br><span class="line"><span class="comment">  1、private同时起作用,不仅同类可以使用</span></span><br><span class="line"><span class="comment">  2、同时com.xiong.scala中包下其他类也可以使用</span></span><br><span class="line"><span class="comment">  3、修饰符也可以设置为public、protected等</span></span><br><span class="line"><span class="comment">  4、包可见性可以延展到上曾,如改为xiong</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">private</span>[scala] <span class="keyword">val</span> pname = <span class="string">"hello"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>包的引入</p><ul><li><p>基本介绍：Scala引入包也是使用import，基本的原理和机制和Java一样，但Scala中的import功能更加强大，也更灵活</p></li><li><p>使用细节和注意事项：</p><ul><li><p>在Scala中，<strong>import语句可以出现在任何地方，并不仅限于文件顶部</strong>，import语句的作用一直延伸到包含该语句的块末尾。这种语法的好处是：<strong>在需要时在引入包，缩小import包的作用范围，提高效率</strong></p></li><li><p>Java中如果想要导入包中所有的类，可以通过通配符*，Scala中采用下_</p></li><li><p>如果不想要某个包中全部的类，而是其中的几个类，可以采用选取器(大括号)</p></li><li><p>如果引入的多个包中含有相同的类，那么可以将不需要的类进行重命名进行区分，这个就是<strong>重命名</strong></p></li><li><p>如果某个冲突的类根本就不会用到，那么这个类可以直接<strong>隐藏</strong>掉</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将HashMap重命名为JavaHashMap</span></span><br><span class="line"><span class="keyword">import</span> java.util.&#123; <span class="type">HashMap</span>=&gt;<span class="type">JavaHashMap</span>, <span class="type">List</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入java.util包的所有类,但是忽略HashMap</span></span><br><span class="line"><span class="keyword">import</span> java.util.&#123; <span class="type">HashMap</span>=&gt;_, _&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li><li><p>继承</p><ul><li>Java继承回顾<ul><li>语法：class 子类名 extends 父类名 { 类体 }</li><li>子类继承父类的属性和方法</li><li>单继承</li></ul></li><li>Scala继承<ul><li>语法同Java</li><li>单继承同Java</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BigData </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HBase</title>
      <link href="/2020/07/17/BigData/HBase/"/>
      <url>/2020/07/17/BigData/HBase/</url>
      
        <content type="html"><![CDATA[<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><ul><li><a href="#HBase简介">HBase简介</a></li><li><a href="#HBase快速入门">HBase快速入门</a></li><li><a href="#HBase进阶">HBase进阶</a></li><li><a href="#HBase-API">HBase-API</a></li><li><a href="#HBase优化">HBase优化</a></li></ul><a id="more"></a><h2 id="HBase简介"><a href="#HBase简介" class="headerlink" title="HBase简介"></a>HBase简介</h2><ul><li>HBase定义：HBase是一种分布式、可扩展、支持海量数据存储的NoSQL数据库</li><li>HBase数据模型：逻辑上，HBase的数据模型同关系型数据库很类似，数据存储在一张表中，有行有列。但从HBase的底层物理存储结构(K-V)来看，HBase更像是一个<strong>multi-dimensional map(多维度Map)</strong><ul><li>逻辑结构<br><img src="HBase%E9%80%BB%E8%BE%91%E7%BB%93%E6%9E%84.png" alt="HBase逻辑结构"></li><li>物理存储结构<br><img src="HBase%E7%89%A9%E7%90%86%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png" alt="HBase物理存储结构"></li><li>数据模型<ul><li>Name Space<br>命名空间，类似于关系型数据库的DatabBase概念，每个命名空间下有多个表。<strong>HBase有两个自带的命名空间，分别是hbase和default，hbase中存放的是HBase内置的表，default表是用户默认使用的命名空间</strong></li><li>Region<br>类似于关系型数据库的表概念。不同的是，<strong>HBase定义表时只需要声明列簇即可，不需要声明具体的列</strong>。这意味着，<strong>往HBase写入数据时，字段可以动态、按需指定</strong>。因此，和关系型数据库相比，HBase能够轻松应对字段变更的场景</li><li>Row<br>HBase表中的<strong>每行数据都由一个RowKey和多个Column(列)组成，数据是按照RowKey的字典顺序存储的，并且查询数据时只能根据RowKey进行检索</strong>，所以RowKey的设计十分重要</li><li>Column<br>HBase中的<strong>每个列都由Column Family(列簇)和Column Qualifier(列限定符)进行限定</strong>，例如info：name，info：age。建表时，只需指明列簇，而列限定符无需预先定义</li><li>Time Stamp<br>用于标识数据的不同版本(version)，每条数据写入时，如果不指定时间戳，系统会自动为其加上该字段，其值为写入HBase的时间</li><li>Cell<br>由{rowkey,column Family:column Qualifier,time Stamp}唯一确定的单元。cell中的数据是没有类型的，全部是字节码形式存贮</li></ul></li></ul></li><li>HBase基本架构<br><img src="HBase%E6%9E%B6%E6%9E%84(%E4%B8%8D%E5%AE%8C%E6%95%B4%E7%89%88).png" alt="HBase架构(不完整版)"><br>架构角色：<ul><li>Region Server<br>Region Server为Region的管理者，其实现类为<strong>HRegionServer</strong>，主要作用如下:<br>对于数据的操作：get,put,delete<br>对于Region的操作：splitRegion、compactRegion</li><li>Master<br>Master是所有Region Server的管理者，其实现类为HMaster，主要作用如下：<br>对于表的操作：create,delete,alter<br>对于RegionServer的操作：分配regions到每个RegionServer，监控每个RegionServer的状态，负载均衡和故障转移</li><li>Zookeeper<br>HBase通过Zookeeper来做Master的高可用、RegionServer的监控、元数据的入口以及集群配置的维护等工作</li><li>HDFS<br>HDFS为HBase提供最终的底层数据存储服务，同时为HBase提供高可用的支持</li></ul></li></ul><h2 id="HBase快速入门"><a href="#HBase快速入门" class="headerlink" title="HBase快速入门"></a>HBase快速入门</h2><ul><li><p>HBase安装部署</p><ul><li><p>Zookeeper正常部署</p></li><li><p>Hadoop(主要是HDFS)正常部署</p></li><li><p>HBase正常部署</p><ul><li><p>解压HBase：tar -zxvf hbase-2.2.5-bin.tar.gz -C /opt/module</p></li><li><p>修改HBase的配置文件</p><ul><li><p>修改hbase-env.sh的内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/opt/module/jdk1.8.0_251</span><br><span class="line"><span class="meta">#</span><span class="bash"> 自行管理zookeeper</span></span><br><span class="line">export HBASE_MANAGES_ZK=false</span><br></pre></td></tr></table></figure></li><li><p>修改hbase-site.xml的内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置为分布式部署 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.cluster.distributed<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置HBase的默认存储文件的路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://hadoop1:9000/HBase<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置zookeeper的集群地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop1,hadoop2,hadoop3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置zookeeper的data目录 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.property.dataDir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/module/zookeeper-3.6.1/zkData<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改regionservers文件(配置集群节点)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hadoop1</span><br><span class="line">hadoop2</span><br><span class="line">hadoop3</span><br></pre></td></tr></table></figure></li><li><p><strong>软链接hadoop配置文件到HBase</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s /opt/module/hadoop-3.1.3/etc/hadoop/core-site.xml /opt/module/hbase-2.2.5/conf/core-site.xml</span><br><span class="line">ln -s /opt/module/hadoop-3.1.3/etc/hadoop/hdfs-site.xml /opt/module/hbase-2.2.5/conf/hdfs-site.xml</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>将HBase远程发送到集群其他节点：xsync hbase-2.2.5/</p></li><li><p>启动HBase服务</p><ul><li>单独启动方式(提示:如果集群之间的节点时间不同步，会导致 regionserver 无法启动，抛出ClockOutOfSyncException 异常)</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bin/hbase-daemon.sh start master</span><br><span class="line">bin/hbase-daemon.sh start regionserver</span><br></pre></td></tr></table></figure><ul><li>群起集群启动方式：bin/start-hbase.sh(停止:bin/stop-hbase.sh)</li></ul></li><li><p>查看HBase页面：<a href="http://hadoop1:16010" target="_blank" rel="noopener">http://hadoop1:16010</a></p></li></ul></li><li><p>HBase Shell操作</p><ul><li><p>基本操作</p><ul><li>进入HBase客户端命令行：bin/hbase shell</li><li>查看帮助命令：help</li><li>查看当前数据库的所有表：list</li></ul></li><li><p>表的操作</p><ul><li><p>创建表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create 'student','info'</span><br></pre></td></tr></table></figure></li><li><p>插入(更新)数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">put 'student','1001','info:sex','male'</span><br></pre></td></tr></table></figure></li><li><p>扫描查看表数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">scan 'student'</span><br><span class="line"><span class="meta">#</span><span class="bash"> 左闭右开</span></span><br><span class="line">scan 'student',&#123;STARTROW =&gt; '1001', STOPROW =&gt; '1003'&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看多版本的表数(无需在表上设置存放版本)</span></span><br><span class="line">scan 'student',&#123;RAW =&gt; true, VERSIONS =&gt; 10&#125;</span><br></pre></td></tr></table></figure></li><li><p>查看表结构</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">describe 'student'</span><br></pre></td></tr></table></figure></li><li><p>查看指定行或指定行的指定列的数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">get 'student','1001'</span><br><span class="line">get 'student','1001','info:name'</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看name列的三个版本的数据(需要在表上设置存放版本)</span></span><br><span class="line">get 'student','1001',&#123;COLUMN =&gt; 'info:name',VERSIONS =&gt; 3&#125;</span><br></pre></td></tr></table></figure></li><li><p>统计表数据行数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">count 'student'</span><br></pre></td></tr></table></figure></li><li><p>删除数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除某rowkey的全部数据</span></span><br><span class="line">deleteall 'student','1001'</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除某rowkey的某一列数据</span></span><br><span class="line">delete 'student','1002','info:sex'</span><br></pre></td></tr></table></figure></li><li><p>清空表数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 提示: 清空表的操作顺序为先<span class="built_in">disable</span>,然后再truncate</span></span><br><span class="line">truncate 'student'</span><br></pre></td></tr></table></figure></li><li><p>删除表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 首先要将表设置为<span class="built_in">disable</span>状态</span></span><br><span class="line">disable 'student'</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除表</span></span><br><span class="line">drop 'student'</span><br></pre></td></tr></table></figure></li><li><p>变更表信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置info列簇的数据存放3个版本</span></span><br><span class="line">alter 'student',&#123;NAME =&gt; 'info',VERSIONS =&gt; 3&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="HBase进阶"><a href="#HBase进阶" class="headerlink" title="HBase进阶"></a>HBase进阶</h2><ul><li><p>架构原理<br><img src="HBase%E8%AF%A6%E7%BB%86%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="HBase详细架构图"></p><ul><li>StoreFile<br>保存实际数据的物理文件，StoreFile以HFile的形式存储在HDFS上。每个Store会有一个或多个StoreFile(HFile)，数据在每个StoreFile中都是有序的</li><li>MemStore<br>写缓存，由于HFile中的数据要求是有序的，所以数据是先存储在MemStore中，排好序后，等到达刷写时机才会刷写到 HFile，每次刷写都会形成一个新的HFile</li><li>WAL<br>由于数据要经MemStore排序后才能刷写到HFile，但把数据保存在内存中会有很高的概率导致数据丢失，为了解决这个问题，数据会先写在一个叫做Write-Ahead logfile的文件(简称WAL)中，然后再写入MemStore中。所以在系统出现故障的时候，数据可以通过这个日志文件重建</li></ul></li><li><p>写流程<br><img src="HBase%E5%86%99%E6%B5%81%E7%A8%8B.png" alt="HBase写流程"></p><ul><li>Client先访问zookeeper，获取hbase:meta表位于哪个Region Server</li><li>访问对应的Region Server，获取hbase:meta表，根据读请求的namespace:table/rowkey，查询出目标数据位于哪个Region Server中的哪个Region中。并将该table的region信息以及meta表的位置信息缓存在客户端的meta cache，方便下次访问</li><li>与目标Region Server进行通讯</li><li>将数据顺序写入(追加)到WAL</li><li>将数据写入对应的MemStore，数据会在MemStore进行排序</li><li>向客户端发送ack</li><li>等达到MemStore的刷写时机后，将数据刷写到HFile</li></ul></li><li><p>MemStore Flush<br><img src="MemStore-Flush%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="MemStore-Flush示意图"><br>MemStore刷写时机：</p><ul><li>当某个memstore的大小达到了hbase.hregion.memstore.flush.size(默认值128M)，其所在 region的所有memstore都会刷写。当memstore的大小达到了hbase.hregion.memstore.flush.size * hbase.hregion.memstore.block.multiplier(默认值4)时，会阻止继续往该memstore写数据</li><li>当region server中memstore的总大小达到java_heapsize * hbase.regionserver.global.memstore.size * hbase.regionserver.global.memstore.size.lower.limit(默认值0.95)，region会按照其所有memstore的大小顺序(由大到小)依次进行刷写。直到region server中所有memstore的总大小减小到上述值以下(当前还可以写数据)。当region server中memstore的总大小达到java_heapsize * hbase.regionserver.global.memstore.size时，会阻止继续往所有的memstore写数据</li><li>到达自动刷写的时间，也会触发memstore flush。自动刷新的时间间隔由该属性进行配置：hbase.regionserver.optionalcacheflushinterval(默认1小时)</li><li>当WAL文件的数量超过hbase.regionserver.max.logs，region会按照时间顺序依次进行刷写，直到WAL文件数量减小到hbase.regionserver.max.log 以下(该属性名已经废弃——无法手动设置，默认值为32;但是可以设置每个log文件的blockSize,相当于增加单个log文件的存储量,默认为hdfs的块大小128M)</li></ul></li><li><p>读流程<br><img src="HBase%E8%AF%BB%E6%B5%81%E7%A8%8B.png" alt="HBase读流程"></p><ul><li>Client先访问zookeeper，获取hbase:meta表位于哪个Region Server</li><li>访问对应的Region Server，获取hbase:meta表，根据读请求的namespace:table/rowkey，查询出目标数据位于哪个Region Server中的哪个Region中。并将该table的region信息以及meta表的位置信息缓存在客户端的meta cache，方便下次访问</li><li>与目标Region Server进行通讯</li><li>分别在Block Cache(读缓存——内存)，MemStore(内存)和Store File(HFile磁盘文件)中查询目标数据(同时查内存和磁盘,因为不知道哪个timestamp先)，并将查到的所有数据进行合并(Merge)。此处所有数据是指同一条数据的不同版本(timestamp)或者不同的类型(Put/Delete)</li><li>将从文件中查询到的数据块(Block,HFile数据存储单元,默认大小为64KB)缓存到Block Cache</li><li>将合并后的最终结果返回给客户端</li></ul></li><li><p>StoreFile Compaction<br>由于memstore每次刷写都会生成一个新的HFile，且同一个字段的不同版本(timestamp)和不同类型(Put/Delete)有可能会分布在不同的HFile中，因此查询时需要遍历所有的HFile。为了减少HFile的个数，以及清理掉过期和删除的数据，会进行StoreFile Compaction<br>Compaction分为两种，分别是Minor Compaction和Major Compaction。Minor Compaction会将临近的若干个较小的HFile合并成一个较大的HFile，但不会清理过期和删除的数据。Major Compaction会将一个Store下的所有的HFile合并成一个大HFile，并且会清理掉过期和删除的数据<br><img src="StoreFile-Compaction%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="StoreFile-Compaction示意图"></p></li><li><p>Region Split<br>默认情况下，每个Table起初只有一个Region，随着数据的不断写入，Region会自动进行拆分。刚拆分时，两个子Region都位于当前的Region Server，但处于负载均衡的考虑，HMaster有可能会将某个 Region转移给其他的Region Server。<br>Region Split时机：<br>  当1个region中的某个Store下所有StoreFile的总大小超过<strong>Min(R ^ 2 * hbase.hregion.memstore.flush.size , hbase.hregion.max.filesize)</strong>，该Region就会进行拆分，其中 R为当前Region Server中属于该Table的个数</p></li></ul><h2 id="HBase-API"><a href="#HBase-API" class="headerlink" title="HBase-API"></a>HBase-API</h2><ul><li><p>环境准备<br>新建maven项目后在pom.xml中添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hbase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hbase-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hbase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hbase-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>HBaseAPI</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestApi</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Connection connection;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Admin admin;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 1、获取配置文件信息</span></span><br><span class="line">      Configuration configuration = HBaseConfiguration.create();</span><br><span class="line">      configuration.set(<span class="string">"hbase.zookeeper.quorum"</span>, <span class="string">"hadoop1,hadoop2,hadoop3"</span>);</span><br><span class="line">      <span class="comment">// 2、创建连接对象</span></span><br><span class="line">      connection = ConnectionFactory.createConnection(configuration);</span><br><span class="line">      <span class="comment">// 3、创建admin对象</span></span><br><span class="line">      admin = connection.getAdmin();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 关闭资源</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (admin != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        admin.close();</span><br><span class="line">        admin = <span class="keyword">null</span>;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        connection.close();</span><br><span class="line">        connection = <span class="keyword">null</span>;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1、测试表是否存在</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isTableExist</span><span class="params">(String tableName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> admin.tableExists(TableName.valueOf(tableName));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2、创建表</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createTable</span><span class="params">(String tableName, String... columnFamilies)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 1、判断是否存在列簇信息</span></span><br><span class="line">    <span class="keyword">if</span> (columnFamilies.length == <span class="number">0</span>) &#123;</span><br><span class="line">      System.out.println(<span class="string">"请设置列簇信息!"</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2、判断表是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (isTableExist(tableName)) &#123;</span><br><span class="line">      System.out.println(tableName + <span class="string">"表已存在!"</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;ColumnFamilyDescriptor&gt; columnFamilyList = <span class="keyword">new</span> ArrayList&lt;ColumnFamilyDescriptor&gt;();</span><br><span class="line">    <span class="comment">// 3、循环添加列簇信息</span></span><br><span class="line">    <span class="keyword">for</span> (String columnFamily : columnFamilies) &#123;</span><br><span class="line">      <span class="comment">// 添加列簇信息</span></span><br><span class="line">      columnFamilyList.add(ColumnFamilyDescriptorBuilder.newBuilder(columnFamily.getBytes()).build());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4、创建表描述器</span></span><br><span class="line">    TableDescriptor tableDescriptor = TableDescriptorBuilder</span><br><span class="line">            .newBuilder(TableName.valueOf(tableName))</span><br><span class="line">            .setColumnFamilies(columnFamilyList)</span><br><span class="line">            .build();</span><br><span class="line">    <span class="comment">// 5、创建表</span></span><br><span class="line">    admin.createTable(tableDescriptor);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3、删除表</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dropTable</span><span class="params">(String tableName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 1、判断表是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (!isTableExist(tableName)) &#123;</span><br><span class="line">      System.out.println(tableName + <span class="string">"表不存在!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2、下线表</span></span><br><span class="line">    admin.disableTable(TableName.valueOf(tableName));</span><br><span class="line">    <span class="comment">// 3、删除表</span></span><br><span class="line">    admin.deleteTable(TableName.valueOf(tableName));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4、创建命名空间</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createNameSpace</span><span class="params">(String nameSpaceName)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1、创建命名空间描述器</span></span><br><span class="line">    NamespaceDescriptor namespaceDescriptor = NamespaceDescriptor.create(nameSpaceName)</span><br><span class="line">            .build();</span><br><span class="line">    <span class="comment">// 2、创建命名空间</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      admin.createNamespace(namespaceDescriptor);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NamespaceExistException e) &#123;</span><br><span class="line">      System.out.println(nameSpaceName + <span class="string">"命名空间已存在!"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 5、向表中插入数据</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">putData</span><span class="params">(String tableName, String rowKey, String columnFamily, String column, String value)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 1、获取表对象</span></span><br><span class="line">    Table table = connection.getTable(TableName.valueOf(tableName));</span><br><span class="line">    <span class="comment">// 2、创建put对象</span></span><br><span class="line">    Put put = <span class="keyword">new</span> Put(Bytes.toBytes(rowKey));</span><br><span class="line">    <span class="comment">// 3、给put对象赋值</span></span><br><span class="line">    put.addColumn(Bytes.toBytes(columnFamily), Bytes.toBytes(column), Bytes.toBytes(value));</span><br><span class="line">    <span class="comment">// 4、插入数据</span></span><br><span class="line">    table.put(put);</span><br><span class="line">    <span class="comment">// 5、关闭表</span></span><br><span class="line">    table.close();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 6、获取数据(get)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getData</span><span class="params">(String tableName, String rowKey, String columnFamily, String column)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 1、获取表对象</span></span><br><span class="line">    Table table = connection.getTable(TableName.valueOf(tableName));</span><br><span class="line">    <span class="comment">// 2、创建get对象</span></span><br><span class="line">    Get get = <span class="keyword">new</span> Get(Bytes.toBytes(rowKey));</span><br><span class="line">    <span class="comment">// 指定获取的列簇和列</span></span><br><span class="line">    <span class="keyword">if</span> (column != <span class="keyword">null</span> &amp;&amp; !column.isEmpty() &amp;&amp; columnFamily != <span class="keyword">null</span> &amp;&amp; !columnFamily.isEmpty()) &#123;</span><br><span class="line">      get.addColumn(Bytes.toBytes(columnFamily), Bytes.toBytes(column));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (columnFamily != <span class="keyword">null</span> &amp;&amp; !columnFamily.isEmpty()) &#123;</span><br><span class="line">      get.addFamily(Bytes.toBytes(columnFamily));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置获取数据的版本数</span></span><br><span class="line">    get.readVersions(<span class="number">2</span>);</span><br><span class="line">    <span class="comment">// 3、获取数据</span></span><br><span class="line">    Result result = table.get(get);</span><br><span class="line">    <span class="comment">// 4、解析result</span></span><br><span class="line">    <span class="keyword">for</span> (Cell cell : result.rawCells()) &#123;</span><br><span class="line">      <span class="comment">// 5、打印数据</span></span><br><span class="line">      System.out.println(<span class="string">"columnFamily = "</span> + Bytes.toString(CellUtil.cloneFamily(cell)));</span><br><span class="line">      System.out.println(<span class="string">"column = "</span> + Bytes.toString(CellUtil.cloneQualifier(cell)));</span><br><span class="line">      System.out.println(<span class="string">"value = "</span> + Bytes.toString(CellUtil.cloneValue(cell)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 6、关闭表连接</span></span><br><span class="line">    table.close();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 7、获取数据(scan)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">scanTable</span><span class="params">(String tableName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 1、获取表对象</span></span><br><span class="line">    Table table = connection.getTable(TableName.valueOf(tableName));</span><br><span class="line">    <span class="comment">// 2、构建scan对象</span></span><br><span class="line">    Scan scan = <span class="keyword">new</span> Scan();</span><br><span class="line">    <span class="comment">// 构建过滤器</span></span><br><span class="line">    <span class="comment">// RowFilter rowFilter = new RowFilter(CompareOperator.EQUAL, new SubstringComparator(uid + '_'));</span></span><br><span class="line">    <span class="comment">// scan.setFilter(rowFilter);</span></span><br><span class="line">    <span class="comment">// 3、扫描表</span></span><br><span class="line">    ResultScanner resultScanner = table.getScanner(scan);</span><br><span class="line">    <span class="comment">// 4、解析resultScanner</span></span><br><span class="line">    <span class="keyword">for</span> (Result result : resultScanner) &#123;</span><br><span class="line">      <span class="comment">// 5、解析result</span></span><br><span class="line">      <span class="keyword">for</span> (Cell cell : result.rawCells()) &#123;</span><br><span class="line">        <span class="comment">// 6、打印数据</span></span><br><span class="line">        System.out.println(<span class="string">"rowKey = "</span> + Bytes.toString(CellUtil.cloneRow(cell)));</span><br><span class="line">        System.out.println(<span class="string">"columnFamily = "</span> + Bytes.toString(CellUtil.cloneFamily(cell)));</span><br><span class="line">        System.out.println(<span class="string">"column = "</span> + Bytes.toString(CellUtil.cloneQualifier(cell)));</span><br><span class="line">        System.out.println(<span class="string">"value = "</span> + Bytes.toString(CellUtil.cloneValue(cell)));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 5、关闭table对象</span></span><br><span class="line">    table.close();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 8、删除数据,delete是一种特殊的put操作,打标记</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteData</span><span class="params">(String tableName, String rowKey, String columnFamily, String column)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 1、获取表对象</span></span><br><span class="line">    Table table = connection.getTable(TableName.valueOf(tableName));</span><br><span class="line">    <span class="comment">// 2、构建删除对象,deleteFamily标记,rowKey下所有columnFamily的所有version</span></span><br><span class="line">    Delete delete = <span class="keyword">new</span> Delete(Bytes.toBytes(rowKey));</span><br><span class="line">    <span class="comment">// 设置删除的列簇 deleteFamily标记对应HBase Cli的deleteall命令</span></span><br><span class="line">    <span class="comment">// 删除列对应部分delete命令,删除指定columnFamily的所有version</span></span><br><span class="line">    <span class="comment">// delete.addFamily(Bytes.toBytes(columnFamily));</span></span><br><span class="line">    <span class="comment">// 设置删除的列 deleteColumn标记</span></span><br><span class="line">    <span class="comment">// delete.addColumns(Bytes.toBytes(columnFamily), Bytes.toBytes(column));</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      设置删除的列 delete标记</span></span><br><span class="line"><span class="comment">      普通情况：上一个老值冒出来了,新值删去</span></span><br><span class="line"><span class="comment">      另一种情况：接连着push两条name,flush之后再使用该方式删除,没数据了</span></span><br><span class="line"><span class="comment">      无法确定flush时机,删除最好使用addColumns(防止出错)</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="comment">// delete.addColumn(Bytes.toBytes(columnFamily), Bytes.toBytes(column));</span></span><br><span class="line">    <span class="comment">// 设置删除的列 deleteColumn标记,删除在小于等于timestamp的所有版本</span></span><br><span class="line">    <span class="comment">// delete.addColumns(Bytes.toBytes(columnFamily), Bytes.toBytes(column), 1595307747400L);</span></span><br><span class="line">    <span class="comment">// 设置删除的列 delete标记,删除等于timestamp的那一个版本</span></span><br><span class="line">    delete.addColumn(Bytes.toBytes(columnFamily), Bytes.toBytes(column), <span class="number">1595307747419L</span>);</span><br><span class="line">    <span class="comment">// 3、执行删除操作</span></span><br><span class="line">    table.delete(delete);</span><br><span class="line">    <span class="comment">// 4、关闭连接</span></span><br><span class="line">    table.close();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// System.out.println("isTableExist = " + isTableExist("stu4"));</span></span><br><span class="line">    <span class="comment">// createTable("stu6", "info1", "info2");</span></span><br><span class="line">    <span class="comment">// System.out.println("isTableExist = " + isTableExist("stu5"));</span></span><br><span class="line">    <span class="comment">// dropTable("stu6");</span></span><br><span class="line">    <span class="comment">// createNameSpace("test");</span></span><br><span class="line">    <span class="comment">// createTable("test:xixi", "info");</span></span><br><span class="line">    <span class="comment">// putData("stu4", "1006", "info", "name", "haha");</span></span><br><span class="line">    <span class="comment">// scanTable("fruit");</span></span><br><span class="line">    deleteData(<span class="string">"stu"</span>, <span class="string">"1008"</span>, <span class="string">"info1"</span>, <span class="string">"name"</span>);</span><br><span class="line">    close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>MapReduce<br>通过HBase的相关Java API，我们可以实现伴随HBase操作的MapReduce过程，比如使用MapReduce将数据从本地文件系统导入到HBase的表中，比如我们从HBase中读取一些原始数据后使用MapReduce做数据分析</p><ul><li><p>官方HBase-MapReduce案例</p><ul><li><p>查看HBase的MapReduce任务的执行需要的依赖包：bin/hbase mapredcp以及bin/hbase classpath</p></li><li><p>环境变量的导入(/etc/profile中配置;在生产环境中最好使用临时操作,以下命令在命令行下输入,只在当前次登录生效)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> HBASE_HOME</span></span><br><span class="line">export HBASE_HOME=/opt/module/hbase-2.2.5</span><br><span class="line">export HADOOP_CLASSPATH=`$&#123;HBASE_HOME&#125;/bin/hbase classpath`</span><br><span class="line">export HADOOP_CLASSPATH=$HADOOP_CLASSPATH:`$&#123;HBASE_HOME&#125;/bin/hbase mapredcp`</span><br><span class="line"><span class="meta">#</span><span class="bash"> 保存后执行<span class="built_in">source</span> /etc/profile</span></span><br></pre></td></tr></table></figure></li><li><p>执行官方的MapReduce任务(输出都在控制台上)</p><ul><li><p>案例一：统计stu表中有多少行数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop jar lib/hbase-mapreduce-2.2.5.jar rowcounter stu</span><br></pre></td></tr></table></figure></li><li><p>案例二：使用MapReduce将本地数据导入到HBase</p><ul><li><p>在本地创建一个tsv格式的文件：fruit.tsv(csv格式以’,’隔开,而tsv格式以’\t’隔开)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1001  Apple Red</span><br><span class="line">1002  Pear  Yellow</span><br><span class="line">1003  Pineapple Yellow</span><br></pre></td></tr></table></figure></li><li><p>创建HBase表(不存在会报错)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create 'fruit','info'</span><br></pre></td></tr></table></figure></li><li><p>将fruit.tsv文件上传到HDFS上(根目录上)：hdfs dfs -put fruit.tsv /</p></li><li><p>执行MapReduce任务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hadoop jar lib/hbase-mapreduce-2.2.5.jar \</span><br><span class="line">importtsv -Dimporttsv.columns=HBASE_ROW_KEY,info:name,info:color fruit \</span><br><span class="line">hdfs://hadoop1:9000/fruit.tsv</span><br></pre></td></tr></table></figure></li><li><p>使用scan命令查看导入后的结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scan 'fruit'</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li><li><p>自定义HBase-MapReduce</p><ul><li><p>导入相应的依赖包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hbase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hbase-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hbase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hbase-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hbase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hbase-mapreduce<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-auth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-mapreduce-client-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-mapreduce-client-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-mapreduce-client-jobclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>示例一：将HDFS上数据表fruit.tsv导入到HBase的fruit1表中(打包扔到集群上运行)</p><ul><li><p>FruitMapper类，用于读取HDFS上数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">LongWritable</span>, <span class="title">Text</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    context.write(key, value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>FruitReducer类，用于将数据写入到HBase中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitReducer</span> <span class="keyword">extends</span> <span class="title">TableReducer</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">NullWritable</span>&gt; </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(LongWritable key, Iterable&lt;Text&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">  <span class="comment">// 1、遍历values: 1001 Apple   red</span></span><br><span class="line">  <span class="keyword">for</span> (Text value : values) &#123;</span><br><span class="line">    <span class="comment">// 2、获取每一行数据</span></span><br><span class="line">    String[] fields = value.toString().split(<span class="string">"\t"</span>);</span><br><span class="line">    <span class="comment">// 3、构建Put对象</span></span><br><span class="line">    Put put = <span class="keyword">new</span> Put(Bytes.toBytes(fields[<span class="number">0</span>]));</span><br><span class="line">    <span class="comment">// 4、给Put对象复制</span></span><br><span class="line">    put.addColumn(Bytes.toBytes(<span class="string">"info"</span>), Bytes.toBytes(<span class="string">"name"</span>), Bytes.toBytes(fields[<span class="number">1</span>]));</span><br><span class="line">    put.addColumn(Bytes.toBytes(<span class="string">"info"</span>), Bytes.toBytes(<span class="string">"color"</span>), Bytes.toBytes(fields[<span class="number">2</span>]));</span><br><span class="line">    <span class="comment">// 5、写出</span></span><br><span class="line">    context.write(NullWritable.get(), put);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>FruitDriver类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitDriver</span> <span class="keyword">implements</span> <span class="title">Tool</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 定义一个Configuration</span></span><br><span class="line">  <span class="keyword">private</span> Configuration configuration = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">run</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 1、获取job对象</span></span><br><span class="line">    Job job = Job.getInstance(configuration);</span><br><span class="line">    <span class="comment">// 2、设置驱动类路径</span></span><br><span class="line">    job.setJarByClass(FruitDriver<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">// 3、设置Mapper和Mapper输出的KV类型</span></span><br><span class="line">    job.setMapperClass(FruitMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    job.setMapOutputKeyClass(LongWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    job.setMapOutputValueClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">// 4、设置Reducer类</span></span><br><span class="line">    TableMapReduceUtil.initTableReducerJob(</span><br><span class="line">            args[<span class="number">1</span>],</span><br><span class="line">            FruitReducer<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">job</span></span></span><br><span class="line"><span class="class">    )</span>;</span><br><span class="line">    <span class="comment">// 5、设置输入参数</span></span><br><span class="line">    FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">    <span class="comment">// 6、提交任务</span></span><br><span class="line">    <span class="keyword">boolean</span> result = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span> result ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConf</span><span class="params">(Configuration configuration)</span> </span>&#123; <span class="keyword">this</span>.configuration = configuration; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Configuration <span class="title">getConf</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> configuration; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line">      <span class="keyword">int</span> run = ToolRunner.run(configuration, <span class="keyword">new</span> FruitDriver(), args);</span><br><span class="line">      System.exit(run);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用maven进行package打包操作，将jar包上传到集群上</p></li><li><p>在命令行中操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop jar HBaseTest-1.0-SNAPSHOT.jar com.xiong.mr.FruitDriver /fruit.tsv fruit1</span><br></pre></td></tr></table></figure></li><li><p>在HBase Cli上查看fruit1表的数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scan 'fruit1'</span><br></pre></td></tr></table></figure></li></ul></li><li><p>示例二：读取fruit表并过滤数据，将结果输出到fruit2表(远端连接运行)</p><ul><li><p>Fruit2Mapper类，用于读取和过滤HBase fruit表中的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fruit2Mapper</span> <span class="keyword">extends</span> <span class="title">TableMapper</span>&lt;<span class="title">ImmutableBytesWritable</span>, <span class="title">Put</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(ImmutableBytesWritable key, Result value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// 构建Put对象</span></span><br><span class="line">    Put put = <span class="keyword">new</span> Put(key.get());</span><br><span class="line">    <span class="comment">// 1、获取数据</span></span><br><span class="line">    <span class="keyword">for</span> (Cell cell : value.rawCells()) &#123;</span><br><span class="line">      <span class="comment">// 2、判断当前的cell是否为name列</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="string">"name"</span>.equals(Bytes.toString(CellUtil.cloneQualifier(cell)))) &#123;</span><br><span class="line">        <span class="comment">// 3、给Put对象赋值</span></span><br><span class="line">        put.add(cell);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4、写出</span></span><br><span class="line">    context.write(key, put);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Fruit2Reducer类，用于将处理后的数据输出到fruit2表中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fruit2Reducer</span> <span class="keyword">extends</span> <span class="title">TableReducer</span>&lt;<span class="title">ImmutableBytesWritable</span>, <span class="title">Put</span>, <span class="title">NullWritable</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(ImmutableBytesWritable key, Iterable&lt;Put&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// 遍历写出</span></span><br><span class="line">    <span class="keyword">for</span> (Put value : values) &#123;</span><br><span class="line">      context.write(NullWritable.get(), value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Fruit2Driver类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fruit2Driver</span> <span class="keyword">implements</span> <span class="title">Tool</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 定义配置信息</span></span><br><span class="line">  <span class="keyword">private</span> Configuration configuration = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">run</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 1、获取Job对象</span></span><br><span class="line">    Job job = Job.getInstance(configuration);</span><br><span class="line">    <span class="comment">// 2、设置主类路径</span></span><br><span class="line">    job.setJarByClass(Fruit2Driver<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">// 3、设置Mapper及输出KV类型</span></span><br><span class="line">    TableMapReduceUtil.initTableMapperJob(</span><br><span class="line">            <span class="string">"fruit"</span>,</span><br><span class="line">            <span class="keyword">new</span> Scan(),</span><br><span class="line">            Fruit2Mapper<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">ImmutableBytesWritable</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">Put</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">job</span></span></span><br><span class="line"><span class="class">    )</span>;</span><br><span class="line">    <span class="comment">// 4、设置Reducer及输出表</span></span><br><span class="line">    TableMapReduceUtil.initTableReducerJob(</span><br><span class="line">            <span class="string">"fruit2"</span>,</span><br><span class="line">            Fruit2Reducer<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">job</span></span></span><br><span class="line"><span class="class">    )</span>;</span><br><span class="line">    <span class="comment">// 5、提交任务</span></span><br><span class="line">    <span class="keyword">boolean</span> result = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span> result ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConf</span><span class="params">(Configuration configuration)</span> </span>&#123; <span class="keyword">this</span>.configuration = configuration; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Configuration <span class="title">getConf</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> configuration; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Configuration configuration = HBaseConfiguration.create();</span><br><span class="line">      <span class="keyword">int</span> run = ToolRunner.run(configuration, <span class="keyword">new</span> Fruit2Driver(), args);</span><br><span class="line">      System.exit(run);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将集群上HBase的hbase-site.xml内容复制到当前工程下的resource/hbase-site.xml上，文件名不得修改</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.cluster.distributed<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- HBase默认存储文件的路径 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://hadoop1:9000/HBase<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- zk的集群地址 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop1,hadoop2,hadoop3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- zk的data目录 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.property.dataDir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/module/zookeeper-3.6.1/zkData<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>./tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.unsafe.stream.capability.enforce<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>运行查看结果(在HBase Cli中scan fruit2表)</p></li></ul></li></ul></li></ul></li><li><p>与Hive的集成</p><ul><li><p>HBase和Hive的对比</p><ul><li>Hive<ul><li>数据仓库：Hive的本质其实就相当于将HDFS中已经存储的文件在Mysql中做了一个双射关系，以方便使用HQL去管理查询</li><li>用于数据分析、清洗：Hive适用于离线的数据分析和清洗，延迟较高</li><li>基于HDFS、MapReduce：Hive存储的数据依旧在DataNode上，编写的HQL语句终将是转换为MapReduce代码执行</li></ul></li><li>HBase<ul><li>数据库：是一种<strong>面向列簇存储</strong>的<strong>非关系型数据库</strong></li><li>用于存储结构化和非结构化的数据：适用于单表非关系型数据的存储，不适合做关联查询，类似JOIN等操作</li><li>基于HDFS：数据持久化存储的体现形式是HFile，存放于DataNode中，被ResionServer以region的形式进行管理</li><li>延迟较低，接入在线业务使用：面对大量的企业数据，HBase可以直线单表大量数据的存储，同时提供了高效的数据访问速度</li></ul></li></ul></li><li><p>HBase和Hive集成使用(可能会有版本兼容问题,生产环境会采用CDH方式或者运维人员帮忙处理)</p><ul><li><p>环境准备<br>后续可能会在操作Hive的同时会对HBase产生影响，所以Hive需要持有操作HBase的Jar，那么需要拷贝Hive所依赖的Jar(或者使用软连接的形式)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 可以临时设置,也可在/etc/profile中永久设置</span></span><br><span class="line">export HBASE_HOME=/opt/module/hbase-2.2.5</span><br><span class="line">export HIVE_HOME=/opt/module/hive-3.1.2</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置软链接,<span class="string">'\'</span>为shell命令的分隔符,多行时最好采用</span></span><br><span class="line">ln -s $HBASE_HOME/lib/hbase-common-2.2.5.jar \</span><br><span class="line"><span class="meta">$</span><span class="bash">HIVE_HOME/lib/hbase-common-2.2.5.jar</span></span><br><span class="line">ln -s $HBASE_HOME/lib/hbase-server-2.2.5.jar \</span><br><span class="line"><span class="meta">$</span><span class="bash">HIVE_HOME/lib/hbase-server-2.2.5.jar</span></span><br><span class="line">ln -s $HBASE_HOME/lib/hbase-client-2.2.5.jar \</span><br><span class="line"><span class="meta">$</span><span class="bash">HIVE_HOME/lib/hbase-client-2.2.5.jar</span></span><br><span class="line">ln -s $HBASE_HOME/lib/hbase-protocol-2.2.5.jar \</span><br><span class="line"><span class="meta">$</span><span class="bash">HIVE_HOME/lib/hbase-protocol-2.2.5.jar</span></span><br><span class="line">ln -s $HBASE_HOME/lib/hbase-it-2.2.5.jar \</span><br><span class="line"><span class="meta">$</span><span class="bash">HIVE_HOME/lib/hbase-it-2.2.5.jar</span></span><br><span class="line">ln -s $HBASE_HOME/lib/hbase-hadoop2-compat-2.2.5.jar \</span><br><span class="line"><span class="meta">$</span><span class="bash">HIVE_HOME/lib/hbase-hadoop2-compat-2.2.5.jar</span></span><br><span class="line">ln -s $HBASE_HOME/lib/hbase-hadoop-compat-2.2.5.jar \</span><br><span class="line"><span class="meta">$</span><span class="bash">HIVE_HOME/lib/hbase-hadoop-compat-2.2.5.jar</span></span><br></pre></td></tr></table></figure><p>同时需要在hive-site.xml中修改zookeeper的属性(连接hbase需要与zk交互)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置zk节点 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop1,hadoop2,hadoop3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>The list of ZooKeeper servers to talk to. This is only needed for read/write locks.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置zk client通信端口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.zookeeper.client.port<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>The port of ZooKeeper servers to talk to. This is only needed for read/write locks.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>实操</p><ul><li><p>案例一：建立Hive表，关联HBase表，插入数据到Hive表的同时能够影响HBase表</p><ul><li><p>在Hive中创建表同时关联HBase(完成后可在Hive和HBase的Cli中查看)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE hive_hbase_emp_table(</span><br><span class="line">empno int,</span><br><span class="line">ename string,</span><br><span class="line">job string,</span><br><span class="line">mgr int,</span><br><span class="line">hiredate string,</span><br><span class="line">sal double,</span><br><span class="line">comm double,</span><br><span class="line">deptno int)</span><br><span class="line">STORED BY 'org.apache.hadoop.hive.hbase.HBaseStorageHandler'</span><br><span class="line">WITH SERDEPROPERTIES ("hbase.columns.mapping" = ":key,info:ename,info:job,info:mgr,info:hiredate,info:sal,info:comm,info:deptno")</span><br><span class="line">TBLPROPERTIES ("hbase.table.name" = "hbase_emp_table");</span><br></pre></td></tr></table></figure></li><li><p>在Hive中创建中间临时表，用于装载文件中的数据(因为hbase的文件格式不是txt,所有不能直接由txt导入,需要中间表)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE emp(</span><br><span class="line">empno int,</span><br><span class="line">ename string,</span><br><span class="line">job string,</span><br><span class="line">mgr int,</span><br><span class="line">hiredate string,</span><br><span class="line">sal double,</span><br><span class="line">comm double,</span><br><span class="line">deptno int)</span><br><span class="line">row format delimited fields terminated by '\t';</span><br></pre></td></tr></table></figure></li><li><p>向Hive中间表中装载数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load data local inpath '/opt/module/data/hive/emp.txt' into table emp;</span><br></pre></td></tr></table></figure></li><li><p>通过insert命令将中间表的数据导入Hive与HBase关联的那张表中：insert into table hive_hbase_emp_table select * from emp;</p></li><li><p>查看Hive和HBase各自的表中是否已同步地插入了数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Hive</span></span><br><span class="line">select * from hive_hbase_emp_table;</span><br><span class="line"><span class="meta">#</span><span class="bash"> HBase</span></span><br><span class="line">scan 'hbase_emp_table'</span><br></pre></td></tr></table></figure></li></ul></li><li><p>案例二：在HBase中已经存储了某一张表hbase_emp_table，然后在Hive中创建一个外部表来关联HBase中的hbase_emp_table这张表，使之可以借助Hive来分析HBase这张表中的数据</p><ul><li><p>在Hive中创建外部表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CREATE EXTERNAL TABLE relevance_hbase_emp(</span><br><span class="line">empno int,</span><br><span class="line">ename string,</span><br><span class="line">job string,</span><br><span class="line">mgr int,</span><br><span class="line">hiredate string,</span><br><span class="line">sal double,</span><br><span class="line">comm double,</span><br><span class="line">deptno int)</span><br><span class="line">STORED BY 'org.apache.hadoop.hive.hbase.HBaseStorageHandler'</span><br><span class="line">WITH SERDEPROPERTIES ("hbase.columns.mapping" = ":key,info:ename,info:job,info:mgr,info:hiredate,info:sal,info:comm,info:deptno")</span><br><span class="line">TBLPROPERTIES ("hbase.table.name" = "hbase_emp_table");</span><br></pre></td></tr></table></figure></li><li><p>查看关联后Hive中外部表：select * from relevance_hbase_emp;</p></li><li><p>之后便可使用Hive进行一些数据分析</p></li></ul></li></ul></li></ul></li></ul></li></ul><h2 id="HBase优化"><a href="#HBase优化" class="headerlink" title="HBase优化"></a>HBase优化</h2><ul><li><p>高可用<br>在HBase中HMaster负责监控HRegionServer的生命周期，均衡RegionServer的负载，如果 HMaster挂掉了，那么整个HBase集群将陷入不健康的状态，并且此时的工作状态并不会维持太久。所以HBase支持对HMaster的高可用配置</p><ul><li><p>关闭启动的HBase集群：bin/stop-hbase.sh</p></li><li><p>在conf目录下创建backup-masters文件(文件名不得更改)：touch conf/backup-masters</p></li><li><p>在backup-masters中加入备用HMaster节点(当前HMaster配置是hadoop1,文件不得多出空格和换行)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hadoop2</span><br><span class="line">hadoop3</span><br></pre></td></tr></table></figure></li><li><p>分发conf目录到其他hbase集群节点：xsync backup-masters</p></li><li><p>在hadoop1上启动HBase集群：bin/start-hbase.sh</p></li><li><p>打开页面查看：<a href="http://hadoop1:16010" target="_blank" rel="noopener">http://hadoop1:16010</a></p></li><li><p>使用jps查看hadoop1的HMaster进程，并使用kill -9 进程号杀死(杀两次,第二次杀失败,假活)</p></li><li><p>打开页面查看：<a href="http://hadoop2:16010" target="_blank" rel="noopener">http://hadoop2:16010</a>或<a href="http://hadoop3:16010" target="_blank" rel="noopener">http://hadoop3:16010</a></p></li></ul></li><li><p>预分区<br>每一个region维护着StartRow与EndRow，如果加入的数据符合某个Region维护的RowKey范围，则该数据交给这个Region维护。那么依照这个原则，我们可以将数据所要投放的分区提前大致规划好，以提高HBase性能</p><ul><li><p>手动设定预分区</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 具体分区信息可以在web页面的table中查看</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 四个键分五个区</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 逐个字符比较</span></span><br><span class="line">create 'staff1','info','partition1',SPLITS =&gt; ['1000','2000','3000','4000']</span><br></pre></td></tr></table></figure></li><li><p>生成16禁止序列预分区(基本不用)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create 'staff2','info','partition2',&#123;NUMREGIONS =&gt; 15, SPLITALGO =&gt; 'HexStringSplit'&#125;</span><br></pre></td></tr></table></figure></li><li><p>按照文件中设置的规则预分区<br>创建splits.txt文件内容如下：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">aa</span><br><span class="line">bb</span><br><span class="line">dd</span><br><span class="line">cc</span><br></pre></td></tr></table></figure><p>  采用文件设置预分区形式</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 默认会对分区文件做排序,不然左开右闭会出问题</span></span><br><span class="line">create 'staff3','partition3',SPLITS_FILE =&gt; '/opt/module/data/hbase/splits.txt'</span><br></pre></td></tr></table></figure></li><li><p>使用JavaAPI创建预分区</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义算法，产生一系列hash散列值存储在二维数组中</span></span><br><span class="line"><span class="keyword">byte</span>[][] splitKeys = ...</span><br><span class="line"><span class="comment">// 还有四个参数的方法...</span></span><br><span class="line">admin.createTable(tableDescriptor,splitKeys);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>RowKey设计<br>一条数据的唯一标识就是RowKey，那么这条数据存储于哪个分区，取决于RowKey处于哪个一个预分区的区间内，设计RowKey的主要目的，就是让数据均匀的分布于所有的region中，在一定程度上防止数据倾斜。接下来我们就谈一谈RowKey常用的设计方案</p><ul><li>生成随机数、hash、散列值：比如SHA1</li><li>字符反转</li><li>字符串拼接</li><li>示例讲解<br>电信要求统计用户的时间段内的通话流水，根据什么分区，假如要分近300个区？<br>电话号码11位，为了将对应到300个分区，而且要求一个号码需要对应到一个分区。那么如果有些号码电话打的很多，那么一个分区可能还是有问题，所以根据号码和时间进行分区。如果分到1年，时间颗粒度太大；最好采用1月。<br>最终采用取余方式：hash(15988814888(电话号码) + 2020(年) + 07(月)) % 300——此处的’+’只做一个示意作用，具体需要实践和经验。<br>那么假如我需要获取15988814888用户在2020年6月份的通话流水，怎么根据startRowKey和endRowKey获取数据呢？<br>startRowKey(xxx为分区号,是根据公式计算得出的;最后是rowKey比较规则:有比没有大)：xxx_15988814888_2020_06<br>endRowKey(‘|’的ascii码很大,或者也可以为2020_03;这里不会出现第一位大于遮蔽第二位的问题)：xxx_15988814888_2020_06|</li></ul></li><li><p>内存优化<br>HBase操作过程中需要大量的内存开销，毕竟Table是可以缓存在内存中的，一般会分配整个可用内存的70%给HBase的Java堆。<strong>但是不建议分配非常大的堆内存</strong>，因为GC过程持续太久会导致RegionServer处于长期不可用状态，一般16~48G内存就可以了，如果因为框架占用内存过高导致系统内存不足，框架一样会被系统服务拖死</p></li><li><p>基础优化</p><ul><li><p>允许的HDFS的文件中追加内容(hdfs-site.xml、hbase-site.xml)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">属性：dfs.support.append</span><br><span class="line">解释：开启HDFS追加同步，可以优秀地配合HBase的数据同步和持久化。默认值为true</span><br></pre></td></tr></table></figure></li><li><p>优化 DataNode 允许的最大文件打开数(hdfs-site.xml)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">属性：dfs.datanode.max.transfer.threads</span><br><span class="line">解释：HBase一般都会同一时间操作大量的文件，根据集群的数量和规模以及数据动作，设置为4096或者更高。默认值：4096</span><br></pre></td></tr></table></figure></li><li><p>优化延迟高的数据操作的等待时间(hdfs-site.xml)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">属性：dfs.image.transfer.timeout</span><br><span class="line">解释：如果对于某一次数据操作来讲，延迟非常高，socket需要等待更长的时间，建议把该值设置为更大的值(默认60000毫秒)，以确保socket不会被timeout掉</span><br></pre></td></tr></table></figure></li><li><p>优化数据的写入效率(mapred-site.xml)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">属性：mapreduce.map.output.compress</span><br><span class="line">     mapreduce.map.output.compress.codec</span><br><span class="line">解释：开启这两个数据可以大大提高文件的写入效率，减少写入时间。第一个属性值修改为true，第二个属性值修改为：org.apache.hadoop.io.compress.GzipCodec或者其他压缩方式</span><br></pre></td></tr></table></figure></li><li><p>设置RPC监听数量(hbase-site.xml)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">属性：hbase.regionserver.handler.count</span><br><span class="line">解释：默认值为30，用于指定RPC监听的数量，可以根据客户端的请求数进行调整，读写请求较多时，增加此值</span><br></pre></td></tr></table></figure></li><li><p>优化HStore文件大小(hbase-site.xml)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">属性：hbase.hregion.max.filesize</span><br><span class="line">解释：默认值10737418240(10GB)，如果需要运行HBase的MR任务，可以减小此值，因为一个 region对应一个map任务，如果单个region过大，会导致map任务执行时间过长。该值的意思就是，如果HFile的大小达到这个数值，则这个region会被切分为两个Hfile</span><br></pre></td></tr></table></figure></li><li><p>优化HBase客户端缓存(hbase-site.xml)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">属性：hbase.client.write.buffer</span><br><span class="line">解释：用于指定Hbase客户端缓存，增大该值可以减少RPC调用次数，但是会消耗更多内存，反之则反之。一般我们需要设定一定的缓存大小，以达到减少RPC次数的目的</span><br></pre></td></tr></table></figure></li><li><p>指定scan.next扫描HBase所获取的行数(hbase-site.xml)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">属性：hbase.client.scanner.caching</span><br><span class="line">解释：用于指定scan.next方法获取的默认行数，值越大，消耗内存越大</span><br></pre></td></tr></table></figure></li><li><p>flush、compact、split机制<br>当MemStore达到阈值，将Memstore中的数据Flush进Storefile；compact机制则是把flush出来的小文件合并成大的Storefile文件。split则是当Region达到阈值，会把过大的Region一分为二<br>涉及属性：hbase.hregion.memstore.flush.size = 134217728(即128M就是Memstore的默认阈值)<br>这个参数的作用是当单个HRegion内所有的Memstore大小总和超过指定值时，flush该HRegion的所有memstore。RegionServer的flush是通过将请求添加一个队列，模拟生产消费模型来异步处理的。那这里就有一个问题，当队列来不及消费，产生大量积压请求时，可能会导致内存陡增，最坏的情况是触发OOM</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hbase.regionserver.global.memstore.upperLimit &#x3D; 0.4</span><br><span class="line">hbase.regionserver.global.memstore.lowerLimit &#x3D; 0.38</span><br></pre></td></tr></table></figure><p>当MemStore使用内存总量达到hbase.regionserver.global.memstore.upperLimit指定值时，将会有多个MemStores flush到文件中，MemStore flush顺序是按照大小降序执行的，直到刷新到MemStore使用内存略小于lowerLimit</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BigData </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive</title>
      <link href="/2020/07/06/BigData/Hive/"/>
      <url>/2020/07/06/BigData/Hive/</url>
      
        <content type="html"><![CDATA[<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><ul><li><a href="#Hive基本概念">Hive基本概念</a></li><li><a href="#Hive安装">Hive安装</a></li><li><a href="#Hive数据类型">Hive数据类型</a></li><li><a href="#DDL数据定义">DDL数据定义</a></li><li><a href="#DML数据操作">DML数据操作</a></li><li><a href="#查询">查询</a></li><li><a href="#例题实战(蚂蚁金服)">例题实战(蚂蚁金服)</a></li><li><a href="#函数">函数</a></li><li><a href="#压缩和存储">压缩和存储</a></li><li><a href="#企业级调优">企业级调优</a></li><li><a href="#谷粒影音Hive实战">谷粒影音Hive实战</a></li><li><a href="#常见错误及解决方案">常见错误及解决方案</a></li></ul><a id="more"></a><h2 id="Hive基本概念"><a href="#Hive基本概念" class="headerlink" title="Hive基本概念"></a>Hive基本概念</h2><ul><li><p>什么是Hive</p><ul><li>由Facebook开源用于解决海量结构化日志的数据统计</li><li>基于Hadoop的一个数据仓库工具，可以将结构化的数据文件映射为一张表，并提供类SQL查询功能<ul><li>Hive处理的数据存储在HDFS</li><li>Hive分析数据底层的实现是MapReduce</li><li>执行程序运行在Yarn上</li></ul></li><li>本质是将HQL(Hive Query Language)转化成MapReduce程序<br><img src="SQL-MapReduce.png" alt="SQL-MapReduce"></li></ul></li><li><p>Hive的优缺点</p><ul><li>优点：<ul><li>操作接口采用类SQL语法，提供快速开发的能力(简单、容易上手)</li><li>避免了去写MapReduce，减少开发人员的学习成本</li><li>Hive的执行延迟比较高，因此Hive常用于数据分析和对实时性要求不高的场合</li><li>Hive优势在于处理大数据，对于处理小数据没有优势，因为Hive的执行延迟比较高</li><li>Hive支持用户自定义函数，用户可以根据自己的需求来实现自己的函数</li></ul></li><li>缺点：<ul><li>Hive的HQL表达能力有限：<ul><li>迭代式算法无法表达</li><li>数据挖掘方面不擅长</li></ul></li><li>Hive的效率比较低：<ul><li>Hive自动生成的MapReduce作业，通常情况下不够智能化</li><li>Hive调优比较困难，粒度较粗</li></ul></li></ul></li></ul></li><li><p>Hive架构原理<br><img src="Hive%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86.png" alt="Hive架构原理"></p><ul><li>用户接口：Client<br>CLI(hive shell)、JDBC/ODBC(java访问hive)、WEBUI(浏览器访问hive)</li><li>元数据：Metastore<br>元数据包括：表名、表所属的数据库(默认是default)、表的拥有者、列/分区字段、表的类型(是否是外部表)、表的数据所在目录等；</li></ul><p><strong>默认存储在自带的derby数据库中(存在bug)，推荐使用MySQL存储Metastore</strong></p><ul><li>Hadoop：使用HDFS进行存储，使用MapReduce进行计算</li><li>驱动器：Driver<ul><li>解析器(SQL Parser)：将SQL字符串转换成抽象语法树AST，这一步一般都用第三方工具库完成，比如antlr；对AST进行语法分析，比如表是否存在、字段是否存在、SQL语义是否有误</li><li>编译器(Physical Plan)：将AST编译生成逻辑执行计划</li><li>优化器(Query Optimizer)：对逻辑执行计划进行优化</li><li>执行器(Execution)：把逻辑执行计划转换成可以运行的物理计划。对于Hive来说，就是MR/Spark<br><img src="Hive%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6.png" alt="Hive运行机制"><br>Hive通过给用户提供的一系列交互接口，接收到用户的指令(SQL)，使用自己的Driver，结合元数据(MetaStore)，将这些指令翻译成MapReduce，提交到Hadoop中执行，最后，将 执行返回的结果输出到用户交互接口</li></ul></li></ul></li><li><p>Hive和数据库比较<br>由于Hive采用了类似SQL的查询语言HQL，因此很容易将Hive理解为数据库。其实从结构上来看，Hive和数据库除了拥有类似的查询语言，再无类似之处。下面将从多个方面来阐述Hive和数据库的差异。数据库可以用在Online的应用中，但是Hive是为数据仓库而设计的，清楚这一点，有助于从应用角度理解Hive的特性</p><ul><li>查询语言<br>由于SQL被广泛的应用在数据仓库中，因此，专门针对Hive的特性设计了类SQL的查询语言 HQL。熟悉SQL开发的开发者可以很方便的使用Hive进行开发</li><li>数据存储位置<br>Hive是建立在Hadoop之上的，所有Hive的数据都是存储在HDFS中的。而数据库则可以将数据保存在块设备或者本地文件系统中</li><li>数据更新<br>由于Hive是针对数据仓库应用设计的，而<strong>数据仓库的内容是读多写少的。因此，Hive中不建议对数据的改写，所有的数据都是在加载的时候确定好的</strong>。而数据库中的数据通常是需要经常进行修改的</li><li>索引<br>Hive在加载数据的过程中不会对数据进行任何处理，甚至不会对数据进行扫描，因此也没有对数据中的某些Key建立索引。<strong>Hive要访问数据中满足条件的特定值时，需要暴力扫描整个数据</strong>，因此访问延迟较高。由于MapReduce的引入，Hive可以并行访问数据，因此即使没有索引，对于大数据量的访问，Hive仍然可以体现出优势。数据库中，通常会针对一个或者几个列建立索引，因此对于少量的特定条件的数据的访问，数据库可以有很高的效率，较低的延迟。由于数据的访问延迟较高，决定了Hive不适合在线数据查询</li><li>执行<br>Hive中大多数查询的执行是通过Hadoop提供的MapReduce来实现的。而数据库通常有自己的执行引擎</li><li>执行延迟<br>Hive在查询数据的时候，由于没有索引，需要扫描整个表，因此延迟较高。另外一个导致 Hive执行延迟高的因素是MapReduce框架。由于MapReduce本身具有较高的延迟，因此在利用MapReduce执行Hive查询时，也会有较高的延迟。相对的，数据库的执行延迟较低。当然，这个低是有条件的，即数据规模较小。当数据规模大到超过数据库的处理能力的时候，Hive的并行计算显然能体现出优势</li><li>可扩展性<br>由于Hive是建立在Hadoop之上的，因此Hive的可扩展性是和Hadoop的可扩展性是一致的(世界上最大的Hadoop集群在Yahoo，2009年的规模在4000台节点左右)。而数据库由于 ACID语义的严格限制，扩展行非常有限。目前最先进的并行数据库Oracle在理论上的扩展能力也只有100台左右</li><li>数据规模<br>由于Hive建立在集群上并可以利用MapReduce进行并行计算，因此可以支持很大规模的数据；对应的，数据库可以支持的数据规模较小</li></ul></li></ul><h2 id="Hive安装"><a href="#Hive安装" class="headerlink" title="Hive安装"></a>Hive安装</h2><ul><li><p>安装地址</p><ul><li>Hive官网地址：<a href="http://hive.apache.org" target="_blank" rel="noopener">http://hive.apache.org</a></li><li>文档查看地址：<a href="https://cwiki.apache.org/confluence/display/Hive/GettingStarted" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/Hive/GettingStarted</a></li><li>下载地址：<a href="http://archive.apache.org/dist/hive" target="_blank" rel="noopener">http://archive.apache.org/dist/hive</a></li><li>github地址：<a href="https://github.com/apache/hive" target="_blank" rel="noopener">https://github.com/apache/hive</a></li></ul></li><li><p>Hive安装部署</p><ul><li><p>Hive安装及配置</p><ul><li><p>上传：把apache-hive-3.1.2-bin.tar.gz上传到/opt/software目录下</p></li><li><p>解压：tar -zxvf apache-hive-3.1.2-bin.tar.gz -C /opt/module/</p></li><li><p>修改目录名：mv apache-hive-3.1.2-bin hive-3.1.2</p></li><li><p>修改配置文件(conf目录下)：</p><ul><li>备份一份配置文件：cp hive-env.sh.template hive-env.sh.template.copy</li><li>修改配置文件后缀：mv hive-env.sh.template hive-env.sh</li><li>配置hive-env.sh文件(底部加入)：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export HADOOP_HOME=/opt/module/hadoop-3.1.3</span><br><span class="line">export HIVE_CONF_DIR=/opt/module/hive-3.1.2/conf</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Hadoop集群启动(hadoop1启动hdfs——sbin/start-dfs.sh,hadoop2启动yarn——sbin/start-yarn.sh)</p></li><li><p>Hive基本操作</p><ul><li>初始化默认的derby数据库：bin/schematool -dbType derby -initSchema(初始化后在hive根目录会产生derby.log和metastore目录)</li><li>启动hive：bin/hive</li><li>启动时会发生Exception in thread “main” java.lang.NoSuchMethodError: com.google.common.base.Preconditions.checkArgument(ZLjava/lang/String;Ljava/lang/Object;)V错误<ul><li>这是因为hive内依赖的guava和hadoop内的版本不一致</li><li>分别查看hive(lib目录下)和hadoop(share/hadoop/common/lib目录下)的guava依赖版本：guava-19.0.jar和guava-27.0-jre.jar</li><li>删除hive的低版本guava-19.0.jar，将hadoop的高版本guava-27.0-jre.jar复制到hive的lib目录下</li><li>重新启动hive</li></ul></li><li>查看数据库：show databases;</li><li>打开默认数据库：use default;</li><li>显示default数据库中的表：show tables;</li><li>创建一张表(数据类型为java中类型)：create table student(id int,name string);</li><li>查看表的结构：desc student;</li><li>向表中插入数据：insert into student values(1,”SOBXiong”);</li><li>查询表中数据：select * from student;</li><li>退出hive：quit;</li></ul></li></ul></li><li><p>本地文件导入Hive<br>需求：将本地/opt/module/data/hive/student.txt的数据导入到hive的student表中</p><ul><li>数据准备(tab键隔开)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 xixi</span><br><span class="line">2 haha</span><br><span class="line">3 hehe</span><br></pre></td></tr></table></figure><ul><li><p>Hive操作</p><ul><li>导入student.txt的数据到之前创建的student表中：load data local inpath ‘/opt/module/data/hive/student.txt’ into table student;</li><li>查询结果(发现都是NULL NULL,因为格式不对)：select * from student;</li><li>删除已创建的student表：drop table student;</li><li>创建新的student表(声明文件分隔符’\t’)：create table student(id int, name string) ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘\t’;</li><li>重新导入数据并重新查询结果</li><li>查看<a href="http://hadoop1:9870" target="_blank" rel="noopener">http://hadoop1:9870</a>中的HDFS文件，发现/user/hive/warehouse/student下就有数据</li><li>第二种插入数据的方式：直接将文件上传至HDFS服务器<ul><li>上传本地文件(相当于cp复制)：hadoop fs -put stu1.txt /user/hive/warehouse/student</li><li>上传HDFS文件(相当于mv移动)：hadoop fs -put /stu2.txt /user/hive/warehouse/student</li></ul></li></ul></li><li><p>derby存储元数据的问题(推荐使用mysql)：</p><ul><li>只能开启一个hive客户端</li><li>在不同的目录开启hive客户端会在当前目录下创建derby.log和metastore文件，相当于数据不共享</li></ul></li></ul></li><li><p>MySql安装</p><ul><li><p>安装包准备：</p><ul><li>查看yum中历史的mysql或者mariadb的依赖：rpm -qa | grep mysql/mariadb</li><li>如有历史依赖，删除：yum remove mysql-libs/mariadb-libs</li><li>下载mysql的rpm包：前往<a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/mysql/</a>下载5.7.30的Red Hat Enterprise Linux7版本(CentOS7)的RPM Bundle包</li></ul></li><li><p>安装MySql</p><ul><li>解压tar包：tar -xvf mysql-5.7.30-1.el7.x86_64.rpm-bundle.tar</li><li>使用rpm命令安装MySql组件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 依赖关系为common→libs→client→server</span></span><br><span class="line">rpm -ivh common</span><br><span class="line">rpm -ivh libs</span><br><span class="line">rpm -ivh client</span><br><span class="line">rpm -ivh server</span><br></pre></td></tr></table></figure><ul><li>启动MySql：systemctl start mysqld.service</li><li>查看MySql状态：systemctl status mysqld.service</li><li>查看初始化的随机密码：grep ‘temporary password’ /var/log/mysqld.log</li><li>登录MySql：mysql -u root -p</li><li>修改密码校验策略(不然设置新密码会提示密码错误)：set global validate_password_policy=0;</li><li>修改密码：alter user root@localhost identified by ‘your password’;</li><li>授权root用户远程访问权限</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'root'</span> @<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'your password'</span>;</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure><ul><li>设置MySql完毕，退出：quit;</li></ul></li></ul></li><li><p>Hive元数据配置到MySql</p><ul><li><p>拷贝mysql-connector JDBC驱动文件</p><ul><li>前往<a href="https://dev.mysql.com/downloads/connector/j/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/connector/j/</a>下载驱动文件5.1.49版本</li><li>解压文件mysql-connector-java-5.1.49.tar.gz，拷贝mysql-connector-java-5.1.49-bin.jar到hive的lib目录下</li></ul></li><li><p>配置metastore到MySql</p><ul><li>在conf目录下创建hive-site.xml配置文件：touch hive-site.xml</li><li>修改配置文件：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- xml下的&amp;需要转义为&amp;amp; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://hadoop1:3306/metastore?createDatabaseIfNotExist=true<span class="symbol">&amp;amp;</span>useSSL=false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>JDBC connect string for a JDBC metastore<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Driver class name for a JDBC metastore<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>username to use against metastore database<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>your password<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>password to use against metastore database<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>初始化Hive的MySql元数据数据库：bin/schematool -dbType mysql -initSchema</p></li><li><p>启动hive，MySql中新增了metastore数据库(表DBS和TBS比较重要)</p></li></ul></li><li><p>HiveJDBC访问</p><ul><li>停止hadoop：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> hadoop1</span></span><br><span class="line">stop-dfs.sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> hadoop2</span></span><br><span class="line">stop-yarn.sh</span><br></pre></td></tr></table></figure><ul><li>修改hadoop配置：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- hdfs-site.xml 启用webhdfs --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.webhdfs.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">  core-site.xml 设置hadoop的代理用户</span></span><br><span class="line"><span class="comment">  hadoop.proxyuser.xxx.hosts</span></span><br><span class="line"><span class="comment">  xxx是操作的用户</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  org.apache.hadoop.security.authorize.AuthorizationException: User: sobxiong is not allowed to impersonate root(state=08S01,code=0)</span></span><br><span class="line"><span class="comment">  User:xxx即为下面该填入的用户</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.sobxiong.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.sobxiong.groups<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>修改hive配置：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.server2.thrift.bind.host<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Bind host on which to run the HiveServer2 Thrift service.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.server2.thrift.port<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>11000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Port number of HiveServer2 Thrift interface when hive.server2.transport.mode is 'binary'.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>启动hiveserver2服务：bin/hiveserver2</li><li>启动beeline：bin/beeline</li><li>连接hiveserver2：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">beeline&gt;</span><span class="bash"> !connect jdbc:hive2://hadoop1:11000</span></span><br><span class="line">Enter username for jdbc:hive2://hadoop102:10000: sobxiong</span><br><span class="line">Enter password for jdbc:hive2://hadoop102:10000: your password(数据库的密码)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 接下来的操作就跟Hive Cli使用类似SQL</span></span><br></pre></td></tr></table></figure></li><li><p>Hive常用交互命令</p><ul><li>-e &lt;quoted-query-string&gt;：不进入hive的交互窗口执行sql语句，例如：bin/hive -e “select * from student;”</li><li>-f &lt;filename&gt;：执行脚本中sql语句<ul><li>结果打印在terminal上：bin/hive -f /opt/module/data/hive/hive.hql</li><li>结果打印在指定文件中：bin/hive -f /opt/module/data/hive/hive.hql  &gt; ./hive_result.txt</li></ul></li></ul></li><li><p>Hive其他命令操作</p><ul><li>在Hive Cli命令窗口中查看hdfs文件系统：dfs -ls /</li><li>在Hive Cli命令窗口中查看本地文件系统：! ls /</li><li>查看在hive中输入的所有历史命令：cat ~/.hivehistory</li></ul></li><li><p>Hive常见属性配置</p><ul><li>Default数据仓库的最原始位置是在hdfs上的：/user/hive/warehouse</li><li><strong>在仓库目录下，没有对默认的数据库default创建文件夹。如果某张表属于default数据库，直接在数据仓库目录下创建一个文件夹</strong></li><li>修改default数据仓库原始位置(hive-default.xml.template -&gt; hive-site.xml)</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.warehouse.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>/user/hive/warehouse<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>location of default database for the warehouse<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>查询后信息显示配置</p><ul><li>在hive-site.xml加入如下配置：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 表列名显示 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.cli.print.header<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 当前使用数据库显示 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.cli.print.current.db<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>重启Hive Cli</li></ul></li><li><p>Hive运行日志信息配置</p><ul><li>Hive的日志信息默认存放在/tmp/{current_user}目录下</li><li>修改Hive的日志信息存放在hive安装目录的logs文件夹下<br>修改conf/hive-log4j.properties配置文件(hive-log4j.properties.template -&gt; hive-log4j.properties)：hive.log.dir=/opt/module/hive-3.1.2/logs</li></ul></li><li><p>参数配置方式</p><ul><li>查看当前所有的配置信息(Hive Cli命令窗口下)：set;</li><li>参数配置的三种方式<ul><li>配置文件方式<br>默认配置文件：hive-default.xml<br>用户自定义配置文件：hive-site.xml<br>注意：<strong>用户自定义配置会覆盖默认配置</strong>。另外，Hive也会读入Hadoop的配置，因为Hive是作为Hadoop的客户端启动的，Hive的配置会覆盖Hadoop的配置。配置文件的设定对本机启动的所有Hive进程都有效</li><li>命令行参数方式<br>启动Hive时，可以在命令行添加-hiveconf param=value来设定参数<br>例如：bin/hive -hiveconf mapred.reduce.tasks=10;(<strong>注意：仅对本次hive启动有效</strong>)<br>查看参数设置：set mapred.reduce.tasks;</li><li>参数声明方式<br>在HQL中使用SET关键字设定参数(<strong>注意：仅对本次hive启动有效</strong>)<br>例如：set mapred.reduce.tasks=100;<br>上述三种设定方式的优先级依次递增。即配置文件 &lt; 命令行参数 &lt; 参数声明。注意某些系统级的参数，例如log4j相关的设定，必须用前两种方式设定，因为那些参数的读取在会话建立以前已经完成了</li></ul></li></ul></li></ul></li></ul><h2 id="Hive数据类型"><a href="#Hive数据类型" class="headerlink" title="Hive数据类型"></a>Hive数据类型</h2><ul><li>基本数据类型(Hive数据类型大小写不敏感)</li></ul><table><thead><tr><th>Hive数据类型</th><th>Java数据类型</th><th>长度</th></tr></thead><tbody><tr><td>TINYINT</td><td>byte</td><td>1byte有符号整数</td></tr><tr><td>SMALLINT</td><td>short</td><td>2byte有符号整数</td></tr><tr><td><strong>INT</strong></td><td>int</td><td>4byte有符号整数</td></tr><tr><td><strong>BIGINT</strong></td><td>long</td><td>8byte有符号整数</td></tr><tr><td>BOOLEAN</td><td>boolean</td><td>布尔类型，true或false</td></tr><tr><td>FLOAT</td><td>float</td><td>单精度浮点数</td></tr><tr><td><strong>DOUBLE</strong></td><td>double</td><td>双精度浮点数</td></tr><tr><td><strong>STRING</strong></td><td>string</td><td>字符系列，可以指定字符集，可以使用单引号或者双引号</td></tr><tr><td>TIMESTAMP</td><td>-</td><td>时间类型</td></tr><tr><td>BINARY</td><td>-</td><td>字节数组</td></tr></tbody></table><p>Hive的String类型相当于数据库的varchar类型，该类型是一个可变的字符串，不过他不能声明其最多能存储多少个字符，理论上它可以存储2GB的字符数</p><ul><li>集合数据类型</li></ul><table><thead><tr><th>数据类型</th><th>描述</th><th>语法示例</th></tr></thead><tbody><tr><td>STRUCT</td><td>和c语言中的struct类似，都可以通过“点”符号访问元素内容。例如，如果某个列的数据类型是STRUCT{first STRING, last STRING},那么第1个元素可以通过字段.first来引用</td><td>struct()</td></tr><tr><td>MAP</td><td>MAP是一组键-值对元组集合，使用数组表示法可以访问数据。例如，如果某个列的数据类型是MAP，其中键-值对是’first’-&gt;’John’和’last’-&gt;’Doe’，那么可以通过字段名[‘last’]获取键last对应的值数据</td><td>map()</td></tr><tr><td>ARRAY</td><td>数组是一组具有相同类型和名称的变量的集合。这些变量称为数组的元素，每个数组元素都有一个编号，编号从零开始。例如，数组值为[‘John’, ‘Doe’]，那么第2个元素可以通过数组名[1]进行引用</td><td>Array()</td></tr></tbody></table><p>Hive有三种复杂数据类型ARRAY、MAP 和 STRUCT。ARRAY和MAP与Java中的Array和Map类似，而STRUCT与C语言中的Struct类似，它封装了一个命名字段集合，复杂数据类型允许任意层次的嵌套</p><ul><li><p>集合数据类型案例实操</p><ul><li>假设JSON为原始数据，具体如下：</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"songsong"</span>,</span><br><span class="line">  <span class="attr">"friends"</span>: [<span class="string">"bingbing"</span> , <span class="string">"lili"</span>],</span><br><span class="line">  <span class="attr">"children"</span>: &#123;</span><br><span class="line">      <span class="attr">"xiao song"</span>: <span class="number">18</span> ,</span><br><span class="line">      <span class="attr">"xiaoxiao song"</span>: <span class="number">19</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"address"</span>:&#123;</span><br><span class="line">    <span class="attr">"street"</span>: <span class="string">"hui long guan"</span> ,</span><br><span class="line">    <span class="attr">"city"</span>: <span class="string">"beijing"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>基于上述数据结构，建立本地测试文件test.txt，具体格式如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">songsong,bingbing_lili,xiao song:18_xiaoxiao song:19,hui long guan_beijing</span><br><span class="line">yangyang,caicai_susu,xiao yang:18_xiaoxiao yang:19,chao yang_beijing</span><br></pre></td></tr></table></figure><p>注意：MAP、STRUCT和ARRAY里的元素间关系都可以用同一个字符表示，这里用’_’</p><ul><li>Hive上创建测试表test</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">test</span>(</span><br><span class="line"><span class="keyword">name</span> <span class="keyword">string</span>,</span><br><span class="line">friends <span class="built_in">array</span>&lt;<span class="keyword">string</span>&gt;,</span><br><span class="line">children <span class="keyword">map</span>&lt;<span class="keyword">string</span>, <span class="built_in">int</span>&gt;,</span><br><span class="line">address <span class="keyword">struct</span>&lt;street:<span class="keyword">string</span>, city:<span class="keyword">string</span>&gt;</span><br><span class="line">)</span><br><span class="line"><span class="comment">/* 设置列分隔符为',' */</span></span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">','</span></span><br><span class="line"><span class="comment">/* 设置map、struct和array的分隔符(数据分割符号)为'_' */</span></span><br><span class="line">collection items <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'_'</span></span><br><span class="line"><span class="comment">/* 设置map中的key/value的分隔符为',' */</span></span><br><span class="line"><span class="keyword">map</span> <span class="keyword">keys</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">':'</span></span><br><span class="line"><span class="comment">/* 设置行分隔符为'\n'(也是默认值) */</span></span><br><span class="line"><span class="keyword">lines</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\n'</span>;</span><br></pre></td></tr></table></figure><ul><li>导入文本数据到测试表中</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load data local inpath '/opt/module/data/hive/test.txt' into table test;</span><br></pre></td></tr></table></figure><ul><li>访问三种集合列里的数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> friends[<span class="number">1</span>],children[<span class="string">'xiao song'</span>],address.city <span class="keyword">from</span> <span class="keyword">test</span>;</span><br></pre></td></tr></table></figure></li><li><p>类型转换<br>Hive的原子数据类型是可以进行隐式转换的，类似于Java的类型转换，例如某表达式使用INT类型，TINYINT会自动转换为INT类型，但是Hive不会进行反向转化。例如，某表达式使用TINYINT类型，INT不会自动转换为TINYINT类型，它会返回错误，除非使用CAST操作</p><ul><li>隐式类型转换规则<ul><li>任何整数类型都可以隐式地转换为一个范围更广的类型，如TINYINT可以转换成INT，INT可以转换成BIGINT</li><li>所有整数类型、FLOAT和<strong>STRING(符合数字)</strong>类型都可以隐式地转换成DOUBLE</li><li>TINYINT、SMALLINT、INT都可以转换为FLOAT</li><li>BOOLEAN类型不可以转换为任何其它的类型</li></ul></li><li>使用CAST操作显示进行数据类型转换<br>例如CAST(‘1’ AS INT)将把字符串’1’转换成整数1；如果强制类型转换失败，如执行CAST(‘X’ AS INT)，表达式返回空值NULL</li></ul></li></ul><h2 id="DDL数据定义"><a href="#DDL数据定义" class="headerlink" title="DDL数据定义"></a>DDL数据定义</h2><ul><li><p>创建数据库</p><ul><li>创建一个数据库，默认在HDFS上的存储路径式/user/hive/warehouse/*.db：create database if not exists db_hive;(if not exists避免要创建的数据库已存在)</li><li>创建一个数据库，指定在HDFS上存放的路径</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> db_hive2 location <span class="string">'/db_hive2.db'</span></span><br></pre></td></tr></table></figure></li><li><p>查询数据库</p><ul><li><p>显示数据库</p><ul><li>显示数据库：show databases;</li><li>过滤查询显示的数据库</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span> <span class="keyword">like</span> <span class="string">'db_hive'</span>;</span><br></pre></td></tr></table></figure></li><li><p>查看数据库</p><ul><li>显示数据库信息：desc database db_hive;</li><li>显示数据库详细信息(extended)：desc database extended db_hive;</li></ul></li><li><p>切换当前数据库：use db_hive;</p></li></ul></li><li><p>修改数据库<br>用户可以使用ALTER DATABASE命令为某个数据库的DBPROPERTIES设置键-值对属性值，来描述这个数据库的属性信息。<strong>数据库的其他元数据信息都是不可更改的，包括数据库名和数据库所在的目录位置</strong><br>修改数据库属性值：</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span> db_hive <span class="keyword">set</span> dbproperties(<span class="string">'createtime'</span>=<span class="string">'20200708'</span>)</span><br></pre></td></tr></table></figure><p>查看修改结果：desc database extended db_hive;</p><ul><li><p>删除数据库</p><ul><li>删除空数据库：drop database if exists db_hive;(if exists避免要删除的数据库不存在)</li><li>如果数据库中表不为空，可以采用cascade命令集联强制删除：drop database db_hive cascade;</li></ul></li><li><p>创建表</p><ul><li>建表语法</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">EXTERNAL</span>] <span class="keyword">TABLE</span> [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] table_name</span><br><span class="line">[(col_name data_type [<span class="keyword">COMMENT</span> col_comment], ...)]</span><br><span class="line">[<span class="keyword">COMMENT</span> table_comment]</span><br><span class="line">[PARTITIONED <span class="keyword">BY</span> (col_name data_type [<span class="keyword">COMMENT</span> col_comment], ...)]</span><br><span class="line">[CLUSTERED <span class="keyword">BY</span> (col_name, col_name, ...)</span><br><span class="line">[SORTED <span class="keyword">BY</span> (col_name [<span class="keyword">ASC</span>|<span class="keyword">DESC</span>], ...)] <span class="keyword">INTO</span> num_buckets BUCKETS]</span><br><span class="line">[<span class="keyword">ROW</span> <span class="keyword">FORMAT</span> row_format]</span><br><span class="line">[<span class="keyword">STORED</span> <span class="keyword">AS</span> file_format]</span><br><span class="line">[LOCATION hdfs_path]</span><br></pre></td></tr></table></figure><ul><li><p>字段解释说明</p><ul><li>CREATE TABLE创建一个指定名字的表。如果相同名字的表已经存在，则抛出异常；用户可以用IF NOT EXISTS选项来忽略这个异常</li><li>EXTERNAL关键字可以让用户创建一个外部表，在建表的同时指定一个指向实际数据的路径(LOCATION)，<strong>Hive创建内部表时，会将数据移动到数据仓库指向的路径；若创建外部表，仅记录数据所在的路径，不对数据的位置做任何改变。在删除表的时候，内部表的元数据和数据会被一起删除，而外部表只删除元数据，不删除数据</strong></li><li>COMMENT：为表和列添加注释</li><li>PARTITIONED BY创建分区表</li><li>CLUSTERED BY创建分桶表</li><li>SORTED BY不常用</li><li>ROW FORMAT<br>DELIMITED [FIELDS TERMINATED BY char] [COLLECTION ITEMS TERMINATED BY char] [MAP KEYS TERMINATED BY char] [LINES TERMINATED BY char]<br>| SERDE serde_name [WITH SERDEPROPERTIE (property_name=property_value, property_name=property_value, …)]<br>用户在建表的时候可以自定义SerDe或者使用自带的SerDe。如果没有指定ROW FORMAT或者ROW FORMAT DELIMITED，将会使用自带的SerDe。在建表的时候，用户还需要为表指定列，用户在指定表的列的同时也会指定自定义的SerDe，Hive通过SerDe确定表的具体的列的数据。SerDe是Serialize/Deserilize的简称，目的是用于序列化和反序列化</li><li>STORED AS指定存储文件类型<br>常用的存储文件类型：SEQUENCEFILE(二进制序列文件)、TEXTFILE(文本)、RCFILE(列式存储格式文件)<br>如果文件数据是纯文本，可以使用STORED AS TEXTFILE。如果数据需要压缩，使用 STORED AS SEQUENCEFILE</li><li>LOCATION：指定表在HDFS上的存储位置</li><li>LIKE允许用户复制现有的表结构，但是不复制数据</li></ul></li><li><p>管理表</p><ul><li><p>介绍<br>默认创建的表都是所谓的管理表，有时也被称为内部表。因为这种表，Hive会(或多或少地)控制着数据的生命周期。Hive默认情况下会将这些表的数据存储在由配置项hive.metastore.warehouse.dir(例如，/user/hive/warehouse)所定义的目录的子目录下。<strong>当我们删除一个管理表时，Hive也会删除这个表中数据。管理表不适合和其他工具共享数据</strong></p></li><li><p>实际操作</p><ul><li>创建普通表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> student(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span>, <span class="keyword">name</span> <span class="keyword">string</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\t'</span></span><br><span class="line"><span class="keyword">stored</span> <span class="keyword">as</span> textfile</span><br><span class="line">location <span class="string">'/user/hive/warehouse/student2'</span>;</span><br></pre></td></tr></table></figure><ul><li>根据查询结果创建表(查询的结果会添加到新创建的表中)：create table if not exists student2 as select id, name from student;</li><li>根据已存在的表结构创建表：create table if not exists student3 like student;</li><li>查询表的类型：desc formatted student;</li></ul></li></ul></li><li><p>外部表</p><ul><li>介绍：因为表是外部表，所以Hive并非认为其完全拥有这份数据。<strong>删除该表并不会删除掉这份数据，不过描述表的元数据信息会被删除掉</strong></li><li>实际操作(创建表,其余操作与管理表类似)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">external</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> default.dept(</span><br><span class="line">deptno <span class="built_in">int</span>,</span><br><span class="line">dname <span class="keyword">string</span>,</span><br><span class="line">loc <span class="built_in">int</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\t'</span>;</span><br></pre></td></tr></table></figure></li><li><p>管理表与外部表</p><ul><li>相互转换</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 修改内部表为外部表：</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student2 <span class="keyword">set</span> tblproperties(<span class="string">'EXTERNAL'</span>=<span class="string">'TRUE'</span>);</span><br><span class="line"><span class="comment">-- 修改外部表为内部表：</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student2 <span class="keyword">set</span> tblproperties(<span class="string">'EXTERNAL'</span>=<span class="string">'FALSE'</span>);</span><br><span class="line"><span class="comment">-- 注意：('EXTERNAL'='TRUE')和('EXTERNAL'='FALSE')为固定写法，区分大小写</span></span><br></pre></td></tr></table></figure><ul><li>使用场景<br>每天将收集到的网站日志定期流入HDFS文本文件。在外部表(原始日志表)的基础上做大量的统计分析，用到的中间表、结果表使用内部表存储，数据通过SELECT+INSERT进入内部表</li></ul></li></ul></li><li><p>分区表<br>分区表实际上就是对应一个HDFS文件系统上的独立的文件夹，该文件夹下是该分区所有的数据文件。<strong>Hive中的分区就是分目录</strong>，把一个大的数据集根据业务需要分割成小的数据集。在查询时通过WHERE子句中的表达式选择查询所需要的指定的分区，这样的查询效率会提高很多</p><ul><li><p>分区表基本操作</p><ul><li>创建分区表语法</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dept_partition(</span><br><span class="line">deptno <span class="built_in">int</span>, dname <span class="keyword">string</span>, loc <span class="keyword">string</span></span><br><span class="line">)</span><br><span class="line">partitioned <span class="keyword">by</span> (<span class="keyword">month</span> <span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\t'</span>;</span><br></pre></td></tr></table></figure><ul><li>加载数据到分区表中</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; load data local inpath '/opt/module/data/hive/dept.txt' into table default.dept_partition partition(month='201709');</span><br><span class="line">hive (default)&gt; load data local inpath '/opt/module/data/hive/dept.txt' into table default.dept_partition partition(month='201708');</span><br><span class="line">hive (default)&gt; load data local inpath '/opt/module/data/hive/dept.txt' into table default.dept_partition partition(month='201707’);</span><br></pre></td></tr></table></figure><ul><li><p>查询分区表中数据</p><ul><li>单分区查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> dept_partition <span class="keyword">where</span> <span class="keyword">month</span>=<span class="string">'201709'</span>;</span><br></pre></td></tr></table></figure><ul><li>多分区联合查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询多个分区</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> dept_partition <span class="keyword">where</span> <span class="keyword">month</span>=<span class="string">'201709'</span></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> dept_partition <span class="keyword">where</span> <span class="keyword">month</span>=<span class="string">'201708'</span></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> dept_partition <span class="keyword">where</span> <span class="keyword">month</span>=<span class="string">'201707'</span>;</span><br><span class="line"><span class="comment">-- 查询全部</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> dept_partition;</span><br></pre></td></tr></table></figure></li><li><p>增加分区</p><ul><li>创建单个分区</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> dept_partition <span class="keyword">add</span> <span class="keyword">partition</span>(<span class="keyword">month</span>=<span class="string">'201706'</span>);</span><br></pre></td></tr></table></figure><ul><li>同时创建多个分区</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> dept_partition <span class="keyword">add</span> <span class="keyword">partition</span>(<span class="keyword">month</span>=<span class="string">'201705'</span>) <span class="keyword">partition</span>(<span class="keyword">month</span>=<span class="string">'201704'</span>);</span><br></pre></td></tr></table></figure></li><li><p>删除分区：</p><ul><li>删除单个分区</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> dept_partition <span class="keyword">drop</span> <span class="keyword">partition</span> (<span class="keyword">month</span>=<span class="string">'201704'</span>);</span><br></pre></td></tr></table></figure><ul><li>同时删除多个分区</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> dept_partition <span class="keyword">drop</span> <span class="keyword">partition</span> (<span class="keyword">month</span>=<span class="string">'201705'</span>), <span class="keyword">partition</span> (<span class="keyword">month</span>=<span class="string">'201706'</span>);</span><br></pre></td></tr></table></figure></li><li><p>查看分区表有多少分区：show partitions dept_partition;</p></li><li><p>查看分区表结构：desc formatted dept_partition;</p></li></ul></li><li><p>分区表扩展用法</p><ul><li>创建二级分区表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dept_partition2(</span><br><span class="line">deptno <span class="built_in">int</span>, dname <span class="keyword">string</span>, loc <span class="keyword">string</span></span><br><span class="line">)</span><br><span class="line">partitioned <span class="keyword">by</span> (<span class="keyword">month</span> <span class="keyword">string</span>, <span class="keyword">day</span> <span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\t'</span>;</span><br></pre></td></tr></table></figure><ul><li>加载二级分区数据</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load data local inpath '/opt/module/data/hive/dept.txt' into table dept_partition2 partition(month='201709', day='13');</span><br></pre></td></tr></table></figure><ul><li>查询二级分区数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> dept_partition2 <span class="keyword">where</span> <span class="keyword">month</span>=<span class="string">'201709'</span> <span class="keyword">and</span> <span class="keyword">day</span>=<span class="string">'13'</span>;</span><br></pre></td></tr></table></figure><ul><li><p>将数据上传到分区目录后，让分区表和数据产生关联的方式</p><ul><li><p>上传数据后修复(适用于数据较多的情况)</p><ul><li>上传数据：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Hive Cli命令环境下</span></span><br><span class="line">dfs -mkdir -p /user/hive/warehouse/dept_partition2/month=201709/day=12;</span><br><span class="line">dfs -put /opt/module/data/hive/dept.txt  /user/hive/warehouse/dept_partition2/month=201709/day=12;</span><br></pre></td></tr></table></figure><ul><li>查询数据(查询不到)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> dept_partition2 <span class="keyword">where</span> <span class="keyword">month</span>=<span class="string">'201709'</span> <span class="keyword">and</span> <span class="keyword">day</span>=<span class="string">'12'</span>;</span><br></pre></td></tr></table></figure><ul><li>执行修复命令：msck repair table dept_partition2;</li></ul></li><li><p>上传数据后添加分区</p><ul><li>上传数据(同上)</li><li>执行添加分区</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> dept_partition2 <span class="keyword">add</span> <span class="keyword">partition</span>(<span class="keyword">month</span>=<span class="string">'201709'</span>,<span class="keyword">day</span>=<span class="string">'11'</span>);</span><br></pre></td></tr></table></figure></li><li><p>创建文件夹后load数据到分区</p><ul><li>创建目录：dfs -mkdir -p /user/hive/warehouse/dept_partition2/month=201709/day=10;</li><li>上传数据</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load data local inpath '/opt/module/data/hive/dept.txt' into table dept_partition2 partition(month='201709',day='10');</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li><li><p>修改表</p><ul><li>重命名表<ul><li>语法：ALTER TABLE table_name RENAME TO new_table_name</li><li>实例：alter table dept_partition2 rename to dept_partition3;</li></ul></li><li>添加、修改和删除表分区(同上)</li><li>增加、修改、替换列信息<ul><li>语法：<ul><li>更新列：ALTER TABLE table_name <strong>CHANGE</strong> [COLUMN] col_old_name col_new_name column_type [COMMENT col_comment] [FIRST|AFTER column_name]</li><li>添加和替换列：ALTER TABLE table_name <strong>ADD|REPLACE</strong> COLUMNS (col_name data_type [COMMENT col_comment], …)</li><li><strong>注意：ADD是代表新增一字段，字段位置在所有列后面(partition列前)，REPLACE则是表示替换表中所有字段</strong></li></ul></li><li>实操<ul><li>查询表结构(用于查看修改结果)：desc dept_partition;</li><li>添加列：alter table dept_partition add columns(deptdesc string);</li><li>更新列：alter table dept_partition change column deptdesc desc int;(貌似需要符合隐式转换规则)</li><li>替换列：alter table dept_partition replace columns(deptno string, dname string, loc string);</li></ul></li></ul></li></ul></li><li><p>删除表：drop table dept_partition;</p></li></ul><h2 id="DML数据操作"><a href="#DML数据操作" class="headerlink" title="DML数据操作"></a>DML数据操作</h2><ul><li><p>数据导入</p><ul><li><p>向表中装载数据(Load)</p><ul><li>语法</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load data [local] inpath 'path_name' [overwrite] into table table_name [partition (partcol1=val1,...)];</span><br></pre></td></tr></table></figure><ul><li><p>参数解释</p><ul><li>load data：表示加载数据</li><li>local：表示从本地加载数据到hive表；否则从HDFS加载数据到hive表</li><li>inpath：表示加载数据的路径</li><li>overwrite：表示覆盖表中已有数据，否则表示追加</li><li>into table：表示加载到哪张表</li><li>table_name：表示具体的表</li><li>partition：表示上传到指定分区</li></ul></li><li><p>实际操作</p><ul><li>加载本地文件到Hive：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load data local inpath '/opt/module/data/hive/student.txt' into table default.student;</span><br></pre></td></tr></table></figure><ul><li>加载(覆盖)HDFS文件数据到Hive中</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Hive Cli命令环境下</span></span><br><span class="line">dfs -put /opt/module/data/hive/student.txt /user/sobxiong/hive;</span><br><span class="line">load data inpath '/user/sobxiong/hive/student.txt' (overwrite)into table default.student;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>通过查询语句向表中插入数据(Insert)</p><ul><li>基本插入数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span>  student <span class="keyword">partition</span>(<span class="keyword">month</span>=<span class="string">'201709'</span>) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'wangwu'</span>);</span><br></pre></td></tr></table></figure><ul><li>根据单表查询结果插入数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> student <span class="keyword">partition</span>(<span class="keyword">month</span>=<span class="string">'201708'</span>)</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>, <span class="keyword">name</span> <span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">month</span>=<span class="string">'201709'</span>;</span><br></pre></td></tr></table></figure><ul><li>根据多表查询结果插入数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from student</span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> student <span class="keyword">partition</span>(<span class="keyword">month</span>=<span class="string">'201707'</span>)</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>, <span class="keyword">name</span> <span class="keyword">where</span> <span class="keyword">month</span>=<span class="string">'201709'</span></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> student <span class="keyword">partition</span>(<span class="keyword">month</span>=<span class="string">'201706'</span>)</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>, <span class="keyword">name</span> <span class="keyword">where</span> <span class="keyword">month</span>=<span class="string">'201709'</span>;</span><br></pre></td></tr></table></figure></li><li><p>查询语句中创建表并加载数据(As Select,查询的结果会添加到新创建的表中)：create table if not exists student3 as select id, name from student;</p></li><li><p>创建表时通过Location指定加载数据路径</p><ul><li>指定在HDFS上的位置创建表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> student5(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span>, <span class="keyword">name</span> <span class="keyword">string</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\t'</span></span><br><span class="line">location <span class="string">'/user/hive/warehouse/student5'</span>;</span><br></pre></td></tr></table></figure><ul><li>上传数据到HDFS上</li><li>查询数据</li></ul></li><li><p>Import数据到指定Hive表中(注意：先用export导出后,才能导入)</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import table student2 partition(month='201709') from '/user/hive/warehouse/export/student';</span><br></pre></td></tr></table></figure></li><li><p>数据导出</p><ul><li><p>Insert导出</p><ul><li>将查询的结果导出到本地</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">local</span> <span class="keyword">directory</span> <span class="string">'/opt/module/data/hive/export/student'</span> <span class="keyword">select</span> * <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure><ul><li>将查询的结果格式化导出到本地</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">local</span> <span class="keyword">directory</span> <span class="string">'/opt/module/data/hive/export/student1'</span> <span class="keyword">ROW</span> <span class="keyword">FORMAT</span> <span class="keyword">DELIMITED</span> <span class="keyword">FIELDS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">'\t'</span> <span class="keyword">select</span> * <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure><ul><li>将查询结果导出到HDFS上(取消local)</li></ul></li><li><p>Hadoop命令导出到本地(Hive Cli命令环境下)：dfs -get /user/hive/warehouse/student/month=201709/000000_0 /opt/module/data/hive/export/student3.txt;</p></li><li><p>Hive Shell命令导出：基本语法(hive -f/-e 执行语句或脚本 &gt; file_name)</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hive -e 'select * from default.student;' &gt; /opt/module/data/hive/export/student4.txt;</span><br></pre></td></tr></table></figure><ul><li>Export导出到HDFS上(导出数据包括表数据和元数据)</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export table default.student to '/user/hive/warehouse/export/student';</span><br></pre></td></tr></table></figure><ul><li>Sqoop导出(<strong>敬请期待</strong>)</li></ul></li><li><p>清除表中数据(注意：只能删除管理表,不能删除外部表中数据)：truncate table student;</p></li></ul><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><ul><li>查询语句语法<br>官方wiki文档：<a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Select" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Select</a></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">WITH</span> CommonTableExpression (, CommonTableExpression)*]</span><br><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">ALL</span> | <span class="keyword">DISTINCT</span>] select_expr, select_expr, ...</span><br><span class="line">  <span class="keyword">FROM</span> table_reference</span><br><span class="line">  [<span class="keyword">WHERE</span> where_condition]</span><br><span class="line">  [<span class="keyword">GROUP</span> <span class="keyword">BY</span> col_list]</span><br><span class="line">  [<span class="keyword">ORDER</span> <span class="keyword">BY</span> col_list]</span><br><span class="line">  [CLUSTER <span class="keyword">BY</span> col_list</span><br><span class="line">    | [<span class="keyword">DISTRIBUTE</span> <span class="keyword">BY</span> col_list] [<span class="keyword">SORT</span> <span class="keyword">BY</span> col_list]</span><br><span class="line">  ]</span><br><span class="line"> [<span class="keyword">LIMIT</span> <span class="built_in">number</span>]</span><br></pre></td></tr></table></figure><ul><li><p>基本查询</p><ul><li><p>全表和特定列查询<br>注意：</p><ul><li><strong>SQL大小写不敏感</strong></li><li>SQL可以写在一行/多行</li><li>关键字不能被缩写也不能分行</li><li>各子句一般要分行写</li><li>使用缩进提高语句的可读性</li></ul></li><li><p>列别名</p><ul><li>重命名一个列</li><li>便于计算</li><li>紧跟列名(或在列名和别名之间加入关键字AS)</li></ul></li><li><p>算术运算符</p></li></ul><p>+、-、*、/、%、&amp;、|、^、-</p><ul><li><p>常用函数</p><ul><li>求总行数：count()</li><li>求最大值/最小值：max()/min()</li><li>求总和：sum()</li><li>求平均值：avg()</li></ul></li><li><p>limit语句：典型的查询会返回多行数据。LIMIT子句用于限制返回的行数</p></li></ul></li><li><p>Where语句：使用Where子句可以过滤掉不满足条件的行，需要紧跟From子句</p><ul><li>比较运算符(同样可以用于Join… on和Having语句)<br>以下只介绍除=、&gt;和&lt;等简单的运算符</li></ul><table><thead><tr><th>操作符</th><th>支持的数据类型</th><th>描述</th></tr></thead><tbody><tr><td>A&lt;=&gt;B</td><td>基本数据类型</td><td>如果A和B都为NULL，则返回TRUE，其他的和等号(=)操作符的结果一致，如果任一为NULL则结果为NULL</td></tr><tr><td>A&lt;&gt;B, A!=B</td><td>基本数据类型</td><td>A或者B为NULL则返回NULL；如果A不等于B，则返回TRUE，反之返回FALSE</td></tr><tr><td>A [NOT] BETWEEN B AND C</td><td>基本数据类型</td><td>如果A，B或者C任一为NULL，则结果为NULL。如果A的值大于等于B而且小于或等于C，则结果为TRUE，反之为FALSE。如果使用NOT关键字则可达到相反的效果</td></tr><tr><td>A IS [NOT] NULL</td><td>所有数据类型</td><td>如果A(不)等于NULL，则返回TRUE(FALSE)，反之返回FALSE(TRUE)</td></tr><tr><td>[NOT] IN(数值1, 数值2)</td><td>所有数据类型</td><td>(不)使用IN运算显示列表中的值</td></tr><tr><td>A [NOT] LIKE B</td><td>STRING 类型</td><td>B是一个SQL下的简单正则表达式，如果A与其匹配的话，则返回TRUE；反之返回FALSE。B的表达式说明如下：‘x%’表示A必须以字母‘x’开头，‘%x’表示A必须以字母’x’结尾，而‘%x%’表示A包含有字母’x’,可以位于开头，结尾或者字符串中间。如果使用NOT关键字则可达到相反的效果</td></tr><tr><td>A RLIKE B, A REGEXP B</td><td>STRING 类型</td><td>B是一个正则表达式，如果A与其匹配，则返回TRUE；反之返回FALSE。匹配使用的是JDK中的正则表达式接口实现的，因为正则也依据其中的规则。例如，正则表达式必须和整个字符串A相匹配，而不是只需与其字符串匹配</td></tr></tbody></table><ul><li><p>Like和RLike</p><ul><li><p>使用LIKE运算选择类似的值</p></li><li><p>选择条件可以包含字符或数字：</p><ul><li>% 代表零个或多个字符(任意个字符)</li><li>_ 代表一个字符</li></ul></li><li><p>RLIKE子句是Hive中这个功能的一个扩展，其可以通过Java的正则表达式这个更强大的语言来指定匹配条件</p></li><li><p>案例</p><ul><li>查找以2开头薪水的员工信息</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="keyword">LIKE</span> <span class="string">'2%'</span>;</span><br></pre></td></tr></table></figure><ul><li>查找第二个数值为2的薪水的员工信息</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="keyword">LIKE</span> <span class="string">'_2%'</span>;</span><br></pre></td></tr></table></figure><ul><li>查找薪水中含有2的员工信息</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">String</span>(sal) <span class="keyword">RLIKE</span> <span class="string">'[2]'</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>逻辑运算符(And/Or/Not)</p></li></ul></li><li><p>分组</p><ul><li>Group By语句<br>GROUP BY语句通常会和聚合函数一起使用，按照一个或者多个列队结果进行分组，然后对每个组执行聚合操作</li><li>Having语句<br>与where不同点：<ul><li>where针对表中的列发挥作用，查询数据；having针对查询结果中的列发挥作用，筛选数据</li><li>where后面不能写分组函数，而having后面可以使用分组函数</li><li>having只用于group by分组统计语句</li></ul></li></ul></li><li><p>Join语句</p><ul><li>等值Join</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e.empno, e.ename, d.deptno, d.dname <span class="keyword">from</span> emp e <span class="keyword">join</span> dept d</span><br><span class="line"><span class="keyword">on</span> e.deptno = d.deptno;</span><br></pre></td></tr></table></figure><ul><li>表的别名<br>好处：(1)简化查询；(2)有限地提高执行效率</li><li>内连接：只有进行连接的两个表中都存在与连接条件相匹配的数据才会被保留下来</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e.empno, e.ename, d.deptno <span class="keyword">from</span> emp e <span class="keyword">join</span> dept d <span class="keyword">on</span> e.deptno</span><br><span class="line">= d.deptno;</span><br></pre></td></tr></table></figure><ul><li>左外连接：JOIN操作符左边表中符合WHERE子句的所有记录将会被返回</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e.empno, e.ename, d.deptno <span class="keyword">from</span> emp e <span class="keyword">left</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.deptno</span><br><span class="line">= d.deptno;</span><br></pre></td></tr></table></figure><ul><li>右外连接：JOIN操作符右边表中符合WHERE子句的所有记录将会被返回</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e.empno, e.ename, d.deptno <span class="keyword">from</span> emp e <span class="keyword">right</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.deptno</span><br><span class="line">= d.deptno;</span><br></pre></td></tr></table></figure><ul><li>满外连接：将会返回所有表中符合WHERE语句条件的所有记录。如果任一表的指定字段没有符合条件的值的话，那么就使用NULL值替代</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e.empno, e.ename, d.deptno <span class="keyword">from</span> emp e <span class="keyword">full</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.deptno</span><br><span class="line">= d.deptno;</span><br></pre></td></tr></table></figure><ul><li>多表连接：连接n个表，一般至少需要n-1个连接条件</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.ename, d.deptno, l. loc_name</span><br><span class="line"><span class="keyword">FROM</span>   emp e</span><br><span class="line"><span class="keyword">JOIN</span>   dept d</span><br><span class="line"><span class="keyword">ON</span>     d.deptno = e.deptno</span><br><span class="line"><span class="keyword">JOIN</span>   location l</span><br><span class="line"><span class="keyword">ON</span>     d.loc = l.loc;</span><br></pre></td></tr></table></figure><p>多数情况下，Hive会对每对JOIN连接对象启动一个MapReduce任务。本例中会首先启动一个MapReduce job对表e和表d进行连接操作，然后会再启动一个MapReduce job将第一个MapReduce job的输出和表l进行连接操作。<br><strong>注意：为什么不是表d和表l先进行连接操作呢？这是因为Hive总是按照从左到右的顺序执行的</strong></p><ul><li><p>笛卡尔积<br>一般会在下面情况下出现：</p><ul><li>省略连接条件</li><li>连接条件无效</li><li>所有表中的所有行互相连接<br>一般会设置禁止出现笛卡尔积，如果有特殊情况，需要在单独在命令执行前设置一次性环境</li></ul></li><li><p>连接谓词在新版中支持or</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 无实际意义(ename = dname),只做可行性试验</span></span><br><span class="line"><span class="keyword">select</span> e.empno, e.ename, d.deptno <span class="keyword">from</span> emp e <span class="keyword">join</span> dept d <span class="keyword">on</span> e.deptno</span><br><span class="line">= d.deptno <span class="keyword">or</span> e.ename=d.dname;</span><br></pre></td></tr></table></figure></li><li><p>排序</p><ul><li><p>全局排序(Order By:<strong>一个Reducer</strong>)</p><ul><li>排序方式：ASC(ascend升序,默认)、DESC(descend降序)</li><li>Order By子句在Select语句的结尾</li></ul></li><li><p>多个列排序(同MySQL)</p></li><li><p>内部排序(Sort By:<strong>每个Reduce内部进行排序,对全局结果集来说不是排序</strong>)</p><ul><li>注意：如果使用sort by不使用distribute by(即没有指定分区字段)，那么就采用一种产生随机数的函数分配分区(避免数据倾斜)</li><li>设置reduce数：set mapreduce.job.reduce=3;</li><li>按照部门编号降序排序：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 三个结果文件</span></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">local</span> <span class="keyword">directory</span> <span class="string">'/opt/module/data/hive/sortby-result'</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">sort</span> <span class="keyword">by</span> deptno <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure></li><li><p>分区排序(Distribute By:<strong>类似MR中partition,进行分区,结合sort by使用</strong>)</p></li></ul><p><strong>DISTRIBUTE BY语句要写在SORT BY语句之前</strong>。distribute by进行测试，一定要分配多reduce进行处理，否则无法看到distribute by的效果</p><ul><li><p>设置reduce数：set mapreduce.job.reduces=3;</p></li><li><p>先按照部门编号分区，再按照员工编号降序排序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">local</span> <span class="keyword">directory</span> <span class="string">'/opt/module/data/hive/distribute-result'</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">distribute</span> <span class="keyword">by</span> deptno <span class="keyword">sort</span> <span class="keyword">by</span> empno <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>Clubster By</p><ul><li>当distribute by和sorts by字段相同时，可以使用cluster by方式。</li><li>cluster by除了具有distribute by的功能外还兼具sort by的功能。但是排序只能是升序排序，不能指定排序规则为ASC或者DESC</li><li>具体实操</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 以下两种写法等价</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp cluster <span class="keyword">by</span> deptno;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">distribute</span> <span class="keyword">by</span> deptno <span class="keyword">sort</span> <span class="keyword">by</span> deptno;</span><br></pre></td></tr></table></figure><ul><li>注意：按照部门编号分区，不一定就是固定死的数值(要看具体数据表中的字段不同的数目以及reduce设置的数目)，可以是20号和30号部门分到一个分区里面去</li></ul></li></ul></li><li><p>分桶及抽样查询</p><ul><li><p>分桶表数据存储</p><ul><li><p>介绍：<strong>分区针对的是数据的存储路径；分桶针对的是数据文件</strong>。分区提供一个隔离数据和优化查询的便利方式。不过，并非所有的数据集都可形成合理的分区，特别是之前所提到过的要确定合适的划分大小这个疑虑。分桶是将数据集分解成更容易管理的若干部分的另一个技术</p></li><li><p>通过导入数据文件方式创建分桶表</p><ul><li>创建表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu_buck(<span class="keyword">id</span> <span class="built_in">int</span>, <span class="keyword">name</span> <span class="keyword">string</span>)</span><br><span class="line">clustered <span class="keyword">by</span>(<span class="keyword">id</span>)</span><br><span class="line"><span class="keyword">into</span> <span class="number">4</span> buckets</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\t'</span>;</span><br></pre></td></tr></table></figure><ul><li>查看表结构：desc formatted stu_back;(Num Buckets: 4)</li><li>导入数据到分桶表</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load data local inpath '/opt/module/data/hive/student.txt' into table stu_buck;</span><br></pre></td></tr></table></figure><ul><li>在浏览器上查看创建的分桶表是否分成4个桶(4个文件)：在新版本中分成四个桶</li></ul></li><li><p>通过子查询导入数据方式创建分桶表</p><ul><li>先创建普通的stu表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu(<span class="keyword">id</span> <span class="built_in">int</span>, <span class="keyword">name</span> <span class="keyword">string</span>) <span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\t'</span>;</span><br></pre></td></tr></table></figure><ul><li>向普通stu表中导入数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">'/opt/module/data/hive/student.txt'</span> <span class="keyword">into</span> <span class="keyword">table</span> stu;</span><br></pre></td></tr></table></figure><ul><li>清空stu_buck表中数据：truncate table stu_buck;</li><li>子查询方式导入数据到分桶表：insert into table stu_buck select id, name from stu;</li><li>浏览器查看：新版本中有4个分桶(文件)</li><li>需要设置Hive的属性(老版本)</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置启用分桶</span></span><br><span class="line">set hive.enforce.bucketing=true;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置reduce数目为-1,会自动使用分桶数作为reduce的数目</span></span><br><span class="line">set mapreduce.job.reduces=-1;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 清空分桶表,重新导入数据,再去查看浏览器中的分桶</span></span><br><span class="line">truncate table stu_back;</span><br><span class="line">insert into table stu_buck select id, name from stu;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>分桶抽样查询</p><ul><li>介绍：对于非常大的数据集，有时用户需要使用的是一个具有代表性的查询结果而不是全部结果。Hive可以通过对表进行抽样来满足这个需求</li><li>实操：select * from stu_buck tablesample(bucket 1 out of 4 on id);</li><li>语法：tablesample是抽样语句，语法：tablesample(bucket x out of y)</li><li>参数解释<ul><li>y：y必须是table总bucket数的倍数或者因子。Hive根据y的大小，决定抽样的比例。例如，table总共分了4份，当y=2时，抽取(4/2)2个bucket的数据，当y=8时，抽取(4/8)1/2个bucket的数据</li><li>x：<strong>x表示从哪个bucket开始抽取，如果需要取多个分区，以后的分区号为当前分区号加上y</strong>。例如，table总bucket数为4，tablesample(bucket 1 out of 2)，表示总共抽取(4/2)2个bucket的数据，抽取第1(x)个和第3(x+y)个bucket的数据</li><li><strong>注意：x的值必须小于等于y的值</strong></li></ul></li></ul></li></ul></li><li><p>其他常用查询函数</p><ul><li><p>空字段赋值</p><ul><li>函数说明：NVL：给值为NULL的数据赋值，它的格式是NVL(string1, replace_with)。它的功能是如果string1为NULL，则NVL函数返回replace_with的值，否则返回string1的值，如果两个参数都为NULL，则返回NULL(replace_with可以是常量也可以是同表的另一个列)</li><li>查询(常量)：select nvl(comm,-1) from emp;</li><li>查询(另一列)：select nvl(comm,mgr) from emp;</li></ul></li><li><p>时间类</p><ul><li>date_format(格式化时间,第一个变量时间串只能是以’-‘分割)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">date_format</span>(<span class="string">'2020-07-11'</span>,<span class="string">'yyyy:MM:dd'</span>);</span><br><span class="line"><span class="comment">-- 时间不以'-'分割,可以通过regex正则表达式替换/自定义函数</span></span><br><span class="line"><span class="keyword">select</span> regexp_replace(<span class="string">'2020/07/11'</span>,<span class="string">'/'</span>,<span class="string">'-'</span>);</span><br></pre></td></tr></table></figure><ul><li>date_add/sub(时间跟天数相加/相减)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">date_add</span>(<span class="string">'2020-07-11'</span>,<span class="number">-5</span>/<span class="number">5</span>);</span><br></pre></td></tr></table></figure><ul><li>datediff(时间相差的间隔,前者-后者)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">datediff</span>(<span class="string">'2020-07-11'</span>,<span class="string">'2020-07-08'</span>);</span><br></pre></td></tr></table></figure></li><li><p>CASE WHEN</p><ul><li>数据准备</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">悟空  A 男</span><br><span class="line">大海  A 男</span><br><span class="line">宋宋  B 男</span><br><span class="line">凤姐  A 女</span><br><span class="line">婷姐  B 女</span><br><span class="line">婷婷  B 女</span><br></pre></td></tr></table></figure><ul><li>需求：求出不同部门的男女各多少人</li><li>创建emp_set.txt，复制数据</li><li>创建Hive表并导入数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp_sex(</span><br><span class="line"><span class="keyword">name</span> <span class="keyword">string</span>,</span><br><span class="line">dept_id <span class="keyword">string</span>,</span><br><span class="line">sex <span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">"\t"</span>;</span><br><span class="line"><span class="comment">-- 导入本地数据</span></span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">'/opt/module/data/hive/emp_sex.txt'</span> <span class="keyword">into</span> <span class="keyword">table</span> emp_sex;</span><br></pre></td></tr></table></figure><ul><li>查询数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">  dept_id,</span><br><span class="line">  <span class="keyword">sum</span>(<span class="keyword">case</span> sex <span class="keyword">when</span> <span class="string">'男'</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) male_count,</span><br><span class="line">  <span class="keyword">sum</span>(<span class="keyword">case</span> sex <span class="keyword">when</span> <span class="string">'女'</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) female_count</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  emp_sex</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">  dept_id;</span><br></pre></td></tr></table></figure></li><li><p>行转列</p><ul><li>相关函数说明<br>CONCAT(string A/col, string B/col…)：返回输入字符串连接后的结果，支持任意个输入字符串<br>CONCAT_WS(separator, str1, str2,…)：它是一个特殊形式的CONCAT()。第一个参数剩余参数间的分隔符。分隔符可以是与剩余参数一样的字符串。如果分隔符是NULL，返回值也将为 NULL。这个函数会跳过分隔符参数后的任何NULL和空字符串。分隔符将被加到被连接的字符串之间<br>COLLECT_SET(col)：函数只接受基本数据类型，它的主要作用是将某字段的值进行去重汇总，产生array类型字段</li><li>数据准备</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">孙悟空  白羊座  A</span><br><span class="line">大海  射手座  A</span><br><span class="line">宋宋  白羊座  B</span><br><span class="line">猪八戒  白羊座  A</span><br><span class="line">凤姐  射手座  A</span><br></pre></td></tr></table></figure><ul><li>需求：把星座和血型一样的人归类到一起。结果如下</li><li>person_info.txt文件，复制数据</li><li>创建Hive表并导入数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> person_info(</span><br><span class="line"><span class="keyword">name</span> <span class="keyword">string</span>,</span><br><span class="line">constellation <span class="keyword">string</span>,</span><br><span class="line">blood_type <span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">"\t"</span>;</span><br><span class="line"><span class="comment">-- 导入数据</span></span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">'/opt/module/data/hive/person_info.txt'</span> <span class="keyword">into</span> <span class="keyword">table</span> person_info;</span><br></pre></td></tr></table></figure><ul><li>查询数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 总查询语句</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  t1.constellation_blood_type,</span><br><span class="line">  <span class="keyword">concat_ws</span>(<span class="string">'|'</span>, collect_set(t1.name)) <span class="keyword">name</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  (<span class="keyword">select</span></span><br><span class="line">      <span class="keyword">name</span>,</span><br><span class="line">      <span class="keyword">concat</span>(constellation, <span class="string">","</span>, blood_type) constellation_blood_type</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">      person_info</span><br><span class="line">  ) t1</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">  t1.constellation_blood_type;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 第一步,查询出'射手座,A' '大海'</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  <span class="keyword">concat</span>(constellation, <span class="string">","</span>, blood_type) constellation_blood_type,</span><br><span class="line">  <span class="keyword">name</span></span><br><span class="line"><span class="keyword">from</span> person_info;</span><br><span class="line"><span class="comment">-- 第二步,连接相同星座和血型的name</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  constellation_blood_type,</span><br><span class="line">  <span class="keyword">concat_ws</span>(<span class="string">'|'</span>, collect_set(t1.name)) <span class="keyword">name</span></span><br><span class="line"><span class="keyword">from</span> t1</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">  t1.constellation_blood_type;</span><br><span class="line"><span class="comment">-- 最后一步,替换from后的t1为第一步中的临时表</span></span><br></pre></td></tr></table></figure></li><li><p>列转行</p><ul><li>函数说明<br>EXPLODE(col)：将hive一列中复杂的array或者map结构拆分成多行<br>LateRal View：<ul><li>用法：LATERAL VIEW udtf(expression) tableAlias AS columnAlias</li><li>解释：用于和split, explode等UDTF一起使用，它能够将一列数据拆成多行数据，在此基础上可以对拆分后的数据进行聚合</li></ul></li><li>数据准备</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">《疑犯追踪》  悬疑,动作,科幻,剧情</span><br><span class="line">《Lie to me》 悬疑,警匪,动作,心理,剧情</span><br><span class="line">《战狼2》 战争,动作,灾难</span><br></pre></td></tr></table></figure><ul><li>需求：将电影分类中的数组数据展开，结果如下所示</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">《疑犯追踪》      悬疑</span><br><span class="line">《疑犯追踪》      动作</span><br><span class="line">《疑犯追踪》      科幻</span><br><span class="line">《疑犯追踪》      剧情</span><br><span class="line">《Lie to me》   悬疑</span><br><span class="line">《Lie to me》   警匪</span><br><span class="line">《Lie to me》   动作</span><br><span class="line">《Lie to me》   心理</span><br><span class="line">《Lie to me》   剧情</span><br><span class="line">《战狼2》        战争</span><br><span class="line">《战狼2》        动作</span><br><span class="line">《战狼2》        灾难</span><br></pre></td></tr></table></figure><ul><li>创建本地movie.txt文件，复制数据</li><li>创建Hive表并导入数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> movie_info(</span><br><span class="line">movie <span class="keyword">string</span>,</span><br><span class="line"><span class="keyword">category</span> <span class="built_in">array</span>&lt;<span class="keyword">string</span>&gt;)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">"\t"</span></span><br><span class="line">collection items <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">","</span>;</span><br><span class="line"><span class="comment">-- 导入数据</span></span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">"/opt/module/data/hive/movie.txt"</span> <span class="keyword">into</span> <span class="keyword">table</span> movie_info;</span><br></pre></td></tr></table></figure><ul><li>按需查询数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">  movie,</span><br><span class="line">  category_name</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  movie_info <span class="keyword">lateral</span> <span class="keyword">view</span> <span class="keyword">explode</span>(<span class="keyword">category</span>) table_tmp <span class="keyword">as</span> category_name;</span><br></pre></td></tr></table></figure></li><li><p>窗口函数</p><ul><li>函数说明<br>OVER()：指定分析函数工作的数据窗口大小，这个数据窗口大小可能会随着行的变而变化<ul><li>参数说明<ul><li>Over()内<ul><li>CURRENT ROW：当前行</li><li>n PRECEDING：往前n行数据</li><li>n FOLLOWING：往后n行数据</li><li>UNBOUNDED：起点，UNBOUNDED PRECEDING表示从前面的起点，UNBOUNDED FOLLOWING表示到后面的终点</li></ul></li><li>Over()外<ul><li>LAG(col,n)：往前<strong>第</strong>n行数据</li><li>LEAD(col,n)：往后<strong>第</strong>n行数据</li><li>NTILE(n)：把有序分区中的行分发到指定数据的组中，各个组有编号，编号从1开始，对于每一行，NTILE返回此行所属的组的编号。<strong>注意：n必须为int类型</strong></li></ul></li></ul></li></ul></li><li>数据准备</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; name,orderdate,cost</span><br><span class="line">jack,2017-01-01,10</span><br><span class="line">tony,2017-01-02,15</span><br><span class="line">jack,2017-02-03,23</span><br><span class="line">tony,2017-01-04,29</span><br><span class="line">jack,2017-01-05,46</span><br><span class="line">jack,2017-04-06,42</span><br><span class="line">tony,2017-01-07,50</span><br><span class="line">jack,2017-01-08,55</span><br><span class="line">mart,2017-04-08,62</span><br><span class="line">mart,2017-04-09,68</span><br><span class="line">neil,2017-05-10,12</span><br><span class="line">mart,2017-04-11,75</span><br><span class="line">neil,2017-06-12,80</span><br><span class="line">mart,2017-04-13,94</span><br></pre></td></tr></table></figure><ul><li>需求<ul><li>查询在2017年4月份购买过的顾客及总人数</li><li>查询顾客的购买明细及月购买总额</li><li>上述的场景，要将cost按照日期进行累加</li><li>查询顾客上次的购买时间</li><li>查询前20%时间的订单信息</li></ul></li><li>创建本地business.txt文件，复制数据</li><li>创建Hive表并导入数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> business(</span><br><span class="line"><span class="keyword">name</span> <span class="keyword">string</span>,</span><br><span class="line">orderdate <span class="keyword">string</span>,</span><br><span class="line"><span class="keyword">cost</span> <span class="built_in">int</span></span><br><span class="line">) <span class="keyword">ROW</span> <span class="keyword">FORMAT</span> <span class="keyword">DELIMITED</span> <span class="keyword">FIELDS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">','</span>;</span><br><span class="line"><span class="comment">-- 导入数据</span></span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">"/opt/module/data/hive/business.txt"</span> <span class="keyword">into</span> <span class="keyword">table</span> business;</span><br></pre></td></tr></table></figure><ul><li><p>按需查询数据</p><ul><li>查询在2017年4月份购买过的顾客及总人数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>,<span class="keyword">count</span>(*) <span class="keyword">over</span>()</span><br><span class="line"><span class="keyword">from</span> business</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">substring</span>(orderdate,<span class="number">1</span>,<span class="number">7</span>) = <span class="string">'2017-04'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">name</span>;</span><br></pre></td></tr></table></figure><ul><li>查询顾客的购买明细及月购买总额</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>,orderdate,<span class="keyword">cost</span>,<span class="keyword">sum</span>(<span class="keyword">cost</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">month</span>(orderdate)) <span class="keyword">from</span></span><br><span class="line">business;</span><br></pre></td></tr></table></figure><ul><li>上述的场景,要将cost按照日期进行累加</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- partition by ... order by和distribute by ... sort by效果相同,可替换</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>,orderdate,<span class="keyword">cost</span>,</span><br><span class="line">  <span class="keyword">sum</span>(<span class="keyword">cost</span>) <span class="keyword">over</span>() <span class="keyword">as</span> sample1,<span class="comment">--所有行相加</span></span><br><span class="line">  <span class="keyword">sum</span>(<span class="keyword">cost</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">name</span>) <span class="keyword">as</span> sample2,<span class="comment">--按name分组，组内数据相加</span></span><br><span class="line">  <span class="keyword">sum</span>(<span class="keyword">cost</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">name</span> <span class="keyword">order</span> <span class="keyword">by</span> orderdate) <span class="keyword">as</span> sample3,<span class="comment">--按name分组，组内数据累加</span></span><br><span class="line">  <span class="keyword">sum</span>(<span class="keyword">cost</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">name</span> <span class="keyword">order</span> <span class="keyword">by</span> orderdate <span class="keyword">rows</span> <span class="keyword">between</span> <span class="keyword">UNBOUNDED</span> <span class="keyword">PRECEDING</span> <span class="keyword">and</span> <span class="keyword">current</span> <span class="keyword">row</span> ) <span class="keyword">as</span> sample4 ,<span class="comment">--和sample3一样,由起点到当前行的聚合</span></span><br><span class="line">  <span class="keyword">sum</span>(<span class="keyword">cost</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">name</span> <span class="keyword">order</span> <span class="keyword">by</span> orderdate <span class="keyword">rows</span> <span class="keyword">between</span> <span class="number">1</span> <span class="keyword">PRECEDING</span> <span class="keyword">and</span> <span class="keyword">current</span> <span class="keyword">row</span>) <span class="keyword">as</span> sample5, <span class="comment">--当前行和前面一行做聚合</span></span><br><span class="line">  <span class="keyword">sum</span>(<span class="keyword">cost</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">name</span> <span class="keyword">order</span> <span class="keyword">by</span> orderdate <span class="keyword">rows</span> <span class="keyword">between</span> <span class="number">1</span> <span class="keyword">PRECEDING</span> <span class="keyword">AND</span> <span class="number">1</span> <span class="keyword">FOLLOWING</span> ) <span class="keyword">as</span> sample6,<span class="comment">--当前行和前边一行及后面一行</span></span><br><span class="line">  <span class="keyword">sum</span>(<span class="keyword">cost</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">name</span> <span class="keyword">order</span> <span class="keyword">by</span> orderdate <span class="keyword">rows</span> <span class="keyword">between</span> <span class="keyword">current</span> <span class="keyword">row</span> <span class="keyword">and</span> <span class="keyword">UNBOUNDED</span> <span class="keyword">FOLLOWING</span> ) <span class="keyword">as</span> sample7 <span class="comment">--当前行及后面所有行</span></span><br><span class="line"><span class="keyword">from</span> business;</span><br></pre></td></tr></table></figure><ul><li>查看顾客上次的购买时间</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>,orderdate,<span class="keyword">cost</span>,lag(orderdate,<span class="number">1</span>,<span class="string">'1900-01-01'</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">name</span> <span class="keyword">order</span> <span class="keyword">by</span> orderdate) <span class="keyword">as</span> last_time <span class="keyword">from</span> business;</span><br></pre></td></tr></table></figure><ul><li>查询前20%时间的订单信息</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">name</span>,orderdate,<span class="keyword">cost</span>, ntile(<span class="number">5</span>) <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> orderdate) ntile_id</span><br><span class="line">    <span class="keyword">from</span> business</span><br><span class="line">) b</span><br><span class="line"><span class="keyword">where</span> ntile_id = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Rank排名函数</p><ul><li>函数说明：<ul><li>Rank()：排序相同时会重复，总数不会变</li><li>DENSE_RANK()：排序相同时会重复，总数会减少</li><li>ROW_NUMBER()：会根据顺序计算</li></ul></li><li>数据准备</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; name subject score</span><br><span class="line">孙悟空  语文  87</span><br><span class="line">孙悟空  数学  95</span><br><span class="line">孙悟空  英语  68</span><br><span class="line">大海  语文  94</span><br><span class="line">大海  数学  56</span><br><span class="line">大海  英语  84</span><br><span class="line">宋宋  语文  64</span><br><span class="line">宋宋  数学  86</span><br><span class="line">宋宋  英语  84</span><br><span class="line">婷婷  语文  65</span><br><span class="line">婷婷  数学  85</span><br><span class="line">婷婷  英语  78</span><br></pre></td></tr></table></figure><ul><li>需求：计算各学科成绩排名</li><li>创建本地score.txt文件，复制数据</li><li>创建Hive表并导入数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> score(</span><br><span class="line"><span class="keyword">name</span> <span class="keyword">string</span>,</span><br><span class="line">subject <span class="keyword">string</span>,</span><br><span class="line">score <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">"\t"</span>;</span><br><span class="line"><span class="comment">-- 导入数据</span></span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">'/opt/module/data/hive/score.txt'</span> <span class="keyword">into</span> <span class="keyword">table</span> score;</span><br></pre></td></tr></table></figure><ul><li>按需查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">  <span class="keyword">name</span>,</span><br><span class="line">  subject,</span><br><span class="line">  score,</span><br><span class="line">  <span class="keyword">rank</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> subject <span class="keyword">order</span> <span class="keyword">by</span> score <span class="keyword">desc</span>) <span class="keyword">rank</span>,</span><br><span class="line">  <span class="keyword">dense_rank</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> subject <span class="keyword">order</span> <span class="keyword">by</span> score <span class="keyword">desc</span>) <span class="keyword">dense_rank</span>,</span><br><span class="line">  row_number() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> subject <span class="keyword">order</span> <span class="keyword">by</span> score <span class="keyword">desc</span>) row_number</span><br><span class="line"><span class="keyword">from</span> score;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="例题实战-蚂蚁金服"><a href="#例题实战-蚂蚁金服" class="headerlink" title="例题实战(蚂蚁金服)"></a>例题实战(蚂蚁金服)</h2><ul><li>背景说明<br>用户每天的蚂蚁森林低碳生活领取的记录流水表(user_low_carbon表)</li></ul><table><thead><tr><th>字段名</th><th>注释</th></tr></thead><tbody><tr><td>user_id</td><td>用户编号</td></tr><tr><td>data_dt</td><td>日期</td></tr><tr><td>low_carbon</td><td>减少碳排放(g:克)</td></tr></tbody></table><p>用于记录申领环保植物所需要减少的碳排放量的蚂蚁森林植物换购表(plant_carbon)</p><table><thead><tr><th>字段名</th><th>注释</th></tr></thead><tbody><tr><td>plant_id</td><td>植物编号</td></tr><tr><td>plant_name</td><td>植物名</td></tr><tr><td>low_carbon</td><td>换购植物所需要的碳</td></tr></tbody></table><ul><li><p>题目</p><ul><li>蚂蚁森林蚂蚁森林植物申领统计<br>问题：假设2017年1月1日开始记录低碳数据(user_low_carbon)，假设2017年10月1日之前满足申领条件的用户都申领了一颗p004-胡杨，剩余的能量全部用来领取p002-沙柳<br>统计在10月1日累计申领p002-沙柳排名前10的用户信息、以及他比后一名多领了几颗沙柳<br>得到的统计结果如下表样式：</li></ul><table><thead><tr><th>user_id</th><th>plant_count</th><th>less_cout(比后一名多领的棵树)</th></tr></thead><tbody><tr><td>u_101</td><td>1000</td><td>100</td></tr><tr><td>u_088</td><td>900</td><td>400</td></tr><tr><td>u_103</td><td>500</td><td>…</td></tr></tbody></table><ul><li>蚂蚁森林低碳用户排名分析<br>问题：查询user_low_carbon表中每日流水记录，条件为：用户在2017年，连续三天(或以上)的天数里，每天减少碳排放(low_carbon)都超过100g的用户低碳流水。需要查询返回满足以上条件的user_low_carbon表中的记录流水。<br>例如用户u_002符合条件的记录如下，因为2017/1/2~2017/1/5连续四天的碳排放量之和都大于等于100g：</li></ul><table><thead><tr><th>seq(序号,不涉及当前列)</th><th>user_id</th><th>data_dt</th><th>low_carbon</th></tr></thead><tbody><tr><td>xxxxx10</td><td>u_002</td><td>2017/1/2</td><td>150</td></tr><tr><td>xxxxx11</td><td>u_002</td><td>2017/1/2</td><td>70</td></tr><tr><td>xxxxx12</td><td>u_002</td><td>2017/1/3</td><td>30</td></tr><tr><td>xxxxx13</td><td>u_002</td><td>2017/1/3</td><td>80</td></tr><tr><td>xxxxx14</td><td>u_002</td><td>2017/1/4</td><td>150</td></tr><tr><td>xxxxx14</td><td>u_002</td><td>2017/1/5</td><td>101</td></tr></tbody></table><p>备注：统计方法不限于sql、procedure、python,java等</p></li><li><p>解决</p><ul><li><p>前期准备</p><ul><li>创建表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> user_low_carbon(user_id <span class="keyword">String</span>,data_dt <span class="keyword">String</span>,low_carbon <span class="built_in">int</span>) <span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\t'</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> plant_carbon(plant_id <span class="keyword">string</span>,plant_name <span class="keyword">String</span>,low_carbon <span class="built_in">int</span>) <span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\t'</span>;</span><br></pre></td></tr></table></figure><ul><li>加载数据</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">load data local inpath "/opt/module/data/hive/user_low_carbon.txt" into table user_low_carbon;</span><br><span class="line">load data local inpath "/opt/module/data/hive/plant_carbon.txt" into table plant_carbon;</span><br></pre></td></tr></table></figure><ul><li>设置本地模式(加快运行速度)：set hive.exec.mode.local.auto=true;</li></ul></li><li><p>求解问题一</p><ul><li>统计在10月1日前每个用户减少碳排放量的总和(取前11名：为了求与后一名的差值,并在第一阶段过滤数据集,加快运行速度)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- t1表</span></span><br><span class="line"><span class="keyword">select</span> user_id,<span class="keyword">sum</span>(low_carbon) sum_carbon</span><br><span class="line"><span class="keyword">from</span> user_low_carbon</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">datediff</span>(regexp_replace(data_dt,<span class="string">"/"</span>,<span class="string">"-"</span>),<span class="string">"2017-10-1"</span>)&lt;<span class="number">0</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> user_id</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> sum_carbon <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">11</span>;</span><br></pre></td></tr></table></figure><ul><li>取出申领胡杨的碳量</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- t2表</span></span><br><span class="line"><span class="keyword">select</span> low_carbon <span class="keyword">from</span> plant_carbon <span class="keyword">where</span> plant_id=<span class="string">"p004"</span>;</span><br></pre></td></tr></table></figure><ul><li>取出申领沙柳的碳量</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- t3表</span></span><br><span class="line"><span class="keyword">select</span> low_carbon <span class="keyword">from</span> plant_carbon <span class="keyword">where</span> plant_id=<span class="string">"p002"</span>;</span><br></pre></td></tr></table></figure><ul><li>求出能申领沙柳的棵树</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- t4表(floor下取整)</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  user_id,</span><br><span class="line">  <span class="keyword">floor</span>((t1.sum_carbon-t2.low_carbon) / t3.low_carbon) treeCount</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  t1,t2,t3;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 替换t1,t2,t3</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  user_id,</span><br><span class="line">  <span class="keyword">floor</span>((t1.sum_carbon-t2.low_carbon)/t3.low_carbon) treeCount</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  (</span><br><span class="line">    <span class="keyword">select</span> user_id,<span class="keyword">sum</span>(low_carbon) sum_carbon</span><br><span class="line">    <span class="keyword">from</span> user_low_carbon</span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">datediff</span>(regexp_replace(data_dt,<span class="string">"/"</span>,<span class="string">"-"</span>),<span class="string">"2017-10-1"</span>)&lt;<span class="number">0</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> user_id</span><br><span class="line">    <span class="keyword">order</span> <span class="keyword">by</span> sum_carbon <span class="keyword">desc</span></span><br><span class="line">    <span class="keyword">limit</span> <span class="number">11</span></span><br><span class="line">  )t1,</span><br><span class="line">  (</span><br><span class="line">    <span class="keyword">select</span> low_carbon <span class="keyword">from</span> plant_carbon <span class="keyword">where</span> plant_id=<span class="string">"p004"</span></span><br><span class="line">  )t2,</span><br><span class="line">  (</span><br><span class="line">    <span class="keyword">select</span> low_carbon <span class="keyword">from</span> plant_carbon <span class="keyword">where</span> plant_id=<span class="string">"p002"</span></span><br><span class="line">  )t3</span><br></pre></td></tr></table></figure><ul><li>求出前一名比后一名多几棵</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">  user_id,</span><br><span class="line">  treeCount,</span><br><span class="line">  treeCount - (<span class="keyword">lead</span>(treeCount,<span class="number">1</span>) <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> treeCount <span class="keyword">desc</span>))</span><br><span class="line"><span class="keyword">from</span> t4</span><br><span class="line"><span class="keyword">limit</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 替换t4表</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  user_id,</span><br><span class="line">  treeCount,</span><br><span class="line">  treeCount-(<span class="keyword">lead</span>(treeCount,<span class="number">1</span>) <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> treeCount <span class="keyword">desc</span>)) less_count</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">      user_id,</span><br><span class="line">      <span class="keyword">floor</span>((t1.sum_carbon-t2.low_carbon)/t3.low_carbon) treeCount</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">      (</span><br><span class="line">        <span class="keyword">select</span> user_id,<span class="keyword">sum</span>(low_carbon) sum_carbon</span><br><span class="line">        <span class="keyword">from</span> user_low_carbon</span><br><span class="line">        <span class="keyword">where</span> <span class="keyword">datediff</span>(regexp_replace(data_dt,<span class="string">"/"</span>,<span class="string">"-"</span>),<span class="string">"2017-10-1"</span>)&lt;<span class="number">0</span></span><br><span class="line">        <span class="keyword">group</span> <span class="keyword">by</span> user_id</span><br><span class="line">        <span class="keyword">order</span> <span class="keyword">by</span> sum_carbon <span class="keyword">desc</span></span><br><span class="line">        <span class="keyword">limit</span> <span class="number">11</span></span><br><span class="line">      )t1,</span><br><span class="line">      (</span><br><span class="line">        <span class="keyword">select</span> low_carbon <span class="keyword">from</span> plant_carbon <span class="keyword">where</span> plant_id=<span class="string">"p004"</span></span><br><span class="line">      )t2,</span><br><span class="line">      (</span><br><span class="line">        <span class="keyword">select</span> low_carbon <span class="keyword">from</span> plant_carbon <span class="keyword">where</span> plant_id=<span class="string">"p002"</span></span><br><span class="line">      )t3</span><br><span class="line">  )t4</span><br><span class="line"><span class="keyword">limit</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure></li><li><p>求解问题二</p><ul><li><p>方式一(Hive Sql简单版)</p><ul><li>过滤出2017年且单日低碳量超过100g</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- t1表</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  user_id,</span><br><span class="line">  <span class="keyword">date_format</span>(regexp_replace(data_dt,<span class="string">'/'</span>,<span class="string">'-'</span>),<span class="string">'yyyy-MM-dd'</span>) data_dt</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  user_low_carbon</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  <span class="keyword">substring</span>(data_dt,<span class="number">1</span>,<span class="number">4</span>) = <span class="string">'2017'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">  user_id,data_dt</span><br><span class="line"><span class="keyword">having</span></span><br><span class="line">  <span class="keyword">sum</span>(low_carbon) &gt;= <span class="number">100</span>;</span><br></pre></td></tr></table></figure><ul><li>将前两行数据以及后两行数据的日期放至当前行</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- t2表</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  user_id,</span><br><span class="line">  data_dt,</span><br><span class="line">  lag(data_dt,<span class="number">2</span>,<span class="string">'1970-01-01'</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_id <span class="keyword">order</span> <span class="keyword">by</span> data_dt) lag2,</span><br><span class="line">  lag(data_dt,<span class="number">1</span>,<span class="string">'1970-01-01'</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_id <span class="keyword">order</span> <span class="keyword">by</span> data_dt) lag1,</span><br><span class="line">  <span class="keyword">lead</span>(data_dt,<span class="number">1</span>,<span class="string">'1970-01-01'</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_id <span class="keyword">order</span> <span class="keyword">by</span> data_dt) lead1,</span><br><span class="line">  <span class="keyword">lead</span>(data_dt,<span class="number">2</span>,<span class="string">'1970-01-01'</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_id <span class="keyword">order</span> <span class="keyword">by</span> data_dt) lead2</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  t1;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 替t1</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  user_id,</span><br><span class="line">  data_dt,</span><br><span class="line">  lag(data_dt,<span class="number">2</span>,<span class="string">'1970-01-01'</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_id <span class="keyword">order</span> <span class="keyword">by</span> data_dt) lag2,</span><br><span class="line">  lag(data_dt,<span class="number">1</span>,<span class="string">'1970-01-01'</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_id <span class="keyword">order</span> <span class="keyword">by</span> data_dt) lag1,</span><br><span class="line">  <span class="keyword">lead</span>(data_dt,<span class="number">1</span>,<span class="string">'1970-01-01'</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_id <span class="keyword">order</span> <span class="keyword">by</span> data_dt) lead1,</span><br><span class="line">  <span class="keyword">lead</span>(data_dt,<span class="number">2</span>,<span class="string">'1970-01-01'</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_id <span class="keyword">order</span> <span class="keyword">by</span> data_dt) lead2</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">      user_id,</span><br><span class="line">      <span class="keyword">date_format</span>(regexp_replace(data_dt,<span class="string">'/'</span>,<span class="string">'-'</span>),<span class="string">'yyyy-MM-dd'</span>) data_dt</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">      user_low_carbon</span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">      <span class="keyword">substring</span>(data_dt,<span class="number">1</span>,<span class="number">4</span>) = <span class="string">'2017'</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">      user_id,data_dt</span><br><span class="line">    <span class="keyword">having</span></span><br><span class="line">      <span class="keyword">sum</span>(low_carbon) &gt;= <span class="number">100</span></span><br><span class="line">  )t1;</span><br></pre></td></tr></table></figure><ul><li>计算当前日期跟前后两行时间的差值</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- t3表</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  user_id,</span><br><span class="line">  data_dt,</span><br><span class="line">  <span class="keyword">datediff</span>(data_dt,lag2) lag2_diff,</span><br><span class="line">  <span class="keyword">datediff</span>(data_dt,lag1) lag1_diff,</span><br><span class="line">  <span class="keyword">datediff</span>(data_dt,lead1) lead1_diff,</span><br><span class="line">  <span class="keyword">datediff</span>(data_dt,lead2) lead2_diff</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  t2;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 替换t2</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  user_id,</span><br><span class="line">  data_dt,</span><br><span class="line">  <span class="keyword">datediff</span>(data_dt,lag2) lag2_diff,</span><br><span class="line">  <span class="keyword">datediff</span>(data_dt,lag1) lag1_diff,</span><br><span class="line">  <span class="keyword">datediff</span>(data_dt,lead1) lead1_diff,</span><br><span class="line">  <span class="keyword">datediff</span>(data_dt,lead2) lead2_diff</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">      user_id,</span><br><span class="line">      data_dt,</span><br><span class="line">      lag(data_dt,<span class="number">2</span>,<span class="string">'1970-01-01'</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_id <span class="keyword">order</span> <span class="keyword">by</span> data_dt) lag2,</span><br><span class="line">      lag(data_dt,<span class="number">1</span>,<span class="string">'1970-01-01'</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_id <span class="keyword">order</span> <span class="keyword">by</span> data_dt) lag1,</span><br><span class="line">      <span class="keyword">lead</span>(data_dt,<span class="number">1</span>,<span class="string">'1970-01-01'</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_id <span class="keyword">order</span> <span class="keyword">by</span> data_dt) lead1,</span><br><span class="line">      <span class="keyword">lead</span>(data_dt,<span class="number">2</span>,<span class="string">'1970-01-01'</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_id <span class="keyword">order</span> <span class="keyword">by</span> data_dt) lead2</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">      (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">          user_id,</span><br><span class="line">          <span class="keyword">date_format</span>(regexp_replace(data_dt,<span class="string">'/'</span>,<span class="string">'-'</span>),<span class="string">'yyyy-MM-dd'</span>) data_dt</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">          user_low_carbon</span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">          <span class="keyword">substring</span>(data_dt,<span class="number">1</span>,<span class="number">4</span>) = <span class="string">'2017'</span></span><br><span class="line">        <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">          user_id,data_dt</span><br><span class="line">        <span class="keyword">having</span></span><br><span class="line">          <span class="keyword">sum</span>(low_carbon) &gt;= <span class="number">100</span></span><br><span class="line">      )t1</span><br><span class="line">  )t2;</span><br></pre></td></tr></table></figure><ul><li>过滤出连续3天超过100g的用户</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- t4表</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  user_id,</span><br><span class="line">  data_dt</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  t3</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  (lag2_diff = <span class="number">2</span> <span class="keyword">and</span> lag1_diff = <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">or</span></span><br><span class="line">  (lag1_diff = <span class="number">1</span> <span class="keyword">and</span> lead1_diff = <span class="number">-1</span>)</span><br><span class="line">  <span class="keyword">or</span></span><br><span class="line">  (lead1_diff = <span class="number">-1</span> <span class="keyword">and</span> lead2_diff = <span class="number">-2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 替换t3</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  user_id,</span><br><span class="line">  data_dt</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">      user_id,</span><br><span class="line">      data_dt,</span><br><span class="line">      <span class="keyword">datediff</span>(data_dt,lag2) lag2_diff,</span><br><span class="line">      <span class="keyword">datediff</span>(data_dt,lag1) lag1_diff,</span><br><span class="line">      <span class="keyword">datediff</span>(data_dt,lead1) lead1_diff,</span><br><span class="line">      <span class="keyword">datediff</span>(data_dt,lead2) lead2_diff</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">      (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">          user_id,</span><br><span class="line">          data_dt,</span><br><span class="line">          lag(data_dt,<span class="number">2</span>,<span class="string">'1970-01-01'</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_id <span class="keyword">order</span> <span class="keyword">by</span> data_dt) lag2,</span><br><span class="line">          lag(data_dt,<span class="number">1</span>,<span class="string">'1970-01-01'</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_id <span class="keyword">order</span> <span class="keyword">by</span> data_dt) lag1,</span><br><span class="line">          <span class="keyword">lead</span>(data_dt,<span class="number">1</span>,<span class="string">'1970-01-01'</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_id <span class="keyword">order</span> <span class="keyword">by</span> data_dt) lead1,</span><br><span class="line">          <span class="keyword">lead</span>(data_dt,<span class="number">2</span>,<span class="string">'1970-01-01'</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_id <span class="keyword">order</span> <span class="keyword">by</span> data_dt) lead2</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">          (</span><br><span class="line">            <span class="keyword">select</span></span><br><span class="line">              user_id,</span><br><span class="line">              <span class="keyword">date_format</span>(regexp_replace(data_dt,<span class="string">'/'</span>,<span class="string">'-'</span>),<span class="string">'yyyy-MM-dd'</span>) data_dt</span><br><span class="line">            <span class="keyword">from</span></span><br><span class="line">              user_low_carbon</span><br><span class="line">            <span class="keyword">where</span></span><br><span class="line">              <span class="keyword">substring</span>(data_dt,<span class="number">1</span>,<span class="number">4</span>) = <span class="string">'2017'</span></span><br><span class="line">            <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">              user_id,data_dt</span><br><span class="line">            <span class="keyword">having</span></span><br><span class="line">              <span class="keyword">sum</span>(low_carbon) &gt;= <span class="number">100</span></span><br><span class="line">          )t1</span><br><span class="line">      )t2</span><br><span class="line">  )t3</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  (lag2_diff = <span class="number">2</span> <span class="keyword">and</span> lag1_diff = <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">or</span></span><br><span class="line">  (lag1_diff = <span class="number">1</span> <span class="keyword">and</span> lead1_diff = <span class="number">-1</span>)</span><br><span class="line">  <span class="keyword">or</span></span><br><span class="line">  (lead1_diff = <span class="number">-1</span> <span class="keyword">and</span> lead2_diff = <span class="number">-2</span>);</span><br></pre></td></tr></table></figure><ul><li>关联原表，获取流水信息</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">  ulc.user_id,</span><br><span class="line">  ulc.data_dt,</span><br><span class="line">  ulc.low_carbon</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  t4</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">  user_low_carbon ulc</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">  t4.user_id = ulc.user_id</span><br><span class="line">  <span class="keyword">and</span></span><br><span class="line">  t4.data_dt = <span class="keyword">date_format</span>(regexp_replace(ulc.data_dt,<span class="string">'/'</span>,<span class="string">'-'</span>),<span class="string">'yyyy-MM-dd'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 替换t4</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  ulc.user_id,</span><br><span class="line">  ulc.data_dt,</span><br><span class="line">  ulc.low_carbon</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">      user_id,</span><br><span class="line">      data_dt</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">      (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">          user_id,</span><br><span class="line">          data_dt,</span><br><span class="line">          <span class="keyword">datediff</span>(data_dt,lag2) lag2_diff,</span><br><span class="line">          <span class="keyword">datediff</span>(data_dt,lag1) lag1_diff,</span><br><span class="line">          <span class="keyword">datediff</span>(data_dt,lead1) lead1_diff,</span><br><span class="line">          <span class="keyword">datediff</span>(data_dt,lead2) lead2_diff</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">          (</span><br><span class="line">            <span class="keyword">select</span></span><br><span class="line">              user_id,</span><br><span class="line">              data_dt,</span><br><span class="line">              lag(data_dt,<span class="number">2</span>,<span class="string">'1970-01-01'</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_id <span class="keyword">order</span> <span class="keyword">by</span> data_dt) lag2,</span><br><span class="line">              lag(data_dt,<span class="number">1</span>,<span class="string">'1970-01-01'</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_id <span class="keyword">order</span> <span class="keyword">by</span> data_dt) lag1,</span><br><span class="line">              <span class="keyword">lead</span>(data_dt,<span class="number">1</span>,<span class="string">'1970-01-01'</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_id <span class="keyword">order</span> <span class="keyword">by</span> data_dt) lead1,</span><br><span class="line">              <span class="keyword">lead</span>(data_dt,<span class="number">2</span>,<span class="string">'1970-01-01'</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_id <span class="keyword">order</span> <span class="keyword">by</span> data_dt) lead2</span><br><span class="line">            <span class="keyword">from</span></span><br><span class="line">              (</span><br><span class="line">                <span class="keyword">select</span></span><br><span class="line">                  user_id,</span><br><span class="line">                  <span class="keyword">date_format</span>(regexp_replace(data_dt,<span class="string">'/'</span>,<span class="string">'-'</span>),<span class="string">'yyyy-MM-dd'</span>) data_dt</span><br><span class="line">                <span class="keyword">from</span></span><br><span class="line">                  user_low_carbon</span><br><span class="line">                <span class="keyword">where</span></span><br><span class="line">                  <span class="keyword">substring</span>(data_dt,<span class="number">1</span>,<span class="number">4</span>) = <span class="string">'2017'</span></span><br><span class="line">                <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">                  user_id,data_dt</span><br><span class="line">                <span class="keyword">having</span></span><br><span class="line">                  <span class="keyword">sum</span>(low_carbon) &gt;= <span class="number">100</span></span><br><span class="line">              )t1</span><br><span class="line">          )t2</span><br><span class="line">      )t3</span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">      (lag2_diff = <span class="number">2</span> <span class="keyword">and</span> lag1_diff = <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">or</span></span><br><span class="line">      (lag1_diff = <span class="number">1</span> <span class="keyword">and</span> lead1_diff = <span class="number">-1</span>)</span><br><span class="line">      <span class="keyword">or</span></span><br><span class="line">      (lead1_diff = <span class="number">-1</span> <span class="keyword">and</span> lead2_diff = <span class="number">-2</span>)</span><br><span class="line">  )t4</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">  user_low_carbon ulc</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">  t4.user_id = ulc.user_id</span><br><span class="line">  <span class="keyword">and</span></span><br><span class="line">  t4.data_dt = <span class="keyword">date_format</span>(regexp_replace(ulc.data_dt,<span class="string">'/'</span>,<span class="string">'-'</span>),<span class="string">'yyyy-MM-dd'</span>);</span><br></pre></td></tr></table></figure></li><li><p>方式二(Hive Sql困难版,使用等差数列)</p><ul><li>过滤出2017年且单日低碳量超过100g(同方式一第一步)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- t1表</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  user_id,</span><br><span class="line">  <span class="keyword">date_format</span>(regexp_replace(data_dt,<span class="string">'/'</span>,<span class="string">'-'</span>),<span class="string">'yyyy-MM-dd'</span>) data_dt</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  user_low_carbon</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  <span class="keyword">substring</span>(data_dt,<span class="number">1</span>,<span class="number">4</span>) = <span class="string">'2017'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">  user_id,data_dt</span><br><span class="line"><span class="keyword">having</span></span><br><span class="line">  <span class="keyword">sum</span>(low_carbon) &gt;= <span class="number">100</span>;</span><br></pre></td></tr></table></figure><ul><li>按照日期进行排序,并给每一条数据一个标记</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- t2表</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  user_id,</span><br><span class="line">  data_dt,</span><br><span class="line">  <span class="keyword">rank</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_id <span class="keyword">order</span> <span class="keyword">by</span> data_dt) rk</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  t1;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 替换t1表</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  user_id,</span><br><span class="line">  data_dt,</span><br><span class="line">  <span class="keyword">rank</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_id <span class="keyword">order</span> <span class="keyword">by</span> data_dt) rk</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">      user_id,</span><br><span class="line">      <span class="keyword">date_format</span>(regexp_replace(data_dt,<span class="string">'/'</span>,<span class="string">'-'</span>),<span class="string">'yyyy-MM-dd'</span>) data_dt</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">      user_low_carbon</span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">      <span class="keyword">substring</span>(data_dt,<span class="number">1</span>,<span class="number">4</span>) = <span class="string">'2017'</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">      user_id,data_dt</span><br><span class="line">    <span class="keyword">having</span></span><br><span class="line">      <span class="keyword">sum</span>(low_carbon) &gt;= <span class="number">100</span></span><br><span class="line">  )t1;</span><br></pre></td></tr></table></figure><ul><li>将日期减去当前的rank值</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  如果是连续的话,data_dt - rk结果一致</span></span><br><span class="line"><span class="comment">  user_id , data_dt , rk ,data_sub_rk</span></span><br><span class="line"><span class="comment">  u_001 , 2017-01-02 , 1 , 2017-01-01</span></span><br><span class="line"><span class="comment">  u_001 , 2017-01-06 , 2 , 2017-01-04</span></span><br><span class="line"><span class="comment">  u_002 , 2017-01-02 , 1 , 2017-01-01</span></span><br><span class="line"><span class="comment">  u_002 , 2017-01-03 , 2 , 2017-01-01</span></span><br><span class="line"><span class="comment">  u_002 , 2017-01-04 , 3 , 2017-01-01</span></span><br><span class="line"><span class="comment">  u_002 , 2017-01-05 , 4 , 2017-01-01</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">-- t3表</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  user_id,</span><br><span class="line">  data_dt,</span><br><span class="line">  <span class="keyword">date_sub</span>(data_dt,rk) data_sub_rk</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  t2;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 替换t2</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  user_id,</span><br><span class="line">  data_dt,</span><br><span class="line">  <span class="keyword">date_sub</span>(data_dt,rk) data_sub_rk</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">      user_id,</span><br><span class="line">      data_dt,</span><br><span class="line">      <span class="keyword">rank</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_id <span class="keyword">order</span> <span class="keyword">by</span> data_dt) rk</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">      (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">          user_id,</span><br><span class="line">          <span class="keyword">date_format</span>(regexp_replace(data_dt,<span class="string">'/'</span>,<span class="string">'-'</span>),<span class="string">'yyyy-MM-dd'</span>) data_dt</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">          user_low_carbon</span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">          <span class="keyword">substring</span>(data_dt,<span class="number">1</span>,<span class="number">4</span>) = <span class="string">'2017'</span></span><br><span class="line">        <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">          user_id,data_dt</span><br><span class="line">        <span class="keyword">having</span></span><br><span class="line">          <span class="keyword">sum</span>(low_carbon) &gt;= <span class="number">100</span></span><br><span class="line">      )t1</span><br><span class="line">  )t2;</span><br></pre></td></tr></table></figure><ul><li>过滤出连续3天超过100g的用户</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 当前适用于连续n天,只需要改3为n,具有通式性</span></span><br><span class="line"><span class="comment">-- 当前只能过滤出用户,流水不行</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  user_id</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  t3</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">  user_id,data_sub_rk</span><br><span class="line"><span class="keyword">having</span></span><br><span class="line">  <span class="keyword">count</span>(*) &gt;= <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 替换t3</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  user_id</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">      user_id,</span><br><span class="line">      data_dt,</span><br><span class="line">      <span class="keyword">date_sub</span>(data_dt,rk) data_sub_rk</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">      (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">          user_id,</span><br><span class="line">          data_dt,</span><br><span class="line">          <span class="keyword">rank</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_id <span class="keyword">order</span> <span class="keyword">by</span> data_dt) rk</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">          (</span><br><span class="line">            <span class="keyword">select</span></span><br><span class="line">              user_id,</span><br><span class="line">              <span class="keyword">date_format</span>(regexp_replace(data_dt,<span class="string">'/'</span>,<span class="string">'-'</span>),<span class="string">'yyyy-MM-dd'</span>) data_dt</span><br><span class="line">            <span class="keyword">from</span></span><br><span class="line">              user_low_carbon</span><br><span class="line">            <span class="keyword">where</span></span><br><span class="line">              <span class="keyword">substring</span>(data_dt,<span class="number">1</span>,<span class="number">4</span>) = <span class="string">'2017'</span></span><br><span class="line">            <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">              user_id,data_dt</span><br><span class="line">            <span class="keyword">having</span></span><br><span class="line">              <span class="keyword">sum</span>(low_carbon) &gt;= <span class="number">100</span></span><br><span class="line">          )t1</span><br><span class="line">      )t2</span><br><span class="line">  )t3</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">  user_id,data_sub_rk</span><br><span class="line"><span class="keyword">having</span></span><br><span class="line">  <span class="keyword">count</span>(*) &gt;= <span class="number">3</span>;</span><br></pre></td></tr></table></figure></li><li><p>方式三(MapReduce)</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">mapper(key:user_id + date,value:一行)</span><br><span class="line">grouping:user_id</span><br><span class="line">reduce()</span><br><span class="line"></span><br><span class="line">values:</span><br><span class="line">&#123;</span><br><span class="line">    date = <span class="number">1970</span>-<span class="number">01</span>-<span class="number">01</span></span><br><span class="line">    list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    values.<span class="keyword">for</span>(</span><br><span class="line">        <span class="comment">// 首次</span></span><br><span class="line">        <span class="keyword">if</span>(date == <span class="number">1970</span>-<span class="number">01</span>-<span class="number">01</span>)&#123;</span><br><span class="line">            list.add(value);</span><br><span class="line">            date = value.date;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123; <span class="comment">// 不是首次</span></span><br><span class="line">            <span class="keyword">if</span>(value.date - date == <span class="number">1</span>)&#123;</span><br><span class="line">                list.add(value);</span><br><span class="line">                date = value.date;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(list.size() &gt;= <span class="number">3</span>)&#123;</span><br><span class="line">                    context.write(list);</span><br><span class="line">                &#125;</span><br><span class="line">                list.clear();</span><br><span class="line">                list.add(value);</span><br><span class="line">                date = value.date;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 防止漏了最后一行</span></span><br><span class="line">    <span class="keyword">if</span>(list.size() &gt;= <span class="number">3</span>)&#123;</span><br><span class="line">        context.write(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li><p>系统内置函数</p><ul><li>查看系统自带的函数：show functions;</li><li>显示自带的函数的用法：desc function split;</li><li>详细显示自带的函数的用法：desc function extened split;</li></ul></li><li><p>自定义函数</p><ul><li>Hive自带了一些函数，比如：max/min等，但是数量有限，自己可以通过自定义UDF来方便的扩展</li><li>当Hive提供的内置函数无法满足你的业务处理需要时，此时就可以考虑使用用户自定义函数(UDF：user-defined function)</li><li>根据用户自定义函数类别分为以下三种：<ul><li><strong>UDF(User-Defined-Function)</strong>：一进一出</li><li>UDAF(User-Defined Aggregation Function)：聚集函数，多进一出；类似于：count/max/min</li><li>UDTF(User-Defined Table-Generating Functions)：一进多出，如lateral view explore()</li></ul></li><li>官方文档地址：<a href="https://cwiki.apache.org/confluence/display/Hive/HivePlugins" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/Hive/HivePlugins</a></li><li>编程步骤：<ul><li>继承org.apache.hadoop.hive.ql.udf.generic.GenericUDF(org.apache.hadoop.hive.ql.UDF已被废弃)</li><li>重写三个方法</li><li>在Hive的命令行窗口创建函数<ul><li>添加jar资源：add jar ‘jar_path’;</li><li>创建function：create [temporary] function [dbname.]function_name AS class_name;(temporary只在当前次使用Hive Cli有效,退出重进无效;dbname.标识限定使用函数的数据库,不写默认为default数据库)</li></ul></li><li>在Hive的命令行窗口删除函数：Drop [temporary] function [if exists] [dbname.]function_name;</li></ul></li></ul></li><li><p>自定义UDF/UDTF函数</p><ul><li>在IDE中创建一个Maven工程</li><li>导入依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hive<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hive-exec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>创建自定义UDF函数</p><ul><li>创建类继承GenericUDF</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UDF被废弃</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyUDF</span> <span class="keyword">extends</span> <span class="title">GenericUDF</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 输入类型int</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">transient</span> IntObjectInspector arg0;</span><br><span class="line">  <span class="comment">// 返回值类型int</span></span><br><span class="line">  <span class="keyword">private</span> IntWritable res;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这个方法只调用一次,并且在evaluate()方法之前调用</span></span><br><span class="line">  <span class="comment">// 该方法接受的参数是一个ObjectInspectors数组</span></span><br><span class="line">  <span class="comment">// 该方法检查接受正确的参数类型和参数个数</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ObjectInspector <span class="title">initialize</span><span class="params">(ObjectInspector[] arguments)</span> <span class="keyword">throws</span> UDFArgumentException </span>&#123;</span><br><span class="line">    <span class="comment">// 输入类型</span></span><br><span class="line">    <span class="keyword">this</span>.arg0 = (IntObjectInspector) arguments[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// 返回值类型</span></span><br><span class="line">    <span class="keyword">this</span>.res = <span class="keyword">new</span> IntWritable();</span><br><span class="line">    <span class="comment">// 确定返回值类型</span></span><br><span class="line">    <span class="keyword">return</span> PrimitiveObjectInspectorFactory.writableIntObjectInspector;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这个方法类似UDF的evaluate()方法。它处理真实的参数，并返回最终结果</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">evaluate</span><span class="params">(DeferredObject[] arguments)</span> <span class="keyword">throws</span> HiveException </span>&#123;</span><br><span class="line">    Object arg0 = arguments[<span class="number">0</span>].get();</span><br><span class="line">    <span class="keyword">int</span> inputNum = <span class="keyword">this</span>.arg0.get(arg0);</span><br><span class="line">    res.set(inputNum + <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这个方法用于当实现的GenericUDF出错的时候，打印出提示信息。而提示信息就是你实现该方法最后返回的字符串</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getDisplayString</span><span class="params">(String[] children)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">assert</span> (children.length == <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"param: "</span> + children[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>打成Jar包上传到服务器</li><li>将jar包添加到Hive的classpath：add jar /opt/module/data/hive/Hive-1.0-SNAPSHOT.jar;</li><li>创建临时函数与开发好的java class关联</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> className需要使用全类名</span></span><br><span class="line">create temporary function addFive as 'com.xiong.hive.MyUDF';</span><br></pre></td></tr></table></figure><ul><li>在Hql中使用自定义的函数：select addFive(id) from cc;</li></ul></li><li><p>创建自定义UDTF函数</p><ul><li>创建类继承GenericUDTF</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyUDTF</span> <span class="keyword">extends</span> <span class="title">GenericUDTF</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> List&lt;String&gt; dataList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义输出数据的列名和数据类型</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> StructObjectInspector <span class="title">initialize</span><span class="params">(StructObjectInspector argOIs)</span> <span class="keyword">throws</span> UDFArgumentException </span>&#123;</span><br><span class="line">    <span class="comment">// 定义输出数据的列名</span></span><br><span class="line">    List&lt;String&gt; fieldNames = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    fieldNames.add(<span class="string">"word"</span>);</span><br><span class="line">    <span class="comment">// 定义输出数据的类型</span></span><br><span class="line">    List&lt;ObjectInspector&gt; fieldOIs = <span class="keyword">new</span> ArrayList&lt;ObjectInspector&gt;();</span><br><span class="line">    fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);</span><br><span class="line">    <span class="keyword">return</span> ObjectInspectorFactory.getStandardStructObjectInspector(fieldNames, fieldOIs);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Object[] args)</span> <span class="keyword">throws</span> HiveException </span>&#123;</span><br><span class="line">    <span class="comment">// 1、获取数据</span></span><br><span class="line">    String inputStr = args[<span class="number">0</span>].toString();</span><br><span class="line">    <span class="comment">// 2、获取分隔符</span></span><br><span class="line">    <span class="keyword">final</span> String splitKey = args[<span class="number">1</span>].toString();</span><br><span class="line">    <span class="comment">// 3、切粉数据</span></span><br><span class="line">    <span class="keyword">final</span> String[] words = inputStr.split(splitKey);</span><br><span class="line">    <span class="comment">// 4、遍历写出</span></span><br><span class="line">    <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">      <span class="comment">// 5、将数据放至集合</span></span><br><span class="line">      dataList.clear();</span><br><span class="line">      dataList.add(word);</span><br><span class="line">      <span class="comment">// 6、写出数据</span></span><br><span class="line">      forward(dataList);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> HiveException </span>&#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>与自定义UDF类似</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add jar /opt/module/data/hive/Hive-1.0-SNAPSHOT.jar;</span><br><span class="line">create temporary function udtf_split as 'com.xiong.hive.MyUDTF';</span><br><span class="line">select udtf_split('hello,sobxiong,nice boy!',',');</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="压缩和存储"><a href="#压缩和存储" class="headerlink" title="压缩和存储"></a>压缩和存储</h2><ul><li><p>Hadoop源码编译支持Snappy压缩</p><ul><li>资源准备<ul><li>虚拟机准备：连接外网、<strong>采用root角色编译</strong>，减少文件夹权限问题</li><li>软件包准备</li></ul></li><li>软件包安装<ul><li>JDK安装</li><li>Maven安装</li></ul></li><li>编译源码</li></ul></li><li><p>Hadoop压缩配置</p><ul><li>MR支持的压缩编码</li></ul><table><thead><tr><th>压缩格式</th><th>是否hadoop自带</th><th>算法</th><th>文件扩展名</th><th>是否可切分</th><th>换成压缩格式后,原来程序是否需要修改</th></tr></thead><tbody><tr><td>DEFLATE</td><td>是,直接使用</td><td>DEFLATE</td><td>.deflate</td><td>否</td><td>和文本处理一样,不需要修改</td></tr><tr><td>Gzip</td><td>是,直接使用</td><td>DEFLATE</td><td>.gz</td><td>否</td><td>和文本处理一样,不需要修改</td></tr><tr><td>bzip2</td><td>是,直接使用</td><td>bzip2</td><td>.bz2</td><td>是</td><td>和文本处理一样,不需要修改</td></tr><tr><td>LZO</td><td>否,需要安装</td><td>LZO</td><td>.lzo</td><td>是</td><td>需要建索引,还需要指定输入格式</td></tr><tr><td>Snappy</td><td>否,需要安装</td><td>Snappy</td><td>.snappy</td><td>否</td><td>和文本处理一样,不需要修改</td></tr></tbody></table><p>为了支持多种压缩/解压缩算法，Hadoop引入了编码/解码器，如下表所示</p><table><thead><tr><th>压缩格式</th><th>对应的编码/解码器</th></tr></thead><tbody><tr><td>DEFLATE</td><td>org.apache.hadoop.io.compress.DefaultCodec</td></tr><tr><td>Gzip</td><td>org.apache.hadoop.io.compress.GzipCodec</td></tr><tr><td>bzip2</td><td>org.apache.hadoop.io.compress.BZip2Codec</td></tr><tr><td>LZO</td><td>com.hadoop.compression.lzo.LzopCodec</td></tr><tr><td>Snappy</td><td>org.apache.hadoop.io.compress.SnappyCodec</td></tr></tbody></table><p>压缩性能的比较</p><table><thead><tr><th>压缩算法</th><th>原始文件大小</th><th>压缩文件大小</th><th>压缩速度</th><th>解压速度</th></tr></thead><tbody><tr><td>gzip</td><td>8.3GB</td><td>1.8GB</td><td>17.5MB/s</td><td>58MB/s</td></tr><tr><td>bzip2</td><td>8.3GB</td><td>1.1GB</td><td>2.4MB/s</td><td>9.5MB/s</td></tr><tr><td>LZO</td><td>8.3GB</td><td>2.9GB</td><td>49.3MB/s</td><td>74.6MB/s</td></tr><tr><td>Snappy</td><td>8.3GB</td><td>较大</td><td>最快</td><td>最快</td></tr></tbody></table><ul><li>压缩参数配置<br>要在Hadoop中启用压缩，可以配置如下参数(mapred-site.xml文件中)<table><thead><tr><th>参数</th><th>默认值</th><th>阶段</th><th>建议</th></tr></thead><tbody><tr><td>io.compression.codecs(在core-site.xml中配置)</td><td>org.apache.hadoop.io.compress.DefaultCodec, org.apache.hadoop.io.compress.GzipCodec, org.apache.hadoop.io.compress.BZip2Codec</td><td>输入压缩</td><td>Hadoop使用文件扩展名判断是否支持某种编解码器</td></tr><tr><td>mapreduce.map.output.compress(在mapred-site.xml中配置)</td><td>false</td><td>mapper输出</td><td>这个参数设为true启用压缩</td></tr><tr><td>mapreduce.map.output.compress.codec(在mapred-site.xml中配置)</td><td>org.apache.hadoop.io.compress.DefaultCodec</td><td>mapper输出</td><td>企业多使用LZO或Snappy编解码器在此阶段压缩数据</td></tr><tr><td>mapreduce.output.fileoutputformat.compress(在mapred-site.xml中配置)</td><td>false</td><td>reducer输出</td><td>这个参数设为true启用压缩</td></tr><tr><td>mapreduce.output.fileoutputformat.compress.codec(在mapred-site.xml中配置)</td><td>org.apache.hadoop.io.compress.DefaultCodec</td><td>reducer输出</td><td>使用标准工具或者编解码器，如gzip和bzip2</td></tr><tr><td>mapreduce.output.fileoutputformat.compress.type(在mapred-site.xml中配置)</td><td>RECORD</td><td>reducer输出</td><td>SequenceFile输出使用的压缩类型：NONE和BLOCK</td></tr></tbody></table></li></ul></li><li><p>开启Map输出阶段压缩<br>开启map输出阶段压缩可以减少job中map和Reduce task间数据传输量<br>具体操作：</p><ul><li>开启Hive中间传输数据压缩功能：set hive.exec.compress.intermediate=true;</li><li>开启mapreduce中map输出压缩功能：set mapreduce.map.output.compress=true;</li><li>设置mapreduce中map输出数据的压缩方式：set mapreduce.map.output.compress.codec = org.apache.hadoop.io.compress.SnappyCodec;</li><li>执行查询语句</li></ul></li><li><p>开启Reduce输出阶段压缩<br>当Hive将输出写入到表中时，输出内容同样可以进行压缩。属性hive.exec.compress.output控制着这个功能。用户可能需要保持默认设置文件中的默认值false，这样默认的输出就是非压缩的纯文本文件了。用户可以通过在查询语句或执行脚本中设置这个值为true，来开启输出结果压缩功能<br>具体操作：</p><ul><li>开启Hive最终输出数据压缩功能：set hive.exec.compress.output=true;</li><li>开启mapreduce最终输出数据压缩：set mapreduce.output.fileoutputformat.compress=true;</li><li>设置mapreduce最终数据输出压缩方式：set mapreduce.output.fileoutputformat.compress.codec = org.apache.hadoop.io.compress.SnappyCodec;</li><li>设置mapreduce最终数据输出压缩为块压缩：set mapreduce.output.fileoutputformat.compress.type=BLOCK;</li><li>测试输出结果是否是压缩文件：insert overwrite local directory ‘/opt/module/data/hive/distribute-result’ select * from emp distribute by deptno sort by empno desc;</li></ul></li><li><p>文件存储格式<br>Hive支持的存储数的格式主要有：TEXTFILE 、SEQUENCEFILE、ORC、PARQUET</p><ul><li><p>列式存储和行式存储<br><img src="%E5%88%97%E5%BC%8F%E5%AD%98%E5%82%A8%E5%92%8C%E8%A1%8C%E5%BC%8F%E5%AD%98%E5%82%A8.png" alt="列式存储和行式存储"></p><ul><li>行存储的特点：查询满足条件的一整行数据的时候，列存储则需要去每个聚集的字段找到对应的每个列的值，行存储只需要找到其中一个值，其余的值都在相邻地方，所以此时行存储查询的速度更快</li><li>列存储的特点：因为每个字段的数据聚集存储，在查询只需要少数几个字段的时候，能大大减少读取的数据量；每个字段的数据类型一定是相同的，列式存储可以针对性的设计更好的设计压缩算法</li><li>主要存储格式对应的存储方式<ul><li><strong>TEXTFILE和SEQUENCEFILE的存储格式都是基于行存储的</strong></li><li><strong>ORC和PARQUET是基于列式存储的</strong></li></ul></li></ul></li><li><p>TextFile格式<br>默认格式，数据不做压缩，磁盘开销大，数据解析开销大。可结合Gzip、Bzip2使用，但使用Gzip这种方式，hive不会对数据进行切分，从而无法对数据进行并行操作</p></li><li><p>Orc格式<br>Orc(Optimized Row Columnar)是Hive 0.11版里引入的新的存储格式<br>如下图所示可以看到每个Orc文件由1个或多个stripe组成，每个stripe250MB大小，这个Stripe实际相当于RowGroup概念，不过大小由4MB-&gt;250MB，这样应该能提升顺序读的吞吐率。每个Stripe里有三部分组成，分别是Index Data，Row Data，Stripe Footer<br>具体解释：</p><ul><li>Index Data：一个轻量级的index，<strong>默认是每隔1W行做一个索引</strong>。这里做的索引应该只是记录某行的各字段在Row Data中的offset</li><li>Row Data：存的是具体的数据，先取部分行，然后对这些行按列进行存储。对每个列进行了编码，分成多个Stream来存储</li><li>Stripe Footer：存的是各个Stream的类型，长度等信息<br><img src="Orc%E6%A0%BC%E5%BC%8F.png" alt="Orc格式"><br>每个文件有一个File Footer，这里面存的是每个Stripe的行数，每个Column的数据类型信息等；每个文件的尾部是一个PostScript，这里面记录了整个文件的压缩类型以及FileFooter的长度信息等。在读取文件时，会seek到文件尾部读PostScript，从里面解析到File Footer长度，再读FileFooter，从里面解析到各个Stripe信息，再读各个Stripe，即从后往前读</li></ul></li><li><p>Parquet格式<br>Parquet是面向分析型业务的列式存储格式，由Twitter和Cloudera合作开发，2015年5月从Apache的孵化器里毕业成为Apache顶级项目<br>Parquet文件是以二进制方式存储的，所以是不可以直接读取的，文件中包括该文件的数据和元数据，因此Parquet格式文件是自解析的<br>通常情况下，在存储Parquet数据的时候会按照Block大小设置行组的大小，由于一般情况下每一个Mapper任务处理数据的最小单位是一个Block，这样可以把每一个行组由一个Mapper任务处理，增大任务执行并行度<br>一个Parquet文件中可以存储多个行组，文件的首位都是该文件的Magic Code，用于校验它是否是一个Parquet文件，Footer length记录了文件元数据的大小，通过该值和文件长度可以计算出元数据的偏移量，文件的元数据中包括每一个行组的元数据信息和该文件存储数据的Schema信息。除了文件中每一个行组的元数据，每一页的开始都会存储该页的元数据，在Parquet中，有三种类型的页：数据页、字典页和索引页。数据页用于存储当前行组中该列的值，字典页存储该列值的编码字典，每一个列块中最多包含一个字典页，索引页用来存储当前行组下该列的索引，目前Parquet中还不支持索引页</p></li><li><p>主流文件存储格式对比实验<br>从存储文件的压缩比和查询速度两个角度对比</p><ul><li><p>存储文件的压缩比测试</p><ul><li><p>TextFile</p><ul><li>创建表(存储数据格式为TEXTFILE,默认)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> log_text (</span><br><span class="line">track_time <span class="keyword">string</span>,</span><br><span class="line"><span class="keyword">url</span> <span class="keyword">string</span>,</span><br><span class="line">session_id <span class="keyword">string</span>,</span><br><span class="line">referer <span class="keyword">string</span>,</span><br><span class="line">ip <span class="keyword">string</span>,</span><br><span class="line">end_user_id <span class="keyword">string</span>,</span><br><span class="line">city_id <span class="keyword">string</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\t'</span></span><br><span class="line"><span class="keyword">stored</span> <span class="keyword">as</span> textfile;</span><br></pre></td></tr></table></figure><ul><li>向表中加载数据</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load data local inpath '/opt/module/data/hive/log.data' into table log_text;</span><br></pre></td></tr></table></figure><ul><li>查看文件大小：dfs -du -h /user/hive/warehouse/log_text;</li></ul></li><li><p>ORC</p><ul><li>创建表(存储格式为ORC)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> log_orc(</span><br><span class="line">track_time <span class="keyword">string</span>,</span><br><span class="line"><span class="keyword">url</span> <span class="keyword">string</span>,</span><br><span class="line">session_id <span class="keyword">string</span>,</span><br><span class="line">referer <span class="keyword">string</span>,</span><br><span class="line">ip <span class="keyword">string</span>,</span><br><span class="line">end_user_id <span class="keyword">string</span>,</span><br><span class="line">city_id <span class="keyword">string</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\t'</span></span><br><span class="line"><span class="keyword">stored</span> <span class="keyword">as</span> orc;</span><br></pre></td></tr></table></figure><ul><li>向表中加载数据(不能直接导入数据)：insert into table log_orc select * from log_text;</li><li>查看文件大小：dfs -du -h /user/hive/warehouse/log_orc;</li></ul></li><li><p>Parquet</p><ul><li>创建表(存储格式为parquet)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> log_parquet(</span><br><span class="line">track_time <span class="keyword">string</span>,</span><br><span class="line"><span class="keyword">url</span> <span class="keyword">string</span>,</span><br><span class="line">session_id <span class="keyword">string</span>,</span><br><span class="line">referer <span class="keyword">string</span>,</span><br><span class="line">ip <span class="keyword">string</span>,</span><br><span class="line">end_user_id <span class="keyword">string</span>,</span><br><span class="line">city_id <span class="keyword">string</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\t'</span></span><br><span class="line"><span class="keyword">stored</span> <span class="keyword">as</span> parquet;</span><br></pre></td></tr></table></figure><ul><li>向表中加载数据(不能直接导入数据)：insert into table log_parquet select * from log_text;</li><li>查看文件大小：dfs -du -h /user/hive/warehouse/log_parquet;</li></ul></li></ul></li><li><p>存储文件的压缩比总结：ORC &gt; Parquet &gt; textFile</p></li><li><p>存储文件的查询速度总结(都运行select * from log_sortType)：<strong>查询速度相近</strong></p></li></ul></li></ul></li><li><p>存储和压缩结合</p><ul><li><p>修改Hadoop集群具有Snappy压缩方式</p><ul><li>查看hadoop本地库支持情况：hadoop checknative</li><li>将编译好的支持Snappy压缩的hadoop源码包解压，将lib/native里面的内容复制到原本的hadoop下的lib/native下替换</li><li>分发集群：xsync native/</li><li>再次查看hadoop本地库支持情况：hadoop checknative</li><li>重新启动hadoop集群和Hive</li></ul></li><li><p>测试存储和压缩</p><ul><li><p>创建一个非压缩的ORC存储方式</p><ul><li>建表语句</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> log_orc_none(</span><br><span class="line">track_time <span class="keyword">string</span>,</span><br><span class="line"><span class="keyword">url</span> <span class="keyword">string</span>,</span><br><span class="line">session_id <span class="keyword">string</span>,</span><br><span class="line">referer <span class="keyword">string</span>,</span><br><span class="line">ip <span class="keyword">string</span>,</span><br><span class="line">end_user_id <span class="keyword">string</span>,</span><br><span class="line">city_id <span class="keyword">string</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\t'</span></span><br><span class="line"><span class="keyword">stored</span> <span class="keyword">as</span> orc tblproperties (<span class="string">"orc.compress"</span>=<span class="string">"NONE"</span>);</span><br></pre></td></tr></table></figure><ul><li>插入数据：insert into table log_orc_none select * from log_text;</li><li>查看文件大小：dfs -du -h /user/hive/warehouse/log_orc_none;</li></ul></li><li><p>创建一个SNAPPY压缩的ORC存储方式</p><ul><li>建表语句</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> log_orc_snappy(</span><br><span class="line">track_time <span class="keyword">string</span>,</span><br><span class="line"><span class="keyword">url</span> <span class="keyword">string</span>,</span><br><span class="line">session_id <span class="keyword">string</span>,</span><br><span class="line">referer <span class="keyword">string</span>,</span><br><span class="line">ip <span class="keyword">string</span>,</span><br><span class="line">end_user_id <span class="keyword">string</span>,</span><br><span class="line">city_id <span class="keyword">string</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\t'</span></span><br><span class="line"><span class="keyword">stored</span> <span class="keyword">as</span> orc tblproperties (<span class="string">"orc.compress"</span>=<span class="string">"SNAPPY"</span>);</span><br></pre></td></tr></table></figure><ul><li>插入数据：insert into table log_orc_snappy select * from log_text;</li><li>查看文件大小：dfs -du -h /user/hive/warehouse/log_orc_snappy;</li></ul></li><li><p>上一节中默认的ORC存储方式，采用默认的ZLIB压缩</p></li></ul></li></ul><p>介绍ORC存储相关信息：<a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+ORC" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/Hive/LanguageManual+ORC</a><br>ORC存储方式的压缩</p><table><thead><tr><th>Key</th><th>Default</th><th>Notes</th></tr></thead><tbody><tr><td>orc.compress</td><td>ZLIB</td><td>high level compression(one of NONE, ZLIB, SNAPPY)</td></tr><tr><td>orc.compress.size</td><td>262,144</td><td>number of bytes in each compression chunk</td></tr><tr><td>orc.stripe.size</td><td>67,108,864</td><td>number of bytes in each stripe</td></tr><tr><td>orc.row.index.stride</td><td>10,000</td><td>number of rows between index entries(must be &gt;= 1000)</td></tr><tr><td>orc.create.index</td><td>true</td><td>whether to create row indexes</td></tr><tr><td>orc.bloom.filter.columns</td><td>“”</td><td>comma separated list of column names for which bloom filter should be created</td></tr><tr><td>orc.bloom.filter.fpp</td><td>0.05</td><td>false positive probability for bloom filter(must &gt; 0.0 and &lt; 1.0)</td></tr></tbody></table><ul><li>存储方式和压缩总结</li></ul><p><strong>在实际的项目开发当中，hive表的数据存储格式一般选择：orc或parquet。压缩方式一般选择snappy，lzo</strong><br>存储方式和压缩方式不是同一个东西，文件后缀名只是人为加上的(压缩后会带有压缩格式的后缀)</p></li></ul><h2 id="企业级调优"><a href="#企业级调优" class="headerlink" title="企业级调优"></a>企业级调优</h2><ul><li>Fetch抓取<br>Fetch抓取是指，Hive中对某些情况的查询可以不必使用MapReduce计算。例如：SELECT * FROM employees；在这种情况下，Hive可以简单地读取employee对应的存储目录下的文件，然后输出查询结果到控制台。<br>在hive-default.xml.template文件中hive.fetch.task.conversion默认是more，老版本hive默认是minimal，该属性修改为more以后，在全局查找、字段查找、limit查找等都不走mapreduce</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.fetch.task.conversion<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>more<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span></span><br><span class="line">    Expects one of [none, minimal, more].</span><br><span class="line">    Some select queries can be converted to single FETCH task minimizing latency.</span><br><span class="line">    Currently the query should be single sourced not having any subquery and should not have</span><br><span class="line">    any aggregations or distincts (which incurs RS), lateral views and joins.</span><br><span class="line">    0. none : disable hive.fetch.task.conversion</span><br><span class="line">    1. minimal : SELECT STAR, FILTER on partition columns, LIMIT only</span><br><span class="line">    2. more  : SELECT, FILTER, LIMIT only (support TABLESAMPLE and virtual columns)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>本地模式<br>大多数的Hadoop Job是需要Hadoop提供的完整的可扩展性来处理大数据集的。不过，有时Hive的输入数据量是非常小的。在这种情况下，为查询触发执行任务消耗的时间可能会比实际job的执行时间要多的多。对于大多数这种情况，Hive可以通过本地模式在单台机器上处理所有的任务。对于小数据集，执行时间可以明显被缩短<br>用户可以通过设置hive.exec.mode.local.auto的值为true，来让Hive在适当的时候自动启动这个优化</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 开启本地mr</span></span><br><span class="line">set hive.exec.mode.local.auto=true;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置<span class="built_in">local</span> mr的最大输入数据量,当输入数据量小于这个值时采用<span class="built_in">local</span> mr的方式,默认为134217728,即128M</span></span><br><span class="line">set hive.exec.mode.local.auto.inputbytes.max=50000000;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置<span class="built_in">local</span> mr的最大输入文件个数,当输入文件个数小于这个值时采用<span class="built_in">local</span> mr的方式,默认为4</span></span><br><span class="line">set hive.exec.mode.local.auto.input.files.max=10;</span><br></pre></td></tr></table></figure><ul><li><p>表的优化</p><ul><li>小表、大表Join<br>将key相对分散，并且数据量小的表放在join的左边，这样可以有效减少内存溢出错误发生的几率；再进一步，可以使用map join让小的维度表(1000条以下的记录条数)先进内存。在map端完成reduce</li></ul><p><strong>实际测试发现：新版的hive已经对小表JOIN大表和大表JOIN小表进行了优化。小表放在左边和右边已经没有明显区别</strong></p><ul><li><p>大表Join大表</p><ul><li><p>空Key过滤<br>有时join超时是因为某些key对应的数据太多，而相同key对应的数据都会发送到相同的reducer上，从而导致内存不够。此时我们应该仔细分析这些异常的key，很多情况下，这些key对应的数据是异常数据，我们需要在SQL语句中进行过滤。例如key对应的字段为空，操作如下：</p></li><li><p>空Key转换<br>有时虽然某个key为空对应的数据很多，但是相应的数据不是异常数据，必须要包含在join的结果中，此时我们可以表a中key为空的字段赋一个随机的值，使得数据随机均匀地分不到不同的reducer上。例如</p></li></ul></li><li><p>MapJoin<br>如果不指定MapJoin或者不符合MapJoin的条件，那么Hive解析器会将Join操作转换成Common Join，即：在Reduce阶段完成join。容易发生数据倾斜。可以用MapJoin把小表全部加载到内存在map端进行join，避免reducer处理</p><ul><li>开启MapJoin参数设置<ul><li>设置自动选择MapJoin：set hive.auto.convert.join = true;(默认true)</li><li>大表小表的阈值设置：set hive.mapjoin.smalltable.filesize=25000000;(默认25MB)</li></ul></li><li>MapJoin工作机制<br><img src="MapJoin%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6.png" alt="MapJoin工作机制"></li></ul></li><li><p>Group By<br>默认情况下，Map阶段同一Key数据分发给一个reduce，当一个key数据过大时就倾斜了<br>并不是所有的聚合操作都需要在Reduce端完成，很多聚合操作都可以先在Map端进行部分聚合，最后在Reduce端得出最终结果</p><ul><li>开启Map端聚合参数设置<ul><li>设置是否在Map端进行聚合：set hive.map.aggr = true;(默认为true)</li><li>设置在Map端进行聚合操作的条目数据：set hive.groupby.mapaggr.checkinterval = 100000;</li><li>设置有数据倾斜的时候是否进行负载均衡：set hive.groupby.skewindata = true;(默认为false)</li></ul></li></ul><p><strong>当选项设定为true，生成的查询计划会有两个MR Job</strong>。第一个MR Job中，Map的输出结果会随机分布到Reduce中，每个Reduce做部分聚合操作，并输出结果，<strong>这样处理的结果是相同的Group By Key有可能被分发到不同的Reduce中</strong>，从而达到负载均衡的目的；第二个MR Job再根据预处理的数据结果按照Group By Key分布到Reduce中(这个过程可以保证相同的Group By Key被分布到同一个Reduce中)，最后完成最终的聚合操作</p></li><li><p>Count(Distinct)去重统计<br>数据量小的时候无所谓，数据量大的情况下，由于COUNT DISTINCT操作需要用一个Reduce Task来完成，这一个Reduce需要处理的数据量太大，就会导致整个Job很难完成，一般COUNT DISTINCT使用先GROUP BY再COUNT的方式替换(<strong>虽然会多用一个Job来完成，但在数据量大的情况下，这个绝对是值得的</strong>)<br>实际操作：</p><ul><li>创建一张大表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> bigtable(<span class="keyword">id</span> <span class="built_in">bigint</span>, <span class="built_in">time</span> <span class="built_in">bigint</span>, uid <span class="keyword">string</span>, keyword</span><br><span class="line"><span class="keyword">string</span>, url_rank <span class="built_in">int</span>, click_num <span class="built_in">int</span>, click_url <span class="keyword">string</span>) <span class="keyword">row</span> <span class="keyword">format</span></span><br><span class="line"><span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\t'</span>;</span><br></pre></td></tr></table></figure><ul><li>加载数据</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">load data local inpath '/opt/module/data/hive/bigtable' into table</span><br><span class="line">bigtable;</span><br></pre></td></tr></table></figure><ul><li>设置reduce个数为5：set mapreduce.job.reduces = 5;</li><li>执行去重id查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">id</span>) <span class="keyword">from</span> bigtable;</span><br></pre></td></tr></table></figure><ul><li>采用Group by去重id</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">id</span>) <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> bigtable <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">id</span>) a;</span><br></pre></td></tr></table></figure></li><li><p>笛卡尔积<br>尽量避免笛卡尔积，join的时候不加on条件，或者无效的on条件，Hive只能使用1个reducer来完成笛卡尔积</p></li><li><p>行列过滤<br>列处理：在SELECT中，只拿需要的列，如果有，尽量使用分区过滤，少用SELECT *<br>行处理：在分区剪裁中，当使用外关联时，如果将副表的过滤条件写在Where后面，那么就会先全表关联，之后再过滤行处理实际操作：</p><ul><li>测试先关联两张表，再用where条件过滤</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> o.id <span class="keyword">from</span> bigtable b</span><br><span class="line"><span class="keyword">join</span> ori o <span class="keyword">on</span> o.id = b.id</span><br><span class="line"><span class="keyword">where</span> o.id &lt;= <span class="number">10</span>;</span><br></pre></td></tr></table></figure><ul><li>通过子查询后，在关联表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> b.id <span class="keyword">from</span> bigtable b</span><br><span class="line"><span class="keyword">join</span> (<span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> ori <span class="keyword">where</span> <span class="keyword">id</span> &lt;= <span class="number">10</span> ) o <span class="keyword">on</span> b.id = o.id;</span><br></pre></td></tr></table></figure></li><li><p>动态分区调整<br>关系型数据库中，对分区表Insert数据时候，数据库自动会根据分区字段的值，将数据插入到相应的分区中，Hive中也提供了类似的机制，即动态分区(Dynamic Partition)，只不过，使用Hive的动态分区，需要进行相应的配置</p><ul><li>开启动态分区参数设置<ul><li>开启动态分区功能(默认开启,为true)：hive.exec.dynamic.partition</li><li>设置为非严格模式(动态分区的模式，默认strict，表示必须指定至少一个分区为静态分区，nonstrict模式表示允许所有的分区字段都可以使用动态分区)：hive.exec.dynamic.partition.mode</li><li>在所有执行MR的节点上最大一共可以创建动态分区的个数(默认为1000)：hive.exec.max.dynamic.partitions</li><li>在每个执行MR的节点上，最大可以创建多少个动态分区。该参数需要根据实际的数据来设定。比如：源数据中包含了一年的数据，即day字段有365个值，那么该参数就需要设置成大于365，如果使用默认值100，则会报错：hive.exec.max.dynamic.partitions.pernode</li><li>整个MR Job中，最大可以创建多少个HDFS文件(默认为100000)：hive.exec.max.created.files</li><li>当有空分区生成时，是否抛出异常。一般不需要设置(默认为false)：hive.error.on.empty.partition</li></ul></li><li>案例实操</li></ul></li><li><p>分桶：详见之前介绍</p></li><li><p>分区：详见之前介绍</p></li></ul></li><li><p>数据倾斜</p><ul><li>合理设置Map数<ul><li>通常情况下，作业会通过input的目录产生一个或者多个map任务<br>主要的决定因素有：input的文件总个数，input的文件大小，集群设置的文件块大小</li><li>是不是map数越多越好？<br>答案是否定的。如果一个任务有很多小文件(远远小于块大小128m)，则每个小文件也会被当做一个块，用一个map任务来完成，而一个map任务启动和初始化的时间远远大于逻辑处理的时间，就会造成很大的资源浪费。而且，同时可执行的map数是受限的</li><li>是不是保证每个map处理接近128m的文件块，就高枕无忧了？<br>答案也是不一定。比如有一个127m的文件，正常会用一个map去完成，但这个文件只有一个或者两个小字段，却有几千万的记录，如果map处理的逻辑比较复杂，用一个map任务去做，肯定也比较耗时<br>针对上面的问题2和3，我们需要采取两种方式来解决：即减少map数和增加map数</li></ul></li><li>小文件进行合并<br>在map执行前合并小文件，减少map数；CombineHiveInputFormat具有对小文件进行合并的功能(系统默认的格式)。HiveInputFormat没有对小文件合并功能：hive.input.format</li><li>复杂文件增加Map数<br>当input的文件都很大，任务逻辑复杂，map执行非常慢的时候，可以考虑增加Map数，来使得每个map处理的数据量减少，从而提高任务的执行效率<br>增加map的方法为：根据computeSliteSize(Math.max(minSize,Math.min(maxSize,blocksize))) = blocksize = 128M公式，调整maxSize最大值。让maxSize最大值低于blocksize就可以增加map的个数<br>实际操作<ul><li>执行查询：select count(*) from emp;</li><li>设置最大切片值为100个字节：set mapreduce.input.fileinputformat.split.maxsize=100;</li><li>再次查询</li></ul></li><li>合理设置Reduce数<ul><li>调整reduce个数的方法一<ul><li>每个Reduce处理的数据量默认是256MB：hive.exec.reducers.bytes.per.reducer</li><li>每个任务最大的reduce数，默认为1009：hive.exec.reducers.max=1009</li><li>计算reducer数的公式：N=min(参数2，总输入数据量/参数1)</li></ul></li><li>调整reduce个数的方法二<ul><li>在hadoop的mapred-default.xml文件中修改设置每个job的Reduce个数</li><li>在Hive Cli中设置：set mapreduce.job.reduces = 15;</li></ul></li><li>reduce个数并不是越多越好<ul><li>过多的启动和初始化reduce也会消耗时间和资源</li><li>另外，有多少个reduce，就会有多少个输出文件，如果生成了很多个小文件，那么如果这些小文件作为下一个任务的输入，则也会出现小文件过多的问题</li></ul></li><li>在设置reduce个数的时候也需要考虑这两个原则：<ul><li><strong>处理大数据量利用合适的reduce数</strong></li><li><strong>使单个reduce任务处理数据量大小要合适</strong></li></ul></li></ul></li></ul></li><li><p>并行执行<br>Hive会将一个查询转化成一个或者多个阶段。这样的阶段可以是MapReduce阶段、抽样阶段、合并阶段、limit阶段。或者Hive执行过程中可能需要的其他阶段。默认情况下，Hive一次只会执行一个阶段。不过，某个特定的job可能包含众多的阶段，而这些阶段可能并非完全互相依赖的，也就是说有些阶段是可以并行执行的，这样可能使得整个job的执行时间缩短。如果有更多的阶段可以并行执行，那么job可能就越快完成<br>通过设置参数hive.exec.parallel值为true，就可以开启并发执行。不过，在共享集群中，需要注意下，如果job中并行阶段增多，那么集群利用率就会增加。当然，得是在系统资源比较空闲的时候才有优势，否则，没资源，并行也起不来<br>参数设置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打开任务并行执行</span></span><br><span class="line">set hive.exec.parallel=true;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 同一个sql允许最大并行度,默认为8</span></span><br><span class="line">set hive.exec.parallel.thread.number=16;</span><br></pre></td></tr></table></figure></li><li><p>严格模式<br>Hive提供了一个严格模式，可以防止用户执行那些可能意想不到的不好的影响的查询<br>通过设置属性hive.mapred.mode值为默认是非严格模式nonstrict。开启严格模式需要修改hive.mapred.mode值为strict，开启严格模式可以禁止3种类型的查询</p><ul><li>对于分区表，<strong>除非where语句中含有分区字段过滤条件来限制范围，否则不允许执行</strong>。换句话说，就是用户不允许扫描所有分区。进行这个限制的原因是，通常分区表都拥有非常大的数据集，而且数据增加迅速。没有进行分区限制的查询可能会消耗令人不可接受的巨大资源来处理这个表</li><li><strong>对于使用了order by语句的查询，要求必须使用limit语句</strong>。因为order by为了执行排序过程会将所有的结果数据分发到同一个Reducer中进行处理，强制要求用户增加这个LIMIT语句可以防止Reducer额外执行很长一段时间</li><li><strong>限制笛卡尔积的查询</strong>。对关系型数据库非常了解的用户可能期望在执行JOIN查询的时候不使用ON语句而是使用where语句，这样关系数据库的执行优化器就可以高效地将WHERE语句转化成那个ON语句。不幸的是，Hive并不会执行这种优化，因此，如果表足够大，那么这个查询就会出现不可控的情况</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.mapred.mode<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>strict<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span></span><br><span class="line">    The mode in which the Hive operations are being performed.</span><br><span class="line">    In strict mode, some risky queries are not allowed to run. They include:</span><br><span class="line">      Cartesian Product.</span><br><span class="line">      No partition being picked up for a query.</span><br><span class="line">      Comparing bigints and strings.</span><br><span class="line">      Comparing bigints and doubles.</span><br><span class="line">      Orderby without limit.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>JVM重用<br>JVM重用是Hadoop调优参数的内容，其对Hive的性能具有非常大的影响，特别是对于很难避免小文件的场景或task特别多的场景，这类场景大多数执行时间都很短<br>Hadoop的默认配置通常是使用派生JVM来执行map和Reduce任务的。这时JVM的启动过程可能会造成相当大的开销，尤其是执行的job包含有成百上千task任务的情况。JVM重用可以使得JVM实例在同一个job中重新使用N次。N的值可以在Hadoop的mapred-site.xml文件中进行配置。通常在10-20之间，具体多少需要根据具体业务场景测试得出</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.job.jvm.numtasks<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>10<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>How many tasks to run per jvm. If set to -1, there is</span><br><span class="line">  no limit.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个功能的缺点是，开启JVM重用将一直占用使用到的task插槽，以便进行重用，直到任务完成后才能释放。如果某个“不平衡的”job中有某几个reduce task执行的时间要比其他Reduce task消耗的时间多的多的话，那么保留的插槽就会一直空闲着却无法被其他的job使用，直到所有的task都结束了才会释放</p></li><li><p>推测执行<br>在分布式集群环境下，因为程序Bug(包括Hadoop本身的bug)，负载不均衡或者资源分布不均等原因，会造成同一个作业的多个任务之间运行速度不一致，有些任务的运行速度可能明显慢于其他任务(比如一个作业的某个任务进度只有50%，而其他所有任务已经运行完毕)，则这些任务会拖慢作业的整体执行进度。为了避免这种情况发生，Hadoop采用了推测执行(Speculative Execution)机制，它根据一定的法则推测出“拖后腿”的任务，并为这样的任务启动一个备份任务，让该任务与原始任务同时处理同一份数据，并最终选用最先成功运行完成任务的计算结果作为最终结果</p><p>设置开启推测执行参数，Hadoop的mapred-site.xml文件中进行配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.map.speculative<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>If true, then multiple instances of some map tasks</span><br><span class="line">              may be executed in parallel.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.reduce.speculative<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>If true, then multiple instances of some reduce tasks</span><br><span class="line">              may be executed in parallel.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>hive本身也提供了配置项来控制reduce-side的推测执行：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.mapred.reduce.tasks.speculative.execution<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Whether speculative execution for reducers should be turned on. <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>关于调优这些推测执行变量，还很难给一个具体的建议。<strong>如果用户对于运行时的偏差非常敏感的话，那么可以将这些功能关闭掉</strong>。如果用户因为输入数据量很大而需要执行长时间的map或者Reduce task的话，那么启动推测执行造成的浪费是非常巨大</p></li><li><p>压缩：详见之前介绍</p></li><li><p>执行计划(Explain)</p><ul><li>基本语法：EXPLAIN [EXTENDED | DEPENDENCY | AUTHORIZATION] query</li><li>案例实操<ul><li>查看执行计划：explain select deptno, avg(sal) avg_sal from emp group by deptno;</li><li>查看详细执行计划：explain extended select deptno, avg(sal) avg_sal from emp group by deptno;</li></ul></li></ul></li></ul><h2 id="谷粒影音Hive实战"><a href="#谷粒影音Hive实战" class="headerlink" title="谷粒影音Hive实战"></a>谷粒影音Hive实战</h2><ul><li><p>需求描述<br>统计硅谷影音视频网站的常规指标，各种TopN指标：</p><ul><li>统计视频观看数Top10</li><li>统计视频类别热度Top10</li><li>统计出视频观看数Top20所属类别以及类别包含Top20视频的个数</li><li>统计视频观看数Top50所关联视频的所属类别Rank</li><li>统计每个类别中的视频热度Top10/统计每个类别中视频流量Top10/统计每个类别视频观看数Top10</li><li>统计上传视频最多的用户Top10以及他们上传的观看次数在前20的视频</li></ul></li><li><p>项目</p><ul><li><p>数据结构</p><ul><li><p>视频表</p><table><thead><tr><th>字段</th><th>备注</th><th>详细描述</th></tr></thead><tbody><tr><td>videoId</td><td>视频唯一id</td><td>11位字符串</td></tr><tr><td>uploader</td><td>视频上传者</td><td>上传视频的用户名String</td></tr><tr><td>age</td><td>视频年龄</td><td>视频在平台上的整数天</td></tr><tr><td>category</td><td>视频类别</td><td>上传视频指定的视频分类</td></tr><tr><td>length</td><td>视频长度</td><td>整形数字标识的视频长度</td></tr><tr><td>views</td><td>观看次数</td><td>视频被浏览的次数</td></tr><tr><td>rate</td><td>视频评分</td><td>满分5分</td></tr><tr><td>ratings</td><td>流量</td><td>视频的流量,整型数字</td></tr><tr><td>conments</td><td>评论数</td><td>一个视频的整数评论数</td></tr><tr><td>relatedIds</td><td>相关视频id</td><td>相关视频的id,最多20个</td></tr></tbody></table></li><li><p>用户表</p><table><thead><tr><th>字段</th><th>备注</th><th>字符类型</th></tr></thead><tbody><tr><td>uploader</td><td>上传者用户名</td><td>string</td></tr><tr><td>videos</td><td>上传视频数</td><td>int</td></tr><tr><td>friends</td><td>朋友数量</td><td>int</td></tr></tbody></table></li></ul></li><li><p>ETL(Extraction-Transformation-Loading,数据抽取、转换和加载)原始数据<br>通过观察原始数据形式，可以发现，视频可以有多个所属分类，每个所属分类用&amp;符号分割，且分割的两边有空格字符，同时相关视频也是可以有多个元素，多个相关视频又用’\t’进行分割。为了分析数据时方便对存在多个子元素的数据进行操作，我们首先进行数据重组清洗操作。即：将所有的类别用’&amp;’分割，同时去掉两边空格，多个相关视频id也使用’&amp;’进行分割</p><ul><li><p>ETLUtil清洗数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> oriStr 原始数据</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> 过滤后的数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">etlStr</span><span class="params">(String oriStr)</span> </span>&#123;</span><br><span class="line">  StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">  <span class="comment">// 1、切割字符串</span></span><br><span class="line">  String[] fields = oriStr.split(<span class="string">"\t"</span>);</span><br><span class="line">  <span class="comment">// 2、过滤字段长度</span></span><br><span class="line">  <span class="keyword">if</span> (fields.length &lt; <span class="number">9</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  <span class="comment">// 3、去掉类别字段中的空格</span></span><br><span class="line">  fields[<span class="number">3</span>] = fields[<span class="number">3</span>].replaceAll(<span class="string">" "</span>, <span class="string">""</span>);</span><br><span class="line">  <span class="comment">// 4、修改相关视频ID字段的分隔符,把'\t'替换为'&amp;'</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fields.length; i++) &#123;</span><br><span class="line">    <span class="comment">// 非相关id</span></span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">9</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i == fields.length - <span class="number">1</span>) sb.append(fields[i]);</span><br><span class="line">      <span class="keyword">else</span> sb.append(fields[i]).append(<span class="string">'\t'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 相关id</span></span><br><span class="line">      <span class="keyword">if</span> (i == fields.length - <span class="number">1</span>) sb.append(fields[i]);</span><br><span class="line">      <span class="keyword">else</span> sb.append(fields[i]).append(<span class="string">'&amp;'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 5、返回结果</span></span><br><span class="line">  <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ETL之Mapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出写NullWritable,不需要排序,节省资源</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ETLMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">NullWritable</span>, <span class="title">Text</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// 定义全局value</span></span><br><span class="line">  <span class="keyword">private</span> Text v = <span class="keyword">new</span> Text();</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// 1、获取数据</span></span><br><span class="line">    String oriStr = value.toString();</span><br><span class="line">    <span class="comment">// 2、过滤数据</span></span><br><span class="line">    String eltStr = ETLUtil.etlStr(oriStr);</span><br><span class="line">    <span class="comment">// 3、写出</span></span><br><span class="line">    <span class="keyword">if</span> (eltStr == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    v.set(eltStr);</span><br><span class="line">    context.write(NullWritable.get(), v);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ETL之Driver</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 官方推荐采用继承Tool方式</span></span><br><span class="line"><span class="comment">// 在ToolRunner中帮做了GenericOptionsParser</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ETLDriver</span> <span class="keyword">implements</span> <span class="title">Tool</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Configuration conf;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">run</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 1、获取job对象</span></span><br><span class="line">    Job job = Job.getInstance(conf);</span><br><span class="line">    <span class="comment">// 2、设置jar包路径</span></span><br><span class="line">    job.setJarByClass(ETLDriver<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">// 3、设置Mapper类和输出KV类型</span></span><br><span class="line">    job.setMapperClass(ETLMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    job.setMapOutputKeyClass(NullWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    job.setMapOutputValueClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">// 4、设置最终输出的KV类型</span></span><br><span class="line">    job.setOutputKeyClass(NullWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    job.setOutputValueClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">// 5、设置输入输出的路径</span></span><br><span class="line">    FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">    FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">    <span class="comment">// 6、提交任务</span></span><br><span class="line">    <span class="keyword">boolean</span> result = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span> result ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConf</span><span class="params">(Configuration conf)</span> </span>&#123; <span class="keyword">this</span>.conf = conf; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Configuration <span class="title">getConf</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> conf; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 构建配置信息</span></span><br><span class="line">    Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">int</span> result = ToolRunner.run(conf, <span class="keyword">new</span> ETLDriver(), args);</span><br><span class="line">      System.out.println(<span class="string">"result = "</span> + result);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>执行ETL jar包(经过maven的package,然后扔到集群上)：bin/hadoop jar /opt/module/data/hive/guli-vedio-1.0-SNAPSHOT.jar com.xiong.mr.ETLDriver /gulivideo/video/2008/0222 /guliOutput</p></li></ul></li></ul></li><li><p>准备工作</p><ul><li><p>创建表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- gulivideo_ori</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> gulivideo_ori(</span><br><span class="line">  videoId <span class="keyword">string</span>,</span><br><span class="line">  uploader <span class="keyword">string</span>,</span><br><span class="line">  age <span class="built_in">int</span>,</span><br><span class="line">  <span class="keyword">category</span> <span class="built_in">array</span>&lt;<span class="keyword">string</span>&gt;,</span><br><span class="line">  <span class="keyword">length</span> <span class="built_in">int</span>,</span><br><span class="line">  views <span class="built_in">int</span>,</span><br><span class="line">  rate <span class="built_in">float</span>,</span><br><span class="line">  ratings <span class="built_in">int</span>,</span><br><span class="line">  comments <span class="built_in">int</span>,</span><br><span class="line">  relatedId <span class="built_in">array</span>&lt;<span class="keyword">string</span>&gt;)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span></span><br><span class="line"><span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">"\t"</span></span><br><span class="line">collection items <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">"&amp;"</span></span><br><span class="line"><span class="keyword">stored</span> <span class="keyword">as</span> textfile;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- gulivideo_user_ori</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> gulivideo_user_ori(</span><br><span class="line">  uploader <span class="keyword">string</span>,</span><br><span class="line">  videos <span class="built_in">int</span>,</span><br><span class="line">  friends <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span></span><br><span class="line"><span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">"\t"</span></span><br><span class="line"><span class="keyword">stored</span> <span class="keyword">as</span> textfile;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- gulivideo_orc</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> gulivideo_orc(</span><br><span class="line">  videoId <span class="keyword">string</span>,</span><br><span class="line">  uploader <span class="keyword">string</span>,</span><br><span class="line">  age <span class="built_in">int</span>,</span><br><span class="line">  <span class="keyword">category</span> <span class="built_in">array</span>&lt;<span class="keyword">string</span>&gt;,</span><br><span class="line">  <span class="keyword">length</span> <span class="built_in">int</span>,</span><br><span class="line">  views <span class="built_in">int</span>,</span><br><span class="line">  rate <span class="built_in">float</span>,</span><br><span class="line">  ratings <span class="built_in">int</span>,</span><br><span class="line">  comments <span class="built_in">int</span>,</span><br><span class="line">  relatedId <span class="built_in">array</span>&lt;<span class="keyword">string</span>&gt;)</span><br><span class="line">clustered <span class="keyword">by</span> (uploader) <span class="keyword">into</span> <span class="number">8</span> buckets</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">"\t"</span></span><br><span class="line">collection items <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">"&amp;"</span></span><br><span class="line"><span class="keyword">stored</span> <span class="keyword">as</span> orc;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- gulivideo_user_orc</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> gulivideo_user_orc(</span><br><span class="line">  uploader <span class="keyword">string</span>,</span><br><span class="line">  videos <span class="built_in">int</span>,</span><br><span class="line">  friends <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span></span><br><span class="line"><span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">"\t"</span></span><br><span class="line"><span class="keyword">stored</span> <span class="keyword">as</span> orc;</span><br></pre></td></tr></table></figure></li><li><p>导入ETL后的数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> gulivideo_ori</span></span><br><span class="line">load data inpath "/guliOutput" into table gulivideo_ori;</span><br><span class="line"><span class="meta">#</span><span class="bash"> gulivideo_user_ori</span></span><br><span class="line">load data inpath "/gulivideo/user/2008/0903" into table gulivideo_user_ori;</span><br><span class="line"><span class="meta">#</span><span class="bash"> gulivideo_orc</span></span><br><span class="line">insert into table gulivideo_orc select * from gulivideo_ori;</span><br><span class="line"><span class="meta">#</span><span class="bash"> gulivideo_user_orc</span></span><br><span class="line">insert into table gulivideo_user_orc select * from gulivideo_user_ori;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>业务分析</p><ul><li><p>统计视频观看数Top10</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">  videoId,</span><br><span class="line">  views</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  gulivideo_orc</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">  views <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure></li><li><p>统计视频类别热度Top10(某类视频的个数作为视频类别热度)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1、使用UDTF函数将类别炸裂</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  videoId,</span><br><span class="line">  category_name</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  gulivideo_orc</span><br><span class="line"><span class="keyword">lateral</span> <span class="keyword">view</span> <span class="keyword">explode</span>(<span class="keyword">category</span>) tmp_category <span class="keyword">as</span> category_name;t1</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2、按照category_name进行分组,统计每种类别视频的总数,同时按照该总数进行倒序排名,取前10</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  category_name,</span><br><span class="line">  <span class="keyword">count</span>(*) category_count</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  t1</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">  category_name</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">  category_count <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 最终SQL</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  category_name,</span><br><span class="line">  <span class="keyword">count</span>(*) category_count</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">      videoId,</span><br><span class="line">      category_name</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">      gulivideo_orc</span><br><span class="line">      <span class="keyword">lateral</span> <span class="keyword">view</span> <span class="keyword">explode</span>(<span class="keyword">category</span>) tmp_category <span class="keyword">as</span> category_name</span><br><span class="line">  )t1</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">  category_name</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">  category_count <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure></li><li><p>统计出视频观看数Top20所属类别以及类别包含Top20视频的个数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1、统计视频观看数Top20</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  videoId,</span><br><span class="line">  views,</span><br><span class="line">  <span class="keyword">category</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  gulivideo_orc</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">  views <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">20</span>;t1</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2、对t1表中的category进行炸裂</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  videoId,</span><br><span class="line">  category_name</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  t1</span><br><span class="line"><span class="keyword">lateral</span> <span class="keyword">view</span> <span class="keyword">explode</span>(<span class="keyword">category</span>) tmp_category <span class="keyword">as</span> category_name;t2</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3、对t2表进行分组(category_name)求和(总数)</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  category_name,</span><br><span class="line">  <span class="keyword">count</span>(*) category_count</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  t2</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">  category_name</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">  category_count <span class="keyword">desc</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 最终SQL</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  category_name,</span><br><span class="line">  <span class="keyword">count</span>(*) category_count</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">      videoId,</span><br><span class="line">      category_name</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">      (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">          videoId,</span><br><span class="line">          views,</span><br><span class="line">          <span class="keyword">category</span></span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">          gulivideo_orc</span><br><span class="line">        <span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">          views <span class="keyword">desc</span></span><br><span class="line">        <span class="keyword">limit</span> <span class="number">20</span></span><br><span class="line">      )t1</span><br><span class="line">    <span class="keyword">lateral</span> <span class="keyword">view</span> <span class="keyword">explode</span>(<span class="keyword">category</span>) tmp_category <span class="keyword">as</span> category_name</span><br><span class="line">  )t2</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">  category_name</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">  category_count <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure></li><li><p>统计视频观看数Top50所关联视频的所属类别Rank</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1、统计视频观看数Top50</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  relatedId,</span><br><span class="line">  views</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  gulivideo_orc</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">  views <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">50</span>;t1</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2、对t1表中的relatedId进行炸裂并去重</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  related_id</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  t1</span><br><span class="line"><span class="keyword">lateral</span> <span class="keyword">view</span> <span class="keyword">explode</span>(relatedId) tmp_related <span class="keyword">as</span> related_id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">  related_id;t2</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3、取出观看数前50视频关联ID视频的类别</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  <span class="keyword">category</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  t2</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">  gulivideo_orc orc</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">  t2.related_id = orc.videoId;t3</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4、对t3表中的category进行炸裂</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  <span class="keyword">explode</span>(<span class="keyword">category</span>) category_name</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  t3;t4</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 5、分组(类别)求和(总数)</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  category_name,</span><br><span class="line">  <span class="keyword">count</span>(*) category_count</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  t4</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">  category_name</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">  category_count <span class="keyword">desc</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 最终SQL</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  category_name,</span><br><span class="line">  <span class="keyword">count</span>(*) category_count</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">      <span class="keyword">explode</span>(<span class="keyword">category</span>) category_name</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">      (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">          <span class="keyword">category</span></span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">          (</span><br><span class="line">            <span class="keyword">select</span></span><br><span class="line">              related_id</span><br><span class="line">            <span class="keyword">from</span></span><br><span class="line">              (</span><br><span class="line">                <span class="keyword">select</span></span><br><span class="line">                  relatedId,</span><br><span class="line">                  views</span><br><span class="line">                <span class="keyword">from</span></span><br><span class="line">                  gulivideo_orc</span><br><span class="line">                <span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">                  views <span class="keyword">desc</span></span><br><span class="line">                <span class="keyword">limit</span> <span class="number">50</span></span><br><span class="line">              )t1</span><br><span class="line">            <span class="keyword">lateral</span> <span class="keyword">view</span> <span class="keyword">explode</span>(relatedId) tmp_related <span class="keyword">as</span> related_id</span><br><span class="line">            <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">              related_id</span><br><span class="line">          )t2</span><br><span class="line">        <span class="keyword">join</span></span><br><span class="line">          gulivideo_orc orc</span><br><span class="line">        <span class="keyword">on</span></span><br><span class="line">          t2.related_id = orc.videoId</span><br><span class="line">      )t3</span><br><span class="line">  )t4</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    category_name</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">    category_count <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure></li><li><p>统计每个类别中的视频热度Top10/统计每个类别中视频流量Top10/统计每个类别视频观看数Top10</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1、给每一种类别根据视频观看数添加rank值(倒序)</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  categoryId,</span><br><span class="line">  videoId,</span><br><span class="line">  views,</span><br><span class="line">  <span class="keyword">rank</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> categoryId <span class="keyword">order</span> <span class="keyword">by</span> views <span class="keyword">desc</span>) rk</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  gulivideo_category;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2、过滤前十</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  categoryId,</span><br><span class="line">  videoId,</span><br><span class="line">  views</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">      categoryId,</span><br><span class="line">      videoId,</span><br><span class="line">      views,</span><br><span class="line">      <span class="keyword">rank</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> categoryId <span class="keyword">order</span> <span class="keyword">by</span> views <span class="keyword">desc</span>) rk</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">      gulivideo_category</span><br><span class="line">  )t1</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  rk &lt;= <span class="number">10</span>;</span><br></pre></td></tr></table></figure></li><li><p>统计上传视频最多的用户Top10以及他们上传的观看次数在前20的视频</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1、统计上传视频最多的用户Top10</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  uploader,</span><br><span class="line">  videos</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  gulivideo_user_orc</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">  videos <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">10</span>;t1</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2、取出这10个人上传的所有视频,按照观看次数进行排名,取前20</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  video.videoId,</span><br><span class="line">  video.views</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  t1</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">  gulivideo_orc video</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">  t1.uploader = video.uploader</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">  views <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 最终SQL</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  video.videoId,</span><br><span class="line">  video.views</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">      uploader,</span><br><span class="line">      videos</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">      gulivideo_user_orc</span><br><span class="line">    <span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">      videos <span class="keyword">desc</span></span><br><span class="line">    <span class="keyword">limit</span> <span class="number">10</span></span><br><span class="line">  )t1</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">  gulivideo_orc video</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">  t1.uploader = video.uploader</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">  views <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">20</span>;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="常见错误及解决方案"><a href="#常见错误及解决方案" class="headerlink" title="常见错误及解决方案"></a>常见错误及解决方案</h2><ul><li><p>启动MR任务报错：virtual memory used. Killing container(虚拟内存不足)<br>修改hadoop的配置，修改检查虚拟内存的属性为false</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- yarn-site.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.vmem-check-enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BigData </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper</title>
      <link href="/2020/06/26/BigData/Zookeeper/"/>
      <url>/2020/06/26/BigData/Zookeeper/</url>
      
        <content type="html"><![CDATA[<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><ul><li><a href="#Zookeeper入门">Zookeeper入门</a></li><li><a href="#Zookeeper安装">Zookeeper安装</a></li><li><a href="#Zookeeper实战">Zookeeper实战</a></li><li><a href="#Zookeeper内部原理">Zookeeper内部原理</a></li><li><a href="#面试真题">面试真题</a></li></ul><a id="more"></a><h2 id="Zookeeper入门"><a href="#Zookeeper入门" class="headerlink" title="Zookeeper入门"></a>Zookeeper入门</h2><ul><li><p>概述<br>Zookeeper是一个开源的分布式的，为分布式应用提供协调服务的Apache项目<br><img src="Zookeeper%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6.png" alt="Zookeeper工作机制"></p></li><li><p>特点<br><img src="Zookeeper%E7%89%B9%E7%82%B9.png" alt="Zookeeper特点"></p></li><li><p>数据结构<br><img src="Zookeeper%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png" alt="Zookeeper数据结构"></p></li><li><p>应用场景<br>提供的服务包括：统一命名服务、统一配置管理、统一集群管理、服务器节点动态上下线、软负载均衡等</p><ul><li>统一命名服务<br><img src="Zookeeper%E7%BB%9F%E4%B8%80%E5%91%BD%E5%90%8D%E6%9C%8D%E5%8A%A1.png" alt="Zookeeper统一命名服务"></li><li>统一配置管理<br><img src="Zookeeper%E7%BB%9F%E4%B8%80%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86.png" alt="Zookeeper统一配置管理"></li><li>统一集群管理<br><img src="Zookeeper%E7%BB%9F%E4%B8%80%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86.png" alt="Zookeeper统一集群管理"></li><li>服务器节点动态上下线<br><img src="Zookeeper%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8A%A8%E6%80%81%E4%B8%8A%E4%B8%8B%E7%BA%BF.png" alt="Zookeeper服务器动态上下线"></li><li>软负载均衡<br><img src="Zookeeper%E8%BD%AF%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1.png" alt="Zookeeper软负载均衡"></li></ul></li><li><p>下载地址：官网地址——<a href="https://zookeeper.apache.org" target="_blank" rel="noopener">https://zookeeper.apache.org</a></p></li></ul><h2 id="Zookeeper安装"><a href="#Zookeeper安装" class="headerlink" title="Zookeeper安装"></a>Zookeeper安装</h2><ul><li><p>本地模式安装部署</p><ul><li>安装前准备<ul><li>安装jdk</li><li>拷贝Zookeeper安装包到Linux系统下</li><li>解压到指定目录：tar -zxvf apache-zookeeper-3.6.1-bin.tar.gz -C /opt/module/</li></ul></li><li>配置修改<ul><li>修改配置文件(conf目录下)：mv zoo_sample.cfg zoo.cfg</li><li>打开zoo.cfg文件，修改dataDir路径：dataDir=/opt/module/zookeeper-3.6.1/zkData</li><li>新建zkData目录(不同于Hadoop目录不能存在)：mkdir zkData</li></ul></li><li>操作Zookeeper<ul><li>启动Zookeeper Server(服务端)：bin/zkServer.sh start</li><li>查看进程是否启动：jps(正常会有一个QuorumPeerMain)</li><li>查看状态：bin/zkServer.sh status</li><li>启动Zookeeper Client(客户端)：bin/zkCli.sh</li><li>查看文件列表：ls /(一开始只有[zookeeper])</li><li>退出Zookeeper Client：quit</li><li>停止Zookeeper Server：bin/zkServer.sh stop</li></ul></li></ul></li><li><p>配置参数解读<br>Zookeeper中的配置文件zoo.cfg中参数含义解读如下：</p><ul><li><em>tickTime = 2000：通信心跳数，Zookeeper服务器与客户端心跳时间，单位毫秒</em><br>Zookeeper使用的基本时间，服务器之间或客户端与服务器之间维持心跳的时间间隔，也就是每个tickTime时间就会发送一个心跳，时间单位为毫秒。<br>它用于心跳机制，并且设置最小的session超时时间为两倍心跳时间。(session的最小超时时间是2*tickTime)</li><li><em>initLimit = 10：LF初始通信时限</em><br>集群中的Follower跟随者服务器与Leader领导者服务器之间<strong>初始连接时</strong>能容忍的最多心跳数(tickTime的数量)，用它来限定集群中的Zookeeper服务器连接到Leader的时限</li><li><em>syncLimit = 5：LF同步通信时限</em><br>集群中Leader与Follower之间的最大响应时间单位，假如响应超过syncLimit * tickTime，Leader认为Follwer死掉，从服务器列表中删除Follwer</li><li><em>dataDir：数据文件目录 + 数据持久化路径</em><br>主要用于保存Zookeeper中的数据</li><li><em>clientPort = 2181：客户端连接端口</em><br>监听客户端连接的端口</li></ul></li></ul><h2 id="Zookeeper实战"><a href="#Zookeeper实战" class="headerlink" title="Zookeeper实战"></a>Zookeeper实战</h2><ul><li><p>分布式安装部署</p><ul><li><p>集群规划：在hadoop1、hadoop2、hadoop3三个节点上部署Zookeeper形成集群</p></li><li><p>安装：分发zookeeper到hadoop2、hadoop3：xsync zookeeper-3.6.1/</p></li><li><p>配置服务器编号：</p><ul><li>在zookeeper-3.6.1目录下创建zkData目录：mkdir zkData</li><li>在zkData目录下创建myid文件：touch myid</li><li>编辑myid文件(设置当前server编号)：1</li><li>同步zkData到hadoop2、hadoop3上：xsync zkData/</li><li>在hadoop2、hadoop3上修改myid中的内容为2、3</li></ul></li><li><p>配置zoo.cfg文件</p><ul><li>新增集群节点配置</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cluster</span></span><br><span class="line">server.1=hadoop1:2888:3888</span><br><span class="line">server.2=hadoop2:2888:3888</span><br><span class="line">server.3=hadoop3:2888:3888</span><br></pre></td></tr></table></figure><ul><li>同步zoo.cfg文件：xsync zoo.cfg</li><li>配置参数解读：server.A=B:C:D<ul><li>A是一个数，表示这是第几号服务器。集群模式下配置文件myid中的数字就是A的值，<strong>Zookeeper启动时读取此文件，拿到里面的数据与zoo.cfg里面的配置信息比较从而判断到底是哪个server</strong></li><li>B是这个服务器的地址</li><li>C是这个服务器Follower与集群中的Leader服务器交换信息的端口</li><li>D是用来执行选举时服务器相互通信的端口：万一集群中的Leader服务器挂了，需要一个端口来重新进行选举，选出一个新的Leader</li></ul></li></ul></li><li><p>集群操作</p><ul><li>分别启动Zookeeper(启动前需要关闭Linux防火墙,使得各节点能够相互通信)：bin/zkServer.sh start</li><li>查看状态：bin/zkServer.sh status</li></ul></li></ul></li><li><p>客户端命令行操作(启动命令行：bin/zkCli.sh)</p></li></ul><table><thead><tr><th>命令基本语法</th><th>功能描述</th></tr></thead><tbody><tr><td>help(打错也是一个效果,当前无help命令)</td><td>显示所有操作命令</td></tr><tr><td>ls [-s] [-w] [-R] path</td><td>使用ls命令来查看当前path下znode中所包含的内容(-s：查看更新次数等详细数据,替代ls2;-w：设置watcher监听器,只有效一次;-R：递归查看节点)</td></tr><tr><td>create [-s] [-e] path [data]</td><td>创建节点(-s：含有序列;-e：临时(重启或者超时消失);data：写入path的内容,如果没有data创建不出节点)</td></tr><tr><td>get [-s] [-w] path</td><td>获得节点的值(-s：获取更加详细的节点数据;-w：设置watcher监听器,只有效一次)</td></tr><tr><td>set path data</td><td>设置节点的具体值</td></tr><tr><td>stat path</td><td>查看节点状态</td></tr><tr><td>delete path</td><td>删除节点</td></tr><tr><td>deleteall path</td><td>递归删除节点</td></tr></tbody></table><ul><li><p>API应用</p><ul><li><p>IDEA环境搭建</p><ul><li>创建空maven项目</li><li>添加pom文件：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在resources目录下新建一个日志配置文件log4j.properties</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">INFO, stdout</span></span><br><span class="line"><span class="meta">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="string">%d %p [%c] - %m%n</span></span><br><span class="line"><span class="meta">log4j.appender.logfile</span>=<span class="string">org.apache.log4j.FileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.logfile.File</span>=<span class="string">target/spring.log</span></span><br><span class="line"><span class="meta">log4j.appender.logfile.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.logfile.layout.ConversionPattern</span>=<span class="string">%d %p [%c] - %m%n</span></span><br></pre></td></tr></table></figure></li><li><p>创建ZooKeeper客户端</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 访问的ip</span></span><br><span class="line"><span class="keyword">private</span> String connectString = <span class="string">"hadoop1:2181,hadoop2:2181,hadoop3:2181"</span>;</span><br><span class="line"><span class="comment">// 会话超时时间</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> sessionTimeout = <span class="number">2000</span>;</span><br><span class="line"><span class="comment">// zookeeper客户端</span></span><br><span class="line"><span class="keyword">private</span> ZooKeeper zkClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    zkClient = <span class="keyword">new</span> ZooKeeper(connectString, sessionTimeout, <span class="keyword">new</span> Watcher() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建子节点</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、创建节点</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createNode</span><span class="params">()</span> <span class="keyword">throws</span> IOException, KeeperException, InterruptedException </span>&#123;</span><br><span class="line">  String path = zkClient.create(<span class="string">"/sobxiong"</span>, <span class="string">"sobxiong,xixixihahaha"</span>.getBytes(),</span><br><span class="line">          ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span><br><span class="line">  System.out.println(<span class="string">"path = "</span> + path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>获取子节点并监听节点变化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2、获取子节点,并监控节点的变化</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getDataAndWatch</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</span><br><span class="line">  List&lt;String&gt; children = zkClient.getChildren(<span class="string">"/"</span>, <span class="keyword">true</span>);</span><br><span class="line">  <span class="keyword">for</span> (String child : children) &#123;</span><br><span class="line">      System.out.println(<span class="string">"child = "</span> + child);</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println(<span class="string">"------------"</span>);</span><br><span class="line">  Thread.sleep(Long.MAX_VALUE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置watcher中的process方法,使其继续调用自身继续监听</span></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  zkClient = <span class="keyword">new</span> ZooKeeper(connectString, sessionTimeout, <span class="keyword">new</span> Watcher() &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          List&lt;String&gt; children = zkClient.getChildren(<span class="string">"/"</span>, <span class="keyword">true</span>);</span><br><span class="line">          <span class="keyword">for</span> (String child : children) &#123;</span><br><span class="line">              System.out.println(<span class="string">"child = "</span> + child);</span><br><span class="line">          &#125;</span><br><span class="line">          System.out.println(<span class="string">"------------"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (KeeperException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>判断Znode是否存在</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3、判断节点是否存在</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">judgeNodeExist</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</span><br><span class="line">  Stat stat = zkClient.exists(<span class="string">"/sobxiong"</span>, <span class="keyword">false</span>);</span><br><span class="line">  System.out.println(<span class="string">"stat = "</span> + stat);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>监听服务器节点动态上下线案例</p><ul><li><p>需求：某分布式系统中，主节点可以有多台，可以动态上下线，任意一台客户端都能实时感知到主节点服务器的上下线</p></li><li><p>案例分析：<br><img src="%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8A%A8%E6%80%81%E4%B8%8A%E4%B8%8B%E7%BA%BF%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90.png" alt="服务器动态上下线案例分析"></p></li><li><p>具体实现</p><ul><li>先在集群上创建/servers节点：create /servers “servers”</li><li>服务端向Zookeeper注册：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistributeServer</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 访问的ip</span></span><br><span class="line">  <span class="keyword">private</span> String connectString = <span class="string">"hadoop1:2181,hadoop2:2181,hadoop3:2181"</span>;</span><br><span class="line">  <span class="comment">// 会话超时时间</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> sessionTimeout = <span class="number">2000</span>;</span><br><span class="line">  <span class="comment">// zookeeper客户端</span></span><br><span class="line">  <span class="keyword">private</span> ZooKeeper zkClient;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, KeeperException, InterruptedException </span>&#123;</span><br><span class="line">    DistributeServer server = <span class="keyword">new</span> DistributeServer();</span><br><span class="line">    <span class="comment">// 1、连接zookeeper集群</span></span><br><span class="line">    server.getConnect();</span><br><span class="line">    <span class="comment">// 2、注册节点</span></span><br><span class="line">    server.register(args[<span class="number">0</span>]);</span><br><span class="line">    <span class="comment">// 3、业务逻辑</span></span><br><span class="line">    server.business();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">business</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    Thread.sleep(Long.MAX_VALUE);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(String hostName)</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</span><br><span class="line">    String path = zkClient.create(<span class="string">"/servers/server"</span>, hostName.getBytes(),</span><br><span class="line">            ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);</span><br><span class="line">    System.out.println(hostName + <span class="string">" is online..."</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getConnect</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    zkClient = <span class="keyword">new</span> ZooKeeper(connectString, sessionTimeout, <span class="keyword">new</span> Watcher() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>客户端注册监听：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistributeClient</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 访问的ip</span></span><br><span class="line">  <span class="keyword">private</span> String connectString = <span class="string">"hadoop1:2181,hadoop2:2181,hadoop3:2181"</span>;</span><br><span class="line">  <span class="comment">// 会话超时时间</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> sessionTimeout = <span class="number">2000</span>;</span><br><span class="line">  <span class="comment">// zookeeper客户端</span></span><br><span class="line">  <span class="keyword">private</span> ZooKeeper zkClient;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, KeeperException, InterruptedException </span>&#123;</span><br><span class="line">    DistributeClient client = <span class="keyword">new</span> DistributeClient();</span><br><span class="line">    <span class="comment">// 1、获取zookeeper集群连接</span></span><br><span class="line">    client.getConnect();</span><br><span class="line">    <span class="comment">// 2、注册监听</span></span><br><span class="line">    client.getChildren();</span><br><span class="line">    <span class="comment">// 3、业务逻辑处理</span></span><br><span class="line">    client.business();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">business</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    Thread.sleep(Long.MAX_VALUE);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getChildren</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</span><br><span class="line">    List&lt;String&gt; children = zkClient.getChildren(<span class="string">"/servers"</span>, <span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">// 存储服务器节点主机名称集合</span></span><br><span class="line">    List&lt;String&gt; hostNames = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    <span class="keyword">for</span> (String child : children) &#123;</span><br><span class="line">      <span class="keyword">byte</span>[] data = zkClient.getData(<span class="string">"/servers/"</span> + child, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">      hostNames.add(<span class="keyword">new</span> String(data));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将所有在线主机名称打印</span></span><br><span class="line">    System.out.println(<span class="string">"hostNames = "</span> + hostNames);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getConnect</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    zkClient = <span class="keyword">new</span> ZooKeeper(connectString, sessionTimeout, <span class="keyword">new</span> Watcher() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            getChildren();</span><br><span class="line">          &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="Zookeeper内部原理"><a href="#Zookeeper内部原理" class="headerlink" title="Zookeeper内部原理"></a>Zookeeper内部原理</h2><ul><li><p>节点类型<br><img src="Zookeeper%E8%8A%82%E7%82%B9%E7%B1%BB%E5%9E%8B.png" alt="Zookeeper节点类型"></p></li><li><p>Stat结构体</p><ul><li>cZxid：创建节点的事务zxid——每次修改ZooKeeper状态都会收到一个zxid形式的时间戳，也就是ZooKeeper事务ID。事务ID是ZooKeeper中所有修改总的次序。每个修改都有唯一的zxid，如果zxid1小于zxid2，那么zxid1在zxid2之前发生</li><li>ctime：znode被创建的毫秒数(从1970年开始)</li><li>mzxid：znode最后更新的事务zxid</li><li>mtime：znode最后修改的毫秒数(从1970年开始)</li><li>pZxid：znode最后更新的子节点zxid</li><li>cversion：znode子节点变化号，znode子节点修改次数</li><li>dataversion：znode数据变化号</li><li>aclVersion：znode访问控制列表的变化号</li><li>ephemeralOwner：如果是临时节点，这个是znode拥有者的session id；如果不是临时节点则是0</li><li><strong>dataLength：znode的数据长度</strong></li><li><strong>numChildren：znode子节点数量</strong></li></ul></li><li><p>监听器原理<br><img src="Zookeeper%E7%9B%91%E5%90%AC%E5%99%A8%E5%8E%9F%E7%90%86.png" alt="Zookeeper监听器原理"></p></li><li><p>选举机制</p><ul><li><strong>半数机制：集群中半数以上机器存活，集群可用。所以Zookeeper适合安装奇数台服务器</strong></li><li>Zookeeper虽然在配置文件中并没有指定Master和Slave。但是，Zookeeper工作时是有一个节点为Leader，其他则为Follower，Leader是通过内部的选举机制临时产生的</li><li>选举过程的举例(假设有五台服务器组成的Zookeeper集群，它们的id从1-5，同时它们都是最新启动的——没有历史数据，在存放数据量这一点上，都是一样的)：<br><img src="Zookeeper%E9%80%89%E4%B8%BE%E6%9C%BA%E5%88%B6.png" alt="Zookeeper选举机制"><ul><li>服务器1启动，发起一次选举。服务器1投自己一票。此时服务器1票数一票，不够半数以上(3票)，选举无法完成，服务器1状态保持为LOOKING</li><li>服务器2启动，再发起一次选举。服务器1和2分别投自己一票并交换选票信息：此时服务器1发现服务器2的ID比自己目前投票推举的(服务器1)大，更改选票为推举服务器2。此时服务器1票数0票，服务器2票数2票，没有半数以上结果，选举无法完成，服务器1、2状态保持LOOKING</li><li>服务器3启动，发起一次选举。此时服务器1和2都会更改选票为服务器3。此次投票结果：服务器1为0票，服务器2为0票，服务器3为3票。此时服务器3的票数已经超过半数，服务器3当选Leader。服务器1，2更改状态为FOLLOWING，服务器3更改状态为LEADING</li><li>服务器4启动，发起一次选举。此时服务器1、2、3已经不是LOOKING状态，不会更改选票信息。交换选票信息结果：服务器3为3票，服务器4为1票。此时服务器4服从多数，更改选票信息为服务器3，并更改状态为FOLLOWING</li><li>服务器5启动，同4一样当小弟</li></ul></li></ul></li><li><p>写数据流程<br><img src="Zookeeper%E5%86%99%E6%95%B0%E6%8D%AE%E6%B5%81%E7%A8%8B.png" alt="Zookeeper写数据流程"></p></li></ul><h2 id="面试真题"><a href="#面试真题" class="headerlink" title="面试真题"></a>面试真题</h2><ul><li><p>请简述ZooKeeper的选举机制？<br>参见4.4</p></li><li><p>ZooKeeper的监听原理是什么？<br>参见4.3</p></li><li><p>ZooKeeper的部署方式有哪几种？集群中的角色有哪些？集群最少需要几台机器？<br>(1)部署方式：单机模式、集群模式；(2)角色：Leader和Follower；(3)集群最少需要机器数：3</p></li><li><p>ZooKeeper的常用命令有哪些？<br>ls create get delete set</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BigData </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop</title>
      <link href="/2020/06/03/BigData/Hadoop/"/>
      <url>/2020/06/03/BigData/Hadoop/</url>
      
        <content type="html"><![CDATA[<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><ul><li><a href="#概论">概论</a></li><li><a href="#Hadoop介绍">Hadoop介绍</a></li><li><a href="#环境搭建">环境搭建</a></li><li><a href="#Hadoop运行模式">Hadoop运行模式</a></li><li><a href="#Hadoop编译源码">Hadoop编译源码</a></li><li><a href="#HDFS概述">HDFS概述</a></li><li><a href="#HDFS的Shell操作">HDFS的Shell操作</a></li><li><a href="#HDFS客户端操作">HDFS客户端操作</a></li><li><a href="#HDFS的数据流">HDFS的数据流</a></li><li><a href="#NameNode和SecondaryNameNode">NameNode和SecondaryNameNode</a></li><li><a href="#DataNode">DataNode</a></li><li><a href="#HDFS2.X新特性">HDFS2.X新特性</a></li><li><a href="#MapReduce概述">MapReduce概述</a></li><li><a href="#Hadoop序列化">Hadoop序列化</a></li><li><a href="#MapReduce框架原理">MapReduce框架原理</a></li><li><a href="#Hadoop数据压缩">Hadoop数据压缩</a></li><li><a href="#Yarn资源调度器">Yarn资源调度器</a></li><li><a href="#Hadoop企业优化">Hadoop企业优化</a></li><li><a href="#MapReduce扩展案例">MapReduce扩展案例</a></li><li><a href="#常见错误及解决方案">常见错误及解决方案</a></li></ul><a id="more"></a><h2 id="概论"><a href="#概论" class="headerlink" title="概论"></a>概论</h2><ul><li><p>概念：大数据指<strong>无法在一定时间范围</strong>内用常规软件工具进行捕捉、管理和处理的数据集合，是需要新处理模式才能具有更强的决策力、洞察发现力和流程优化能力的<strong>海量、高增长率和多样化的信息资产</strong>。需要解决的问题：海量数据的<strong>存储</strong>和海量数据的<strong>分析计算</strong>问题。</p></li><li><p>大数据特点(4V)：</p><ul><li>Volume(大量)</li><li>Velocity(高速)</li><li>Variety(多样)：<strong>结构化/非结构化数据</strong>，结构化数据以数据库/文本为主，非结构化数据包括网络日志、音频、视频、图片和地理位置信息等。</li><li>Value(低价值密度)：价值密度的高度与数据总量的大小成反比，如何<strong>快速对有价值数据“提纯”称为目前大数据背景下待解决的难题</strong>。</li></ul></li><li><p>大数据应用场景：物流仓储、零售、旅游、商品广告推荐、保险、金融、房产、人工智能</p></li><li><p>大数据部门业务流程：<br>产品人员提需求(统计总用户数、日活跃用户数、回流用户数等) =&gt; 数据部门搭建数据平台、分析数据指标 =&gt; 数据可视化(报表展示、邮件发送、大屏幕展示等)</p></li><li><p>大数据部门组织结构：<br><img src="%E9%83%A8%E9%97%A8%E7%BB%84%E7%BB%87%E7%BB%93%E6%9E%84.png" alt="部门组织结构"></p></li></ul><h2 id="Hadoop介绍"><a href="#Hadoop介绍" class="headerlink" title="Hadoop介绍"></a>Hadoop介绍</h2><ul><li><p>Hadoop是什么：</p><ul><li>是一个由Apache基金会开发的<strong>分布式系统基础架构</strong>。</li><li>主要解决海量数据的<strong>存储</strong>和海量数据的<strong>分析计算</strong>问题。</li><li>广义上来说，Hadoop通常指更广泛的概念——Hadoop生态圈。</li></ul></li><li><p>Hadoop发展历史</p><ul><li><p>Lucene框架是<strong>Doug Cutting</strong>开创的开源软件，用Java编写，实现与Goole类似的全文搜索功能，它提供了全文检索引擎的架构，包括完整的查询和索引引擎。</p></li><li><p>2001年年底Lucene称为Apache基金会的一个子项目。</p></li><li><p>对于海量数据的场景，Lucene面对与Google同样的困难，<strong>存储数据困难，检索速度慢</strong>。</p></li><li><p>学习和模仿Google解决这些问题的办法：微型版Nutch。</p></li><li><p>Google是Hadoop的思想之源(其在大数据方面的三篇论文)<br><strong>GFS -&gt; HDFS Map-Reduce -&gt; MR BigTable -&gt; HBase</strong></p></li><li><p>2003年~04年，Google公开部分GFS和MapReduce思想的细节，以此为基础Doug Cutting等人用<strong>2年业余时间</strong>实现了DFS和MapReduce机制，使Nutch性能飙升。</p></li><li><p>2005年Hadoop作为Lucene的子项目Nutch的一部分正式引入Apache基金会。</p></li><li><p>2006年3月份，Map-Reduce和Nutch Distributed File System(NDFS)分别被纳入到Hadoop项目中，Hadoop就正式诞生，标志着大数据十代来临。</p></li><li><p>Hadoop名字来源于Doug Cutting儿子的玩具大象<br><img src="logo.jpg" alt="logo"></p></li></ul></li><li><p>Hadoop三大发行版本</p><ul><li>Apache：最原始(基础)的版本，对于入门学习最好</li><li>Cloudera：在大型互联网企业中用的较多，产品主要为CDH，Cloudera Manager，Cloudera Support：<ul><li>CDH是Cloudera的Hadoop发行版，完全开源，比Apache版本在兼容性、安全性、稳定性上有所增强。</li><li>Cloudera Manager是集群的软件分发及管理监控平台，可以在几个小时内部署好一个Hadoop集群，并对集群的节点及服务进行实时监控。</li><li>Cloudera Support即是对Hadoop的技术支持。</li></ul></li><li>Hortonworks：文档较好<ul><li>Hortonworks的主打产品是Hortonworks Data Platform(HDP)，也同样是100%开源的产品，HDP除常见的项目外还包括了Ambari——一款开源的安装和管理系统。</li><li>HCatalog，一个元数据管理系统，HCatalog现已集成到Facebook开源的Hive中。Hortonworks的Stinger开创性的极大的优化了Hive项目。Hortonworks为入门提供了一个非常好的，易于使用的沙盒。</li></ul></li></ul></li><li><p>Hadoop的优势(4高)</p><ul><li>高可靠性：Hadoop底层维护多个数据副本，即使某个计算元素或存储出现故障，也不会导致数据的丢失。</li><li>高扩展性：在集群间分配任务数据，可方便地扩展数以千计的节点。</li><li>高效性：在MapReduce的思想下，Hadoop是并行工作的，以加快任务处理速度。</li><li>高容错性：能够自动将失败的任务重新分配。</li></ul></li><li><p>Hadoop组成</p><ul><li>1.x：Common(辅助工具)、HDFS(数据存储)、MapReduce(计算+资源调度)</li><li>2.x：Common(辅助工具)、HDFS(数据存储)、<strong>Yarn(资源调度)</strong>、<strong>MapReduce(计算)</strong></li></ul></li><li><p>HDFS架构概述：</p><ul><li>HDFS全名——Hadoop Distributed File System</li><li>组成：<ul><li>NameNode(nn)：存储文件的元数据，如文件名、文件目录结构、文件属性(生成时间、副本数、文件权限)以及每个文件的块列表和块所在的DataNode等——类似书的目录(索引)</li><li>DataNode(dn)：在本地文件系统存储文件块数据以及块数据的校验和——具体的书章节内容</li><li>Secondary NameNode(2nn)：用来监控HDFS状态的辅助后台程序，每隔一段时间获取HDFS元数据的快照——辅助NameNode工作</li></ul></li></ul></li><li><p>Yarn架构概述<br><img src="Yarn%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="Yarn架构图"></p></li><li><p>MapReduce架构概述</p><ul><li>将计算分为两个阶段：Map和Reduce</li><li>Map阶段并行处理输入数据</li><li>Reduce阶段对Map结果进行汇总</li></ul></li><li><p>大数据技术生态体系<br><img src="%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E7%94%9F%E6%80%81%E4%BD%93%E7%B3%BB.png" alt="大数据技术生态体系"></p></li></ul><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul><li><p>配置Java环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 修改环境变量</span><br><span class="line">sudo vim &#x2F;etc&#x2F;profile</span><br><span class="line">##JAVA_HOME</span><br><span class="line">export JAVA_HOME&#x3D;&#x2F;opt&#x2F;module&#x2F;jdk1.8.0_251</span><br><span class="line">export PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin</span><br><span class="line">&#x2F;&#x2F; 让环境变量修改生效</span><br><span class="line">source &#x2F;etc&#x2F;profile</span><br><span class="line">&#x2F;&#x2F; 查看Java版本</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure></li><li><p>配置Hadoop环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 修改环境变量</span><br><span class="line">sudo vim &#x2F;etc&#x2F;profile</span><br><span class="line">##HADOOP_HOME</span><br><span class="line">export HADOOP_HOME&#x3D;&#x2F;opt&#x2F;module&#x2F;hadoop-3.1.3</span><br><span class="line">export PATH&#x3D;$PATH:$HADOOP_HOME&#x2F;bin</span><br><span class="line">export PATH&#x3D;$PATH:$HADOOP_HOME&#x2F;sbin</span><br><span class="line">&#x2F;&#x2F; 让环境变量修改生效</span><br><span class="line">source &#x2F;etc&#x2F;profile</span><br><span class="line">&#x2F;&#x2F; 查看Hadoop版本</span><br><span class="line">hadoop version</span><br></pre></td></tr></table></figure></li><li><p>Hadoop目录说明</p><ul><li>bin目录：存放对Hadoop相关服务(HDFS,YARN)进行操作的脚本</li><li>etc目录：Hadoop的配置文件目录，存放Hadoop的配置文件</li><li>lib目录：存放Hadoop的本地库(对数据进行压缩解压缩功能)</li><li>sbin目录：存放启动或停止Hadoop相关服务的脚本</li><li>share目录：存放Hadoop的依赖jar包、文档、和官方案例</li></ul></li></ul><h2 id="Hadoop运行模式"><a href="#Hadoop运行模式" class="headerlink" title="Hadoop运行模式"></a>Hadoop运行模式</h2><ul><li><p>本地模式</p><ul><li>官方WordCount案例(统计单词数目)：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建wcinput文件夹</span><br><span class="line">mkdir wcinput</span><br><span class="line">&#x2F;&#x2F; 创建wc.input文件</span><br><span class="line">cd wcinput</span><br><span class="line">touch wc.input</span><br><span class="line">&#x2F;&#x2F; 编辑wc.input随意输入字符</span><br><span class="line">vim wc.input</span><br><span class="line">&#x2F;&#x2F; 回到Hadoop目录执行程序</span><br><span class="line">hadoop jar share&#x2F;hadoop&#x2F;mapreduce&#x2F;hadoop-mapreduce-examples-3.1.3.jar wordcount wcinput&#x2F; wcouput</span><br><span class="line">&#x2F;&#x2F; 查看结果</span><br><span class="line">cat wcoutput&#x2F;part-r-00000</span><br></pre></td></tr></table></figure></li><li><p>伪分布式模式</p><ul><li><p>配置集群</p><ul><li>设置hadoop-env.sh：在文件中设置JAVA_HOME为本地JDK地址</li><li>设置core-site.xml：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定HDFS中NameNode的地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://localhost:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定Hadoop运行时产生文件的存储目录 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/module/hadoop-3.1.3/data/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>设置hdfs-site.xml：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定HDFS副本的数量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>启动集群</p><ul><li>格式化NameNode：bin/hdfs namenode -format</li><li><strong>启动NameNode和DataNode：sbin/start-dfs.sh(关闭stop)</strong></li></ul></li><li><p>查看集群</p><ul><li>查看是否启动成功：jps(JDK中的命令,不是Linux命令,类似ps)</li><li>web端查看HDFS文件系统：<a href="http://192.168.232.100:9870" target="_blank" rel="noopener">http://192.168.232.100:9870</a>(需要CentOS主机上设置关闭防火墙,在3.x版本端口号默认为9870)</li><li>查看产生的log日志：cd /hadoop/logs</li><li>注意：不能一直格式化NameNode，格式化NameNode会产生新的集群id，导致NameNode和DataNode的集群id不一致，集群找不到已往数据。所以，格式NameNode时，一定要先删除data数据和log日志，然后再格式化NameNode。(最好关闭NameNode和DataNode)</li></ul></li><li><p>操作集群(所有命令类似于在Linux Terminal的命令行操作,需要加上固定前缀bin/hdfs dfs -)</p><ul><li>在HDFS文件系统上创建一个input文件夹：bin/hdfs dfs -mkdir -p /user/sobxiong/input</li><li>将测试文件内容上传到文件系统上：bin/hdfs dfs -put wcinput/wc.input /user/sobxiong/input/</li><li>查看上传的文件是否正确：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bin/hdfs dfs -ls /user/sobxiong/input/</span><br><span class="line">bin/hdfs dfs -cat /user/sobxiong/input/wc.input</span><br></pre></td></tr></table></figure><ul><li>运行MapReduce程序：hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.1.3.jar wordcount /user/sobxiong/input/ /user/sobxiong/output</li><li>查看输出结果：bin/hdfs dfs -cat /user/sobxiong/output/*</li><li>也可以在浏览器的文件系统中查看  </li><li>将测试文件内容下载到本地：bin/hdfs dfs -get /user/sobxiong/output/part-r-00000 ./wcoutput/</li><li>删除输出结果：bin/hdfs dfs -rm -r /user/sobxiong/output</li></ul></li><li><p>启动Yarn并运行MapReduce程序</p><ul><li><p>配置集群</p><ul><li>配置yarn-env.sh(配置JAVA_HOME)： export JAVA_HOME=/opt/module/jdk1.8.0_251</li><li>配置yarn-site.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Reducer获取数据的方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置Yarn应用的classPath --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 不配置出现：错误: 找不到或无法加载主类org.apache.hadoop.mapreduce.v2.app.MRAppMaster --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.application.classpath<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>命令行下输入hadoop classpath的一长串环境<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 不需要设置yarn.resourcemanager.hostname，可以直接通过ip+端口号的方式访问 --&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置mapred-env.sh(配置JAVA_HOME)： export JAVA_HOME=/opt/module/jdk1.8.0_251</li><li>配置mapred-site.xml：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定MR运行在YARN上 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 默认是local，本地文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>启动集群</p><ul><li>启动前必须保证NameNode和DataNode已启动</li><li><strong>启动ResourceManager和NodeManager：sbin/start-yarn.sh(关闭stop)</strong></li></ul></li><li><p>集群操作</p><ul><li>yarn浏览器页面查看：8088端口</li><li>删除文件系统上的output文件：bin/hdfs dfs -rm -r /user/sobxiong/output</li><li>执行MapReduce程序：同上hadoop操作</li><li>查看结果：同上cat操作，也可以在浏览器端查看</li></ul></li></ul></li><li><p>配置历史服务器</p><ul><li><p>配置mapred-site.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 历史服务器端地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>172.16.85.130:10020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 历史服务器web端地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>172.16.85.130:19888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>启动历史服务器：bin/mapred –daemon start historyserver(stop关闭)</p></li><li><p>查看历史服务器是否启动：jps</p></li><li><p>查看JobHistory：<a href="http://172.16.85.130:19888/jobhistory" target="_blank" rel="noopener">http://172.16.85.130:19888/jobhistory</a></p></li></ul></li><li><p>配置日志的聚集：</p><ul><li>概念：应用运行完成以后，将程序运行日志信息上传到HDFS系统上</li><li>好处：可以方便的查看到程序运行详情，方便开发调试</li><li>注意：开启日志聚集功能，需要重新启动NodeManager、ResourceManager和HistoryManager</li><li>配置yarn-site.xml：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 日志聚集功能使能 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 日志保留时间设置7天 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation.retain-seconds<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>604800<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置文件说明</p><ul><li><p>默认配置文件：</p><ul><li>core-defalut.xml - hadoop-common-3.1.3.jar/core-default.xml</li><li>hdfs-default.xml - hadoop-hdfs-3.1.3.jar/hdfs-default.xml</li><li>yarn-default.xml - hadoop-yarn-common-3.1.3.jar/yarn-default.xml</li><li>mapred-default.xml - hadoop-mapreduce-client-core-3.1.3.jar/mapred-default.xml</li></ul></li><li><p>自定义配置文件：core-site.xml、hdfs-site.xml、yarn-site.xml、mapred-site.xml四个配置文件存放在$HADOOP_HOME/etc/hadoop这个路径上，用户可以根据项目需求重新进行修改配置(优先级高)</p></li></ul></li></ul></li><li><p>完全分布式运行模式</p><ul><li><p>虚拟机准备(3台，完全复制)</p></li><li><p>编写集群分发脚本xsync</p><ul><li><p>scp(secure copy)安全拷贝</p><ul><li>定义：scp可以实现服务器与服务器之间的数据拷贝</li><li>基本语法：<table><thead><tr><th>命令</th><th>参数</th><th>要拷贝的文件路径/名称</th><th>目的用户@主机:目的路径/名称</th></tr></thead><tbody><tr><td>scp</td><td>-r(递归)</td><td>$pdir/$fname</td><td>$user@$host:$pdir/$fname</td></tr></tbody></table></li></ul></li><li><p>rsync远程同步工具</p><ul><li>作用：主要用于备份和镜像。具有速度快、避免复制相同内容和支持符号链接的优点</li><li>rsync和scp区别：用rsync做文件的复制要比scp的速度快，rsync只对差异文件做更新。scp是把所有文件都复制过去</li><li>基本语法：<table><thead><tr><th>命令</th><th>参数</th><th>要拷贝的文件路径/名称</th><th>目的用户@主机:目的路径/名称</th></tr></thead><tbody><tr><td>rsync</td><td>-r(递归)v(显示复制过程)l(拷贝符号连接)</td><td>$pdir/$fname</td><td>$user@$host:$pdir/$fname</td></tr></tbody></table></li></ul></li><li><p>xsync集群分发脚本</p><ul><li><p>需求：循环复制文件到所有节点的相同目录下</p></li><li><p>需求分析：</p><ul><li>rsync命令原始：rsync -rvl /opt/module root@hadoop2:/opt/</li><li>期望脚本：xsync 需同步的文件名</li><li>说明：在home/sobxiong/bin这个目录下存放的脚本，sobxiong用户在系统任何地方都可以直接执行</li></ul></li><li><p>脚本实现</p><ul><li>在/home/sobxiong目录下创建bin目录，并在bin目录下创建xsync文件</li><li>在xsync中键入如下代码：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">1 获取输入参数个数，如果没有参数，直接退出</span></span><br><span class="line">pcount=$#</span><br><span class="line">if((pcount==0)); then</span><br><span class="line">echo no args;</span><br><span class="line">exit;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">2 获取文件名称</span></span><br><span class="line">p1=$1</span><br><span class="line">fname=`basename $p1`</span><br><span class="line">echo fname=$fname</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">3 获取上级目录到绝对路径</span></span><br><span class="line">pdir=`cd -P $(dirname $p1); pwd`</span><br><span class="line">echo pdir=$pdir</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">4 获取当前用户名称</span></span><br><span class="line">user=`whoami`</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">5 循环</span></span><br><span class="line">for((host=2; host&lt;4; host++)); do</span><br><span class="line">        echo ------------------- hadoop$host --------------</span><br><span class="line">        rsync -rvl $pdir/$fname $user@hadoop$host:$pdir</span><br><span class="line">done</span><br></pre></td></tr></table></figure><ul><li>修改脚本xsync具有执行权限：chmod 777 xsync</li><li>调用脚本形式：xsync 文件名</li></ul></li></ul></li></ul></li><li><p>集群配置</p><ul><li><p>集群部署规划：</p><table><thead><tr><th>类型</th><th>hadoop1</th><th>hadoop2</th><th>hadoop3</th></tr></thead><tbody><tr><td>HDFS</td><td>NameNode、DataNode</td><td>DataNode</td><td>SecondaryNameNode、DataNode</td></tr><tr><td>YARN</td><td>NodeManager</td><td>ResourceManager、NodeManager</td><td>NodeManager</td></tr></tbody></table></li><li><p>配置集群</p><ul><li>核心配置文件core-site.xml：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定HDFS中NameNode的地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://hadoop1:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定Hadoop运行时产生文件的存储目录 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/module/hadoop-3.1.3/data/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>HDFS配置文件hdfs-site.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 副本数目 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定Hadoop辅助名称节点主机配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop3:50090<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>YARN配置文件yarn-site.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Reducer获取数据的方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定YARN的ResourceManager的地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>MapReduce配置文件mapred-site.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定MR运行在Yarn上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在集群上分发配置好的hadoop配置文件：xsync /opt/module/hadoop-3.1.3/etc</p></li><li><p>查看文件分发情况  </p></li></ul></li><li><p>集群单点启动</p><ul><li>集群第一次启动，需要格式化NameNode：hadoop namenode -format(把log和data文件删除)</li><li>在hadoop1上启动NameNode：hadoop-daemon.sh start namenode</li><li>在hadoop1、2、3上分别启动DataNode：hadoop-daemon.sh start datanode</li></ul></li><li><p>SSH免密登陆配置</p><ul><li>配置ssh<ul><li>基本语法：ssh ip</li></ul></li><li>无密钥配置<ul><li>免密登录原理：</li><li>生成公钥和私钥：ssh-keygen -t rsa(生成文件id_rsa-私钥,id_rsa.pub-公钥)</li><li>将公钥拷贝到要免密登录的目标机器上：ssh-copy-id hadoop2(只是当前用户,root还需要另外配置)</li></ul></li><li>.ssh文件下(~/.ssh)的文件功能<ul><li>known_hosts：记录ssh访问过的计算机的公钥</li><li>id_rsa：生成的私钥</li><li>id_rsa.pub：生成的公钥</li><li>authorized_keys：存放授权过的无密登录服务器公钥</li></ul></li></ul></li><li><p>群起集群</p><ul><li><p>配置workers：vim etc/hadoop/workers；加入hadoop1、hadoop2、hadoop3(不能有空行和空格)；同步所有节点配置文件 - xsync etc/hadoop/workers</p></li><li><p>启动集群</p><ul><li>集群第一次启动，需要格式化NameNode(格式化前关闭启动的所有namenode和datanode进程,然后再删除data和log数据)：bin/hdfs namenode -format</li><li>启动HDFS：sbin/start-dfs.sh(在hadoop1上启动,这样hadoo1、2、3均会启动对应的进程)</li><li>启动YARN：sbin/start-yarn.sh(在hadoop2上启动,在ResourceManager所在机器hadoop2上启动Yarn)</li><li>查看NameNode：hadoop1:9870</li></ul></li><li><p>集群基本测试</p><ul><li>上传文件到集群：bin/hdfs dfs -put xx xx</li><li>查看上传文件存储位置<ul><li>查看HDFS文件存储路径：/opt/module/hadoop-3.1.3/data/tmp/dfs/data/current/BP-1002151198-172.16.85.130-1591848799222/current/finalized/subdir0/subdir0</li><li>查看HDFS在磁盘存储文件的内容：cat blk_xxx(文本文件)</li><li>拼接大文件：cat blk_xxx &gt;&gt; temp，最后temp就是初始的文件</li></ul></li></ul></li></ul></li><li><p>集群启动/停止方式总结</p><ul><li>各个服务组件逐一启动/停止<ul><li>分别启动/停止HDFS组件：hadoop-daemon.sh start/stop namenode/datanode/secondarynamenode</li><li>启动/停止YARN：yarn-daemon.sh start/stop resourcemanager/nodemanager</li></ul></li><li>各个模块分开启动/停止(配置ssh是前提)常用<ul><li>整体启动/停止HDFS：start-dfs.sh/stop-dfs.sh</li><li>整体启动/停止YARN：start-yarn.sh/stop-yarn.sh</li></ul></li></ul></li><li><p>集群时间同步</p><ul><li><p>crontab定时任务：</p><ul><li>基本语法：crontab[选项]</li><li>选项说明<ul><li>-e：编辑crontab定时任务</li><li>-l：查询crontab任务</li><li>-r：删除当前用户所有的crontab任务</li></ul></li><li>参数说明：***** [任务]<ul><li>*的含义：<ul><li>第一个：一小时当中的第几分钟(0~59)</li><li>第二个：一天当中的第几个小时(0~23)</li><li>第三个：一个月当中的第几天(1~31)</li><li>第四个：一年当中的第几月(1~12)</li><li>第五个：一周当中的星期几(0~7,0和7均代表星期日)</li></ul></li><li>特殊符号：<ul><li><em>：代表任何时间。比如第一个“</em>”代表一小时中每分钟都执行一次</li><li>,：代表不连续的时间。如“0 8,12,16 * * *”命令，就代表在每天的8点0分，12点0分，16点0分都执行一次命令</li><li>-：代表连续的时间范围。比如“0 5 * * 1-6”命令，代表在周一到周六的凌晨5点0分执行命令</li><li><em>/n：代表每隔多久执行一次。比如“</em>/10 * * * *”命令，代表每隔10分钟就执行一遍命令</li></ul></li></ul></li></ul></li><li><p>ntp方式进行同步</p><ul><li><p>具体思路：找一个机器，作为时间服务器，所有的机器与这台集群时间进行定时的同步，比如，每隔十分钟，同步一次时间。<br><img src="%E9%9B%86%E7%BE%A4%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5.png" alt="集群时间同步"></p></li><li><p>具体实操</p><ul><li><p>时间服务器配置：</p><ul><li>检查ntp是否安装：rpm -qa&#124;grep ntp，有ntp、fontpackages-filesystem以及ntpdate</li><li>修改ntp配置文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 授权1172.16.85.0-172.16.85.255网段上的所有机器可以从这台机器上查询和同步时间</span></span><br><span class="line">restrict 172.16.85.0 mask 172.16.85.130.0 nomodify notrap</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改集群在局域网中,不使用其他互联网上的时间</span></span><br><span class="line"><span class="meta">#</span><span class="bash">server 0.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="meta">#</span><span class="bash">server 1.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="meta">#</span><span class="bash">server 2.centos.pool.ntp.org iburst</span></span><br><span class="line"><span class="meta">#</span><span class="bash">server 3.centos.pool.ntp.org iburst</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 当该节点丢失网络连接，依然可以采用本地时间作为时间服务器为集群中的其他节点提供时间同步</span></span><br><span class="line">server 127.127.1.0</span><br><span class="line">fudge 127.127.1.0 stratum 10</span><br></pre></td></tr></table></figure><ul><li>修改/etc/sysconfig/ntpd文件：SYNC_HWCLOCK=yes(让硬件时间与系统时间一起同步)</li><li>重新启动ntpd服务：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service ntpd status</span><br><span class="line">service ntpd start</span><br></pre></td></tr></table></figure><ul><li>设置ntpd服务开机自启动：chkconfig ntpd on</li></ul></li><li><p>其他机器配置(root用户)：</p><ul><li>配置10分钟与时间服务器同步一次：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br><span class="line">*/10 * * * * /usr/sbin/ntpdate hadoop1</span><br></pre></td></tr></table></figure><ul><li>修改任意机器时间：date -s “2020-11-11 11:11:11”</li><li>十分钟后查看机器是否与时间服务器同步：date</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><h2 id="Hadoop编译源码"><a href="#Hadoop编译源码" class="headerlink" title="Hadoop编译源码"></a>Hadoop编译源码</h2><ul><li><p>前期准备</p><ul><li><p>jar包准备(hadoop源码、JDK8、Maven、Ant、Protobuf)：Protobuf在Google的github中的Release页面(3.1.3Hadoop对应2.5.0版本)</p></li><li><p>jar包安装</p><ul><li>安装JDK</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf jdk-8u251-linux-x64.tar.gz -C /opt/module/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> JAVA_HOME(/etc/profile)</span></span><br><span class="line">export JAVA_HOME=/opt/module/jdk1.8.0_251</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure><ul><li>安装Maven</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf apache-maven-3.6.3-bin.tar.gz -C /opt/module/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> MAVEN_HOME(/etc/profile)</span></span><br><span class="line">export MAVEN_HOME=/opt/module/apache-maven-3.6.3</span><br><span class="line">export PATH=$PATH:$MAVEN_HOME/bin</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br><span class="line">mvn -version</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改maven仓库镜像</span></span><br><span class="line">&lt;mirror&gt;</span><br><span class="line">  &lt;id&gt;nexus-aliyun&lt;/id&gt;</span><br><span class="line">  &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class="line">  &lt;name&gt;Nexus aliyun&lt;/name&gt;</span><br><span class="line">  &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;</span><br><span class="line">&lt;/mirror&gt;</span><br></pre></td></tr></table></figure><ul><li>安装Ant</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf apache-ant-1.10.8-bin.tar.gz -C /opt/module/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> ANT_HOME(/etc/profile)</span></span><br><span class="line">export ANT_HOME=/opt/module/apache-ant-1.10.8</span><br><span class="line">export PATH=$PATH:$ANT_HOME/bin</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br><span class="line">ant -version</span><br></pre></td></tr></table></figure><ul><li><p>安装glibc-headers和g++：yum install glibc-headers、yum install gcc-c++</p></li><li><p>安装make和cmake：yum install make</p></li><li><p>安装cmake(要装3.x版本,低版本编译不通过)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf cmake-3.17.3.tar.gz -C /opt/module</span><br><span class="line">cd /opt/module/cmake-3.17.3</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> CMAKE_HOME(/etc/profile)</span></span><br><span class="line">export CMAKE_HOME=/opt/module/cmake-3.17.3</span><br><span class="line">export PATH=$PATH:$CMAKE_HOME/bin</span><br><span class="line">source /etc/profile</span><br><span class="line">cmake --version</span><br></pre></td></tr></table></figure></li><li><p>安装protobuf：</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf protobuf-2.5.0.tar.gz -C /opt/module/</span><br><span class="line">cd /opt/module/protobuf-2.5.0/</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make check</span><br><span class="line">make install</span><br><span class="line">ldconfig</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> LD_LIBRARY_PATH(/etc/profile)</span></span><br><span class="line">export LD_LIBRARY_PATH=/opt/module/protobuf-2.5.0</span><br><span class="line">export PATH=$PATH:$LD_LIBRARY_PATH</span><br><span class="line"></span><br><span class="line">protoc --version</span><br></pre></td></tr></table></figure><ul><li>安装openssl库：yum install openssl-devel</li><li>安装ncurses-devel库：yum install ncurses-devel</li></ul></li><li><p>编译源码</p><ul><li>解压源码到/opt目录</li><li>进入hadoop源码主目录</li><li>通过maven执行编译命令：mvn package -Pdist,native -DskipTests -Dtar</li></ul></li></ul></li></ul><h2 id="HDFS概述"><a href="#HDFS概述" class="headerlink" title="HDFS概述"></a>HDFS概述</h2><ul><li><p>HDFS产出背景及定义</p><ul><li>产生背景：随着数据量越来越大，在一个操作系统存不下所有的数据，那么就分配到更多的操作系统管理的磁盘中，但是不方便管理和维护，迫切需要一种系统来管理多台机器上的文件，这就是分布式文件管理系统。HDFS只是分布式文件管理系统中的一种</li><li>定义：HDFS(Hadoop Distributed File System)，它是一个文件系统，用于存储文件，通过目录树来定位文件；其次，它是分布式的，由很多服务器联合起来实现其功能，集群中的服务器有各自的角色</li><li>使用背景：<strong>适合一次写入，多次读出的场景，且不支持文件的修改</strong>。适合用来做数据分析，并不适合用来做网盘应用</li></ul></li><li><p>HDFS优缺点</p><ul><li>优点：<ul><li>高容错性<ul><li>数据自动保存多个副本。它通过增加副本的形式，提高容错性</li><li>某一个副本丢失以后，它可以自动恢复(通过将副本复制到另一个可用的节点)</li></ul></li><li>适合处理大数据<ul><li>数据规模：能够处理数据规模达到GB、TB、甚至PB级别的数据</li><li>文件规模：能够处理百万规模以上的文件数量，数量相当之大</li></ul></li><li>可构建在廉价机器上，通过多副本机制，提高可靠性</li></ul></li><li>缺点：<ul><li><strong>不适合低延时数据访问</strong>，比如毫秒级的存储数据，是做不到的</li><li><strong>无法高效的对大量小文件进行存储</strong>：<ul><li>存储大量小文件的话，它会占用NameNode大量的内存来存储文件目录和块信息。这样是不可取的，因为NameNode的内存总是有限的</li><li>小文件存储的寻址时间会超过读取时间，它违反了HDFS的设计目标</li></ul></li><li>不支持并发写入、文件随机修改：<ul><li>一个文件只能有一个写，不允许多个线程同时写</li><li><strong>仅支持数据appen(追加)</strong>，不支持文件的随机修改</li></ul></li></ul></li></ul></li><li><p>HDFS组成架构<br><img src="HDFS%E7%BB%84%E6%88%90%E6%9E%B6%E6%9E%84.png" alt="HDFS组成架构"></p><ul><li><p>NameNode(nn)：Master，一个主管、管理者</p><ul><li>管理HDFS的名称空间</li><li>配置副本策略</li><li>管理数据块(Block)映射信息</li><li>处理客户端读写请求</li></ul></li><li><p>DataNode：Slave。NameNode下达命令，DataNode执行实际的操作</p><ul><li>存储实际的数据块</li><li>执行数据块的读/写操作</li></ul></li><li><p>Client：客户端</p><ul><li>文件切分。文件上传HDFS的时候，Client将文件切分成一个一个的Block，然后进行上传</li><li>与NameNode交互，获取文件的位置信息</li><li>与DataNode交互，读取或者写入数据</li><li>Client提供一些命令来管理HDFS，比如NameNode格式化</li><li>Client可以通过一些命令来访问HDFS，比如对HDFS增删查改操作</li></ul></li><li><p>Secondary NameNode：并非NameNode的热备。当NameNode挂掉的时候，它并不能马上替换NameNode并提供服务</p><ul><li>辅助NameNode，分担其工作量，比如定期合并Fsimage和Edits，并推送给NameNode</li><li>在紧急情况下，可辅助恢复NameNode</li></ul></li></ul></li><li><p>HDFS文件块大小<br>HDFS中的文件在物理上是分块存储(Block)，块的大小可以通过配置参数(dfs.blocksize)来规定，默认大小在Hadoop2.x版本中是128M，老版本中是64M<br><img src="%E6%96%87%E4%BB%B6%E5%9D%97%E5%A4%A7%E5%B0%8F%E5%A4%A7%E8%87%B4%E8%AE%A1%E7%AE%97.png" alt="文件块大小大致计算"><br>为什么文件块的大小不能设置太小，也不能设置太大？</p><ul><li>HDFS的块设置太小，会增加寻址时间，程序一直在找块的开始位置</li><li>如果块设置的太大，从磁盘传输数据的时间会明显大于定位这个块开始位置所需的时间。导致程序在处理这块数据时，会非常慢</li><li>总结：HDFS块的大小设置主要取决于磁盘传输速率</li></ul></li></ul><h2 id="HDFS的Shell操作"><a href="#HDFS的Shell操作" class="headerlink" title="HDFS的Shell操作"></a>HDFS的Shell操作</h2><ul><li><p>基本语法<br>bin/hadoop fs 具体命令 OR bin/hdfs dfs 具体命令<br>其中dfs是fs的实现类</p></li><li><p>命令大全：bin/hadoop fs</p></li><li><p>使用命令：</p><ul><li>-help：输出命令的帮助(hadoop fs -help rm)</li><li>-ls：显示目录信息(hadoop fs -ls /)</li><li>-mkdir：在HDFS上创建目录[-p递归](hdoop fs -mkdir -p /sobxiong/test)</li><li>-moveFromLocal：从本地剪切粘贴到HDFS[前路径为本地,后路径为HDFS](hadoop fs -moveFromLocal ./test.txt /sobxiong/test/)</li><li>-appendToFile：追加一个文件到已经存在的文件末尾[前路径为本地,后路径为HDFS](hadoop fs -appendToFile ./test.txt /sobxiong/test/test.txt)</li><li>-cat：显示文件内容(hadoop fs -cat /sobxiong/test/test.txt)</li><li>-chgrp、-chmod、-chown：修改文件所属的权限，同Linux文件系统中的用法</li><li>-copyFromLocal：从本地文件系统拷贝文件到HDFS中，同-moveFromLocal</li><li>-copyToLocal：从HDFS拷贝文件到本地[前路径为HDFS,后路径为本地](hadoop fs -copyToLocal /sobxiong/test/test.txt ./)</li><li>-cp：把文件从HDFS的一个路径拷贝到HDFS的另一个路径</li><li>-mv：把文件从HDFS的一个路径移动到HDFS的另一个路径</li><li>-get：等同于copyToLocal(用法同copyToLocal)，从HDFS下载文件到本地</li><li>-getmerge：合并下载多个文件(hadoop fs -getmerge /sobxiong/test/* ./all.txt)</li><li>-put：等同于copyFromLocal(用法同copyFromLocal)</li><li>-tail：显示一个文件的末尾(hadoop fs -tail /sobxiong/test/test.txt)</li><li>-rm：删除文件或文件夹[-r递归删除目录]</li><li>-rmdir：删除空目录</li><li>-du：统计文件夹的大小信息[-h显示单位,-s总和](hadoop fs -du -h -s /)</li><li>-setrep：设置HDFS中文件的副本数目[这里设置的副本数只是记录在NameNode的元数据中,是否真的会有这么多副本还得看DataNode的数量.因为目前只有3台设备,最多也就3个副本,只有节点数的增加到10台时,副本数才能达到10;只要加入一台设备,就会把副本复制到设备上,直到加到10台](hadoop fs -setrep 10 /sobxiong/test/test.txt)</li></ul></li></ul><h2 id="HDFS客户端操作"><a href="#HDFS客户端操作" class="headerlink" title="HDFS客户端操作"></a>HDFS客户端操作</h2><ul><li><p>客户端环境准备</p><ul><li>将Hadoop安装到mac上，并设置环境变量</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> HADOOP_HOME(~/.bash_profile)</span></span><br><span class="line">export HADOOP_HOME="/Users/sobxiong/module/hadoop-3.1.3"</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin</span><br><span class="line"></span><br><span class="line">source ~/.bash_profile</span><br><span class="line">hadoop version</span><br></pre></td></tr></table></figure><ul><li>创建Maven工程测试：idea创建quickstart项目</li><li>导入依赖：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-slf4j-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>创建测试类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HDFSClient</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, URISyntaxException, InterruptedException </span>&#123;</span><br><span class="line">      Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line">      <span class="comment">// configuration.set("fs.defaultFS", "hdfs://hadoop1:9000");</span></span><br><span class="line">      <span class="comment">// 1、获取hdfs客户端对象</span></span><br><span class="line">      FileSystem fileSystem = FileSystem.get(<span class="keyword">new</span> URI(<span class="string">"hdfs://hadoop1:9000"</span>), configuration, <span class="string">"sobxiong"</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 2、在hdfs上创建路径</span></span><br><span class="line">      fileSystem.mkdirs(<span class="keyword">new</span> Path(<span class="string">"/sobxiong2/test"</span>));</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 3、关闭资源</span></span><br><span class="line">      fileSystem.close();</span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">"finish"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>HDFS的API操作</p><ul><li>文件上传</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 参数优先级：</span></span><br><span class="line"><span class="comment">  *  1、客户端代码中设置的值</span></span><br><span class="line"><span class="comment">  *  2、ClassPath(resources)下的用户自定义配置文件(hdfs-site.xml)</span></span><br><span class="line"><span class="comment">  *  3、服务器的默认配置</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="comment">// 1、文件上传</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCopyFromLocalFile</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line">    configuration.set(<span class="string">"dfs.replication"</span>, <span class="string">"2"</span>);</span><br><span class="line">    <span class="comment">// 1、获取fs对象</span></span><br><span class="line">    FileSystem fileSystem = FileSystem.get(<span class="keyword">new</span> URI(<span class="string">"hdfs://hadoop1:9000"</span>), configuration, <span class="string">"sobxiong"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、执行上传API</span></span><br><span class="line">    fileSystem.copyFromLocalFile(<span class="keyword">new</span> Path(<span class="string">"/Users/sobxiong/Documents/文件块大小大致计算.png"</span>), <span class="keyword">new</span> Path(<span class="string">"/sobxiong/test2.png"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、关闭资源</span></span><br><span class="line">    fileSystem.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将hdfs-site.xml拷贝至项目的根目录resources资源文件夹下</span></span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;?xml-stylesheet type=<span class="string">"text/xsl"</span> href=<span class="string">"configuration.xsl"</span>?&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;1&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><ul><li>文件下载</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2、文件下载</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCopyToLocalFile</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line">    <span class="comment">// 1、获取fs对象</span></span><br><span class="line">    FileSystem fileSystem = FileSystem.get(<span class="keyword">new</span> URI(<span class="string">"hdfs://hadoop1:9000"</span>), configuration, <span class="string">"sobxiong"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、执行下载操作</span></span><br><span class="line">    <span class="comment">// fileSystem.copyToLocalFile(new Path("/sobxiong/test2.png"), new Path("/Users/sobxiong/Documents/test.png"));</span></span><br><span class="line">    <span class="comment">// 本地模式,true,不会产生crc文件</span></span><br><span class="line">    fileSystem.copyToLocalFile(<span class="keyword">false</span>, <span class="keyword">new</span> Path(<span class="string">"/sobxiong/test2.png"</span>), <span class="keyword">new</span> Path(<span class="string">"/Users/sobxiong/Documents/test1.png"</span>), <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、关闭资源</span></span><br><span class="line">    fileSystem.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>文件删除</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3、文件删除</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line">    <span class="comment">// 1、获取fs对象</span></span><br><span class="line">    FileSystem fileSystem = FileSystem.get(<span class="keyword">new</span> URI(<span class="string">"hdfs://hadoop1:9000"</span>), configuration, <span class="string">"sobxiong"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、文件删除(第二个参数,是否递归删除,文件夹时有效)</span></span><br><span class="line">    fileSystem.delete(<span class="keyword">new</span> Path(<span class="string">"/sobxiong/test2.png"</span>), <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、关闭资源</span></span><br><span class="line">    fileSystem.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>文件更名</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 4、文件更名</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRename</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line">    <span class="comment">// 1、获取fs对象</span></span><br><span class="line">    FileSystem fileSystem = FileSystem.get(<span class="keyword">new</span> URI(<span class="string">"hdfs://hadoop1:9000"</span>), configuration, <span class="string">"sobxiong"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、执行更名操作</span></span><br><span class="line">    fileSystem.rename(<span class="keyword">new</span> Path(<span class="string">"/sobxiong/test1.png"</span>), <span class="keyword">new</span> Path(<span class="string">"/sobxiong/1tset.png"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、关闭资源</span></span><br><span class="line">    fileSystem.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>文件详情查看</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 5、文件详情查看</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testListFiles</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line">    <span class="comment">// 1、获取fs对象</span></span><br><span class="line">    FileSystem fileSystem = FileSystem.get(<span class="keyword">new</span> URI(<span class="string">"hdfs://hadoop1:9000"</span>), configuration, <span class="string">"sobxiong"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、查看文件详情</span></span><br><span class="line">    RemoteIterator&lt;LocatedFileStatus&gt; listFiles = fileSystem.listFiles(<span class="keyword">new</span> Path(<span class="string">"/"</span>), <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (listFiles.hasNext()) &#123;</span><br><span class="line">        LocatedFileStatus fileStatus = listFiles.next();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查看文件名称、权限、长度</span></span><br><span class="line">        System.out.println(<span class="string">"name: "</span> + fileStatus.getPath().getName());</span><br><span class="line">        System.out.println(<span class="string">"permission: "</span> + fileStatus.getPermission());</span><br><span class="line">        System.out.println(<span class="string">"length: "</span> + fileStatus.getLen());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查看块信息</span></span><br><span class="line">        BlockLocation[] blockLocations = fileStatus.getBlockLocations();</span><br><span class="line">        <span class="keyword">for</span> (BlockLocation blockLocation : blockLocations) &#123;</span><br><span class="line">            String[] hosts = blockLocation.getHosts();</span><br><span class="line">            <span class="keyword">for</span> (String host : hosts) &#123;</span><br><span class="line">                System.out.println(<span class="string">"host = "</span> + host);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"----------------"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、关闭资源</span></span><br><span class="line">    fileSystem.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>判断是文件还是文件夹</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 6、判断是文件还是文件夹</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testListStatus</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line">    <span class="comment">// 1、获取fs对象</span></span><br><span class="line">    FileSystem fileSystem = FileSystem.get(<span class="keyword">new</span> URI(<span class="string">"hdfs://hadoop1:9000"</span>), configuration, <span class="string">"sobxiong"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、判断操作</span></span><br><span class="line">    FileStatus[] fileStatuses = fileSystem.listStatus(<span class="keyword">new</span> Path(<span class="string">"/"</span>));</span><br><span class="line">    <span class="keyword">for</span> (FileStatus fileStatus : fileStatuses) &#123;</span><br><span class="line">        <span class="keyword">if</span> (fileStatus.isFile()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"file = "</span> + fileStatus.getPath().getName());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"dir = "</span> + fileStatus.getPath().getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、关闭资源</span></span><br><span class="line">    fileSystem.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>HDFS的I/O流操作</p><ul><li>HDFS文件上传</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把本地文件上传到HDFS根目录</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upload</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line">    <span class="comment">// 1、获取fs对象</span></span><br><span class="line">    FileSystem fileSystem = FileSystem.get(<span class="keyword">new</span> URI(<span class="string">"hdfs://hadoop1:9000"</span>), configuration, <span class="string">"sobxiong"</span>);</span><br><span class="line">    <span class="comment">// 2、获取输入流</span></span><br><span class="line">    FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"/Users/sobxiong/Downloads/课件.rar"</span>));</span><br><span class="line">    <span class="comment">// 3、获取输出流</span></span><br><span class="line">    FSDataOutputStream fsDataOutputStream = fileSystem.create(<span class="keyword">new</span> Path(<span class="string">"/test.rar"</span>));</span><br><span class="line">    <span class="comment">// 4、流的对拷</span></span><br><span class="line">    IOUtils.copyBytes(fileInputStream, fsDataOutputStream, configuration);</span><br><span class="line">    <span class="comment">// 5、关闭资源</span></span><br><span class="line">    IOUtils.closeStream(fsDataOutputStream);</span><br><span class="line">    IOUtils.closeStream(fileInputStream);</span><br><span class="line">    fileSystem.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>HDFS文件下载</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从HDFS下载文件到本地磁盘</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">download</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line">    <span class="comment">// 1、获取fs对象</span></span><br><span class="line">    FileSystem fileSystem = FileSystem.get(<span class="keyword">new</span> URI(<span class="string">"hdfs://hadoop1:9000"</span>), configuration, <span class="string">"sobxiong"</span>);</span><br><span class="line">    <span class="comment">// 2、获取输入流</span></span><br><span class="line">    FSDataInputStream fsDataInputStream = fileSystem.open(<span class="keyword">new</span> Path(<span class="string">"/test.rar"</span>));</span><br><span class="line">    <span class="comment">// 3、获取输出流</span></span><br><span class="line">    FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"/Users/sobxiong/Downloads/test1.rar"</span>));</span><br><span class="line">    <span class="comment">// 4、流的对拷</span></span><br><span class="line">    IOUtils.copyBytes(fsDataInputStream, fileOutputStream, configuration);</span><br><span class="line">    <span class="comment">// 5、关闭资源</span></span><br><span class="line">    IOUtils.closeStream(fileOutputStream);</span><br><span class="line">    IOUtils.closeStream(fsDataInputStream);</span><br><span class="line">    fileSystem.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定位文件获取</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下载第一块</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFileSeek1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line">    <span class="comment">// 1、获取fs对象</span></span><br><span class="line">    FileSystem fileSystem = FileSystem.get(<span class="keyword">new</span> URI(<span class="string">"hdfs://hadoop1:9000"</span>), configuration, <span class="string">"sobxiong"</span>);</span><br><span class="line">    <span class="comment">// 2、获取输入流</span></span><br><span class="line">    FSDataInputStream fsDataInputStream = fileSystem.open(<span class="keyword">new</span> Path(<span class="string">"/hadoop-3.1.3.tar.gz"</span>));</span><br><span class="line">    <span class="comment">// 3、获取输出流</span></span><br><span class="line">    FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"/Users/sobxiong/Downloads/hadoop-3.1.3.tar.gz.part1"</span>));</span><br><span class="line">    <span class="comment">// 4、流的对拷(只拷贝第一个块128MB)</span></span><br><span class="line">    <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1024</span> * <span class="number">128</span>; i++) &#123;</span><br><span class="line">        fsDataInputStream.read(buf);</span><br><span class="line">        fileOutputStream.write(buf);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 5、关闭资源</span></span><br><span class="line">    IOUtils.closeStream(fileOutputStream);</span><br><span class="line">    IOUtils.closeStream(fsDataInputStream);</span><br><span class="line">    fileSystem.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下载第二块</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFileSeek2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line">    <span class="comment">// 1、获取fs对象</span></span><br><span class="line">    FileSystem fileSystem = FileSystem.get(<span class="keyword">new</span> URI(<span class="string">"hdfs://hadoop1:9000"</span>), configuration, <span class="string">"sobxiong"</span>);</span><br><span class="line">    <span class="comment">// 2、获取输入流</span></span><br><span class="line">    FSDataInputStream fsDataInputStream = fileSystem.open(<span class="keyword">new</span> Path(<span class="string">"/hadoop-3.1.3.tar.gz"</span>));</span><br><span class="line">    <span class="comment">// 3、设置指定读取的起点</span></span><br><span class="line">    fsDataInputStream.seek(<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">128</span>);</span><br><span class="line">    <span class="comment">// 4、获取输出流</span></span><br><span class="line">    FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"/Users/sobxiong/Downloads/hadoop-3.1.3.tar.gz.part2"</span>));</span><br><span class="line">    <span class="comment">// 5、流的对拷(拷贝剩下的两个Block块)</span></span><br><span class="line">    IOUtils.copyBytes(fsDataInputStream, fileOutputStream, configuration);</span><br><span class="line">    <span class="comment">// 6、关闭资源</span></span><br><span class="line">    IOUtils.closeStream(fileOutputStream);</span><br><span class="line">    IOUtils.closeStream(fsDataInputStream);</span><br><span class="line">    fileSystem.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下载完第一块和剩余的部分后,可通过cat hadoop-3.1.3.tar.gz.part2 &gt;&gt; hadoop-3.1.3.tar.gz.part1将剩余部分追加到第一块上,修改文件名(删去.part1),就得到完整的文件</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="HDFS的数据流"><a href="#HDFS的数据流" class="headerlink" title="HDFS的数据流"></a>HDFS的数据流</h2><ul><li><p>HDFS写数据流程</p><ul><li><p>剖析文件写入：<br><img src="HDFS%E5%86%99%E6%95%B0%E6%8D%AE%E6%B5%81%E7%A8%8B.png" alt="HDFS写数据流程"></p><ul><li>客户端通过Distributed FileSystem模块向NameNode请求上传文件，NameNode检查目标文件是否已存在，父目录是否存在</li><li>NameNode返回是否可以上传</li><li>客户端请求第一个Block上传到哪几个DataNode服务器上</li><li>NameNode返回3个DataNode节点，分别为dn1、dn2、dn3</li><li>客户端通过FSDataOutputStream模块请求dn1上传数据，dn1收到请求会继续调用dn2，然后dn2调用dn3，将这个通信管道建立完成</li><li>dn1、dn2、dn3逐级应答客户端</li><li>客户端开始往dn1上传第一个Block(先从磁盘读取数据放到一个本地内存缓存)，以Packet为单位，dn1收到一个Packet就会传给dn2，dn2传给dn3；dn1每传一个packet会放入一个应答队列等待应答</li><li>当一个Block传输完成之后，客户端再次请求NameNode上传第二个Block的服务器(此后重复执行3-7步)</li></ul></li><li><p>网络拓扑-节点距离计算<br>在HDFS写数据的过程中，NameNode会选择距离待上传数据最近距离的DataNode接收数据。节点距离：两个节点到达最近的共同祖先的距离总和<br><img src="%E7%BD%91%E7%BB%9C%E6%8B%93%E6%89%91-%E8%8A%82%E7%82%B9%E8%B7%9D%E7%A6%BB%E8%AE%A1%E7%AE%97.png" alt="网络拓扑-节点距离计算"></p></li><li><p>机架感知(2.7.2版本副本节点选择,性能和安全的综合考量)</p><ul><li>第一个副本在Client所处的节点上。如果客户端在集群外，随机选一个</li><li>第二个副本和第一个副本位于相同机架，随机节点</li><li>第三个副本位于不同机架，随机节点</li></ul></li></ul></li><li><p>HDFS读数据流程<br><img src="HDFS%E8%AF%BB%E6%95%B0%E6%8D%AE%E6%B5%81%E7%A8%8B.png" alt="HDFS读数据流程"></p><ul><li>客户端通过Distributed FileSystem向NameNode请求下载文件，NameNode通过查询元数据，找到文件块所在的DataNode地址</li><li>挑选一台DataNode(就近原则，然后随机)服务器，请求读取数据</li><li>DataNode开始传输数据给客户端(从磁盘里面读取数据输入流，以Packet为单位来做校验)</li><li>客户端以Packet为单位接收，先在本地缓存，然后写入目标文件</li></ul></li></ul><h2 id="NameNode和SecondaryNameNode"><a href="#NameNode和SecondaryNameNode" class="headerlink" title="NameNode和SecondaryNameNode"></a>NameNode和SecondaryNameNode</h2><ul><li><p>NN和2NN工作机制<br>思考：NameNode中的元数据是存储在哪里的？<br>首先，我们做个假设，如果存储在NameNode节点的磁盘中，因为经常需要进行随机访问，还有响应客户请求，必然是效率过低。因此，元数据需要存放在内存中。但如果只存在内存中，一旦断电，元数据丢失，整个集群就无法工作了。因此产生在磁盘中备份元数据的FsImage<br>这样又会带来新的问题，当在内存中的元数据更新时，如果同时更新FsImage，就会导致效率过低，但如果不更新，就会发生一致性问题，一旦NameNode节点断电，就会产生数据丢失。因此，引入Edits文件(只进行追加操作，效率很高)。每当元数据有更新或者添加元数据时，修改内存中的元数据并追加到Edits中。这样，一旦NameNode节点断电，可以通过FsImage和Edits的合并，合成元数据<br>但是，如果长时间添加数据到Edits中，会导致该文件数据过大，效率降低，而且一旦断电，恢复元数据需要的时间过长。因此，需要定期进行FsImage和Edits的合并，如果这个操作由NameNode节点完成，又会效率过低。因此，引入一个新的节点SecondaryNamenode，专门用于FsImage和Edits的合并<br><img src="NameNode%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6.png" alt="NameNode工作机制"></p><ul><li><p>第一阶段：NameNode启动</p><ul><li>第一次启动NameNode格式化后，创建Fsimage和Edits文件。如果不是第一次启动，直接加载编辑日志和镜像文件到内存</li><li>客户端对元数据进行增删改的请求</li><li>NameNode记录操作日志，更新滚动日志(先记日志,类似数据库)</li><li>NameNode在内存中对数据进行增删改</li></ul></li><li><p>第二阶段：Secondary NameNode工作</p><ul><li>Secondary NameNode询问NameNode是否需要CheckPoint。直接带回NameNode是否检查结果</li><li>Secondary NameNode请求执行CheckPoint</li><li>NameNode滚动正在写的Edits日志</li><li>将滚动前的编辑日志和镜像文件拷贝到Secondary NameNode</li><li>Secondary NameNode加载编辑日志和镜像文件到内存，并合并</li><li>生成新的镜像文件fsimage.chkpoint</li><li>拷贝fsimage.chkpoint到NameNode</li><li>NameNode将fsimage.chkpoint重新命名成fsimage</li></ul></li><li><p>补充：<br>Fsimage：NameNode内存中元数据序列化后形成的文件。<br>Edits：记录客户端更新元数据信息的每一步操作(可通过Edits运算出元数据)。<br>NameNode启动时，先滚动Edits并生成一个空的edits.inprogress，然后加载Edits和Fsimage到内存中，此时NameNode内存就持有最新的元数据信息。Client开始对NameNode发送元数据的增删改的请求，这些请求的操作首先会被记录到edits.inprogress中(查询元数据的操作不会被记录在Edits中，因为查询操作不会更改元数据信息)，如果此时NameNode挂掉，重启后会从Edits中读取元数据的信息。然后，NameNode会在内存中执行元数据的增删改的操作。<br>由于Edits中记录的操作会越来越多，Edits文件会越来越大，导致NameNode在启动加载Edits时会很慢，所以需要对Edits和Fsimage进行合并(所谓合并，就是将Edits和Fsimage加载到内存中，照着Edits中的操作一步步执行，最终形成新的Fsimage)。SecondaryNameNode的作用就是帮助NameNode进行Edits和Fsimage的合并工作。<br>SecondaryNameNode首先会询问NameNode是否需要CheckPoint(触发CheckPoint需要满足两个条件中的任意一个，定时时间到和Edits中数据写满了)。直接带回NameNode是否检查结果。SecondaryNameNode执行CheckPoint操作，首先会让NameNode滚动Edits并生成一个空的edits.inprogress，滚动Edits的目的是给Edits打个标记，以后所有新的操作都写入edits.inprogress，其他未合并的Edits和Fsimage会拷贝到SecondaryNameNode的本地，然后将拷贝的Edits和Fsimage加载到内存中进行合并，生成fsimage.chkpoint，然后将fsimage.chkpoint拷贝给NameNode，重命名为Fsimage后替换掉原来的Fsimage。NameNode在启动时就只需要加载之前未合并的Edits和Fsimage即可，因为合并过的Edits中的元数据信息已经被记录在Fsimage中</p></li></ul></li><li><p>Fsimage和Edits解析</p><ul><li>概念<ul><li>NameNode被格式化之后，将在/data/tmp/dfs/name/current目录中产生如下文件<br>fsimage_0000000000000000000<br>fsimage_0000000000000000000.md5<br>seen_txid<br>VERSION</li><li>Fsimage文件：HDFS文件系统元数据的一个<strong>永久性的检查点</strong>，其中包含HDFS文件系统的所有目录和文件inode的序列化信息</li><li>Edits文件：存放HDFS文件系统的所有更新操作的路径，文件系统客户端执行的所有写操作首先会被记录到Edits文件中</li><li>seen_txid文件保存的是一个数字，就是最后一个edits_的数字</li><li><strong>每次NameNode启动的时候</strong>都会将Fsimage文件读入内存，加载Edits里面的更新操作，保证内存中的元数据信息是最新的、同步的，可以看成NameNode启动的时候就将Fsimage和Edits文件进行了合并</li></ul></li><li>查看Fsimage文件：hdfs oiv -p 文件类型(XML) -i 镜像文件 -o 转换后文件输出路径<br>例：hdfs oiv -p XML -i fsimage_0000000000000000025 o fsimage.xml<br>Fsimage中没有记录块所对应的DataNode，为什么？<br>在集群启动后，要求DataNode上报数据块信息，并间隔一段时间后再次上报</li><li>查看Edits文件：hdfs oev -p 文件类型(XML) -i 编辑日志 -o 转换后文件输出路径<br>例：hdfs oev -p XML -i edits_0000000000000000012-0000000000000000013 -o edits.xml<br>NameNode如何确定下次开机启动的时候合并那些Edits？<br>通过seen_txid查看</li></ul></li><li><p>CheckPoint时间设置</p><ul><li>通常情况下，SecondaryNameNode每隔一小时执行一次</li><li>一分钟检查一次操作次数</li><li>当操作次数达到1百万时，SecondaryNameNode执行一次</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- hdfs-default.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.checkpoint.period<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>3600<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.checkpoint.txns<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>1000000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>操作动作次数<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.checkpoint.check.period<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>60<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>1分钟检查一次操作次数<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span> &gt;</span></span><br></pre></td></tr></table></figure></li><li><p>NameNode故障处理</p><ul><li><p>方法一：将SecondaryNameNode中数据拷贝到NameNode存储数据的目录</p><ul><li>kiil -9 NameNode进程编号(用jps查看NameNode的进程编号)</li><li>删除NameNode存储的数据(data/tmp/dfs/name)：rm -rf /data/tmp/dfs/name/*</li><li>拷贝SecondaryNameNode(hadoop2)中数据到原NameNode(hadoop1)存储数据目录：scp -r sobxiong@hadoop2:/opt/module/hadoop-3.1.3/data/tmp/dfs/namesecondary/* ./name/</li><li>重新启动NameNode(hadoop1)：sbin/hadoop-daemon.sh start namenode</li></ul></li><li><p>方法二：使用-importCheckpoint选项启动NameNode守护进程，从而将SecondaryNameNode中数据拷贝到NameNode目录中</p><ul><li>修改hdfs-site.xml(加入下述内容)：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.checkpoint.period<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>120<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/module/hadoop-3.1.3/data/tmp/dfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>kill -9 NameNode进程</li><li>删除NameNode存储的数据(同方法一)</li><li>如果SecondaryNameNode不和NameNode在一个主机节点上，需要将SecondaryNameNode存储数据的目录拷贝到NameNode存储数据的平级目录，并删除in_use.lock文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scp -r sobxiong@hadoop2:/opt/module/hadoop-3.1.3/data/tmp/dfs/namesecondary /data/tmp/dfs/</span><br><span class="line">cd /data/tmp/dfs/namesecondary</span><br><span class="line">rm -rf in_use.lock</span><br></pre></td></tr></table></figure><ul><li>导入检查点数据(等待一会ctrl+c结束掉)</li><li>启动NameNode：sbin/hadoop-daemon.sh start namenode</li></ul></li></ul></li><li><p>集群安全模式</p><ul><li><p>概述</p><ul><li>NameNode启动<br>NameNode启动时，首先将镜像文件(Fsimage)载入内存，并执行编辑日志(Edits)中的各项操作。一旦在内存中成功建立文件系统元数据的映像，则创建一个新的Fsimage文件和一个空的编辑日志。此时，NameNode开始监听DataNode请求。<strong>这个过程期间，NameNode一直运行在安全模式，即NameNode的文件系统对于客户端来说是只读的</strong></li><li>DataNode启动</li></ul><p><strong>系统中的数据块的位置并不是由NameNode维护的，而是以块列表的形式存储在DataNode中。</strong>在系统的正常操作期间，NameNode会在内存中保留所有块位置的映射信息。在安全模式下，各个DataNode会向NameNode发送最新的块列表信息，NameNode了解到足够多的块位置信息之后，即可高效运行文件系统</p><ul><li>安全模式退出判断<br>如果满足“<strong>最小副本条件</strong>”，NameNode会在30秒钟之后就退出安全模式。所谓的最小副本条件指的是在整个文件系统中99.9%的块满足最小副本级别(默认值：dfs.replication.min=1)。<strong>在启动一个刚刚格式化的HDFS集群时，因为系统中还没有任何块，所以NameNode不会进入安全模式</strong></li></ul></li><li><p>基本语法<br>集群处于安全模式，不能执行重要操作(写操作)。集群启动完成后，自动退出安全模式</p><ul><li>查看安全模式状态：bin/hdfs dfsadmin -safemode get</li><li>进入安全模式状态：bin/hdfs dfsadmin -safemode enter</li><li>离开安全模式状态：bin/hdfs dfsadmin -safemode leave</li><li><strong>等待安全模式状态：bin/hdfs dfsadmin -safemode wait</strong></li></ul></li><li><p>案例<br>模拟等待安全模式</p><ul><li>查看当前模式：bin/hdfs dfsadmin -safemode get</li><li>先进入安全模式：bin/hdfs dfsadmin -safemode enter</li><li>创建并执行下面的脚本</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">touch safemode.sh</span><br><span class="line">vim safemode.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> safemode.sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">hdfs dfsadmin -safemode wait</span><br><span class="line">hdfs dfs -put /opt/module/hadoop-3.1.3/README.txt /</span><br><span class="line"></span><br><span class="line">chmod 777 safemode.sh</span><br><span class="line">./safemode.sh</span><br></pre></td></tr></table></figure><ul><li>再打开一个窗口，执行：hdfs dfsadmin -safemode leave</li><li>安全模式退出，HDFS集群上已经有上传的数据了</li></ul></li></ul></li><li><p>NameNode多目录配置</p><ul><li><p>NameNode的本地目录可以配置成多个，但每个目录存放内容相同(相当于备份)，增加了可靠性</p></li><li><p>具体配置如下</p><ul><li>在hdfs-site.xml文件中增加如下内容</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:///$&#123;hadoop.tmp.dir&#125;/dfs/name1,file:///$&#123;hadoop.tmp.dir&#125;/dfs/name2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>停止集群，删除data和logs中所有数据</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hadoop2：sbin/stop-yarn.sh</span><br><span class="line">hadoop2：rm -rf data/ logs/</span><br><span class="line">hadoop1：sbin/stop-dfs.sh</span><br><span class="line">hadoop2：rm -rf data/ logs/s</span><br><span class="line">hadoop3：rm -rf data/ logs/s</span><br></pre></td></tr></table></figure><ul><li>格式化集群并启动</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hadoop1：bin/hdfs namenode -format</span><br><span class="line">hadoop1：sbin/start-dfs.sh</span><br><span class="line">hadoop2：sbin/start-yarn.sh</span><br></pre></td></tr></table></figure><ul><li>查看结果：dfs目录下出现两个目录name1和name2</li></ul></li></ul></li></ul><h2 id="DataNode"><a href="#DataNode" class="headerlink" title="DataNode"></a>DataNode</h2><ul><li><p>DataNode工作机制<br><img src="DataNode%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6.png" alt="DataNode工作机制"></p><ul><li>一个数据块在DataNode上以文件形式存储在磁盘上，包括两个文件，一个是数据本身，一个是元数据包括数据块的长度，块数据的校验和，以及时间戳</li><li>DataNode启动后向NameNode注册，通过后，周期性(1小时)的向NameNode上报所有的块信息</li><li>心跳是每3秒一次，心跳返回结果带有NameNode给该DataNode的命令如复制块数据到另一台机器，或删除某个数据块。如果超过10分钟没有收到某个DataNode的心跳，则认为该节点不可用</li><li>集群运行中可以安全加入和退出一些机器</li></ul></li><li><p>数据完整性<br>DataNode节点保证数据完整性的方法：</p><ul><li>当DataNode读取Block的时候，它会计算CheckSum(类似crc校验位)</li><li>如果计算后的CheckSum，与Block创建时值不一样，说明Block已经损坏</li><li>Client读取其他DataNode上的Block</li><li>DataNode在其文件创建后周期验证CheckSum</li></ul></li><li><p>掉线时限参数设置<br><img src="DataNode%E6%8E%89%E7%BA%BF%E6%97%B6%E9%99%90%E5%8F%82%E6%95%B0%E8%AE%BE%E7%BD%AE.png" alt="DataNode掉线时限参数设置"><br>hdfs-default.xml：</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- heartbeat.recheck.interval单位为毫秒 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.heartbeat.recheck-interval<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>300000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- dfs.heartbeat.interval单位为秒 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.heartbeat.interval<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><del>服役新数据节点(hadoop4未服役)</del></p><ul><li><p>需求：随着公司业务的增长，数据量越来越大，原有的数据节点的容量已经不能满足存储数据的需求，需要在原有集群基础上动态添加新的数据节点</p></li><li><p>环境准备</p><ul><li>利用hadoop3主机再克隆一台hadoop4主机</li><li>修改hadoop4主机IP地址和主机名称</li><li>在hadoop1主机上将/etc/hosts下添加hadoop4的ip地址映射条目，并分发到hadoop2-4</li><li><strong>hadoop4主机删除原来HDFS文件系统留存的文件(data和log目录)——不然会发生3和4轮换出现的问题,因为3和4有着一样的data和log</strong></li><li>reboot重启加载配置</li></ul></li><li><p>服役新节点具体步骤</p><ul><li>hadoop1-3按之前步骤已启动</li><li>在hadoop4主机上单独启动：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hdfs --daemon start datanode</span><br><span class="line">yarn --daemon start nodemanager</span><br></pre></td></tr></table></figure><ul><li>刷新NameNode和ResourceManager：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfsadmin -refreshNodes</span><br><span class="line">yarn rmadmin -refreshNodes</span><br></pre></td></tr></table></figure><ul><li>刷新<a href="http://hadoop1:9870" target="_blank" rel="noopener">http://hadoop1:9870</a>web页面，等待</li><li>在hadoop4上上传文件</li><li>如果数据不均衡，可以使用命令实现集群的在平衡：sbin/start-balancer.sh</li></ul></li><li><p>结束后在workers文件中加入hadoop4，之后直接start-dfs.sh和start-yarn.sh即可启动</p></li></ul></li><li><p><del>退役旧数据节点(hadoop4未退役)</del></p><ul><li><p><del>添加白名单(hadoop4未退役)</del><br>添加到白名单的主机节点，都允许访问NameNode，不在白名单的主机节点，都会被退出</p><ul><li>在NameNode的hadoop-3.1.3/etc/hadoop目录下创建dfs.hosts文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">touch dfs.hosts</span><br><span class="line">vim dfs.hosts</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> dfs.hosts(不添加hadoop4,不允许有空行和空格)</span></span><br><span class="line">hadoop1</span><br><span class="line">hadoop2</span><br><span class="line">hadoop3</span><br></pre></td></tr></table></figure><ul><li>在NameNode的hdfs-site.xml配置文件中增加dfs.hosts属性</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/module/hadoop-3.1.3/etc/hadoop/dfs.hosts<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置文件分发：xsync hdfs-site.xml;xsync dfs.hosts</li><li>刷新NameNode和ResourceManager：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfsadmin -refreshNodes</span><br><span class="line">yarn rmadmin -refreshNodes</span><br></pre></td></tr></table></figure><ul><li>在web页面刷新等待</li></ul></li><li><p><del>黑名单退役(hadoop4未退役)</del><br>在黑名单上面的主机都会被强制退出。<strong>注意：不允许白名单和黑名单中同时出现同一个主机名称</strong></p><ul><li>在hadoop-3.1.3/etc/hadoop下创建dfs.hosts.exclude文件，并加入要退役节点</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">touch dfs.hosts.exclude</span><br><span class="line">vim dfs.hosts.exclude</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> dfs.hosts.exclude</span></span><br><span class="line">hadoop4</span><br></pre></td></tr></table></figure><ul><li>在NameNode的hdfs-site.xml配置文件中增加dfs.hosts.exclude属性</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.hosts.exclude<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/module/hadoop-3.1.3/etc/hadoop/dfs.hosts.exclude<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>刷新NameNode和ResourceManager：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfsadmin -refreshNodes</span><br><span class="line">yarn rmadmin -refreshNodes</span><br></pre></td></tr></table></figure><ul><li>刷新web页面等待</li></ul></li></ul></li><li><p>DataNode多目录配置</p><ul><li>DataNode也可以配置成多个目录，每个目录存储的数据不一样。即：数据不是副本</li><li>需要在hdfs-site.xml上修改配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:///$&#123;hadoop.tmp.dir&#125;/dfs/data1,file:///$&#123;hadoop.tmp.dir&#125;/dfs/data2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>关闭当前运行的hadoop节点</li><li>删除各节点的data和log目录</li><li>格式化dataNode</li><li>重启部署hadoop节点</li></ul></li></ul><h2 id="HDFS2-X新特性"><a href="#HDFS2-X新特性" class="headerlink" title="HDFS2.X新特性"></a>HDFS2.X新特性</h2><ul><li><p>集群间数据拷贝</p><ul><li>scp实现两个远程主机之间的文件复制</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 从当前主机向目的主机 推 push</span></span><br><span class="line">scp -r hello.txt root@hadoop2:/user/sobxiong/hello.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> 从目的主机向当前主机 拉 pull</span></span><br><span class="line">scp -r root@hadoop2:/user/sobxiong/hello.txt hello.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过本主机中转实现两个远程主机的文件复制</span></span><br><span class="line">scp -r root@hadoop2:/user/sobxiong/hello.txt root@hadoop3:/user/sobxiong</span><br></pre></td></tr></table></figure><ul><li>采用distcp命令实现<strong>两个Hadoop集群之间</strong>的递归数据复制</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop distcp hdfs://haoop1:9000/user/sobxiong/hello.txt hdfs://hadoop2:9000/user/sobxiong/hello.txt</span><br></pre></td></tr></table></figure></li><li><p>小文件存档</p><ul><li><p>HDFS存储小文件弊端<br>每个文件均按块存储，每个块的元数据存储在NameNode的内存中，因此HDFS存储小文件会非常低效。因为<strong>大量的小文件会耗尽NameNode中的大部分内存。但注意，存储小文件所需要的磁盘容量和数据块的大小无关</strong>。例如，一个1MB的文件设置为128MB的块存储，实际使用的是1MB的磁盘空间，而不是128MB</p></li><li><p>解决存储小文件办法之一<br>HDFS存档文件或HAR文件，是一个更高效的文件存档工具，它将文件存入HDFS块，在减少NameNode内存使用的同时，允许对文件进行透明的访问。具体说来，HDFS存档文件对内还是一个一个独立文件，对NameNode而言却是一个整体，减少了NameNode的内存<br><img src="%E5%B0%8F%E6%96%87%E4%BB%B6%E5%BD%92%E6%A1%A3.png" alt="小文件归档"></p></li><li><p>实际操作</p><ul><li>启动YARN进程：start-yarn.sh(hadoop2)</li><li>归档文件(归档后的路径不得实现存在)<br>把/sobxiong目录里面的所有文件归档成一个叫input.har的归档文件，并把归档后文件存储到/sobxiongOutput路径下：hadoop archive -archiveName input.har -p /sobxiong /sobxiongOutput</li><li>查看归档：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 普通查看文件命令</span></span><br><span class="line">hadoop fs -ls R /sobxiongOutput/input.har</span><br><span class="line"><span class="meta">#</span><span class="bash"> -rw-r--r--   3 sobxiong supergroup          0 2020-06-24 16:06 /sobxiongOutput/input.har/_SUCCESS</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -rw-r--r--   3 sobxiong supergroup        305 2020-06-24 16:06 /sobxiongOutput/input.har/_index</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -rw-r--r--   3 sobxiong supergroup         23 2020-06-24 16:06 /sobxiongOutput/input.har/_masterindex</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -rw-r--r--   3 sobxiong supergroup     317029 2020-06-24 16:06 /sobxiongOutput/input.har/part-0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 采用har格式查看文件(可以像以往一样操作内部文件,也需要har格式)</span></span><br><span class="line">hadoop fs -ls R har:///sobxiongOutput/input.har</span><br><span class="line"><span class="meta">#</span><span class="bash"> -rw-r--r--   3 sobxiong supergroup      84942 2020-06-21 11:38 har:///sobxiongOutput/input.har/1tset.png</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -rw-r--r--   3 sobxiong supergroup      84942 2020-06-21 11:33 har:///sobxiongOutput/input.har/test.png</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -rw-r--r--   3 sobxiong supergroup     147145 2020-06-23 13:52 har:///sobxiongOutput/input.har/test6.txt</span></span><br></pre></td></tr></table></figure><ul><li>解归档文件：hadoop fs -cp har:///sobxiongOutput/input.har/* /</li></ul></li></ul></li><li><p>回收站<br>开启回收站功能，可以将删除的文件在不超时的情况下，恢复原数据，起到防止误删除、备份等作用</p><ul><li>开启回收站功能参数说明：<ul><li>默认值fs.trash.interval = 0，0表示禁用回收站；<strong>其他值表示设置文件的存活时间(分钟为单位)</strong></li><li>默认值fs.trash.checkpoint.interval = 0，检查回收站的间隔时间。该值设置和fs.trash.interval的参数值相同(要求fs.trash.checkpoint.interval &lt;= fs.trash.interval)</li></ul></li><li>回收站工作机制<br><img src="%E5%9B%9E%E6%94%B6%E7%AB%99%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6.png" alt="回收站工作机制"></li><li>启动回收站：修改core-site.xml，配置垃圾回收时间为1分钟</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.trash.interval<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>查看回收站：回收站在集群中的路径：/user/sobxiong/.Trash/</li><li>修改访问回收站用户名称：进入垃圾回收站用户名称，默认是dr.who，修改为sobxiong(同样是core-site.xml)</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.http.staticuser.user<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>atguigu<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>恢复回收站数据：hadoop fs -mv /user/sobxiong/.Trash/Current/user/sobxiong/input /</li><li>清空回收站：hadoop fs -expunge</li></ul></li><li><p>快照管理</p><ul><li><p>命令介绍<br><img src="%E5%BF%AB%E7%85%A7%E7%AE%A1%E7%90%86.png" alt="快照管理"></p></li><li><p>实际操作</p><ul><li>开启/禁用指定目录的快照功能：hdfs dfsadmin -allowSnapshot(-disallowSnapshot) /user/sobxiong/input</li><li>对目录创建快照</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -createSnapshot /user/sobxiong/input</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 快照和源文件使用相同数据</span></span><br><span class="line">hdfs dfs -ls R /user/sobxiong/input/.snapshot/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定名称创建快照</span></span><br><span class="line">hdfs dfs -createSnapshot /user/sobxiong/input test</span><br></pre></td></tr></table></figure><ul><li>重命名快照：hdfs dfs -renameSnapshot /user/sobxiong/input test test01</li><li>列出当前用户所有可快照目录：hdfs lsSnapshottableDir</li><li><strong>比较两个快照目录的不同之处(可以是源文件和快照,使用’.’,此时”.snapshot/name”用于指定具体快照)</strong>：hdfs snapshotDiff /user/sobxiong/input . .snapshot/test01</li><li>恢复快照：hdfs dfs -cp /user/sobxiong/input/.snapshot/s20200624-134303.027 /</li></ul></li></ul></li></ul><h2 id="MapReduce概述"><a href="#MapReduce概述" class="headerlink" title="MapReduce概述"></a>MapReduce概述</h2><ul><li><p>MapReduce定义</p><ul><li>MapReduce是一个<strong>分布式运算程序的编程框架</strong>，是用户开发“基于Hadoop的数据分析应用”的核心框架</li><li>MapReduce核心功能是<strong>将用户编写的业务逻辑代码和自带默认组件整合成一个完整的分布式运算程序</strong>，并发运行在一个Hadoop集群上</li></ul></li><li><p>MapReduce优缺点</p><ul><li>优点：<ul><li>MapReduce易于编程<br>它<strong>简单地实现一些接口，就可以完成一个分布式程序</strong>，这个分布式程序可以分布到大量廉价的PC机器上运行。也就是说你写一个分布式程序，跟写一个简单的串行程序是一模一样的。就是因为这个特点使得MapReduce编程变得非常流行</li><li>良好的扩展性(hadoop)<br>当你的计算资源不能得到满足的时候，你可以通过简单的增加机器来扩展它的计算能力</li><li>高容错性<br>MapReduce设计的初衷就是使程序能够部署在廉价的PC机器上，这就要求它具有很高的容错性。<strong>比如其中一台机器挂了，它可以把上面的计算任务转移到另外一个节点上运行，不至于这个任务运行失败</strong>，而且这个过程不需要人工参与，而完全是由Hadoop内部完成的</li><li>适合PB级以上海量数据的离线处理：可以实现上千台服务器集群并发工作，提供数据处理能力</li></ul></li><li>缺点：<ul><li>不擅长实时计算：MapReduce无法像MySQL一样，在毫秒或者秒级内返回结果</li><li>擅长流式计算<br>流式计算的输入数据是动态的，<strong>而MapReduce的输入数据集是静态的，不能动态变化</strong>。这是因为MapReduce自身的设计特点决定了数据源必须是静态的</li><li>不擅长DAG(有向图)计算<br>多个应用程序存在依赖关系，后一个应用程序的输入为前一个的输出。在这种情况下，MapReduce并不是不能做，而是使用后，<strong>每个MapReduce作业的输出结果都会写入到磁盘，会造成大量的磁盘IO，导致性能非常的低下</strong></li></ul></li></ul></li><li><p>核心思想<br><img src="MapRecude%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3.png" alt="MapRecude核心编程思想"></p></li><li><p>MapReduce进程<br>一个完整的MapReduce程序在分布式运行时有三类实例进程：</p><ul><li>MrAppMaster：负责整个程序的过程调度及状态协调</li><li>MapTask：负责Map阶段的整个数据处理流程</li><li>ReuceTask：负责Reduce阶段的整个数据处理流程</li></ul></li><li><p>常用数据序列化类型</p><table><thead><tr><th>Java类型</th><th>Hadoop Writable类型</th></tr></thead><tbody><tr><td>boolean</td><td>BooleanWritable</td></tr><tr><td>byte</td><td>ByteWritable</td></tr><tr><td>int</td><td>IntWritable</td></tr><tr><td>float</td><td>FloatWritable</td></tr><tr><td>long</td><td>LongWritable</td></tr><tr><td>double</td><td>DoubleWritable</td></tr><tr><td>String</td><td>Text</td></tr><tr><td>map</td><td>MapWritable</td></tr><tr><td>array</td><td>ArrayWritable</td></tr></tbody></table></li><li><p>MapReduce编程规范<br>用户编写的程序分成三个部分：Mapper、Reducer和Driver</p><ul><li>Mapper<ul><li>用户自定义的Mapper要继承自己的父类</li><li>Mapper的输入数据是KV对的形式(KV的类型可自定义)</li><li>Mapper中的业务逻辑写在map()方法中</li><li>Mapper的输出数据是KV对的形式(KV的类型可自定义)</li><li><strong>map()方法(MapTask进程)对每一个&lt;K,V&gt;调用一次</strong></li></ul></li><li>Reducer<ul><li>用户自定义的Reducer要继承自己的父类</li><li>Reducer的输入数据类型对应Mapper的输出数据类型，也是KV</li><li>Reducer的业务逻辑写在reduce()方法中</li><li><strong>ReduceTask进程对每一组相同k的&lt;k,v&gt;组调用一次reduce()方法</strong></li></ul></li><li>Driver：相当于YARN集群的客户端，用于提交我们整个程序到YARN集群，提交的是封装了MapReduce程序相关运行参数的job对象</li></ul></li><li><p>WordCount案例实操</p><ul><li><p>需求：在给定的文本文件中统计输出每一个单词出现的总次数</p></li><li><p>需求分析<br><img src="WordCount%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90.png" alt="WordCount需求分析"></p></li><li><p>环境准备</p><ul><li>创建maven空项目</li><li>改pom</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-hdfs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在resources资源文件夹下新建log4j.properties文件</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">INFO, stdout</span></span><br><span class="line"><span class="meta">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="string">%d %p [%c] - %m%n</span></span><br><span class="line"><span class="meta">log4j.appender.logfile</span>=<span class="string">org.apache.log4j.FileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.logfile.File</span>=<span class="string">target/spring.log</span></span><br><span class="line"><span class="meta">log4j.appender.logfile.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.logfile.layout.ConversionPattern</span>=<span class="string">%d %p [%c] - %m%n</span></span><br></pre></td></tr></table></figure><ul><li><p>编写MapReduce程序</p><ul><li>编写mapper类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* map阶段</span></span><br><span class="line"><span class="comment">* KEYIN：输入数据的key类型(默认写LongWritable:偏移量)</span></span><br><span class="line"><span class="comment">* VALUEIN：输入数据的value类型</span></span><br><span class="line"><span class="comment">* KEYOUT：输出数据的key类型</span></span><br><span class="line"><span class="comment">* VALUEOUT：输出数据的value类型</span></span><br><span class="line"><span class="comment">* &lt;sobxiong,1&gt;输出数据</span></span><br><span class="line"><span class="comment">* 输出作为reduce阶段的输入</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCountMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Text k = <span class="keyword">new</span> Text();</span><br><span class="line">    <span class="keyword">private</span> IntWritable v = <span class="keyword">new</span> IntWritable(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// sobxiong sobxiong</span></span><br><span class="line">        <span class="comment">// 1、获取一行</span></span><br><span class="line">        String lineStr = value.toString();</span><br><span class="line">        <span class="comment">// 2、切割单词</span></span><br><span class="line">        String[] words = lineStr.split(<span class="string">" "</span>);</span><br><span class="line">        <span class="comment">// 3、循环写出</span></span><br><span class="line">        <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">            <span class="comment">// &lt;sobxiong,1&gt;</span></span><br><span class="line">            k.set(word);</span><br><span class="line">            context.write(k, v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编写Reducer类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* reduce阶段</span></span><br><span class="line"><span class="comment">* KEYIN,VALUEIN：map阶段输出的kv</span></span><br><span class="line"><span class="comment">* KEYOUT,VALUEOUT：reduce输出的kv</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCountReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IntWritable v = <span class="keyword">new</span> IntWritable();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 1、累加求和</span></span><br><span class="line">        <span class="keyword">for</span> (IntWritable value : values) &#123;</span><br><span class="line">            sum += value.get();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2、写出 &lt;sobxiong,2&gt;</span></span><br><span class="line">        v.set(sum);</span><br><span class="line">        context.write(key, v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编写Driver驱动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCountDriver</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line">      <span class="comment">// 1、获取Job对象</span></span><br><span class="line">      Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">      Job job = Job.getInstance(conf);</span><br><span class="line">      <span class="comment">// 2、设置jar存储位置</span></span><br><span class="line">      job.setJarByClass(WordCountDriver<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">      <span class="comment">// 3、关联Map和Reduce类</span></span><br><span class="line">      job.setMapperClass(WordCountMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">      job.setReducerClass(WordCountReducer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">      <span class="comment">// 4、设置map阶段输出数据的kv类型</span></span><br><span class="line">      job.setMapOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">      job.setMapOutputValueClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">      <span class="comment">// 5、设置最终数据输出的kv类型</span></span><br><span class="line">      job.setOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">      job.setOutputValueClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">      <span class="comment">// 6、设置程序运行的输入和输出路径</span></span><br><span class="line">      FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">      FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">      <span class="comment">// 7、提交job</span></span><br><span class="line">      <span class="comment">// job.submit();</span></span><br><span class="line">      <span class="comment">// true：打印一些信息</span></span><br><span class="line">      <span class="keyword">boolean</span> result = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">      <span class="comment">// 额外</span></span><br><span class="line">      System.exit(result ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>本地测试：启动旁边的下箭头Edit Configuration，新增Application，选择Main Class并在Program arguments中加入两个参数中间用空格隔开，前者是input文件所在文件夹，后者是输出文件夹，要求不能存在(不然会出错)。例如：/Users/sobxiong/Downloads/input /Users/sobxiong/Downloads/ouputTest</p></li><li><p>在集群上测试</p><ul><li>用maven打jar包，添加打包插件依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="tag">&lt;/<span class="name">descriptorRef</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.xiong.hadoop.WordCountDriver<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>将程序打成jar包，maven install即可</li><li>将获取的两个jar包(一个不带依赖,另一带)，将不带依赖的jar上传到hadoop1主机上</li><li>启动Hadoop集群</li><li>执行WordCount程序：hadoop jar WordCount.jar com.xiong.hadoop.WordCountDriver /sobxiong /outputTest(第四个参数为启动的主类名,第五个为输入文件所在文件夹,第六个为输出文件夹——不能事先存在)</li></ul></li></ul></li></ul></li></ul><h2 id="Hadoop序列化"><a href="#Hadoop序列化" class="headerlink" title="Hadoop序列化"></a>Hadoop序列化</h2><ul><li><p>序列化概述</p><ul><li>什么是序列化：<em>序列化</em>就是把<strong>内存中的对象，转换成字节序列</strong>(或其他数据传输协议)以便于存储到磁盘(持久化)和网络传输；<em>反序列化</em>就是<strong>将收到字节序列(或其他数据传输协议)或者是磁盘的持久化数据，转换成内存中的对象</strong></li><li>为什么要序列化：一般来说，“活的”对象只生存在内存里，关机断电就没有了。而且“活的”对象只能由本地的进程使用，不能被发送到网络上的另外一台计算机。然而<strong>序列化可以存储“活的”对象，可以将“活的”对象发送到远程计算机</strong></li><li>为什么不用Java的序列化：Java的序列化是一个重量级序列化框架(Serializable)，一个对象被序列化后，会附带很多额外的信息(各种校验信息，Header，继承体系等)，不便于在网络中高效传输。所以，Hadoop自己开发了一套序列化机制(Writable)</li><li>Hadoop序列化特点：<ul><li>紧凑：高效使用存储空间</li><li>快速：读写数据的额外开销小</li><li>可扩展：随着通信协议的升级而可升级</li><li>互操作：支持多语言的交互</li></ul></li></ul></li><li><p>自定义bean对象实现序列化接口(Writable)<br>在企业开发中往往常用的基本序列化类型不能满足所有需求，比如在Hadoop框架内部传递一个bean对象，那么该对象就需要实现序列化接口。<br>具体实现bean对象序列化步骤如下7步：</p><ul><li>实现Writable接口</li><li>反序列化时，需要反射调用空参构造函数，所以必须有空参构造</li><li>重写序列化方法</li><li>重写反序列化方法(<strong>注意反序列化的顺序和序列化的顺序完全一致</strong>)</li><li>要想把结果显示在文件中，需要重写toString()，可用”\t”分开，方便后续用</li><li>如果需要将自定义的bean放在key中传输，则还需要实现Comparable接口，因为MapReduce框架中的Shuffle过程要求对key必须能排序</li></ul></li><li><p>序列化案例实操</p><ul><li><p>需求：统计每一个手机号耗费的总上行流量、下行流量、总流量</p></li><li><p>案例分析<br><img src="%E5%BA%8F%E5%88%97%E5%8C%96%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90.png" alt="序列化案例分析"></p></li><li><p>编写MapReduce程序</p><ul><li>编写流量统计的Bean对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">测试数据</span></span><br><span class="line"><span class="comment">1;13736230513;192.196.100.1;www.atguigu.com;2481;24681;200</span></span><br><span class="line"><span class="comment">2;13846544121;192.196.100.2;264;0;200</span></span><br><span class="line"><span class="comment">3;13956435636;192.196.100.3;132;1512;200</span></span><br><span class="line"><span class="comment">4;13966251146;192.168.100.1;240;0;404</span></span><br><span class="line"><span class="comment">5;18271575951;192.168.100.2;www.atguigu.com;1527;2106;200</span></span><br><span class="line"><span class="comment">6;84188413;192.168.100.3;www.atguigu.com;4116;1432;200</span></span><br><span class="line"><span class="comment">7;13590439668;192.168.100.4;1116;954;200</span></span><br><span class="line"><span class="comment">8;15910133277;192.168.100.5;wwww.haol23.com;3156;2936;200</span></span><br><span class="line"><span class="comment">9;13729199489;192.168.100.6;240;0;200</span></span><br><span class="line"><span class="comment">10;13630577991;192.168.100.7;www.shouhu.com;6960;690;200</span></span><br><span class="line"><span class="comment">11;15043685818;192.168.100.8;www.baidu.com;3659;3538;200</span></span><br><span class="line"><span class="comment">12;15959002129;192.168.100.9;www.atguigu.com;1938;180;500</span></span><br><span class="line"><span class="comment">13;13560439638;192.168.100.10;918;4938;200</span></span><br><span class="line"><span class="comment">14;13470253144;192.168.100.11;180;180;200</span></span><br><span class="line"><span class="comment">15;13682846555;192.168.100.12;wwww.qq.com;1938;2910;200</span></span><br><span class="line"><span class="comment">16;13992314666;192.168.100.13;www.gaga.com;3008;3720;200</span></span><br><span class="line"><span class="comment">17;13509468723;192.168.100.14;www.qinghua.com;7335;110349;404</span></span><br><span class="line"><span class="comment">18;18390173782;192.168.100.15;www.sogou.com;9531;2412;200</span></span><br><span class="line"><span class="comment">19;13975057813;192.168.100.16;www.baidu.com;11058;48243;200</span></span><br><span class="line"><span class="comment">20;13768778790;192.168.100.17;120;120;200</span></span><br><span class="line"><span class="comment">21;13568436656;192.168.100.18;www.alibaba.com;2481;24681;200</span></span><br><span class="line"><span class="comment">22;13568436656;192.168.100.19;1116;954;200</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowBean</span> <span class="keyword">implements</span> <span class="title">Writable</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 上行流量</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> upFlow;</span><br><span class="line">  <span class="comment">// 下行流量</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> downFlow;</span><br><span class="line">  <span class="comment">// 总流量</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> sumFlow;</span><br><span class="line">  <span class="comment">// 空参构造,为了后续反射</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">FlowBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 序列化方法</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(DataOutput dataOutput)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">      dataOutput.writeLong(upFlow);</span><br><span class="line">      dataOutput.writeLong(downFlow);</span><br><span class="line">      dataOutput.writeLong(sumFlow);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 反序列化方法</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFields</span><span class="params">(DataInput dataInput)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">      <span class="comment">// 必须要求和序列化方法顺序一致</span></span><br><span class="line">      upFlow = dataInput.readLong();</span><br><span class="line">      downFlow = dataInput.readLong();</span><br><span class="line">      sumFlow = dataInput.readLong();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> upFlow + <span class="string">"\t"</span> + downFlow + <span class="string">"\t"</span> + sumFlow;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">long</span> upFlow, <span class="keyword">long</span> downFlow)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.upFlow = upFlow;</span><br><span class="line">      <span class="keyword">this</span>.downFlow = downFlow;</span><br><span class="line">      <span class="keyword">this</span>.sumFlow = upFlow + downFlow;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编写mapper类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">FlowBean</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Text k = <span class="keyword">new</span> Text();</span><br><span class="line">  <span class="keyword">private</span> FlowBean flowBean = <span class="keyword">new</span> FlowBean();</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">      <span class="comment">// 1、获取一行</span></span><br><span class="line">      String lineStr = value.toString();</span><br><span class="line">      <span class="comment">// 2、切割\t</span></span><br><span class="line">      String[] fields = lineStr.split(<span class="string">"\t"</span>);</span><br><span class="line">      <span class="comment">// 3、封装对象</span></span><br><span class="line">      k.set(fields[<span class="number">1</span>]);</span><br><span class="line">      <span class="keyword">long</span> upFlow = Long.parseLong(fields[fields.length - <span class="number">3</span>]);</span><br><span class="line">      <span class="keyword">long</span> downFlow = Long.parseLong(fields[fields.length - <span class="number">2</span>]);</span><br><span class="line">      flowBean.set(upFlow, downFlow);</span><br><span class="line">      <span class="comment">// 4、写出</span></span><br><span class="line">      context.write(k, flowBean);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编写Reducer类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">FlowBean</span>, <span class="title">Text</span>, <span class="title">FlowBean</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> FlowBean v = <span class="keyword">new</span> FlowBean();</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;FlowBean&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">      <span class="comment">// 1、累加求和</span></span><br><span class="line">      <span class="keyword">long</span> sumUpFlow = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">long</span> sumDownFlow = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (FlowBean value : values) &#123;</span><br><span class="line">          sumUpFlow += value.getUpFlow();</span><br><span class="line">          sumDownFlow += value.getDownFlow();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 2、写出</span></span><br><span class="line">      v.set(sumUpFlow, sumDownFlow);</span><br><span class="line">      context.write(key, v);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编写Driver驱动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// 1、获取job对象</span></span><br><span class="line">    Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">    Job job = Job.getInstance(conf);</span><br><span class="line">    <span class="comment">// 2、设计jar路径</span></span><br><span class="line">    job.setJarByClass(FlowDriver<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">// 3、关联mapper和reducer</span></span><br><span class="line">    job.setMapperClass(FlowMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    job.setReducerClass(FlowReducer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">// 4、设置mapper输出的kv类型</span></span><br><span class="line">    job.setMapOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    job.setMapOutputValueClass(FlowBean<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">// 5、设置最终输出的kv类型</span></span><br><span class="line">    job.setOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    job.setOutputValueClass(FlowBean<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">// 6、设置输入输出路径</span></span><br><span class="line">    FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">    FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">    <span class="comment">// 7、提交job</span></span><br><span class="line">    <span class="keyword">boolean</span> result = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">    System.exit(result ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="MapReduce框架原理"><a href="#MapReduce框架原理" class="headerlink" title="MapReduce框架原理"></a>MapReduce框架原理</h2><ul><li><p>InputFormat数据输入</p><ul><li><p>切片与MapTask并行度决定机制</p><ul><li>问题引出：MapTask的并行度决定Map阶段的任务处理并发度，进而影响到整个Job的处理速度<br>思考：1G的数据，启动8个MapTask，可以提高集群的并发处理能力。那么1K的数据，也启动8个MapTask，会提高集群性能吗？MapTask并行任务是否越多越好呢？哪些因素影响了MapTask并行度？</li><li>MapTask并行度决定机制</li></ul><p><strong>数据块</strong>：Block是HDFS物理上把数据分成一块一块<br><strong>数据切片</strong>：数据切片只是在逻辑上对输入进行分片，并不会在磁盘上将其切分成片进行存储<br><img src="%E6%95%B0%E6%8D%AE%E5%88%87%E7%89%87%E4%B8%8EMapTask%E5%B9%B6%E8%A1%8C%E5%BA%A6%E5%86%B3%E5%AE%9A%E6%9C%BA%E5%88%B6.png" alt="数据切片与MapTask并行度决定机制"></p></li><li><p>Job提交流程源码和切片源码详解</p><ul><li>Job提交流程源码详解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">waitForCompletion();</span><br><span class="line">submit();</span><br><span class="line">  <span class="comment">// 1、建立连接</span></span><br><span class="line">  connect();</span><br><span class="line">    <span class="comment">// 1)创建提交Job的代理</span></span><br><span class="line">    <span class="keyword">new</span> Cluster(getConfiguration());</span><br><span class="line">      <span class="comment">// 判断是本地yarn还是远程</span></span><br><span class="line">      initialize(jobTrackAddr, conf);</span><br><span class="line">  <span class="comment">// 2、提交job</span></span><br><span class="line">  submitter.submitJobInternal(Job.<span class="keyword">this</span>, cluster);</span><br><span class="line">  <span class="comment">// 1)创建给集群提交数据的Stag路径</span></span><br><span class="line">  Path jobStagingArea = JobSubmissionFiles.getStagingDir(cluster, conf);</span><br><span class="line">  <span class="comment">// 2)获取jobid,并创建Job路径</span></span><br><span class="line">  JobID jobId = submitClient.getNewJobID();</span><br><span class="line">  <span class="comment">// 3)拷贝jar包到集群</span></span><br><span class="line">  copyAndConfigureFiles(job, submitJobDir);</span><br><span class="line">  rUploader.uploadFiles(job, jobSubmitDir);</span><br><span class="line">  <span class="comment">// 4)计算切片,生成切片规划文件</span></span><br><span class="line">  writeSplits(job, submitJobDir);</span><br><span class="line">    maps = writeNewSplits(job, jobSubmitDir);</span><br><span class="line">    input.getSplits(job);</span><br><span class="line">  <span class="comment">// 5)向Stag路径写XML配置文件</span></span><br><span class="line">  writeConf(conf, submitJobFile);</span><br><span class="line">  conf.writeXml(out);</span><br><span class="line">  <span class="comment">// 6)提交Job,返回提交状态</span></span><br><span class="line">  status = submitClient.submitJob(jobId, submitJobDir.toString(), job.getCredentials());</span><br></pre></td></tr></table></figure><p><img src="Job%E6%8F%90%E4%BA%A4%E6%B5%81%E7%A8%8B%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.png" alt="Job提交流程源码分析"></p><ul><li>FileInputFormat切片源码解析(input.getSplits(job))<ul><li>程序先找到你数据存储的目录</li><li>开始遍历处理(规划切片)目录下的每一个文件</li><li>遍历第一个文件ss.txt<ul><li>获取文件大小fs.sizeOf(ss.txt)</li><li>计算切片大小：computeSplitSize(Math.max(minSize,Math.min(maxSize,blocksize)))=blocksize=128M(YARN集群默认128M——2.x,62M-1.x;本地运行默认32M)</li><li><strong>默认情况下，切片大小=blocksize</strong></li><li>开始切，形成第1个切片：ss.txt—0:128M、第2个切片ss.txt—128:256M、第3个切片ss.txt—256M:300M(<strong>每次切片时，都要判断切完剩下的部分是否大于块的1.1倍，不大于1.1倍就划分一块切片</strong>)</li><li>将切片信息写到一个切片规划文件中</li><li>整个切片的核心过程在getSplit()方法中完成</li><li><strong>InputSplit只记录了切片的元数据信息</strong>，比如起始位置、长度以及所在的节点列表等</li></ul></li><li><strong>提交切片规划文件到YARN上，YARN上的MrAppMaster就可以根据切片规划文件计算开启MapTask个数</strong></li></ul></li></ul></li><li><p>FileInputFormat切片机制</p><ul><li><p>切片机制</p><ul><li>简单地按照文件的内容长度进行切片</li><li>切片大小，默认等于Block大小</li><li><strong>切片时不考虑数据集整体，而是逐个针对每一个文件单独切片</strong></li></ul></li><li><p>案例分析</p><ul><li>输入数据有两个文件：file1.txt - 320M;file2.txt - 10M</li><li>经过FileInputFormat的切片机制运算后，形成的切片信息如下：</li></ul><table><thead><tr><th>文件</th><th>切片区间</th></tr></thead><tbody><tr><td>file1.txt.split1</td><td>0~128</td></tr><tr><td>file1.txt.split2</td><td>129~256</td></tr><tr><td>file1.txt.split3</td><td>257~320</td></tr><tr><td>file2.txt.split1</td><td>0~10</td></tr></tbody></table></li><li><p>切片大小参数配置</p><ul><li>源码中计算切片大小的公式：Math.max(minSize, Math.min(maxSize, blockSize));<br>mapreduce.input.fileinputformat.split.minsize=<strong>1</strong> 默认值为1<br>mapreduce.input.fileinputformat.split.maxsize=<strong>Long.MAXValue</strong> 默认值Long.MAXValue</li></ul><p><strong>默认情况下，切片大小=blocksize</strong></p><ul><li>切片大小设置<br>maxsize(切片最大值)：参数如果调得比blockSize小，则会让切片变小，而且就等于配置的这个参数的值<br>minsize(切片最小值)：参数调的比blockSize大，则可以让切片变得比blockSize还大</li><li>获取切片信息API</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取切片的文件名称</span></span><br><span class="line">String name = inputSplit.getPath().getName();</span><br><span class="line"><span class="comment">// 根据文件类型获取切片信息</span></span><br><span class="line">FileSplit inputSplit = (FileSplit) context.getInputSplit();</span><br></pre></td></tr></table></figure></li></ul></li><li><p>CombineTextInputFormat切片机制<br>框架默认的TextInputFormat切片机制是对任务按文件规划切片，<strong>不管文件多小，都会是一个单独的切片</strong>，都会交给一个MapTask，<strong>这样如果有大量小文件，就会产生大量的MapTask，处理效率极其低下</strong></p><ul><li>应用场景：CombineTextInputFormat用于小文件过多的场景，它可以将多个小文件从逻辑上规划到一个切片中，这样，多个小文件就可以交给一个MapTask处理</li><li>虚拟存储切片最大值设置：CombineTextInputFormat.setMaxInputSplitSize(job, 4194304);(注意：虚拟存储切片最大值设置最好根据实际的小文件大小情况来设置具体的值)</li><li>切片机制切片机制：生成切片过程包括<strong>虚拟存储过程和切片过程二部分</strong><br><img src="CombineTextInputFormat%E5%88%87%E7%89%87%E6%9C%BA%E5%88%B6.png" alt="CombineTextInputFormat切片机制"><ul><li>虚拟存储过程<br>将输入目录下所有文件的大小依次和设置的setMaxInputSplitSize值比较，如果不大于设置的最大值，逻辑上划分一个块。如果输入文件大于设置的最大值且大于两倍，那么以最大值切割一块；当剩余数据大小超过设置的最大值且不大于最大值2倍，此时将文件<strong>均分</strong>成2个虚拟存储块(防止出现太小切片)<br>例如setMaxInputSplitSize值为4M，输入文件大小为8.02M，则先逻辑上分成一个4M。剩余的大小为4.02M，如果按照4M逻辑划分，就会出现0.02M的小的虚拟存储文件，所以将剩余的4.02M文件切分成(2.01M和2.01M)两个文件</li><li>切片过程<ul><li>判断虚拟存储的文件大小是否大于setMaxInputSplitSize值，大于等于则单独形成一个切片</li><li>如果不大于则跟下一个虚拟存储文件进行合并，共同形成一个切片</li><li><strong>测试举例</strong>：有4个小文件大小分别为1.7M、5.1M、3.4M以及6.8M这四个小文件，则虚拟存储之后形成6个文件块，大小分别为：1.7M、(2.55M、2.55M)、3.4M、(3.4M、3.4M)。最终会形成3个切片，大小分别为：(1.7M + 2.55M)，(2.55M + 3.4M)，(3.4M + 3.4M)</li></ul></li></ul></li></ul></li><li><p>CombineTextInputFormat案例实操</p><ul><li><p>需求：将输入的大量小文件合并成一个切片统一处理</p><ul><li>输入数据：准备4个小文件</li><li>期望：期望一个切片处理4个文件</li></ul></li><li><p>实现过程</p><ul><li>不做任何处理，运行之前的WordCount案例程序，观察切片个数为4——(number of splits:4)</li><li>在WordcountDriver中增加如下代码(设置切片最大值为4m)，运行程序，观察运行的切片个数为3</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果不设置InputFormat，它默认用的是TextInputFormat.class</span></span><br><span class="line">job.setInputFormatClass(CombineTextInputFormat<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//虚拟存储切片最大值设置4m</span></span><br><span class="line">CombineTextInputFormat.setMaxInputSplitSize(job, <span class="number">4194304</span>);</span><br></pre></td></tr></table></figure><ul><li>在WordcountDriver中增加如下代码(设置切片最大值为20m)，运行程序，观察运行的切片个数为1(代码同上,值改为20971520)</li></ul></li></ul></li><li><p>FileInputFormat实现类<br>思考：在运行MapReduce程序时，<em>输入的文件格式包括：基于行的日志文件、二进制格式文件、数据库表等</em>。那么，针对不同的数据类型，MapReduce是如何读取这些数据的呢?<br>FileInputFormat常见的接口实现类包括：<strong>TextInputFormat、KeyValueTextInputFormat、NLineInputFormat、CombineTextInputFormat和自定义InputFormat</strong>等</p><ul><li>TextInputFormat<br>TextInputFormat是默认的FileInputFormat实现类。<strong>按行读取每条记录，键是存储该行在整个文件中的起始字节偏移量——LongWritable类型；值是这行的内容，不包括任何行终止符(换行符和回车符)——Text类型</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 示例：</span><br><span class="line">Rich learning form</span><br><span class="line">Intelligent learning engine</span><br><span class="line">Learning more convenient</span><br><span class="line">From the real demand for more close to the enterprise</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 每条记录表示为以下键&#x2F;值对：</span><br><span class="line">(0,Rich learning form)</span><br><span class="line">(19,Intelligent learning engine)</span><br><span class="line">(47,Learning more convenient)</span><br><span class="line">(72,From the real demand for more close to the enterprise)</span><br></pre></td></tr></table></figure><ul><li>KeyValueTextInputFormat<br>每一行均为一条记录，被分隔符分割为&lt;key,value&gt;对。<strong>可以通过在驱动类中设置conf.set(KeyValueLineRecordReader.KEY_VALUE_SEPERATOR, “\t”)来设定分隔符——默认分隔符是tab(\t)</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 示例(其中——&gt;表示一个水平方向的制表符)：</span><br><span class="line">line1 ——&gt;Rich learning form</span><br><span class="line">line2 ——&gt;Intelligent learning engine</span><br><span class="line">line3 ——&gt;Learning more convenient</span><br><span class="line">line4 ——&gt;From the real demand for more close to the enterprise</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 每条记录表示为以下键&#x2F;值对(键是每行排在制表符之前的Text序列)：</span><br><span class="line">(line1,Rich learning form)</span><br><span class="line">(line2,Intelligent learning engine)</span><br><span class="line">(line3,Learning more convenient)</span><br><span class="line">(line4,From the real demand for more close to the enterprise)</span><br></pre></td></tr></table></figure><ul><li>NLineInputFormat<br>如果使用NlineInputFormat，代表每个map进程处理的<strong>InputSplit不再按Block块去划分，而是按NlineInputFormat指定的行数N来划分。即输入文件的总行数 / N = 切片数，如果不整除，切片数 = 商 + 1</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 示例：</span><br><span class="line">Rich learning form</span><br><span class="line">Intelligent learning engine</span><br><span class="line">Learning more convenient</span><br><span class="line">From the real demand for more close to the enterprise</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 如果N是2,则每个输入分片包含两行。开启2个MapTask(键和值与TextInputFormat生成的一样)：</span><br><span class="line">(0,Rich learning form)</span><br><span class="line">(19,Intelligent learning engine)</span><br><span class="line">&#x2F;&#x2F; 另一个mapper则收到后两行：</span><br><span class="line">(47,Learning more convenient)</span><br><span class="line">(72,From the real demand for more close to the enterprise)</span><br></pre></td></tr></table></figure></li><li><p>KeyValueTextInputFormat使用案例</p><ul><li><p>需求：统计输入文件中每一行的第一个单词相同的行数</p></li><li><p>案例分析<br><img src="KeyValueTextInputFormat%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90.png" alt="KeyValueTextInputFormat案例分析"></p></li><li><p>代码实现</p><ul><li>Mapper类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KVTextMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Text</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> IntWritable intWritable = <span class="keyword">new</span> IntWritable(<span class="number">1</span>);</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(Text key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">      <span class="comment">// 1、封装对象</span></span><br><span class="line">      <span class="comment">// 2、写出</span></span><br><span class="line">      context.write(key, intWritable);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Reducer类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KVTextReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> IntWritable intWritable = <span class="keyword">new</span> IntWritable();</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">      <span class="comment">// 1、累加求和</span></span><br><span class="line">      <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (IntWritable value : values) &#123;</span><br><span class="line">          sum += value.get();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 2、写出</span></span><br><span class="line">      intWritable.set(sum);</span><br><span class="line">      context.write(key, intWritable);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Driver类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line">  <span class="comment">// 1、获取Job对象</span></span><br><span class="line">  Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line">  configuration.set(KeyValueLineRecordReader.KEY_VALUE_SEPERATOR, <span class="string">" "</span>);</span><br><span class="line">  Job job = Job.getInstance(configuration);</span><br><span class="line">  <span class="comment">// 2、设置jar存储位置</span></span><br><span class="line">  job.setJarByClass(KVTextDriver<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">// 3、关联Map和Reduce类</span></span><br><span class="line">  job.setMapperClass(KVTextMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  job.setReducerClass(KVTextReducer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">// 4、设置map阶段输出数据的kv类型</span></span><br><span class="line">  job.setMapOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  job.setMapOutputValueClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">// 5、设置最终数据输出的kv类型</span></span><br><span class="line">  job.setOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  job.setOutputValueClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  job.setInputFormatClass(KeyValueTextInputFormat<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">// 6、设置程序运行的输入和输出路径</span></span><br><span class="line">  FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">  FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">  <span class="comment">// 7、提交job</span></span><br><span class="line">  <span class="keyword">boolean</span> result = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">  <span class="comment">// 额外</span></span><br><span class="line">  System.exit(result ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>NLineInputFormat使用案例</p><ul><li><p>需求：对每个单词进行个数统计，要求根据每个输入文件的行数来规定输出多少个切片。此案例要求每三行放入一个切片中</p></li><li><p>案例分析<br><img src="NLineInputFormat%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90.png" alt="NLineInputFormat案例分析"></p></li><li><p>代码实现</p><ul><li>Mapper和Reducer类参照WordCount</li><li>Driver类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line">  <span class="comment">// 1、获取Job对象</span></span><br><span class="line">  Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">  Job job = Job.getInstance(conf);</span><br><span class="line">  <span class="comment">// 设置切片InputSplit中划分三条记录</span></span><br><span class="line">  NLineInputFormat.setNumLinesPerSplit(job, <span class="number">3</span>);</span><br><span class="line">  <span class="comment">// 使用NLineInputFormat处理记录数</span></span><br><span class="line">  job.setInputFormatClass(NLineInputFormat<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">// 2、设置jar存储位置</span></span><br><span class="line">  job.setJarByClass(NLineDriver<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">// 3、关联Map和Reduce类</span></span><br><span class="line">  job.setMapperClass(NLineMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  job.setReducerClass(NLineReducer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">// 4、设置map阶段输出数据的kv类型</span></span><br><span class="line">  job.setMapOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  job.setMapOutputValueClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">// 5、设置最终数据输出的kv类型</span></span><br><span class="line">  job.setOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  job.setOutputValueClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">// 6、设置程序运行的输入和输出路径</span></span><br><span class="line">  FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">  FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">  <span class="comment">// 7、提交job</span></span><br><span class="line">  <span class="keyword">boolean</span> result = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">  <span class="comment">// 额外</span></span><br><span class="line">  System.exit(result ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>观察控制台打印的number of splits</p></li></ul></li><li><p>自定义InputFormat<br>在企业开发中，Hadoop框架自带的InputFormat类型不能满足所有应用场景，需要自定义InputFormat来解决实际问题<br>自定义InputFormat步骤如下：</p><ul><li>自定义一个类继承FileInputFormat</li><li>改写RecordReader，实现一次读取一个完整文件封装为KV</li><li>在输出时使用SequenceFileOutPutFormat输出合并文件</li></ul></li><li><p>自定义InputFormat案例实操</p><ul><li><p>需求：将多个小文件合并成一个SequenceFile文件(SequenceFile文件是Hadoop用来存储二进制形式的key-value对的文件格式)，SequenceFile里面存储着多个文件，存储的形式为key——文件路径 + 名称，value——文件内容</p></li><li><p>案例分析<br><img src="%E8%87%AA%E5%AE%9A%E4%B9%89InputFormat%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90.png" alt="自定义InputFormat案例分析"></p></li><li><p>代码实现</p><ul><li>自定义InputFormat</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WholeFileInputFormat</span> <span class="keyword">extends</span> <span class="title">FileInputFormat</span>&lt;<span class="title">Text</span>, <span class="title">BytesWritable</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> RecordReader&lt;Text, BytesWritable&gt; <span class="title">createRecordReader</span><span class="params">(InputSplit split, TaskAttemptContext context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">      WholeRecordReader recordReader = <span class="keyword">new</span> WholeRecordReader();</span><br><span class="line">      recordReader.initialize(split, context);</span><br><span class="line">      <span class="keyword">return</span> recordReader;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>自定义RecordReader类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WholeRecordReader</span> <span class="keyword">extends</span> <span class="title">RecordReader</span>&lt;<span class="title">Text</span>, <span class="title">BytesWritable</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> FileSplit split;</span><br><span class="line">  <span class="keyword">private</span> Configuration configuration;</span><br><span class="line">  <span class="keyword">private</span> Text k = <span class="keyword">new</span> Text();</span><br><span class="line">  <span class="keyword">private</span> BytesWritable v = <span class="keyword">new</span> BytesWritable();</span><br><span class="line">  <span class="keyword">boolean</span> isProgress = <span class="keyword">true</span>;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(InputSplit split, TaskAttemptContext context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">      <span class="comment">// 初始化</span></span><br><span class="line">      <span class="keyword">this</span>.split = (FileSplit) split;</span><br><span class="line">      configuration = context.getConfiguration();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">nextKeyValue</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">      <span class="comment">// 核心业务逻辑</span></span><br><span class="line">      <span class="comment">// 每个文件创建一次reader</span></span><br><span class="line">      <span class="keyword">if</span> (isProgress) &#123;</span><br><span class="line">          <span class="comment">// 1、获取fs对象</span></span><br><span class="line">          Path path = split.getPath();</span><br><span class="line">          FileSystem fileSystem = path.getFileSystem(configuration);</span><br><span class="line">          <span class="comment">// 2、获取输入流</span></span><br><span class="line">          FSDataInputStream fis = fileSystem.open(path);</span><br><span class="line">          <span class="comment">// 3、拷贝</span></span><br><span class="line">          <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>) split.getLength()];</span><br><span class="line">          IOUtils.readFully(fis, buffer, <span class="number">0</span>, buffer.length);</span><br><span class="line">          <span class="comment">// 4、封装v</span></span><br><span class="line">          v.set(buffer, <span class="number">0</span>, buffer.length);</span><br><span class="line">          <span class="comment">// 5、封装key</span></span><br><span class="line">          k.set(path.toString());</span><br><span class="line">          <span class="comment">// 6、关闭资源</span></span><br><span class="line">          IOUtils.closeStream(fis);</span><br><span class="line">          isProgress = <span class="keyword">false</span>;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Text <span class="title">getCurrentKey</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123; <span class="keyword">return</span> k; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> BytesWritable <span class="title">getCurrentValue</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123; <span class="keyword">return</span> v; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getProgress</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Mapper类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SequenceFileMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Text</span>, <span class="title">BytesWritable</span>, <span class="title">Text</span>, <span class="title">BytesWritable</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(Text key, BytesWritable value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">      context.write(key, value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Reducer类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SequenceFileReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">BytesWritable</span>, <span class="title">Text</span>, <span class="title">BytesWritable</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;BytesWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">      <span class="comment">// 循环写出</span></span><br><span class="line">      <span class="keyword">for</span> (BytesWritable value : values) &#123;</span><br><span class="line">          context.write(key, value);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Driver类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line">  <span class="comment">// 1、获取job对象</span></span><br><span class="line">  Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">  Job job = Job.getInstance(conf);</span><br><span class="line">  job.setInputFormatClass(WholeFileInputFormat<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  job.setOutputFormatClass(SequenceFileOutputFormat<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">// 2、设计jar路径</span></span><br><span class="line">  job.setJarByClass(SequenceFileDriver<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">// 3、关联mapper和reducer</span></span><br><span class="line">  job.setMapperClass(SequenceFileMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  job.setReducerClass(SequenceFileReducer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">// 4、设置mapper输出的kv类型</span></span><br><span class="line">  job.setMapOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  job.setMapOutputValueClass(BytesWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">// 5、设置最终输出的kv类型</span></span><br><span class="line">  job.setOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  job.setOutputValueClass(BytesWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">// 6、设置输入输出路径</span></span><br><span class="line">  FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">  FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">  <span class="comment">// 7、提交job</span></span><br><span class="line">  <span class="keyword">boolean</span> result = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">  System.exit(result ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li><li><p>MapReduce工作流程</p><ul><li>流程示意图<br><img src="MapReduce%E8%AF%A6%E7%BB%86%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B(1).png" alt="MapReduce详细工作流程(1)"><br><img src="MapReduce%E8%AF%A6%E7%BB%86%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B(2).png" alt="MapReduce详细工作流程(2)"></li><li>流程详解<br>上面的流程是整个MapReduce的全部工作流程，Shuffle过程是从第7步开始到第16步结束，具体Shuffle过程详解，如下：<ul><li>MapTask收集我们的map()方法输出的kv对，放到内存缓冲区中</li><li>从内存缓冲区不断溢出本地磁盘文件，可能会溢出多个文件</li><li>多个溢出文件会被合并成大的溢出文件</li><li>在溢出过程及合并的过程中，都要调用Partitioner进行分区和针对key进行排序</li><li>ReduceTask根据自己的分区号，去各个MapTask机器上取相应的结果分区数据</li><li>ReduceTask会取到同一个分区的来自不同MapTask的结果文件，ReduceTask会将这些文件再进行合并(归并排序)</li><li>合并成大文件后，Shuffle的过程也就结束了，后面进入ReduceTask的逻辑运算过程——从文件中取出一个一个的键值对Group，调用用户自定义的reduce()方法</li></ul></li><li>注意<br>Shuffle中的缓冲区大小会影响到MapReduce程序的执行效率，原则上说，缓冲区越大，磁盘io的次数越少，执行速度就越快。<br>缓冲区的大小可以通过参数调整，参数：io.sort.mb默认100M</li></ul></li><li><p>Shuffle</p><ul><li><p>Shuffle机制：Map方法之后，Reduce方法之前的数据处理过程称之为Shuffle<br><img src="Shuffle%E6%9C%BA%E5%88%B6.png" alt="Shuffle机制"></p></li><li><p>Partition分区</p><ul><li>问题引出：要求将统计结果按照条件输出到不同文件中(分区)。比如：将统计结果按照手机归属地不同省份输出到不同文件中(分区)</li><li>默认Partitionr分区：默认分区是根据key的hashCode对ReduceTasks个数取模得到的(如果分区数大于1)。用户没法控制哪个key存储到哪个分区</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashPartitioner</span>&lt;<span class="title">K2</span>, <span class="title">V2</span>&gt; <span class="keyword">implements</span> <span class="title">Partitioner</span>&lt;<span class="title">K2</span>, <span class="title">V2</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(JobConf job)</span> </span>&#123;&#125;</span><br><span class="line">  <span class="comment">/** Use &#123;<span class="doctag">@link</span> Object#hashCode()&#125; to partition. */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPartition</span><span class="params">(K2 key, V2 value, <span class="keyword">int</span> numReduceTasks)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (key.hashCode() &amp; Integer.MAX_VALUE) % numReduceTasks;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>自定义Partitioner步骤</p><ul><li>自定义类继承Partitioner，重写getPartition()方法</li><li>在Job驱动中，设置自定义Partitioner：job.setPartitionerClass(CustomPartitioner.class);</li><li>自定义Partition后，要根据自定义Partitioner的逻辑设置相应数量的ReduceTask：job.setNumReduceTasks(5);</li></ul></li><li><p><strong>分区总结</strong></p><ul><li>如果ReduceTask的数量 &gt; getPartition的结果数，则会多产生几个空的输出文件part-r-000xx</li><li>如果1 &lt; ReduceTask的数量 &lt; getPartition的结果数，则有一部分分区数据无处安放，会抛出异常</li><li>如果ReduceTask的数量 = 1，则不管MapTask端输出多少个分区文件，最终结果都交给这一个ReduceTask，最终也就只会产生一个结果文件 part-r-00000</li><li>分区号必须从零开始，逐一累加</li></ul></li><li><p>案例分析：假设自定义分区数为5，则</p><ul><li>job.setNumReduceTasks(1)：会正常运行，只不过会产生一个输出文件</li><li>job.setNumReduceTasks(2)：会报错</li><li>job.setNumReduceTasks(6)：大于5，程序会正常运行，会产生空文件part-r-00005</li></ul></li></ul></li><li><p>Partition分区案例实操</p><ul><li><p>需求：将统计结果按照手机归属地不同省份输出到不同文件中(分区)</p></li><li><p>案例分析<br><img src="Partition%E5%88%86%E5%8C%BA%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90.png" alt="Partition分区案例分析"></p></li><li><p>实操</p><ul><li>在FlowBean案例基础上，增加一个分区类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProvincePartitioner</span> <span class="keyword">extends</span> <span class="title">Partitioner</span>&lt;<span class="title">Text</span>, <span class="title">FlowBean</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPartition</span><span class="params">(Text text, FlowBean flowBean, <span class="keyword">int</span> numPartitions)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// key是手机号,value是流量信息</span></span><br><span class="line">    <span class="comment">// 获取手机号前三位</span></span><br><span class="line">    String prePhoneNum = text.toString().substring(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">int</span> partition = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"136"</span>.equals(prePhoneNum)) &#123;</span><br><span class="line">        partition = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"137"</span>.equals(prePhoneNum)) &#123;</span><br><span class="line">        partition = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"138"</span>.equals(prePhoneNum)) &#123;</span><br><span class="line">        partition = <span class="number">2</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"139"</span>.equals(prePhoneNum)) &#123;</span><br><span class="line">        partition = <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> partition;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在Driver驱动主函数中添加自定义数据分区设置和ReduceTask设置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定自定义数据分区</span></span><br><span class="line">job.setPartitionerClass(ProvincePartitioner<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">// 指定ReduceTask的数目</span></span><br><span class="line">job.setNumReduceTasks(<span class="number">6</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>WritableComparable排序</p><ul><li><p>排序概述：<br>排序是MapReduce框架中最重要的操作之一。MapTask和ReduceTask均会对数据<strong>按照key进行排序</strong>，该操作属于Hadoop的默认行为。任何应用程序中的数据均会被排序，而不管逻辑上是否需要。默认排序是<strong>按照字典顺序</strong>排序，且实现该排序的方法是<strong>快速排序</strong>。<br>对于MapTask，它会将处理的结果暂时放到环形缓冲区中，当环形缓冲区使用率达到一定阈值后，再对缓冲区中的数据进行一次快速排序，并将这些有序数据溢写到磁盘上，而当数据处理完毕后，它会对磁盘上所有文件进行归并排序。<br>对于ReduceTask，它从每个MapTask上远程拷贝相应的数据文件，如果文件大小超过一定阈值，则溢写磁盘上，否则存储在内存中。如果磁盘上文件数目达到一定阈值，则进行一次归并排序以生成一个更大文件；如果内存中文件大小或者数目超过一定阈值，则进行一次合并后将数据溢写到磁盘上。当所有数据拷贝完毕后，ReduceTask统一对内存和磁盘上的所有数据进行一次归并排序。</p></li><li><p>排序的分类</p><ul><li>部分排序：MapReduce根据输入记录的键对数据集排序。保证<strong>输出的每个文件内部有序</strong></li><li>全排序：<strong>最终输出结果只有一个文件，且文件内部有序</strong>。实现方式是只设置一个ReduceTask。但该方法在处理大型文件时效率极低，因为一台机器处理所有文件，完全丧失了MapReduce所提供的并行架构</li><li>辅助排序(GroupingComparator分组)：在Reduce端对key进行分组。应用——在接收的key为bean对象时，想让一个或几个字段相同(全部字段比较不相同)的key进入到同一个reduce方法时，可以采用分组排序</li><li>二次排序：在自定义排序过程中，如果compareTo中的判断条件为两个即为二次排序</li></ul></li><li><p>自定义排序WritableComparable</p><ul><li><p>原理分析：bean对象做为key传输，需要<strong>实现WritableComparable接口重写compareTo方法</strong>，就可以实现排序</p></li><li><p>案例实操(全排序)</p><ul><li><p>需求：对FlowBean案例产生的结果再次对总流量进行排序</p></li><li><p>案例分析<br><img src="WritableComparable%E6%8E%92%E5%BA%8F%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90.png" alt="WritableComparable排序案例分析"></p></li><li><p>代码实现</p><ul><li>FlowBean对象在之前案例基础上实现WritableComparable接口，实现compareTo()方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(FlowBean bean)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 按总流量倒序</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.sumFlow &gt; bean.sumFlow ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编写Mapper类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowCountSortMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">FlowBean</span>, <span class="title">Text</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Text v = <span class="keyword">new</span> Text();</span><br><span class="line">  <span class="keyword">private</span> FlowBean flowBean = <span class="keyword">new</span> FlowBean();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// 1、获取一行</span></span><br><span class="line">    String lineStr = value.toString();</span><br><span class="line">    <span class="comment">// 2、切割</span></span><br><span class="line">    String[] fields = lineStr.split(<span class="string">";"</span>);</span><br><span class="line">    <span class="comment">// 3、封装对象</span></span><br><span class="line">    v.set(fields[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">long</span> upFlow = Long.parseLong(fields[fields.length - <span class="number">3</span>]);</span><br><span class="line">    <span class="keyword">long</span> downFlow = Long.parseLong(fields[fields.length - <span class="number">2</span>]);</span><br><span class="line">    flowBean.set(upFlow, downFlow);</span><br><span class="line">    <span class="comment">// 4、写出</span></span><br><span class="line">    context.write(flowBean, v);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编写Reducer类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowCountSortReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">FlowBean</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">FlowBean</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(FlowBean key, Iterable&lt;Text&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Text value : values) &#123;</span><br><span class="line">        context.write(value, key);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编写Driver类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line">  <span class="comment">// 1、获取job对象</span></span><br><span class="line">  Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">  Job job = Job.getInstance(conf);</span><br><span class="line">  <span class="comment">// 2、设计jar路径</span></span><br><span class="line">  job.setJarByClass(FlowCountSortDriver<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">// 3、关联mapper和reducer</span></span><br><span class="line">  job.setMapperClass(FlowCountSortMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  job.setReducerClass(FlowCountSortReducer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">// 4、设置mapper输出的kv类型</span></span><br><span class="line">  job.setMapOutputKeyClass(FlowBean<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  job.setMapOutputValueClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">// 5、设置最终输出的kv类型</span></span><br><span class="line">  job.setOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  job.setOutputValueClass(FlowBean<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">// 6、设置输入输出路径</span></span><br><span class="line">  FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">  FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">  <span class="comment">// 7、提交job</span></span><br><span class="line">  <span class="keyword">boolean</span> result = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">  System.exit(result ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li><li><p>Combiner合并</p><ul><li><p>Combiner介绍<br><img src="Combiner%E4%BB%8B%E7%BB%8D.png" alt="Combiner介绍"></p></li><li><p>自定义Combiner实现步骤</p><ul><li>自定义一个Combiner继承Reducer，重写reduce方法</li><li>在Driver驱动类中设置：job.setCombinerClass(xxCombiner.class);</li></ul></li><li><p>自定义Combiner实操</p><ul><li><p>需求：统计过程中对每一个MapTask的输出进行局部汇总，以减小网络传输量即采用Combiner功能</p></li><li><p>案例分析<br><img src="Combiner%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90.png" alt="Combiner案例分析"></p></li><li><p>代码实现</p><ul><li>方案一</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建WordCountCombiner类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCountCombiner</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> IntWritable v = <span class="keyword">new</span> IntWritable();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// 1、累加求和</span></span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (IntWritable value : values) &#123;</span><br><span class="line">        sum += value.get();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2、写出</span></span><br><span class="line">    v.set(sum);</span><br><span class="line">    context.write(key, v);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在WordCountDriver驱动类中指定Combiner</span></span><br><span class="line">job.setCombinerClass(WordcountCombiner<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure><ul><li>方案二：将WordCountReducer作为Combiner</li></ul></li><li><p>结果查看：控制台打印中的Map-Reduce Framework中的Combine记录</p></li></ul></li></ul></li><li><p>GroupingComparator分组(辅助排序)</p><ul><li><p>简要介绍：对Reduce阶段的数据根据某一个或几个字段进行分组</p></li><li><p>分组排序步骤</p><ul><li>自定义类继承WritableComparator</li><li>重写compare()方法</li><li>创建一个构造将比较对象的类传给父类</li></ul></li><li><p>GroupingComparator分组实操</p><ul><li><p>需求：求出每一个订单中最贵的商品</p></li><li><p>案例分析<br><img src="GroupingComparator%E5%88%86%E7%BB%84%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90.png" alt="GroupingComparator分组案例分析"></p><ul><li>利用“订单id和成交金额price”作为key，可以将Map阶段读取到的所有订单数据按照id升序排序，如果id相同再按照金额降序排序。Reduce将从Map中获取排序好的数据</li><li>在Reduce端利用groupingComparator将订单id相同的kv聚合成组，然后取第一个即是该订单中最贵商品</li></ul></li><li><p>代码实现</p><ul><li>编写订单信息OrderBean类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 忽略了空参/全参构造器、getter/setter和toString方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderBean</span> <span class="keyword">implements</span> <span class="title">WritableComparable</span>&lt;<span class="title">OrderBean</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> orderId;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(OrderBean bean)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result;</span><br><span class="line">    <span class="keyword">if</span> (orderId &gt; bean.orderId) &#123;</span><br><span class="line">        result = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderId &lt; bean.orderId) &#123;</span><br><span class="line">        result = -<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result = price &gt; bean.price ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(DataOutput out)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    out.writeInt(orderId);</span><br><span class="line">    out.writeDouble(price);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFields</span><span class="params">(DataInput in)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    orderId = in.readInt();</span><br><span class="line">    price = in.readDouble();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编写OrderGroupingComparator类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderGroupingComparator</span> <span class="keyword">extends</span> <span class="title">WritableComparator</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="title">OrderGroupingComparator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(OrderBean<span class="class">.<span class="keyword">class</span>, <span class="title">true</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(WritableComparable a, WritableComparable b)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 要求只要id相同,就认为是相同的key</span></span><br><span class="line">    OrderBean aBean = (OrderBean) a;</span><br><span class="line">    OrderBean bBean = (OrderBean) b;</span><br><span class="line">    <span class="keyword">if</span> (aBean.getOrderId() == bBean.getOrderId()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> aBean.getOrderId() &gt; bBean.getOrderId() ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编写OrderMapper类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">OrderBean</span>, <span class="title">NullWritable</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> OrderBean orderBean = <span class="keyword">new</span> OrderBean();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// 1、获取一行</span></span><br><span class="line">    String lineStr = value.toString();</span><br><span class="line">    <span class="comment">// 2、切割</span></span><br><span class="line">    String[] fields = lineStr.split(<span class="string">";"</span>);</span><br><span class="line">    <span class="comment">// 3、封装对象</span></span><br><span class="line">    orderBean.setOrderId(Integer.parseInt(fields[<span class="number">0</span>]));</span><br><span class="line">    orderBean.setPrice(Double.parseDouble(fields[<span class="number">2</span>]));</span><br><span class="line">    <span class="comment">// 4、写出</span></span><br><span class="line">    context.write(orderBean, NullWritable.get());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编写OrderReducer类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">OrderBean</span>, <span class="title">NullWritable</span>, <span class="title">OrderBean</span>, <span class="title">NullWritable</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(OrderBean key, Iterable&lt;NullWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// 输出第一个</span></span><br><span class="line">    context.write(key, NullWritable.get());</span><br><span class="line">    <span class="comment">// 循环几次输出前几</span></span><br><span class="line">    <span class="comment">//for (NullWritable value : values) &#123;</span></span><br><span class="line">    <span class="comment">//    context.write(key, NullWritable.get());</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编写OrderDriver类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line">  <span class="comment">// 1、获取Job对象</span></span><br><span class="line">  Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line">  Job job = Job.getInstance(configuration);</span><br><span class="line">  <span class="comment">// 2、设置jar存储位置</span></span><br><span class="line">  job.setJarByClass(OrderDriver<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">// 3、关联Map和Reduce类</span></span><br><span class="line">  job.setMapperClass(OrderMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  job.setReducerClass(OrderReducer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">// 4、设置map阶段输出数据的kv类型</span></span><br><span class="line">  job.setMapOutputKeyClass(OrderBean<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  job.setMapOutputValueClass(NullWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">// 5、设置最终数据输出的kv类型</span></span><br><span class="line">  job.setOutputKeyClass(OrderBean<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  job.setOutputValueClass(NullWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  job.setGroupingComparatorClass(OrderGroupingComparator<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">// 6、设置程序运行的输入和输出路径</span></span><br><span class="line">  FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">  FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">  <span class="comment">// 7、提交job</span></span><br><span class="line">  <span class="keyword">boolean</span> result = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">  <span class="comment">// 额外</span></span><br><span class="line">  System.exit(result ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li><li><p>MapTask工作机制<br><img src="MapTask%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6.png" alt="MapTask工作机制"></p><ul><li>Read阶段：MapTask通过用户编写的RecordReader，从输入InputSplit中解析出一个个key/value</li><li>Map阶段：该节点主要是将解析出的key/value交给用户编写map()函数处理，并产生一系列新的key/value</li><li>Collect收集阶段：在用户编写map()函数中，当数据处理完成后，一般会调用OutputCollector.collect()输出结果。在该函数内部，它会将生成的key/value分区(调用Partitioner)，并写入一个环形内存缓冲区中</li><li>Spill阶段：即“溢写”，当环形缓冲区满后，MapReduce会将数据写到本地磁盘上，生成一个临时文件。需要注意的是，将数据写入本地磁盘之前，先要对数据进行一次本地排序，并在必要时对数据进行合并、压缩等操作<ul><li>溢写步骤1：利用快速排序算法对缓存区内的数据进行排序。排序方式是，先按照分区编号Partition进行排序，然后按照key进行排序。这样，经过排序后，数据以分区为单位聚集在一起，且同一分区内所有数据按照key有序</li><li>溢写步骤2：按照分区编号由小到大依次将每个分区中的数据写入任务工作目录下的临时文件output/spillN.out(N表示当前溢写次数)中。如果用户设置了Combiner，则写入文件之前，对每个分区中的数据进行一次聚集操作</li><li>溢写步骤3：将分区数据的元信息写到内存索引数据结构SpillRecord中，其中每个分区的元信息包括在临时文件中的偏移量、压缩前数据大小和压缩后数据大小。如果当前内存索引大小超过1MB，则将内存索引写到文件output/spillN.out.index中</li></ul></li><li>Combine阶段：当所有数据处理完成后，MapTask对所有临时文件进行一次合并，以确保最终只会生成一个数据文件<br>当所有数据处理完后，MapTask会将所有临时文件合并成一个大文件，并保存到文件output/file.out中，同时生成相应的索引文件output/file.out.index。<br>在进行文件合并过程中，MapTask以分区为单位进行合并。对于某个分区，它将采用多轮递归合并的方式。每轮合并io.sort.factor(默认10)个文件，并将产生的文件重新加入待合并列表中，对文件排序后，重复以上过程，直到最终得到一个大文件。<br>让每个MapTask最终只生成一个数据文件，可避免同时打开大量文件和同时读取大量小文件产生的随机读取带来的开销</li></ul></li><li><p>ReduceTask</p><ul><li><p>ReduceTask工作机制<br><img src="ReduceTask%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6.png" alt="ReduceTask工作机制"></p><ul><li>Copy阶段：ReduceTask从各个MapTask上远程拷贝一片数据，并针对某一片数据，如果其大小超过一定阈值，则写到磁盘上，否则直接放到内存中</li><li>Merge阶段：在远程拷贝数据的同时，ReduceTask启动了两个后台线程对内存和磁盘上的文件进行合并，以防止内存使用过多或磁盘上文件过多</li><li>Sort阶段：按照MapReduce语义，用户编写reduce()函数输入数据是按key进行聚集的一组数据。为了将key相同的数据聚在一起，Hadoop采用了基于排序的策略。由于各个MapTask已经实现对自己的处理结果进行了局部排序，因此，ReduceTask只需对所有数据进行一次归并排序即可</li><li>Reduce阶段：reduce()函数将计算结果写到HDFS上</li></ul></li><li><p>设置ReduceTask并行度(个数)<br>ReduceTask的并行度同样影响整个Job的执行并发度和执行效率，但与MapTask的并发数由切片数决定不同，ReduceTask数量的决定是可以直接手动设置(默认值为1)：job.setNumReduceTasks(4);</p></li><li><p>一个测试ReduceTask数目的实验</p><ul><li>实验环境：1个Master节点，16个Slave节点；CPU：8GHZ，内存: 2G</li><li>实验结论(数据量为1G)</li></ul><table><thead><tr><th>ReduceTask数目</th><th>总时间</th></tr></thead><tbody><tr><td>1</td><td>892</td></tr><tr><td>5</td><td>146</td></tr><tr><td>10</td><td>110</td></tr><tr><td>15</td><td>92</td></tr><tr><td>16</td><td>88</td></tr><tr><td>20</td><td>100</td></tr><tr><td>25</td><td>128</td></tr><tr><td>30</td><td>101</td></tr><tr><td>45</td><td>145</td></tr><tr><td>60</td><td>104</td></tr></tbody></table></li><li><p>注意事项</p><ul><li>ReduceTask = 0，表示没有Reduce阶段，输出文件个数和Map个数一致</li><li>ReduceTask默认值就是1，所以输出文件个数为一个</li><li>如果数据分布不均匀，就有可能在Reduce阶段产生数据倾斜(一些节点很忙,其余空闲)</li><li>ReduceTask数量并不是任意设置，还要考虑业务逻辑需求，有些情况下，需要计算全局汇总结果，就只能有1个ReduceTask</li><li>具体多少个ReduceTask，需要根据集群性能而定</li><li>如果分区数不是1，但是ReduceTask为1，是否执行分区过程？答案是：不执行分区过程。因为在MapTask的源码中，执行分区的前提是先判断ReduceNum个数是否大于1。不大于1肯定不执行</li></ul></li></ul></li><li><p>OutputFormat数据输出</p><ul><li><p>OutputFormat接口实现类<br>OutputFormat是MapReduce输出的基类，所有实现MapReduce输出都实现了OutputFormat接口。以下是几种常见的OutputFormat实现类</p><ul><li><p>文本输出TextOutputFormat<br>默认的输出格式是TextOutputFormat，<strong>它把每条记录写为文本行</strong>。它的键和值可以是任意类型，因为TextOutputFormat调用toString()方法把它们转换为字符串</p></li><li><p>SequenceFileOutputFormat<br>将SequenceFileOutputFormat输出作为后续MapReduce任务的输入，这便是一种好的输出格式，因为它的<strong>格式紧凑，很容易被压缩</strong></p></li><li><p>自定义OutputFormat：根据用户需求，自定义实现输出</p><ul><li><p>使用场景<br>为了实现<strong>控制最终文件的输出路径和输出格式</strong>，可以自定义OutputFormat<br>例如：要在一个MapReduce程序中根据数据的不同输出两类结果到不同目录，这类灵活的输出需求可以通过自定义OutputFormat来实现</p></li><li><p>自定义OutputFormat步骤</p><ul><li>自定义一个类继承FileOutputFormat</li><li>改写RecordWriter，具体改写输出数据的方法write()</li></ul></li><li><p>自定义OutputFormat案例实操</p><ul><li><p>需求：过滤输入的log日志，指定包含某特定字段的记录输出到一个文件，其他则输出到另一个文件</p></li><li><p>案例分析<br><img src="%E8%87%AA%E5%AE%9A%E4%B9%89OutputFormat%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90.png" alt="自定义OutputFormat案例分析"></p></li><li><p>代码编写</p><ul><li>Mapper类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">NullWritable</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// http://www.baidu.com</span></span><br><span class="line">    context.write(value, NullWritable.get());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Reducer类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">NullWritable</span>, <span class="title">Text</span>, <span class="title">NullWritable</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Text k = <span class="keyword">new</span> Text();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;NullWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    String line = key.toString();</span><br><span class="line">    line += <span class="string">"\r\n"</span>;</span><br><span class="line">    k.set(line);</span><br><span class="line">    <span class="keyword">for</span> (NullWritable value : values) &#123;</span><br><span class="line">        context.write(k, NullWritable.get());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>自定义OutputFormat、RecordWriter类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterOutputFormat</span> <span class="keyword">extends</span> <span class="title">FileOutputFormat</span>&lt;<span class="title">Text</span>, <span class="title">NullWritable</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> RecordWriter&lt;Text, NullWritable&gt; <span class="title">getRecordWriter</span><span class="params">(TaskAttemptContext job)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FRecordWriter(job);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FRecordWriter</span> <span class="keyword">extends</span> <span class="title">RecordWriter</span>&lt;<span class="title">Text</span>, <span class="title">NullWritable</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> FSDataOutputStream fosSobxiong;</span><br><span class="line">  <span class="keyword">private</span> FSDataOutputStream fosOther;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">FRecordWriter</span><span class="params">(TaskAttemptContext job)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 1、获取文件系统</span></span><br><span class="line">      FileSystem fs = FileSystem.get(job.getConfiguration());</span><br><span class="line">      <span class="comment">// 2、创建输出到sobxiong.log的输出流</span></span><br><span class="line">      fosSobxiong = fs.create(<span class="keyword">new</span> Path(<span class="string">"/Users/sobxiong/Downloads/sobxiong.log"</span>));</span><br><span class="line">      <span class="comment">// 3、创建输出到other.log的输出流</span></span><br><span class="line">      fosOther = fs.create(<span class="keyword">new</span> Path(<span class="string">"/Users/sobxiong/Downloads/other.log"</span>));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(Text key, NullWritable value)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// 判断key中是否有sobxiong,如果有写出到sobxiong,否则输出到other</span></span><br><span class="line">    <span class="keyword">if</span> (key.toString().contains(<span class="string">"sobxiong"</span>)) &#123;</span><br><span class="line">        fosSobxiong.write(key.toString().getBytes());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fosOther.write(key.toString().getBytes());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(TaskAttemptContext context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    IOUtils.closeStream(fosOther);</span><br><span class="line">    IOUtils.closeStream(fosSobxiong);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Driver类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">  Job job = Job.getInstance(conf);</span><br><span class="line"></span><br><span class="line">  job.setJarByClass(FilterDriver<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  job.setMapperClass(FilterMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  job.setReducerClass(FilterReducer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  job.setMapOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  job.setMapOutputValueClass(NullWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  job.setOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  job.setOutputValueClass(NullWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 要将自定义的输出格式组件设置到job中</span></span><br><span class="line">  job.setOutputFormatClass(FilterOutputFormat<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 虽然我们自定义了outputFormat,但是因为我们的outputFormat继承自fileOutputFormat</span></span><br><span class="line">  <span class="comment">// 而fileOutputFormat要输出一个_SUCCESS文件,所以,在这还得指定一个输出目录</span></span><br><span class="line">  FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">boolean</span> result = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">  System.exit(result ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul></li><li><p>Join多种应用</p><ul><li><p>Reduce Join</p><ul><li><p>工作原理<br>Map端的主要工作：为来自不同表或文件的key/value对，<strong>打标签以区别不同来源的记录</strong>。然后用连接字段作为key，其余部分和新加的标志作为value，最后进行输出<br>Reduce端的主要工作：在Reduce端以连接字段作为key的分组已经完成，我们只需要在每一个分组当中将那些<strong>来源于不同文件的记录(在Map阶段已经打标志)分开</strong>，最后进行合并</p></li><li><p>案例实操</p><ul><li><p>需求：将商品信息表中数据根据商品pid合并到订单数据表中</p></li><li><p>案例分析：通过将关联条件作为Map输出的key，将两表满足Join条件的数据并携带数据所来源的文件信息，发往同一个ReduceTask，在Reduce中进行数据的串联<br><img src="Reduce%E7%AB%AF%E8%A1%A8%E5%90%88%E5%B9%B6.png" alt="Reduce端表合并"></p></li><li><p>代码编写</p><ul><li>合并后的Bean类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 略去空参/全参构造器、getter/setter方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TableBean</span> <span class="keyword">implements</span> <span class="title">Writable</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 订单id</span></span><br><span class="line">  <span class="keyword">private</span> String id;</span><br><span class="line">  <span class="comment">// 产品id</span></span><br><span class="line">  <span class="keyword">private</span> String pid;</span><br><span class="line">  <span class="comment">// 数量</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> amount;</span><br><span class="line">  <span class="comment">// 产品名称</span></span><br><span class="line">  <span class="keyword">private</span> String pName;</span><br><span class="line">  <span class="comment">// 标记: 产品/订单</span></span><br><span class="line">  <span class="keyword">private</span> String flag;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> id + <span class="string">'\t'</span> + amount + <span class="string">'\t'</span> + pName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(DataOutput out)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    out.writeUTF(id);</span><br><span class="line">    out.writeUTF(pid);</span><br><span class="line">    out.writeInt(amount);</span><br><span class="line">    out.writeUTF(pName);</span><br><span class="line">    out.writeUTF(flag);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFields</span><span class="params">(DataInput in)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    id = in.readUTF();</span><br><span class="line">    pid = in.readUTF();</span><br><span class="line">    amount = in.readInt();</span><br><span class="line">    pName = in.readUTF();</span><br><span class="line">    flag = in.readUTF();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Mapper类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TableMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">TableBean</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String fileName;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> TableBean tableBean = <span class="keyword">new</span> TableBean();</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Text key = <span class="keyword">new</span> Text();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">(Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// 获取文件的名称</span></span><br><span class="line">    FileSplit inputSplit = (FileSplit) context.getInputSplit();</span><br><span class="line">    fileName = inputSplit.getPath().getName();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// id pid amount</span></span><br><span class="line">  <span class="comment">// 1001 01 1</span></span><br><span class="line">  <span class="comment">// pid pname</span></span><br><span class="line">  <span class="comment">// 01 小米</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// 1、获取一行</span></span><br><span class="line">    String lineStr = value.toString();</span><br><span class="line">    String[] fields = lineStr.split(<span class="string">";"</span>);</span><br><span class="line">    <span class="keyword">if</span> (fileName.startsWith(<span class="string">"order"</span>)) &#123; <span class="comment">// 订单表</span></span><br><span class="line">        <span class="comment">// 封装kv</span></span><br><span class="line">        tableBean.setId(fields[<span class="number">0</span>]);</span><br><span class="line">        tableBean.setPid(fields[<span class="number">1</span>]);</span><br><span class="line">        tableBean.setAmount(Integer.parseInt(fields[<span class="number">2</span>]));</span><br><span class="line">        <span class="comment">// 属性不能为空,不然会序列化会出错</span></span><br><span class="line">        tableBean.setpName(<span class="string">""</span>);</span><br><span class="line">        tableBean.setFlag(<span class="string">"order"</span>);</span><br><span class="line">        <span class="keyword">this</span>.key.set(fields[<span class="number">1</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 产品表</span></span><br><span class="line">        <span class="comment">// 封装kv</span></span><br><span class="line">        tableBean.setId(<span class="string">""</span>);</span><br><span class="line">        tableBean.setPid(fields[<span class="number">0</span>]);</span><br><span class="line">        tableBean.setAmount(<span class="number">0</span>);</span><br><span class="line">        tableBean.setpName(fields[<span class="number">1</span>]);</span><br><span class="line">        tableBean.setFlag(<span class="string">"pd"</span>);</span><br><span class="line">        <span class="keyword">this</span>.key.set(fields[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 写出</span></span><br><span class="line">    context.write(<span class="keyword">this</span>.key, tableBean);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Reducer类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TableReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">TableBean</span>, <span class="title">TableBean</span>, <span class="title">NullWritable</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;TableBean&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// 存储所有订单集合</span></span><br><span class="line">    List&lt;TableBean&gt; beans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 存储产品信息</span></span><br><span class="line">    TableBean pdBean = <span class="keyword">new</span> TableBean();</span><br><span class="line">    <span class="keyword">for</span> (TableBean value : values) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"order"</span>.equals(value.getFlag())) &#123;</span><br><span class="line">            TableBean tmpBean = <span class="keyword">new</span> TableBean();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// value是引用,tmpBean是实实在在的对象</span></span><br><span class="line">                BeanUtils.copyProperties(tmpBean, value);</span><br><span class="line">                beans.add(tmpBean);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                BeanUtils.copyProperties(pdBean, value);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 拼接表,设置商品名称</span></span><br><span class="line">    <span class="keyword">for</span> (TableBean bean : beans) &#123;</span><br><span class="line">        bean.setpName(pdBean.getpName());</span><br><span class="line">        context.write(bean, NullWritable.get());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Driver类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line">  <span class="comment">// 1、获取配置信息,创建job对象实例</span></span><br><span class="line">  Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line">  Job job = Job.getInstance(configuration);</span><br><span class="line">  <span class="comment">// 2、指定本程序的jar包所在的本地路径</span></span><br><span class="line">  job.setJarByClass(TableDriver<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">// 3、指定本业务job要使用的Mapper/Reducer业务类</span></span><br><span class="line">  job.setMapperClass(TableMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  job.setReducerClass(TableReducer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">// 4、指定Mapper输出数据的kv类型</span></span><br><span class="line">  job.setMapOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  job.setMapOutputValueClass(TableBean<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">// 5、指定最终输出的数据的kv类型</span></span><br><span class="line">  job.setOutputKeyClass(TableBean<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  job.setOutputValueClass(NullWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">// 6、指定job的输入原始文件所在目录</span></span><br><span class="line">  FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">  FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">  <span class="comment">// 7、将job中配置的相关参数,以及job所用的java类所在的jar包,提交给yarn去运行</span></span><br><span class="line">  <span class="keyword">boolean</span> result = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">  System.exit(result ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试结果：</li></ul><table><thead><tr><th>pid</th><th>pname</th><th>amount</th></tr></thead><tbody><tr><td>1001</td><td>小米</td><td>1</td></tr><tr><td>1001</td><td>小米</td><td>1</td></tr><tr><td>1002</td><td>华为</td><td>2</td></tr><tr><td>1002</td><td>华为</td><td>2</td></tr><tr><td>1003</td><td>格力</td><td>3</td></tr><tr><td>1003</td><td>格力</td><td>3</td></tr></tbody></table><ul><li>总结<ul><li>缺点：这种方式中，合并的操作是在Reduce阶段完成，Reduce端的处理压力太大，Map节点的运算负载则很低，资源利用率不高，且在Reduce阶段极易产生数据倾斜</li><li>解决方案：Map端实现数据合并</li></ul></li></ul></li></ul></li></ul></li><li><p>Map Join</p><ul><li><p>使用场景：适用于一张表十分小、一张表很大的场景</p></li><li><p>优点<br>思考：在Reduce端处理过多的表，非常容易产生数据倾斜。怎么办？<br>在Map端缓存多张表，提前处理业务逻辑，这样增加Map端业务，减少Reduce端数据的压力，尽可能的减少数据倾斜</p></li><li><p>具体方法：采用DistributedCache</p><ul><li>在Mapper的setup阶段，将文件读取到缓存集合中</li><li>在驱动函数中加载缓存(缓存普通文件到Task运行节点)：job.addCacheFile(new URI(“file:///Users/sobxiong/Downloads/testInput3/pd.txt”))</li></ul></li><li><p>案例实操</p><ul><li><p>需求同Reduce Join</p></li><li><p>案例分析<br><img src="Map%E7%AB%AF%E8%A1%A8%E5%90%88%E5%B9%B6.png" alt="Map端表合并"></p></li><li><p>代码编写</p><ul><li>Driver类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException, URISyntaxException </span>&#123;</span><br><span class="line">  <span class="comment">// 1、获取job信息</span></span><br><span class="line">  Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line">  Job job = Job.getInstance(configuration);</span><br><span class="line">  <span class="comment">// 2、设置加载jar包路径</span></span><br><span class="line">  job.setJarByClass(DistributedCacheDriver<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">// 3、关联map</span></span><br><span class="line">  job.setMapperClass(DistributedCacheMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">// 没有reduce阶段,map阶段输出即为最终输出</span></span><br><span class="line">  <span class="comment">// 4、设置最终输出数据类型</span></span><br><span class="line">  job.setOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  job.setOutputValueClass(NullWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">// 5、设置输入输出路径</span></span><br><span class="line">  FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">  FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">  <span class="comment">// 6、加载缓存数据</span></span><br><span class="line">  job.addCacheFile(<span class="keyword">new</span> URI(<span class="string">"file:///Users/sobxiong/Downloads/testInput3/pd.txt"</span>));</span><br><span class="line">  <span class="comment">// 7、Map端Join的逻辑不需要Reduce阶段，设置reduceTask数量为0</span></span><br><span class="line">  job.setNumReduceTasks(<span class="number">0</span>);</span><br><span class="line">  <span class="comment">// 8、提交</span></span><br><span class="line">  <span class="keyword">boolean</span> result = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">  System.exit(result ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Mapper类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistributedCacheMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">NullWritable</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Map&lt;String, String&gt; pdMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">5</span>);</span><br><span class="line">  <span class="keyword">private</span> Text k = <span class="keyword">new</span> Text();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">(Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// 缓存小表</span></span><br><span class="line">    String cachePath = context.getCacheFiles()[<span class="number">0</span>].getPath();</span><br><span class="line">    BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(cachePath), StandardCharsets.UTF_8));</span><br><span class="line">    String lineStr;</span><br><span class="line">    <span class="keyword">while</span> (StringUtils.isNotEmpty(lineStr = bufferedReader.readLine())) &#123;</span><br><span class="line">        <span class="comment">// 1、切割</span></span><br><span class="line">        <span class="comment">// pid pname</span></span><br><span class="line">        <span class="comment">// 01 小米</span></span><br><span class="line">        String[] fields = lineStr.split(<span class="string">";"</span>);</span><br><span class="line">        <span class="comment">// 2、封装到集合去</span></span><br><span class="line">        pdMap.put(fields[<span class="number">0</span>], fields[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2、关闭资源</span></span><br><span class="line">    IOUtils.closeStream(bufferedReader);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// id pid amount</span></span><br><span class="line">    <span class="comment">// 1001 01 1</span></span><br><span class="line">    <span class="comment">// 1、获取一行</span></span><br><span class="line">    String lineStr = value.toString();</span><br><span class="line">    <span class="comment">// 2、切割</span></span><br><span class="line">    String[] fields = lineStr.split(<span class="string">";"</span>);</span><br><span class="line">    <span class="comment">// 3、获取pid</span></span><br><span class="line">    String pid = fields[<span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 4、取出pname</span></span><br><span class="line">    String pName = pdMap.get(pid);</span><br><span class="line">    <span class="comment">// 5、拼接</span></span><br><span class="line">    lineStr = lineStr.replace(<span class="string">';'</span>, <span class="string">'\t'</span>) + <span class="string">'\t'</span> + pName;</span><br><span class="line">    k.set(lineStr);</span><br><span class="line">    <span class="comment">// 6、写出</span></span><br><span class="line">    context.write(k, NullWritable.get());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li><li><p>计数器应用<br>Hadoop为每个作业维护若干内置计数器，以描述多项指标。例如，某些计数器记录已处理的字节数和记录数，使用户可监控已处理的输入数据量和已产生的输出数据量</p><ul><li><p>计数器API</p><ul><li>采用枚举的方式统计计数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> MyCounter&#123;MALFORORMED,NORMAL&#125;</span><br><span class="line"><span class="comment">//对枚举定义的自定义计数器加1</span></span><br><span class="line">context.getCounter(MyCounter.MALFORORMED).increment(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><ul><li>采用计数器组、计数器名称的方式统计</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组名和计数器名称随便起,但最好有意义</span></span><br><span class="line">context.getCounter(<span class="string">"counterGroup"</span>, <span class="string">"counter"</span>).increment(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><ul><li>计数结果在程序运行后的控制台上查看</li></ul></li></ul></li><li><p>数据清洗(ETL)<br>在运行核心业务MapReduce程序之前，往往要先对数据进行清洗，清理掉不符合用户要求的数据。清理的过程往往只需要运行Mapper程序，不需要运行Reduce程序</p><ul><li><p>案例实操(简单解析版——运用计数器)——复杂版(字段多,过滤的需求多,思路与下面无差)</p><ul><li><p>需求：去除日志中字段长度小于等于11的日志</p></li><li><p>代码编写</p><ul><li>Mapper类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">NullWritable</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// 1、获取一行</span></span><br><span class="line">    String line = value.toString();</span><br><span class="line">    <span class="comment">// 2、解析数据</span></span><br><span class="line">    <span class="keyword">boolean</span> isDirty = parseLog(line, context);</span><br><span class="line">    <span class="keyword">if</span> (!isDirty) &#123;</span><br><span class="line">        <span class="comment">// 3、解析通过,写出</span></span><br><span class="line">        context.write(value, NullWritable.get());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">parseLog</span><span class="params">(String line, Context context)</span> </span>&#123;</span><br><span class="line">    String[] fields = line.split(<span class="string">" "</span>);</span><br><span class="line">    <span class="keyword">if</span> (fields.length &gt; <span class="number">11</span>) &#123;</span><br><span class="line">        context.getCounter(<span class="string">"map"</span>, <span class="string">"clean"</span>).increment(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        context.getCounter(<span class="string">"map"</span>, <span class="string">"dirty"</span>).increment(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Driver类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line">  <span class="comment">// 1、获取job信息</span></span><br><span class="line">  Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">  Job job = Job.getInstance(conf);</span><br><span class="line">  <span class="comment">// 2、加载jar包</span></span><br><span class="line">  job.setJarByClass(LogDriver<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">// 3、关联map</span></span><br><span class="line">  job.setMapperClass(LogMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">// 4、设置最终输出类型</span></span><br><span class="line">  job.setOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  job.setOutputValueClass(NullWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">// 设置reduceTask个数为0</span></span><br><span class="line">  job.setNumReduceTasks(<span class="number">0</span>);</span><br><span class="line">  <span class="comment">// 5、设置输入和输出路径</span></span><br><span class="line">  FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">  FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">  <span class="comment">// 6、提交</span></span><br><span class="line">  <span class="keyword">boolean</span> result = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">  System.exit(result ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>MapReduce开发总结<br>编写MapReduce程序时，需要考虑如下方面</p><ul><li><p>输入数据接口：InputFormat</p><ul><li>默认使用的实现类是：TextInputFormat</li><li>TextInputFormat的功能逻辑是：一次读一行文本，然后将该行的起始偏移量作为key，行内容作为value返回</li><li>KeyValueTextInputFormat每一行均为一条记录，被分隔符分割为key/value。默认分隔符是tab(\t)</li><li>NlineInputFormat按照指定的行数N来划分切片</li><li>CombineTextInputFormat可以把多个小文件合并成一个切片处理，提高处理效率</li><li>自定义InputFormat</li></ul></li><li><p>逻辑处理接口：Mapper<br>用户根据业务需求实现其中三个方法：map()、setup()、cleanup()</p></li><li><p>Partitioner分区</p><ul><li>默认实现HashPartitioner，逻辑是根据key的哈希值和numReduces来返回一个分区号(分区数大于1时)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key.hashCode() &amp; Integer.MAXVALUE % numReduces</span><br></pre></td></tr></table></figure><ul><li>如果业务上有特别的需求，可以自定义分区</li></ul></li><li><p>Comparable排序</p><ul><li>当我们用自定义的对象作为key来输出时，就必须要实现WritableComparable接口，重写其中的compareTo()方法</li><li>部分排序：对最终输出的每一个文件进行内部排序</li><li>全排序：对所有数据进行排序，通常只有一个Reduce</li><li>二次排序：排序的条件有两个</li></ul></li><li><p>Combiner合并<br>Combiner合并可以提高程序执行效率，减少IO传输。但是使用时必须不能影响原有的业务处理结果</p></li><li><p>Reduce端分组：GroupingComparator<br>在Reduce端对key进行分组。应用于：在接收的key为bean对象时，想让一个或几个字段相同(全部字段比较不相同)的key进入到同一个reduce方法时，可以采用分组排序</p></li><li><p>逻辑处理接口：Reduce<br>用户根据业务需求实现其中三个方法：reduce()、setup()、cleanup()</p></li><li><p>输出数据接口：OutputFormat</p><ul><li>默认实现类是TextOutputFormat，功能逻辑是：将每一个kv对向目标文本文件输出一行</li><li>将SequenceFileOutputFormat输出作为后续MapReduce任务的输入，这便是一种好的输出格式，因为它的格式紧凑，很容易被压缩</li><li>自定义OutputFormat</li></ul></li></ul></li></ul><h2 id="Hadoop数据压缩"><a href="#Hadoop数据压缩" class="headerlink" title="Hadoop数据压缩"></a>Hadoop数据压缩</h2><ul><li><p>概述<br>压缩技术能够有效减少底层存储系统(HDFS)读写字节数。压缩提高了网络带宽和磁盘空间的效率。在运行MR程序时，I/O操作、网络数据传输、Shuffle和Merge要花大量的时间，尤其是数据规模很大和工作负载密集的情况下，因此，使用数据压缩显得非常重要<br>鉴于磁盘I/O和网络带宽是Hadoop的宝贵资源，<strong>数据压缩对于节省资源、最小化磁盘I/O和网络传输非常有帮助。可以在任意MapReduce阶段启用压缩</strong>。不过，尽管压缩与解压操作的CPU开销不高，其性能的提升和资源的节省并非没有代价</p><ul><li>压缩策略和原则<br>压缩是提高Hadoop运行效率的一种优化策略<br>通过对Mapper、Reducer运行过程的数据进行压缩，以减少磁盘IO，提高MR程序运行速度</li></ul><p><strong>注意：采用压缩技术减少了磁盘IO，但同时增加了CPU运算负担。所以，压缩特性运用得当能提高性能，但运用不当也可能降低性能</strong><br>压缩基本原则</p><ul><li>运算密集型的job，少用压缩</li><li>IO密集型的job，多用压缩</li></ul></li><li><p>MR支持的压缩编码</p></li></ul><table><thead><tr><th>压缩格式</th><th>是否hadoop自带</th><th>算法</th><th>文件扩展名</th><th>是否可切分</th><th>换成压缩格式后,原来程序是否需要修改</th></tr></thead><tbody><tr><td>DEFLATE</td><td>是,直接使用</td><td>DEFLATE</td><td>.deflate</td><td>否</td><td>和文本处理一样,不需要修改</td></tr><tr><td>Gzip</td><td>是,直接使用</td><td>DEFLATE</td><td>.gz</td><td>否</td><td>和文本处理一样,不需要修改</td></tr><tr><td>bzip2</td><td>是,直接使用</td><td>bzip2</td><td>.bz2</td><td>是</td><td>和文本处理一样,不需要修改</td></tr><tr><td>LZO</td><td>否,需要安装</td><td>LZO</td><td>.lzo</td><td>是</td><td>需要建索引,还需要指定输入格式</td></tr><tr><td>Snappy</td><td>否,需要安装</td><td>Snappy</td><td>.snappy</td><td>否</td><td>和文本处理一样,不需要修改</td></tr></tbody></table><p>为了支持多种压缩/解压缩算法，Hadoop引入了编码/解码器，如下表所示</p><table><thead><tr><th>压缩格式</th><th>对应的编码/解码器</th></tr></thead><tbody><tr><td>DEFLATE</td><td>org.apache.hadoop.io.compress.DefaultCodec</td></tr><tr><td>Gzip</td><td>org.apache.hadoop.io.compress.GzipCodec</td></tr><tr><td>bzip2</td><td>org.apache.hadoop.io.compress.BZip2Codec</td></tr><tr><td>LZO</td><td>com.hadoop.compression.lzo.LzopCodec</td></tr><tr><td>Snappy</td><td>org.apache.hadoop.io.compress.SnappyCodec</td></tr></tbody></table><p>压缩性能的比较</p><table><thead><tr><th>压缩算法</th><th>原始文件大小</th><th>压缩文件大小</th><th>压缩速度</th><th>解压速度</th></tr></thead><tbody><tr><td>gzip</td><td>8.3GB</td><td>1.8GB</td><td>17.5MB/s</td><td>58MB/s</td></tr><tr><td>bzip2</td><td>8.3GB</td><td>1.1GB</td><td>2.4MB/s</td><td>9.5MB/s</td></tr><tr><td>LZO</td><td>8.3GB</td><td>2.9GB</td><td>49.3MB/s</td><td>74.6MB/s</td></tr><tr><td>Snappy</td><td>8.3GB</td><td>较大</td><td>最快</td><td>最快</td></tr></tbody></table><ul><li><p>压缩方式选择</p><ul><li>Gzip压缩<ul><li>优点<br>压缩率比较高，而且压缩/解压速度也比较快；Hadoop本身支持，在应用中处理Gzip格式的文件就和直接处理文本一样；大部分Linux系统都自带Gzip命令，使用方便</li><li>缺点：不支持Split(切片)</li><li>应用场景</li></ul><strong>当每个文件压缩之后在130M以内的(1个块大小内)，都可以考虑用Gzip压缩格式</strong>。例如说一天或者一个小时的日志压缩成一个Gzip文件</li><li>Bzip2压缩<ul><li>优点：支持Split(切片)；具有很高的压缩率，比Gzip压缩率都高；Hadoop本身自带，使用方便</li><li>缺点：压缩/解压速度慢</li><li>应用场景<br>适合对速度要求不高，但需要较高的压缩率的时候；或者输出之后的数据比较大，处理之后的数据需要压缩存档减少磁盘空间并且以后数据用得比较少的情况；或者对单个很大的文本文件想压缩减少存储空间，同时又需要支持Split(切片)，而且兼容之前的应用程序的情况</li></ul></li><li>Lzo压缩<ul><li>优点：压缩/解压速度也比较快，合理的压缩率；支持Split(切片)，是Hadoop中最流行的压缩格式之一；可以在Linux系统下安装lzop命令，使用方便</li><li>缺点：压缩率比Gzip要低一些；Hadoop本身不支持，需要安装；在应用中对Lzo格式的文件需要做一些特殊处理(为了支持Split需要建索引，还需要指定InputFormat为Lzo格式)</li><li>应用场景：一个很大的文本文件，压缩之后还大于200M以上的可以考虑，而且单个文件越大，Lzo优点越越明显</li></ul></li><li>Snappy压缩<ul><li>优点：高速压缩速度和合理的压缩率</li><li>缺点：不支持Split(切片)；压缩率比Gzip要低；Hadoop本身不支持，需要安装</li><li>应用场景：当MapReduce作业的Map输出的数据比较大的时候，作为Map到Reduce的中间数据的压缩格式；或者作为一个MapReduce作业的输出和另外一个MapReduce作业的输入</li></ul></li></ul></li><li><p>压缩位置选择<br>压缩可以在MapReduce作用的任意阶段启用<br><img src="MapReduce%E5%8E%8B%E7%BC%A9%E4%BD%8D%E7%BD%AE.png" alt="MapReduce压缩位置"></p></li><li><p>压缩参数配置<br>要在Hadoop中启用压缩，可配置如下参数：</p><table><thead><tr><th>参数</th><th>默认值</th><th>阶段</th><th>建议</th></tr></thead><tbody><tr><td>io.compression.codecs(在core-site.xml中配置)</td><td>org.apache.hadoop.io.compress.DefaultCodec, org.apache.hadoop.io.compress.GzipCodec, org.apache.hadoop.io.compress.BZip2Codec</td><td>输入压缩</td><td>Hadoop使用文件扩展名判断是否支持某种编解码器</td></tr><tr><td>mapreduce.map.output.compress(在mapred-site.xml中配置)</td><td>false</td><td>mapper输出</td><td>这个参数设为true启用压缩</td></tr><tr><td>mapreduce.map.output.compress.codec(在mapred-site.xml中配置)</td><td>org.apache.hadoop.io.compress.DefaultCodec</td><td>mapper输出</td><td>企业多使用LZO或Snappy编解码器在此阶段压缩数据</td></tr><tr><td>mapreduce.output.fileoutputformat.compress(在mapred-site.xml中配置)</td><td>false</td><td>reducer输出</td><td>这个参数设为true启用压缩</td></tr><tr><td>mapreduce.output.fileoutputformat.compress.codec(在mapred-site.xml中配置)</td><td>org.apache.hadoop.io.compress.DefaultCodec</td><td>reducer输出</td><td>使用标准工具或者编解码器，如gzip和bzip2</td></tr><tr><td>mapreduce.output.fileoutputformat.compress.type(在mapred-site.xml中配置)</td><td>RECORD</td><td>reducer输出</td><td>SequenceFile输出使用的压缩类型：NONE和BLOCK</td></tr></tbody></table></li><li><p>压缩实操</p><ul><li>数据流的压缩和解压缩<br>CompressionCodec有两个方法可以用于轻松地压缩或解压缩数据：<ul><li>要想对正在被写入一个输出流的数据进行<strong>压缩</strong>，我们可以使用createOutputStream(OutputStreamout)方法创建一个CompressionOutputStream，将其以压缩格式写入底层的流</li><li>相反，要想对从输入流读取而来的数据进行<strong>解压缩</strong>，则调用createInputStream(InputStreamin)函数，从而获得一个CompressionInputStream，从而从底层的流读取未压缩的数据<br>测试如下的压缩方式：<table><thead><tr><th>压缩格式</th><th>编解码类</th></tr></thead><tbody><tr><td>DEFLATE</td><td>org.apache.hadoop.io.compress.DefaultCodec</td></tr><tr><td>gzip</td><td>org.apache.hadoop.io.compress.GzipCodec</td></tr><tr><td>bzip2</td><td>org.apache.hadoop.io.compress.BZip2Codec</td></tr></tbody></table></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  compress(<span class="string">"/Users/sobxiong/Downloads/test.txt"</span>, <span class="string">"org.apache.hadoop.io.compress.BZip2Codec"</span>);</span><br><span class="line">  decompress(<span class="string">"/Users/sobxiong/Downloads/test.txt.bz2"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解压缩</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">decompress</span><span class="params">(String filePath)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  <span class="comment">// 1、压缩方式检查</span></span><br><span class="line">  CompressionCodecFactory factory = <span class="keyword">new</span> CompressionCodecFactory(<span class="keyword">new</span> Configuration());</span><br><span class="line">  CompressionCodec codec = factory.getCodec(<span class="keyword">new</span> Path(filePath));</span><br><span class="line">  <span class="keyword">if</span> (codec == <span class="keyword">null</span>) &#123;</span><br><span class="line">      System.out.println(<span class="string">"Can't process!"</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 2、获取输入流</span></span><br><span class="line">  FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(filePath));</span><br><span class="line">  CompressionInputStream cis = codec.createInputStream(fis);</span><br><span class="line">  <span class="comment">// 3、获取输出流</span></span><br><span class="line">  FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(filePath + <span class="string">".decode"</span>));</span><br><span class="line">  <span class="comment">// 4、流的对拷</span></span><br><span class="line">  IOUtils.copyBytes(cis, fos, <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">10</span>, <span class="keyword">false</span>);</span><br><span class="line">  <span class="comment">// 5、关闭资源</span></span><br><span class="line">  IOUtils.closeStream(fos);</span><br><span class="line">  IOUtils.closeStream(cis);</span><br><span class="line">  IOUtils.closeStream(fis);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">compress</span><span class="params">(String filePath, String compressTypeClassName)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">  <span class="comment">// 1、获取输入流</span></span><br><span class="line">  FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(filePath));</span><br><span class="line">  <span class="comment">// 2、获取输出流</span></span><br><span class="line">  Class&lt;?&gt; classCodec = Class.forName(compressTypeClassName);</span><br><span class="line">  CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(classCodec, <span class="keyword">new</span> Configuration());</span><br><span class="line">  FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(filePath + codec.getDefaultExtension()));</span><br><span class="line">  CompressionOutputStream cos = codec.createOutputStream(fos);</span><br><span class="line">  <span class="comment">// 3、流的对拷</span></span><br><span class="line">  IOUtils.copyBytes(fis, cos, <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">10</span>, <span class="keyword">false</span>);</span><br><span class="line">  <span class="comment">// 4、关闭资源</span></span><br><span class="line">  IOUtils.closeStream(cos);</span><br><span class="line">  IOUtils.closeStream(fos);</span><br><span class="line">  IOUtils.closeStream(fis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Map输出端采用压缩(以万能的WordCount案例为例)<br>即使你的MapReduce的输入输出文件都是未压缩的文件，你仍然可以对Map任务的中间结果输出做压缩，因为它要写在硬盘并且通过网络传输到Reduce节点，对其压缩可以提高很多性能，这些工作只要设置两个属性即可<br>具体实现(只修改Driver部分代码,Mapper和Reducer不变)：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、获取Job对象</span></span><br><span class="line">Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line"><span class="comment">// 开启map端输出压缩</span></span><br><span class="line">conf.setBoolean(<span class="string">"mapreduce.map.output.compress"</span>, <span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 设置map端输出压缩方式</span></span><br><span class="line">conf.setClass(<span class="string">"mapreduce.map.output.compress.codec"</span>, BZip2Codec<span class="class">.<span class="keyword">class</span>, <span class="title">CompressionCodec</span>.<span class="title">class</span>)</span>;</span><br><span class="line">Job job = Job.getInstance(conf);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 之后代码保持原样</span></span><br></pre></td></tr></table></figure><ul><li>Reduce输出端采用压缩(以万能的WordCount案例为例)<br>具体实现(只修改Driver部分代码,Mapper和Reducer不变)：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 之前代码保持不变</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置reduce端输出压缩开启</span></span><br><span class="line">FileOutputFormat.setCompressOutput(job, <span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 设置压缩的方式</span></span><br><span class="line">FileOutputFormat.setOutputCompressorClass(job, GzipCodec<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">// 6、设置程序运行的输入和输出路径</span></span><br><span class="line">FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 之后代码保持不变</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Yarn资源调度器"><a href="#Yarn资源调度器" class="headerlink" title="Yarn资源调度器"></a>Yarn资源调度器</h2><p>Yarn是一个资源调度平台，<strong>负责为运算程序提供服务器运算资源</strong>，相当于一个<strong>分布式的操作系统平台</strong>，而MapReduce等运算程序则相当于<strong>运行于操作系统之上的应用程序</strong></p><ul><li><p>Yarn基本架构<br>YARN主要由ResourceManager、NodeManager、ApplicationMaster和Container等组件构成<br><img src="Yarn%E5%9F%BA%E6%9C%AC%E6%9E%B6%E6%9E%84.png" alt="Yarn基本架构"></p></li><li><p>Yarn工作机制</p><ul><li>Yarn工作机制图解<br><img src="Yarn%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6.png" alt="Yarn工作机制"></li><li>工作机制详解<ul><li>MR程序提交到客户端所在的节点</li><li>YarnRunner向ResourceManager申请一个Application</li><li>RM将该应用程序的资源路径返回给YarnRunner</li><li>该程序将运行所需资源提交到HDFS上</li><li>程序资源提交完毕后，申请运行MrAppMaster</li><li>RM将用户的请求初始化成一个Task</li><li>其中一个NodeManager领取到Task任务</li><li>该NodeManager创建容器Container，并产生MrAppmaster</li><li>Container从HDFS上拷贝资源到本地</li><li>MrAppmaster向RM申请运行MapTask的资源</li><li>RM将需运行的MapTask任务分配给另外两个NodeManager，另两个NodeManager分别领取任务并创建容器</li><li>MR向两个接收到任务的NodeManager发送程序启动脚本，这两个NodeManager分别启动MapTask，MapTask将对数据分区排序</li><li>MrAppMaster等待所有MapTask运行完毕后，向RM申请容器运行ReduceTask</li><li>ReduceTask向MapTask获取相应分区的数据</li><li>程序运行完毕后，MR会向RM申请注销自己</li></ul></li></ul></li><li><p>作业提交全过程</p><ul><li>作业提交过程之Yarn图解<br><img src="%E4%BD%9C%E4%B8%9A%E6%8F%90%E4%BA%A4%E8%BF%87%E7%A8%8B%E4%B9%8BYarn.png" alt="作业提交过程之Yarn"></li><li>作业提交过程之MapReduce图解<br><img src="%E4%BD%9C%E4%B8%9A%E6%8F%90%E4%BA%A4%E8%BF%87%E7%A8%8B%E4%B9%8BMapReduce.png" alt="作业提交过程之MapReduce"></li><li>作业提交过程详解<ul><li>作业提交<ul><li>Client调用job.waitForCompletion方法，向整个集群提交MapReduce作业</li><li>Client向RM申请一个作业id</li><li>RM给Client返回该job资源的提交路径和作业id</li><li>Client提交jar包、切片信息和配置文件到指定的资源提交路径</li><li>Client提交完资源后，向RM申请运行MrAppMaster</li></ul></li><li>作业初始化<ul><li>当RM收到Client的请求后，将该job添加到容量调度器中</li><li>某一个空闲的NM领取到该Job</li><li>该NM创建Container，并产生MrAppmaster</li><li>下载Client提交的资源到本地</li></ul></li><li>任务分配<ul><li>MrAppMaster向RM申请运行多个MapTask任务资源</li><li>RM将需运行的MapTask任务分配给另外两个NodeManager，另两个NodeManager分别领取任务并创建容器</li></ul></li><li>任务运行<ul><li>MR向两个接收到任务的NodeManager发送程序启动脚本，这两个NodeManager分别启动MapTask，MapTask将对数据分区排序</li><li>MrAppMaster等待所有MapTask运行完毕后，向RM申请容器，运行ReduceTask</li><li>ReduceTask向MapTask获取相应分区的数据</li><li>程序运行完毕后，MR会向RM申请注销自己</li></ul></li><li>进度和状态更新<br>YARN中的任务将其进度和状态(包括counter)返回给应用管理器，客户端每秒(通过mapreduce.client.progressmonitor.pollinterval设置)向应用管理器请求进度更新，展示给用户</li><li>作业完成<br>除了向应用管理器请求作业进度外，客户端每5秒都会通过调用waitForCompletion()来检查作业是否完成。时间间隔可以通过mapreduce.client.completion.pollinterval来设置。作业完成之后，应用管理器和Container会清理工作状态。作业的信息会被作业历史服务器存储以备之后用户核查</li></ul></li></ul></li><li><p>资源调度器<br>目前，Hadoop作业调度器主要有三种：FIFO、Capacity Scheduler和Fair Scheduler。</p><ul><li>先进先出调度器(FIFO)<br><img src="FIFO%E8%B0%83%E5%BA%A6%E5%99%A8.png" alt="FIFO调度器"></li><li>容量调度器(Capacity Scheduler)<br><img src="%E5%AE%B9%E9%87%8F%E8%B0%83%E5%BA%A6%E5%99%A8.png" alt="容量调度器"></li><li>公平调度器(Fair Scheduler)<br><img src="%E5%85%AC%E5%B9%B3%E8%B0%83%E5%BA%A6%E5%99%A8.png" alt="公平调度器"></li></ul><p>Hadoop3.1.3默认的资源调度器是Capacity Scheduler。具体设置详见yarn-default.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>The class to use as the resource scheduler.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.scheduler.class<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.CapacityScheduler<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>任务的推测执行</p><ul><li><p>作业完成时间取决于最慢的任务完成时间<br>一个作业由若干个Map任务和Reduce任务构成。因硬件老化、软件Bug等，某些任务可能运行非常慢。<br>思考：系统中有99%的Map任务都完成了，只有少数几个Map老是进度很慢，完不成，怎么办？</p></li><li><p>推测执行机制<br>发现拖后腿的任务，比如某个任务运行速度远慢于任务平均速度。为拖后腿任务启动一个备份任务，同时运行。谁先运行完，则采用谁的结果</p></li><li><p>执行推测任务的前提条件</p><ul><li>每个Task只能有一个备份任务</li><li>当前Job已完成的Task必须不小于0.05(5%)</li><li>开启推测执行参数设置。mapred-site.xml文件中默认是打开的</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.map.speculative<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>If true, then multiple instances of some map tasks may be executed in parallel.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.reduce.speculative<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>If true, then multiple instances of some reduce tasks may be executed in parallel.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>不能启用推测执行机制情况<ul><li>任务间存在严重的负载倾斜</li><li>特殊任务，比如任务向数据库中写数据</li></ul></li><li>算法原理<br><img src="%E6%8E%A8%E6%B5%8B%E6%89%A7%E8%A1%8C%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86.png" alt="推测执行算法原理"></li></ul></li></ul></li></ul><h2 id="Hadoop企业优化"><a href="#Hadoop企业优化" class="headerlink" title="Hadoop企业优化"></a>Hadoop企业优化</h2><ul><li><p>MapReduce跑的慢的原因<br>MapReduce程序效率的瓶颈在于两点：</p><ul><li>计算机性能：CPU、内存、磁盘健康、网络</li><li>I/O操作优化<ul><li>I/O操作优化</li><li>Map和Reduce数设置不合理</li><li>Map运行时间太长，导致Reduce等待过久</li><li>小文件过多</li><li>大量的不可分块的超大文件</li><li>Spill次数过多</li><li>Merge次数过多等</li></ul></li></ul></li><li><p>MapReduce优化方法<br>MapReduce优化方法主要从六个方面考虑：数据输入、Map阶段、Reduce阶段、IO传输、数据倾斜问题和常用的调优参数</p><ul><li><p>数据输入</p><ul><li>合并小文件：在执行MR任务前将小文件进行合并，大量的小文件会产生大量的Map任务，增大Map任务装载次数，而任务的装载比较耗时，从而导致MR运行较慢</li><li>采用CombineTextInputFormat来作为输入，解决输入端大量小文件场景</li></ul></li><li><p>Map阶段</p><ul><li><strong>减少溢写(Spill)次数</strong>：通过调整io.sort.mb及sort.spill.percent参数值，增大触发Spill的内存上限，减少Spill次数，从而减少磁盘IO</li><li><strong>减少合并(Merge)次数</strong>：通过调整io.sort.factor参数，增大Merge的文件数目，减少Merge的次数，从而缩短MR处理时间</li><li>在Map之后，<strong>不影响业务逻辑前提下，先进行Combine处理</strong>，减少I/O</li></ul></li><li><p>Reduce阶段</p><ul><li><strong>合理设置Map和Reduce数</strong>：两个都不能设置太少，也不能设置太多。太少，会导致Task等待，延长处理时间；太多，会导致Map、Reduce任务间竞争资源，造成处理超时等错误</li><li><strong>设置Map、Reduce共存</strong>：调整slowstart.completedmaps参数，使Map运行到一定程度后，Reduce也开始运行，减少Reduce的等待时间</li><li><strong>规避使用Reduce</strong>：因为Reduce在用于连接数据集的时候将会产生大量的网络消耗</li><li><strong>合理设置Reduce端的Buffer</strong>：默认情况下，数据达到一个阈值的时候，Buffer中的数据就会写入磁盘，然后Reduce会从磁盘中获得所有的数据。也就是说，Buffer和Reduce是没有直接关联的，中间多次写磁盘-&gt;读磁盘的过程，既然有这个弊端，那么就可以通过参数来配置，使得Buffer中的一部分数据可以直接输送到Reduce，从而减少IO开销：<strong>mapreduce.reduce.input.buffer.percent，默认为0.0。当值大于0的时候，会保留指定比例的内存读Buffer中的数据直接拿给Reduce使用。这样一来，设置Buffer需要内存，读取数据需要内存，Reduce计算也要内存，所以要根据作业的运行情况进行调整</strong></li></ul></li><li><p>I/O传输</p><ul><li><strong>采用数据压缩的方式</strong>，减少网络IO的的时间。安装Snappy和LZO压缩编码器</li><li><strong>使用SequenceFile二进制文件</strong></li></ul></li><li><p>数据倾斜问题</p><ul><li>数据倾斜现象<ul><li>数据频率倾斜：某一个区域的数据量要远远大于其他区域</li><li>数据大小倾斜：部分记录的大小远远大于平均值</li></ul></li><li>减少数据倾斜的方法<ul><li><strong>抽样和范围分区</strong>：可以通过对原始数据进行抽样得到的结果集来预设分区边界值</li><li><strong>自定义分区</strong>：基于输出键的背景知识进行自定义分区。例如，如果Map输出键的单词来源于一本书。且其中某几个专业词汇较多。那么就可以自定义分区将这这些专业词汇发送给固定的一部分Reduce实例。而将其他的都发送给剩余的Reduce实例</li><li><strong>Combine</strong>：使用Combine可以大量地减小数据倾斜。在可能的情况下，Combine的目的就是聚合并精简数据</li><li><strong>采用Map Join，尽量避免Reduce Join</strong></li></ul></li></ul></li><li><p>常用的调优参数</p><ul><li><p>资源相关参数</p><ul><li>以下参数是在用户自己的MR应用程序中配置就可以生效(mapred-default.xml)</li></ul><table><thead><tr><th>配置参数</th><th>参数说明</th></tr></thead><tbody><tr><td>mapreduce.map.memory.mb</td><td>一个MapTask可使用的资源上限(单位:MB)，默认为1024。如果MapTask实际使用的资源量超过该值，则会被强制杀死</td></tr><tr><td>mapreduce.reduce.memory.mb</td><td>一个ReduceTask可使用的资源上限(单位:MB)，默认为1024。如果ReduceTask实际使用的资源量超过该值，则会被强制杀死</td></tr><tr><td>mapreduce.map.cpu.vcores</td><td>每个MapTask可使用的最多cpu core数目，默认值: 1</td></tr><tr><td>mapreduce.reduce.cpu.vcores</td><td>每个ReduceTask可使用的最多cpu core数目，默认值: 1</td></tr><tr><td>mapreduce.reduce.shuffle.parallelcopies</td><td>每个Reduce去Map中取数据的并行数。默认值是5</td></tr><tr><td>mapreduce.reduce.shuffle.merge.percent</td><td>Buffer中的数据达到多少比例开始写入磁盘。默认值0.66</td></tr><tr><td>mapreduce.reduce.shuffle.input.buffer.percent</td><td>Buffer大小占Reduce可用内存的比例。默认值0.7</td></tr><tr><td>mapreduce.reduce.input.buffer.percent</td><td>指定多少比例的内存用来存放Buffer中的数据，默认值是0.0</td></tr></tbody></table><ul><li>应该在YARN启动之前就配置在服务器的配置文件中才能生效(yarn-default.xml)</li></ul><table><thead><tr><th>配置参数</th><th>参数说明</th></tr></thead><tbody><tr><td>yarn.scheduler.minimum-allocation-mb</td><td>给应用程序Container分配的最小内存，默认值：1024</td></tr><tr><td>yarn.scheduler.maximum-allocation-mb</td><td>给应用程序Container分配的最大内存，默认值：8192</td></tr><tr><td>yarn.scheduler.minimum-allocation-vcores</td><td>每个Container申请的最小CPU核数，默认值：1</td></tr><tr><td>yarn.scheduler.maximum-allocation-vcores</td><td>每个Container申请的最大CPU核数，默认值：32</td></tr><tr><td>yarn.nodemanager.resource.memory-mb</td><td>给Containers分配的最大物理内存，默认值：8192</td></tr></tbody></table><ul><li>Shuffle性能优化的关键参数，应在YARN启动之前就配置好(mapred-default.xml)</li></ul><table><thead><tr><th>配置参数</th><th>参数说明</th></tr></thead><tbody><tr><td>mapreduce.task.io.sort.mb</td><td>Shuffle的环形缓冲区大小，默认100m</td></tr><tr><td>mapreduce.map.sort.spill.percent</td><td>环形缓冲区溢出的阈值，默认80%</td></tr></tbody></table></li><li><p>容错相关参数(MapReduce性能优化)</p></li></ul><table><thead><tr><th>配置参数</th><th>参数说明</th></tr></thead><tbody><tr><td>mapreduce.map.maxattempts</td><td>每个Map Task最大重试次数，一旦重试参数超过该值，则认为Map Task运行失败，默认值：4</td></tr><tr><td>mapreduce.reduce.maxattempts</td><td>每个Reduce Task最大重试次数，一旦重试参数超过该值，则认为Map Task运行失败，默认值：4</td></tr><tr><td>mapreduce.task.timeout</td><td>Task超时时间，经常需要设置的一个参数，该参数表达的意思为：如果一个Task在一定时间内没有任何进入，即不会读取新的数据，也没有输出数据，则认为该Task处于Block状态，可能是卡住了，也许永远会卡住，为了防止因为用户程序永远Block住不退出，则强制设置了一个该超时时间(单位毫秒)，默认是600000。如果你的程序对每条输入数据的处理时间过长(比如会访问数据库，通过网络拉取数据等)，建议将该参数调大，该参数过小常出现的错误提示是“AttemptID:attempt_14267829456721_123456_m_000224_0 Timed out after 300 secsContainer killed by the ApplicationMaster.”</td></tr></tbody></table></li></ul></li><li><p>HDFS小文件优化方法</p><ul><li>HDFS小文件弊端<br>HDFS上每个文件都要在NameNode上建立一个索引，这个索引的大小约为150byte，这样当小文件比较多的时候，就会产生很多的索引文件。<strong>一方面会大量占用NameNode的内存空间，另一方面就是索引文件过大使得索引速度变慢</strong></li><li>HDFS小文件解决方案<ul><li>在数据采集的时候，就将小文件或小批数据合成大文件再上传HDFS</li><li>在业务处理之前，在HDFS上使用MapReduce程序对小文件进行合并</li><li>在MapReduce处理时，可采用CombineTextInputFormat提高效率</li></ul></li><li>具体方案<ul><li>Hadoop Archive<br>是一个高效地将小文件放入HDFS块中的文件存档工具，它能够将多个小文件打包成一个HAR文件，这样就减少了NameNode的内存使用</li><li>Sequence File<br>Sequence File由一系列的二进制key/value组成，如果key为文件名，value为文件内容，则可以将大批小文件合并成一个大文件</li><li>CombineFileInputFormat<br>CombineFileInputFormat是一种新的InputFormat，用于将多个文件合并成一个单独的Split，另外，它会考虑数据的存储位置</li><li>开启JVM重用<br>对于大量小文件Job，可以开启JVM重用会减少45%运行时间。JVM重用原理：一个Map运行在一个JVM上，开启重用的话，该Map在JVM上运行完毕后，JVM继续运行其他Map。<br>具体设置：mapreduce.job.jvm.numtasks值在10-20之间</li></ul></li></ul></li></ul><h2 id="MapReduce扩展案例"><a href="#MapReduce扩展案例" class="headerlink" title="MapReduce扩展案例"></a>MapReduce扩展案例</h2><ul><li><p>倒排索引案例(多job串联)</p><ul><li><p>需求：有大量的文本(文档、网页)，需要建立搜索索引</p></li><li><p>案例分析<br><img src="%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95(%E5%A4%9Ajob%E4%B8%B2%E8%81%94)%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90.png" alt="倒排索引(多job串联)案例分析"></p></li><li><p>第一次处理</p><ul><li>OneIndexMapper</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OneIndexMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String fileName;</span><br><span class="line">  <span class="keyword">private</span> Text k = <span class="keyword">new</span> Text();</span><br><span class="line">  <span class="keyword">private</span> IntWritable v = <span class="keyword">new</span> IntWritable(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">(Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    FileSplit fileSplit = (FileSplit) context.getInputSplit();</span><br><span class="line">    fileName = fileSplit.getPath().getName();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// 1、获取一行</span></span><br><span class="line">    String lineStr = value.toString();</span><br><span class="line">    <span class="comment">// 2、切割</span></span><br><span class="line">    String[] fields = lineStr.split(<span class="string">" "</span>);</span><br><span class="line">    <span class="comment">// 3、写出</span></span><br><span class="line">    <span class="keyword">for</span> (String field : fields) &#123;</span><br><span class="line">      k.set(field + <span class="string">"--"</span> + fileName);</span><br><span class="line">      context.write(k, v);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>OneIndexReducer</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OneIndexReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> IntWritable v = <span class="keyword">new</span> IntWritable();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 1、累加求和</span></span><br><span class="line">    <span class="keyword">for</span> (IntWritable value : values) &#123;</span><br><span class="line">      sum += value.get();</span><br><span class="line">    &#125;</span><br><span class="line">    v.set(sum);</span><br><span class="line">    <span class="comment">// 2、写出</span></span><br><span class="line">    context.write(key, v);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>OneIndexDriver</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line">  Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">  Job job = Job.getInstance(conf);</span><br><span class="line">  job.setJarByClass(OneIndexDriver<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  job.setMapperClass(OneIndexMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  job.setReducerClass(OneIndexReducer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  job.setMapOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  job.setMapOutputValueClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  job.setOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  job.setOutputValueClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">  FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">  job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>第二次处理</p><ul><li>TwoIndexMapper</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoIndexMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">Text</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Text k = <span class="keyword">new</span> Text();</span><br><span class="line">  <span class="keyword">private</span> Text v = <span class="keyword">new</span> Text();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// haha--a.txt 2</span></span><br><span class="line">    <span class="comment">// 1、获取一行</span></span><br><span class="line">    String lineStr = value.toString();</span><br><span class="line">    <span class="comment">// 2、切割</span></span><br><span class="line">    String[] fields = lineStr.split(<span class="string">"--"</span>);</span><br><span class="line">    <span class="comment">// 3、封装</span></span><br><span class="line">    k.set(fields[<span class="number">0</span>]);</span><br><span class="line">    v.set(fields[<span class="number">1</span>]);</span><br><span class="line">    <span class="comment">// 4、写出</span></span><br><span class="line">    context.write(k, v);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>TwoIndexReducer</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoIndexReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">Text</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Text v = <span class="keyword">new</span> Text();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;Text&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">for</span> (Text value : values) &#123;</span><br><span class="line">      sb.append(value.toString().replace(<span class="string">"\t"</span>, <span class="string">"--&gt;"</span>))</span><br><span class="line">              .append(<span class="string">'\t'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    v.set(sb.toString());</span><br><span class="line">    context.write(key, v);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>TwoIndexDriver</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line">  Configuration config = <span class="keyword">new</span> Configuration();</span><br><span class="line">  Job job = Job.getInstance(config);</span><br><span class="line">  job.setJarByClass(TwoIndexDriver<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  job.setMapperClass(TwoIndexMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  job.setReducerClass(TwoIndexReducer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  job.setMapOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  job.setMapOutputValueClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  job.setOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  job.setOutputValueClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">  FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">  <span class="keyword">boolean</span> result = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">  System.exit(result?<span class="number">0</span>:<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>先运行OneIndexDriver，将得到的输入作为TwoIndexDriver的输入，在运行TwoIndexDriver得到最终结果</p></li></ul></li><li><p>TopN案例</p><ul><li><p>需求：输出流量使用量在前10的用户信息</p></li><li><p>案例分析<br><img src="Top10%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90.png" alt="Top10案例分析"></p></li><li><p>代码实现</p><ul><li>TopNMapper</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopNMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">FlowBean</span>, <span class="title">Text</span>&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 定义一个TreeMap作为存储数据的容器(天然按key排序)</span></span><br><span class="line">  <span class="keyword">private</span> TreeMap&lt;FlowBean, Text&gt; flowMap = <span class="keyword">new</span> TreeMap&lt;FlowBean, Text&gt;();</span><br><span class="line">  <span class="keyword">private</span> FlowBean kBean;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    kBean = <span class="keyword">new</span> FlowBean();</span><br><span class="line">    Text v = <span class="keyword">new</span> Text();</span><br><span class="line">    <span class="comment">// 1、获取一行</span></span><br><span class="line">    String line = value.toString();</span><br><span class="line">    <span class="comment">// 2、切割</span></span><br><span class="line">    String[] fields = line.split(<span class="string">"\t"</span>);</span><br><span class="line">    <span class="comment">// 3、封装数据</span></span><br><span class="line">    String phoneNum = fields[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">long</span> upFlow = Long.parseLong(fields[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">long</span> downFlow = Long.parseLong(fields[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">long</span> sumFlow = Long.parseLong(fields[<span class="number">3</span>]);</span><br><span class="line">    kBean.setDownFlow(downFlow);</span><br><span class="line">    kBean.setUpFlow(upFlow);</span><br><span class="line">    kBean.setSumFlow(sumFlow);</span><br><span class="line">    v.set(phoneNum);</span><br><span class="line">    <span class="comment">// 4、向TreeMap中添加数据</span></span><br><span class="line">    flowMap.put(kBean, v);</span><br><span class="line">    <span class="comment">// 5、限制TreeMap的数据量,超过10条就删除掉流量最小的一条数据</span></span><br><span class="line">    <span class="keyword">if</span> (flowMap.size() &gt; <span class="number">10</span>) &#123;</span><br><span class="line">      flowMap.remove(flowMap.lastKey());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">cleanup</span><span class="params">(Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// 6、遍历treeMap集合,输出数据</span></span><br><span class="line">    Iterator&lt;FlowBean&gt; bean = flowMap.keySet().iterator();</span><br><span class="line">    <span class="keyword">while</span> (bean.hasNext()) &#123;</span><br><span class="line">      FlowBean k = bean.next();</span><br><span class="line">      context.write(k, flowMap.get(k));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>TopNReducer</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopNReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">FlowBean</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">FlowBean</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// 定义一个TreeMap作为存储数据的容器（天然按key排序）</span></span><br><span class="line">  TreeMap&lt;FlowBean, Text&gt; flowMap = <span class="keyword">new</span> TreeMap&lt;FlowBean, Text&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(FlowBean key, Iterable&lt;Text&gt; values, Context context)</span><span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Text value : values) &#123;</span><br><span class="line">      FlowBean bean = <span class="keyword">new</span> FlowBean();</span><br><span class="line">      bean.set(key.getDownFlow(), key.getUpFlow());</span><br><span class="line">      <span class="comment">// 1、向treeMap集合中添加数据</span></span><br><span class="line">      flowMap.put(bean, <span class="keyword">new</span> Text(value));</span><br><span class="line">      <span class="comment">// 2、限制TreeMap数据量,超过10条就删除掉流量最小的一条数据</span></span><br><span class="line">      <span class="keyword">if</span> (flowMap.size() &gt; <span class="number">10</span>) &#123;</span><br><span class="line">        flowMap.remove(flowMap.lastKey());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">cleanup</span><span class="params">(Reducer&lt;FlowBean, Text, Text, FlowBean&gt;.Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// 3、遍历集合,输出数据</span></span><br><span class="line">    Iterator&lt;FlowBean&gt; it = flowMap.keySet().iterator();</span><br><span class="line">    <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">      FlowBean v = it.next();</span><br><span class="line">      context.write(<span class="keyword">new</span> Text(flowMap.get(v)), v);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>TopNDriver</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  <span class="comment">// 1、获取配置信息,或者job对象实例</span></span><br><span class="line">  Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line">  Job job = Job.getInstance(configuration);</span><br><span class="line">  <span class="comment">// 2、指定本程序的jar包所在的本地路径</span></span><br><span class="line">  job.setJarByClass(TopNDriver<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">// 3、指定本业务job要使用的mapper/Reducer业务类</span></span><br><span class="line">  job.setMapperClass(TopNMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  job.setReducerClass(TopNReducer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">// 4、指定mapper输出数据的kv类型</span></span><br><span class="line">  job.setMapOutputKeyClass(FlowBean<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  job.setMapOutputValueClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">// 5、指定最终输出的数据的kv类型</span></span><br><span class="line">  job.setOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  job.setOutputValueClass(FlowBean<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">// 6、指定job的输入原始文件所在目录</span></span><br><span class="line">  FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">  FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">  <span class="comment">// 7、将job中配置的相关参数,以及job所用的java类所在的jar包,提交给yarn去运行</span></span><br><span class="line">  <span class="keyword">boolean</span> result = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">  System.exit(result ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>找博客共同好友案例</p><ul><li>需求<br>以下是博客的好友列表数据，冒号前是一个用户，冒号后是该用户的所有好友(数据中的好友关系是单向的)。<br>求出哪些人两两之间有共同好友，及他俩的共同好友都有谁？</li><li>示例数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">A:B,C,D,F,E,O</span><br><span class="line">B:A,C,E,K</span><br><span class="line">C:F,A,D,I</span><br><span class="line">D:A,E,F,L</span><br><span class="line">E:B,C,D,M,L</span><br><span class="line">F:A,B,C,D,E,O,M</span><br><span class="line">G:A,C,D,E,F</span><br><span class="line">H:A,C,D,E,O</span><br><span class="line">I:A,O</span><br><span class="line">J:B,O</span><br><span class="line">K:A,C,D</span><br><span class="line">L:D,E,F</span><br><span class="line">M:E,F,G</span><br><span class="line">O:A,H,I,J</span><br></pre></td></tr></table></figure><ul><li>案例分析</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 第一次先求出A、B、C...等是谁的好友</span><br><span class="line">A I,K,C,B,G,F,H,O,D</span><br><span class="line">B A,F,J,E</span><br><span class="line">C A,E,B,H,F,G,K</span><br><span class="line">D G,C,K,A,L,F,E,H</span><br><span class="line">E G,M,L,H,A,F,B,D</span><br><span class="line">F L,M,D,C,G,A</span><br><span class="line">G M</span><br><span class="line">H O</span><br><span class="line">I O,C</span><br><span class="line">J O</span><br><span class="line">K B</span><br><span class="line">L D,E</span><br><span class="line">M E,F</span><br><span class="line">O A,H,I,J,F</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 第二次找出共同好友</span><br><span class="line">A-B E C</span><br><span class="line">A-C D F</span><br><span class="line">A-D E F</span><br><span class="line">A-E D B C</span><br><span class="line">A-F O B C D E</span><br><span class="line">A-G F E C D</span><br><span class="line">A-H E C D O</span><br><span class="line">A-I O</span><br><span class="line">A-J O B</span><br><span class="line">A-K D C</span><br><span class="line">A-L F E D</span><br><span class="line">A-M E F</span><br><span class="line">B-C A</span><br><span class="line">B-D A E</span><br><span class="line">B-E C</span><br><span class="line">B-F E A C</span><br><span class="line">B-G C E A</span><br><span class="line">B-H A E C</span><br><span class="line">B-I A</span><br><span class="line">B-K C A</span><br><span class="line">B-L E</span><br><span class="line">B-M E</span><br><span class="line">B-O A</span><br><span class="line">C-D A F</span><br><span class="line">C-E D</span><br><span class="line">C-F D A</span><br><span class="line">C-G D F A</span><br><span class="line">C-H D A</span><br><span class="line">C-I A</span><br><span class="line">C-K A D</span><br><span class="line">C-L D F</span><br><span class="line">C-M F</span><br><span class="line">C-O I A</span><br><span class="line">D-E L</span><br><span class="line">D-F A E</span><br><span class="line">D-G E A F</span><br><span class="line">D-H A E</span><br><span class="line">D-I A</span><br><span class="line">D-K A</span><br><span class="line">D-L E F</span><br><span class="line">D-M F E</span><br><span class="line">D-O A</span><br><span class="line">E-F D M C B</span><br><span class="line">E-G C D</span><br><span class="line">E-H C D</span><br><span class="line">E-J B</span><br><span class="line">E-K C D</span><br><span class="line">E-L D</span><br><span class="line">F-G D C A E</span><br><span class="line">F-H A D O E C</span><br><span class="line">F-I O A</span><br><span class="line">F-J B O</span><br><span class="line">F-K D C A</span><br><span class="line">F-L E D</span><br><span class="line">F-M E</span><br><span class="line">F-O A</span><br><span class="line">G-H D C E A</span><br><span class="line">G-I A</span><br><span class="line">G-K D A C</span><br><span class="line">G-L D F E</span><br><span class="line">G-M E F</span><br><span class="line">G-O A</span><br><span class="line">H-I O A</span><br><span class="line">H-J O</span><br><span class="line">H-K A C D</span><br><span class="line">H-L D E</span><br><span class="line">H-M E</span><br><span class="line">H-O A</span><br><span class="line">I-J O</span><br><span class="line">I-K A</span><br><span class="line">I-O A</span><br><span class="line">K-L D</span><br><span class="line">K-O A</span><br><span class="line">L-M E F</span><br></pre></td></tr></table></figure><ul><li><p>代码实现</p><ul><li>第一次Mapper</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OneShareFriendsMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">Text</span>&gt;</span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Mapper&lt;LongWritable, Text, Text, Text&gt;.Context context)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// 1、获取一行 A:B,C,D,F,E,O</span></span><br><span class="line">    String line = value.toString();</span><br><span class="line">    <span class="comment">// 2、切割</span></span><br><span class="line">    String[] fields = line.split(<span class="string">":"</span>);</span><br><span class="line">    <span class="comment">// 3、获取person和好友</span></span><br><span class="line">    String person = fields[<span class="number">0</span>];</span><br><span class="line">    String[] friends = fields[<span class="number">1</span>].split(<span class="string">","</span>);</span><br><span class="line">    <span class="comment">// 4、写出去</span></span><br><span class="line">    <span class="keyword">for</span>(String friend: friends)&#123;</span><br><span class="line">      <span class="comment">// 输出 &lt;好友，人&gt;</span></span><br><span class="line">      context.write(<span class="keyword">new</span> Text(friend), <span class="keyword">new</span> Text(person));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第一次Reducer</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OneShareFriendsReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">Text</span>&gt;</span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;Text&gt; values, Context context)</span><span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    <span class="comment">// 1、拼接</span></span><br><span class="line">    <span class="keyword">for</span>(Text person: values)&#123;</span><br><span class="line">      sb.append(person).append(<span class="string">","</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 取出多余的','</span></span><br><span class="line">    sb.deleteCharAt(sb.length() - <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 2、写出</span></span><br><span class="line">    context.write(key, <span class="keyword">new</span> Text(sb.toString()));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第一次Driver</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  <span class="comment">// 1、获取job对象</span></span><br><span class="line">  Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line">  Job job = Job.getInstance(configuration);</span><br><span class="line">  <span class="comment">// 2、指定jar包运行的路径</span></span><br><span class="line">  job.setJarByClass(OneShareFriendsDriver<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">// 3、指定map/reduce使用的类</span></span><br><span class="line">  job.setMapperClass(OneShareFriendsMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  job.setReducerClass(OneShareFriendsReducer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">// 4、指定map输出的数据类型</span></span><br><span class="line">  job.setMapOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  job.setMapOutputValueClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">// 5、指定最终输出的数据类型</span></span><br><span class="line">  job.setOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  job.setOutputValueClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">// 6、指定job的输入原始所在目录</span></span><br><span class="line">  FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">  FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">  <span class="comment">// 7 提交</span></span><br><span class="line">  <span class="keyword">boolean</span> result = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">  System.exit(result ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第二次Mapper</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoShareFriendsMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">Text</span>&gt;</span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// A I,K,C,B,G,F,H,O,D</span></span><br><span class="line">    <span class="comment">// 友 人,人,人</span></span><br><span class="line">    String line = value.toString();</span><br><span class="line">    String[] friend_persons = line.split(<span class="string">"\t"</span>);</span><br><span class="line">    String friend = friend_persons[<span class="number">0</span>];</span><br><span class="line">    String[] persons = friend_persons[<span class="number">1</span>].split(<span class="string">","</span>);</span><br><span class="line">    Arrays.sort(persons);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; persons.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; persons.length; j++) &#123;</span><br><span class="line">        <span class="comment">// 发出 &lt;人-人,好友&gt;,这样，相同的“人-人”对的所有好友就会到同1个reduce中去</span></span><br><span class="line">        context.write(<span class="keyword">new</span> Text(persons[i] + <span class="string">"-"</span> + persons[j]), <span class="keyword">new</span> Text(friend));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第二次Reducer</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoShareFriendsReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">Text</span>&gt;</span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;Text&gt; values, Context context)</span><span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    <span class="keyword">for</span> (Text friend : values) &#123;</span><br><span class="line">      sb.append(friend).append(<span class="string">" "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    context.write(key, <span class="keyword">new</span> Text(sb.toString()));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第二次Driver</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  <span class="comment">// 1、获取job对象</span></span><br><span class="line">  Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line">  Job job = Job.getInstance(configuration);</span><br><span class="line">  <span class="comment">// 2、指定jar包运行的路径</span></span><br><span class="line">  job.setJarByClass(TwoShareFriendsDriver<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">// 3、指定map/reduce使用的类</span></span><br><span class="line">  job.setMapperClass(TwoShareFriendsMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  job.setReducerClass(TwoShareFriendsReducer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">// 4、指定map输出的数据类型</span></span><br><span class="line">  job.setMapOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  job.setMapOutputValueClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">// 5、指定最终输出的数据类型</span></span><br><span class="line">  job.setOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  job.setOutputValueClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">// 6、指定job的输入原始所在目录</span></span><br><span class="line">  FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">  FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">  <span class="comment">// 7 提交</span></span><br><span class="line">  <span class="keyword">boolean</span> result = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">  System.exit(result ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="常见错误及解决方案"><a href="#常见错误及解决方案" class="headerlink" title="常见错误及解决方案"></a>常见错误及解决方案</h2><ul><li>导包错误，尤其是Text和CombineTextInputFormat</li><li>Mapper中第一个输入的参数必须是LongWritable或者NullWritable，不可以是IntWritable。报的错误是类型转换异常</li><li>java.lang.Exception: java.io.IOException: Illegal partition for 13926435656(4)；说明Partition和ReduceTask个数没对上，调整ReduceTask个数</li><li>如果分区数不是1，但是reducetask为1，是否执行分区过程。答案是：不执行分区过程。因为在MapTask的源码中，执行分区的前提是先判断ReduceNum个数是否大于1。不大于1肯定不执行</li><li>报类型转换异常：通常都是在驱动函数中设置Map输出和最终输出时编写错误；Map输出的key如果没有排序，也会报类型转换异常</li><li>集群中运行wc.jar时出现了无法获得输入文件。原因：WordCount案例的输入文件不能放用HDFS集群的根目录</li><li>自定义Outputformat时，注意在RecordWirter中的close方法必须关闭流资源。否则输出的文件内容中数据为空</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BigData </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
